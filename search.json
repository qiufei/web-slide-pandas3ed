[
  {
    "objectID": "qmd/pandas3ed8.html",
    "href": "qmd/pandas3ed8.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "In many applications, data is spread across multiple files or databases.\nIt may also be arranged in a format not suitable for easy analysis.\nThis chapter focuses on tools to combine, join, and rearrange data effectively.\nKey concept: Hierarchical Indexing in pandas."
  },
  {
    "objectID": "qmd/pandas3ed8.html#introduction-data-wrangling---join-combine-and-reshape",
    "href": "qmd/pandas3ed8.html#introduction-data-wrangling---join-combine-and-reshape",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "In many applications, data is spread across multiple files or databases.\nIt may also be arranged in a format not suitable for easy analysis.\nThis chapter focuses on tools to combine, join, and rearrange data effectively.\nKey concept: Hierarchical Indexing in pandas."
  },
  {
    "objectID": "qmd/pandas3ed8.html#introduction-visualizing-data-wrangling",
    "href": "qmd/pandas3ed8.html#introduction-visualizing-data-wrangling",
    "title": "Python for Data Analysis",
    "section": "Introduction: Visualizing Data Wrangling",
    "text": "Introduction: Visualizing Data Wrangling"
  },
  {
    "objectID": "qmd/pandas3ed8.html#data-wrangling-data-mining-and-machine-learning",
    "href": "qmd/pandas3ed8.html#data-wrangling-data-mining-and-machine-learning",
    "title": "Python for Data Analysis",
    "section": "Data Wrangling, Data Mining, and Machine Learning",
    "text": "Data Wrangling, Data Mining, and Machine Learning\nWhat is Data Wrangling?\n\nData Wrangling (or Data Munging) is the process of transforming and mapping data from one ‚Äúraw‚Äù data form into another format.\nThe intent is to make it more appropriate and valuable for a variety of downstream purposes, such as analytics."
  },
  {
    "objectID": "qmd/pandas3ed8.html#data-mining-and-machine-learning",
    "href": "qmd/pandas3ed8.html#data-mining-and-machine-learning",
    "title": "Python for Data Analysis",
    "section": "Data Mining and Machine Learning",
    "text": "Data Mining and Machine Learning\nWhat is Data Mining?\n\nData mining is the process of discovering patterns, anomalies, and correlations within large datasets to predict outcomes.\n\nWhat is Machine Learning?\n\nMachine Learning is a subfield of artificial intelligence.\nIt focuses on developing systems that can learn from and make decisions/predictions based on data.\nSupervised Learning: Uses labeled datasets to train algorithms.\nUnsupervised Learning: Discovers hidden patterns in unlabeled data.\nReinforcement Learning: Agents learn by interacting with an environment."
  },
  {
    "objectID": "qmd/pandas3ed8.html#hierarchical-indexing-in-pandas",
    "href": "qmd/pandas3ed8.html#hierarchical-indexing-in-pandas",
    "title": "Python for Data Analysis",
    "section": "Hierarchical Indexing in Pandas",
    "text": "Hierarchical Indexing in Pandas\n\nA fundamental feature of pandas.\nEnables having multiple (two or more) index levels on an axis.\nAllows working with higher dimensional data in a lower dimensional form.\nAnalogy: Think of it like having subcategories within categories in a file cabinet. üóÑÔ∏è\nBenefit: Provides a structured way to represent and manipulate complex datasets."
  },
  {
    "objectID": "qmd/pandas3ed8.html#hierarchical-indexing-example",
    "href": "qmd/pandas3ed8.html#hierarchical-indexing-example",
    "title": "Python for Data Analysis",
    "section": "Hierarchical Indexing: Example",
    "text": "Hierarchical Indexing: Example\n\nimport pandas as pd\nimport numpy as np\n\n#| echo: true\ndata = pd.Series(np.random.uniform(size=9),\n                 index=[[\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\"],\n                        [1, 2, 3, 1, 3, 1, 2, 2, 3]])\ndata\n\na  1    0.360159\n   2    0.539166\n   3    0.592727\nb  1    0.089377\n   3    0.771129\nc  1    0.348465\n   2    0.822455\nd  2    0.045758\n   3    0.741386\ndtype: float64\n\n\n\nWe create a Series with a list of lists as the index.\nThis creates a MultiIndex object.\nThe ‚Äúgaps‚Äù in the index display indicate ‚Äúuse the label directly above‚Äù."
  },
  {
    "objectID": "qmd/pandas3ed8.html#understanding-the-multiindex",
    "href": "qmd/pandas3ed8.html#understanding-the-multiindex",
    "title": "Python for Data Analysis",
    "section": "Understanding the MultiIndex",
    "text": "Understanding the MultiIndex\n\ndata.index\n\nMultiIndex([('a', 1),\n            ('a', 2),\n            ('a', 3),\n            ('b', 1),\n            ('b', 3),\n            ('c', 1),\n            ('c', 2),\n            ('d', 2),\n            ('d', 3)],\n           )\n\n\n\nThe MultiIndex object represents the hierarchical index.\nIt contains tuples of (outer level, inner level).\nHere: (‚Äòa‚Äô, 1), (‚Äòa‚Äô, 2), (‚Äòa‚Äô, 3), (‚Äòb‚Äô, 1) ‚Ä¶ represent the index pairs."
  },
  {
    "objectID": "qmd/pandas3ed8.html#partial-indexing",
    "href": "qmd/pandas3ed8.html#partial-indexing",
    "title": "Python for Data Analysis",
    "section": "Partial Indexing",
    "text": "Partial Indexing\nWith hierarchical indexing, partial indexing becomes possible. This allows concisely selecting subsets of data.\n\ndata[\"b\"] #Select group \"b\"\n\n1    0.089377\n3    0.771129\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8.html#partial-indexing-continued",
    "href": "qmd/pandas3ed8.html#partial-indexing-continued",
    "title": "Python for Data Analysis",
    "section": "Partial Indexing (Continued)",
    "text": "Partial Indexing (Continued)\n\ndata[\"b\":\"c\"] # Select from \"b\" to \"c\"\n\nb  1    0.089377\n   3    0.771129\nc  1    0.348465\n   2    0.822455\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8.html#partial-indexing-continued-1",
    "href": "qmd/pandas3ed8.html#partial-indexing-continued-1",
    "title": "Python for Data Analysis",
    "section": "Partial Indexing (Continued)",
    "text": "Partial Indexing (Continued)\n\ndata.loc[[\"b\", \"d\"]] #Select \"b\" and \"d\"\n\nb  1    0.089377\n   3    0.771129\nd  2    0.045758\n   3    0.741386\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8.html#selection-from-inner-level",
    "href": "qmd/pandas3ed8.html#selection-from-inner-level",
    "title": "Python for Data Analysis",
    "section": "Selection from Inner Level",
    "text": "Selection from Inner Level\n\ndata.loc[:, 2] #Select all value from inner index level 2\n\na    0.539166\nc    0.822455\nd    0.045758\ndtype: float64\n\n\n\nWe use .loc for label-based indexing.\n: selects all outer levels.\n2 selects the inner level index equal to 2."
  },
  {
    "objectID": "qmd/pandas3ed8.html#unstack-and-stack",
    "href": "qmd/pandas3ed8.html#unstack-and-stack",
    "title": "Python for Data Analysis",
    "section": "unstack() and stack()",
    "text": "unstack() and stack()\n\nunstack(): Reshapes the data into a DataFrame. It ‚Äúpivots‚Äù a level of the (row) index to become column labels.\nstack(): The inverse operation of unstack(). It pivots the column labels to become a level in the (row) MultiIndex."
  },
  {
    "objectID": "qmd/pandas3ed8.html#unstack-example",
    "href": "qmd/pandas3ed8.html#unstack-example",
    "title": "Python for Data Analysis",
    "section": "unstack() Example",
    "text": "unstack() Example\n\ndata.unstack()\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\na\n0.360159\n0.539166\n0.592727\n\n\nb\n0.089377\nNaN\n0.771129\n\n\nc\n0.348465\n0.822455\nNaN\n\n\nd\nNaN\n0.045758\n0.741386"
  },
  {
    "objectID": "qmd/pandas3ed8.html#stack-example",
    "href": "qmd/pandas3ed8.html#stack-example",
    "title": "Python for Data Analysis",
    "section": "stack() Example",
    "text": "stack() Example\n\ndata.unstack().stack()\n\na  1    0.360159\n   2    0.539166\n   3    0.592727\nb  1    0.089377\n   3    0.771129\nc  1    0.348465\n   2    0.822455\nd  2    0.045758\n   3    0.741386\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8.html#hierarchical-indexing-with-dataframes",
    "href": "qmd/pandas3ed8.html#hierarchical-indexing-with-dataframes",
    "title": "Python for Data Analysis",
    "section": "Hierarchical Indexing with DataFrames",
    "text": "Hierarchical Indexing with DataFrames\n\nBoth rows and columns can have hierarchical indexes.\n\n\nframe = pd.DataFrame(np.arange(12).reshape((4, 3)),\n                     index=[[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]],\n                     columns=[[\"Ohio\", \"Ohio\", \"Colorado\"],\n                              [\"Green\", \"Red\", \"Green\"]])\nframe\n\n\n\n\n\n\n\n\n\nOhio\nColorado\n\n\n\n\nGreen\nRed\nGreen\n\n\n\n\na\n1\n0\n1\n2\n\n\n2\n3\n4\n5\n\n\nb\n1\n6\n7\n8\n\n\n2\n9\n10\n11\n\n\n\n\n\n\n\n\nHere, we have two levels for both rows and columns."
  },
  {
    "objectID": "qmd/pandas3ed8.html#naming-index-levels",
    "href": "qmd/pandas3ed8.html#naming-index-levels",
    "title": "Python for Data Analysis",
    "section": "Naming Index Levels",
    "text": "Naming Index Levels\n\nframe.index.names = [\"key1\", \"key2\"]\nframe.columns.names = [\"state\", \"color\"]\nframe\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey1\nkey2\n\n\n\n\n\n\n\na\n1\n0\n1\n2\n\n\n2\n3\n4\n5\n\n\nb\n1\n6\n7\n8\n\n\n2\n9\n10\n11\n\n\n\n\n\n\n\n\nGiving names to index levels improves readability.\nframe.index.names and frame.columns.names set the names.\n\n\n\n\n\n\n\nNote\n\n\n\nBe careful to note that the index names ‚Äústate‚Äù and ‚Äúcolor‚Äù are not part of the row labels (the frame.index values)."
  },
  {
    "objectID": "qmd/pandas3ed8.html#accessing-nlevels-attribute",
    "href": "qmd/pandas3ed8.html#accessing-nlevels-attribute",
    "title": "Python for Data Analysis",
    "section": "Accessing nlevels Attribute",
    "text": "Accessing nlevels Attribute\n\nframe.index.nlevels\n\n2\n\n\n\nYou can see how many levels an index has by accessing its nlevels attribute."
  },
  {
    "objectID": "qmd/pandas3ed8.html#partial-column-indexing",
    "href": "qmd/pandas3ed8.html#partial-column-indexing",
    "title": "Python for Data Analysis",
    "section": "Partial Column Indexing",
    "text": "Partial Column Indexing\nSimilar to row indexing, we can also select groups of columns:\n\nframe[\"Ohio\"]\n\n\n\n\n\n\n\n\ncolor\nGreen\nRed\n\n\nkey1\nkey2\n\n\n\n\n\n\na\n1\n0\n1\n\n\n2\n3\n4\n\n\nb\n1\n6\n7\n\n\n2\n9\n10"
  },
  {
    "objectID": "qmd/pandas3ed8.html#reordering-and-sorting-levels",
    "href": "qmd/pandas3ed8.html#reordering-and-sorting-levels",
    "title": "Python for Data Analysis",
    "section": "Reordering and Sorting Levels",
    "text": "Reordering and Sorting Levels\n\nswaplevel(): Interchanges two levels.\nsort_index(): Sorts data using index levels. Can sort by a specific level."
  },
  {
    "objectID": "qmd/pandas3ed8.html#swaplevel-example",
    "href": "qmd/pandas3ed8.html#swaplevel-example",
    "title": "Python for Data Analysis",
    "section": "swaplevel() Example",
    "text": "swaplevel() Example\n\nframe.swaplevel(\"key1\", \"key2\")\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey2\nkey1\n\n\n\n\n\n\n\n1\na\n0\n1\n2\n\n\n2\na\n3\n4\n5\n\n\n1\nb\n6\n7\n8\n\n\n2\nb\n9\n10\n11"
  },
  {
    "objectID": "qmd/pandas3ed8.html#sort_index-example",
    "href": "qmd/pandas3ed8.html#sort_index-example",
    "title": "Python for Data Analysis",
    "section": "sort_index() Example",
    "text": "sort_index() Example\n\nframe.sort_index(level=1) # sort by level 1 (key2)\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey1\nkey2\n\n\n\n\n\n\n\na\n1\n0\n1\n2\n\n\nb\n1\n6\n7\n8\n\n\na\n2\n3\n4\n5\n\n\nb\n2\n9\n10\n11"
  },
  {
    "objectID": "qmd/pandas3ed8.html#swaplevel-and-sort_index-combined",
    "href": "qmd/pandas3ed8.html#swaplevel-and-sort_index-combined",
    "title": "Python for Data Analysis",
    "section": "swaplevel() and sort_index() Combined",
    "text": "swaplevel() and sort_index() Combined\n\nframe.swaplevel(0, 1).sort_index(level=0)\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey2\nkey1\n\n\n\n\n\n\n\n1\na\n0\n1\n2\n\n\nb\n6\n7\n8\n\n\n2\na\n3\n4\n5\n\n\nb\n9\n10\n11\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nData selection performance is much better on hierarchically indexed objects if the index is lexicographically sorted starting with the outermost level."
  },
  {
    "objectID": "qmd/pandas3ed8.html#summary-statistics-by-level",
    "href": "qmd/pandas3ed8.html#summary-statistics-by-level",
    "title": "Python for Data Analysis",
    "section": "Summary Statistics by Level",
    "text": "Summary Statistics by Level\nMany descriptive and summary statistics have a level option:\n\nframe.groupby(level=\"key2\").sum()\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey2\n\n\n\n\n\n\n\n1\n6\n8\n10\n\n\n2\n12\n14\n16"
  },
  {
    "objectID": "qmd/pandas3ed8.html#summary-statistics-by-level-column-example",
    "href": "qmd/pandas3ed8.html#summary-statistics-by-level-column-example",
    "title": "Python for Data Analysis",
    "section": "Summary Statistics by Level (Column Example)",
    "text": "Summary Statistics by Level (Column Example)\n\nframe.groupby(level=\"color\", axis=\"columns\").sum()\n\n/tmp/ipykernel_3421/775557097.py:1: FutureWarning: DataFrame.groupby with axis=1 is deprecated. Do `frame.T.groupby(...)` without axis instead.\n  frame.groupby(level=\"color\", axis=\"columns\").sum()\n\n\n\n\n\n\n\n\n\ncolor\nGreen\nRed\n\n\nkey1\nkey2\n\n\n\n\n\n\na\n1\n2\n1\n\n\n2\n8\n4\n\n\nb\n1\n14\n7\n\n\n2\n20\n10"
  },
  {
    "objectID": "qmd/pandas3ed8.html#indexing-with-a-dataframes-columns",
    "href": "qmd/pandas3ed8.html#indexing-with-a-dataframes-columns",
    "title": "Python for Data Analysis",
    "section": "Indexing with a DataFrame‚Äôs Columns",
    "text": "Indexing with a DataFrame‚Äôs Columns\n\nset_index(): Creates a new DataFrame using one or more columns as the index.\nreset_index(): Moves hierarchical index levels into the columns (opposite of set_index())."
  },
  {
    "objectID": "qmd/pandas3ed8.html#example-dataframe",
    "href": "qmd/pandas3ed8.html#example-dataframe",
    "title": "Python for Data Analysis",
    "section": "Example DataFrame",
    "text": "Example DataFrame\n\nframe = pd.DataFrame({\"a\": range(7), \"b\": range(7, 0, -1),\n                      \"c\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n                            \"two\", \"two\"],\n                      \"d\": [0, 1, 2, 0, 1, 2, 3]})\nframe\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\n\n\n0\n0\n7\none\n0\n\n\n1\n1\n6\none\n1\n\n\n2\n2\n5\none\n2\n\n\n3\n3\n4\ntwo\n0\n\n\n4\n4\n3\ntwo\n1\n\n\n5\n5\n2\ntwo\n2\n\n\n6\n6\n1\ntwo\n3"
  },
  {
    "objectID": "qmd/pandas3ed8.html#set_index-example",
    "href": "qmd/pandas3ed8.html#set_index-example",
    "title": "Python for Data Analysis",
    "section": "set_index() Example",
    "text": "set_index() Example\n\nframe2 = frame.set_index([\"c\", \"d\"])\nframe2\n\n\n\n\n\n\n\n\n\na\nb\n\n\nc\nd\n\n\n\n\n\n\none\n0\n0\n7\n\n\n1\n1\n6\n\n\n2\n2\n5\n\n\ntwo\n0\n3\n4\n\n\n1\n4\n3\n\n\n2\n5\n2\n\n\n3\n6\n1\n\n\n\n\n\n\n\n\nWe use columns ‚Äúc‚Äù and ‚Äúd‚Äù to create a MultiIndex.\nBy default, columns used for the index are removed. Use drop=False to keep them."
  },
  {
    "objectID": "qmd/pandas3ed8.html#set_index-with-dropfalse",
    "href": "qmd/pandas3ed8.html#set_index-with-dropfalse",
    "title": "Python for Data Analysis",
    "section": "set_index() with drop=False",
    "text": "set_index() with drop=False\n\nframe.set_index([\"c\", \"d\"], drop=False)\n\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\nc\nd\n\n\n\n\n\n\n\n\none\n0\n0\n7\none\n0\n\n\n1\n1\n6\none\n1\n\n\n2\n2\n5\none\n2\n\n\ntwo\n0\n3\n4\ntwo\n0\n\n\n1\n4\n3\ntwo\n1\n\n\n2\n5\n2\ntwo\n2\n\n\n3\n6\n1\ntwo\n3"
  },
  {
    "objectID": "qmd/pandas3ed8.html#reset_index-example",
    "href": "qmd/pandas3ed8.html#reset_index-example",
    "title": "Python for Data Analysis",
    "section": "reset_index() Example",
    "text": "reset_index() Example\n\nframe2.reset_index()\n\n\n\n\n\n\n\n\nc\nd\na\nb\n\n\n\n\n0\none\n0\n0\n7\n\n\n1\none\n1\n1\n6\n\n\n2\none\n2\n2\n5\n\n\n3\ntwo\n0\n3\n4\n\n\n4\ntwo\n1\n4\n3\n\n\n5\ntwo\n2\n5\n2\n\n\n6\ntwo\n3\n6\n1\n\n\n\n\n\n\n\n\nreset_index() moves the hierarchical index to columns.\nIt creates a default integer index."
  },
  {
    "objectID": "qmd/pandas3ed8.html#combining-and-merging-datasets",
    "href": "qmd/pandas3ed8.html#combining-and-merging-datasets",
    "title": "Python for Data Analysis",
    "section": "Combining and Merging Datasets",
    "text": "Combining and Merging Datasets\nThree main ways to combine data in pandas:\n\npandas.merge: Connects rows in DataFrames based on keys (like SQL joins).\npandas.concat: Concatenates or ‚Äústacks‚Äù objects along an axis.\ncombine_first: Splices together overlapping data (fills missing values)."
  },
  {
    "objectID": "qmd/pandas3ed8.html#database-style-dataframe-joins",
    "href": "qmd/pandas3ed8.html#database-style-dataframe-joins",
    "title": "Python for Data Analysis",
    "section": "Database-Style DataFrame Joins",
    "text": "Database-Style DataFrame Joins\n\npandas.merge is the main function for join operations.\nIt‚Äôs similar to SQL joins.\nKey concept: keys (columns used to link rows)."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.merge-many-to-one-join-setup",
    "href": "qmd/pandas3ed8.html#pandas.merge-many-to-one-join-setup",
    "title": "Python for Data Analysis",
    "section": "pandas.merge: Many-to-One Join (Setup)",
    "text": "pandas.merge: Many-to-One Join (Setup)\n\ndf1 = pd.DataFrame({\"key\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\"],\n                    \"data1\": pd.Series(range(7), dtype=\"Int64\")})\ndf2 = pd.DataFrame({\"key\": [\"a\", \"b\", \"d\"],\n                    \"data2\": pd.Series(range(3), dtype=\"Int64\")})\n\n\ndf1\n\n\n\n\n\n\n\n\nkey\ndata1\n\n\n\n\n0\nb\n0\n\n\n1\nb\n1\n\n\n2\na\n2\n\n\n3\nc\n3\n\n\n4\na\n4\n\n\n5\na\n5\n\n\n6\nb\n6\n\n\n\n\n\n\n\n\ndf2\n\n\n\n\n\n\n\n\nkey\ndata2\n\n\n\n\n0\na\n0\n\n\n1\nb\n1\n\n\n2\nd\n2"
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.merge-many-to-one-join-example",
    "href": "qmd/pandas3ed8.html#pandas.merge-many-to-one-join-example",
    "title": "Python for Data Analysis",
    "section": "pandas.merge: Many-to-One Join (Example)",
    "text": "pandas.merge: Many-to-One Join (Example)\n\npd.merge(df1, df2) # or pd.merge(df1, df2, on=\"key\")\n\n\n\n\n\n\n\n\nkey\ndata1\ndata2\n\n\n\n\n0\nb\n0\n1\n\n\n1\nb\n1\n1\n\n\n2\na\n2\n0\n\n\n3\na\n4\n0\n\n\n4\na\n5\n0\n\n\n5\nb\n6\n1\n\n\n\n\n\n\n\n\ndf1 has multiple rows labeled ‚Äòa‚Äô and ‚Äòb‚Äô.\ndf2 has only one row for each value in the ‚Äòkey‚Äô column.\nIf the join column isn‚Äôt specified, merge uses overlapping column names. Best practice is to specify explicitly."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.merge-different-column-names",
    "href": "qmd/pandas3ed8.html#pandas.merge-different-column-names",
    "title": "Python for Data Analysis",
    "section": "pandas.merge: Different Column Names",
    "text": "pandas.merge: Different Column Names\nIf column names are different, specify them separately:\n\ndf3 = pd.DataFrame({\"lkey\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\"],\n                    \"data1\": pd.Series(range(7), dtype=\"Int64\")})\ndf4 = pd.DataFrame({\"rkey\": [\"a\", \"b\", \"d\"],\n                    \"data2\": pd.Series(range(3), dtype=\"Int64\")})\npd.merge(df3, df4, left_on=\"lkey\", right_on=\"rkey\")\n\n\n\n\n\n\n\n\nlkey\ndata1\nrkey\ndata2\n\n\n\n\n0\nb\n0\nb\n1\n\n\n1\nb\n1\nb\n1\n\n\n2\na\n2\na\n0\n\n\n3\na\n4\na\n0\n\n\n4\na\n5\na\n0\n\n\n5\nb\n6\nb\n1\n\n\n\n\n\n\n\n\nleft_on: Column(s) in the left DataFrame.\nright_on: Column(s) in the right DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.merge-join-types",
    "href": "qmd/pandas3ed8.html#pandas.merge-join-types",
    "title": "Python for Data Analysis",
    "section": "pandas.merge: Join Types",
    "text": "pandas.merge: Join Types\n\nBy default, merge does an ‚Äúinner‚Äù join (intersection of keys).\nOther join types: ‚Äúleft‚Äù, ‚Äúright‚Äù, ‚Äúouter‚Äù."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.merge-outer-join-example",
    "href": "qmd/pandas3ed8.html#pandas.merge-outer-join-example",
    "title": "Python for Data Analysis",
    "section": "pandas.merge: Outer Join Example",
    "text": "pandas.merge: Outer Join Example\n\npd.merge(df1, df2, how=\"outer\")\n\n\n\n\n\n\n\n\nkey\ndata1\ndata2\n\n\n\n\n0\na\n2\n0\n\n\n1\na\n4\n0\n\n\n2\na\n5\n0\n\n\n3\nb\n0\n1\n\n\n4\nb\n1\n1\n\n\n5\nb\n6\n1\n\n\n6\nc\n3\n&lt;NA&gt;\n\n\n7\nd\n&lt;NA&gt;\n2\n\n\n\n\n\n\n\n\nOuter join: Union of keys.\nLeft join: All keys from the left DataFrame.\nRight join: All keys from the right DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed8.html#join-types-with-how-argument",
    "href": "qmd/pandas3ed8.html#join-types-with-how-argument",
    "title": "Python for Data Analysis",
    "section": "Join Types with how Argument",
    "text": "Join Types with how Argument\n\n\n\n\n\n\n\nOption\nBehavior\n\n\n\n\nhow=\"inner\"\nUse only the key combinations observed in both tables\n\n\nhow=\"left\"\nUse all key combinations found in the left table\n\n\nhow=\"right\"\nUse all key combinations found in the right table\n\n\nhow=\"outer\"\nUse all key combinations observed in both tables together"
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.merge-many-to-many-joins",
    "href": "qmd/pandas3ed8.html#pandas.merge-many-to-many-joins",
    "title": "Python for Data Analysis",
    "section": "pandas.merge: Many-to-Many Joins",
    "text": "pandas.merge: Many-to-Many Joins\n\nMany-to-many joins form the Cartesian product of the matching keys.\n\n\ndf1 = pd.DataFrame({\"key\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"b\"],\n                    \"data1\": pd.Series(range(6), dtype=\"Int64\")})\ndf2 = pd.DataFrame({\"key\": [\"a\", \"b\", \"a\", \"b\", \"d\"],\n                    \"data2\": pd.Series(range(5), dtype=\"Int64\")})\n\npd.merge(df1, df2, on=\"key\", how=\"left\")\n\n\n\n\n\n\n\n\nkey\ndata1\ndata2\n\n\n\n\n0\nb\n0\n1\n\n\n1\nb\n0\n3\n\n\n2\nb\n1\n1\n\n\n3\nb\n1\n3\n\n\n4\na\n2\n0\n\n\n5\na\n2\n2\n\n\n6\nc\n3\n&lt;NA&gt;\n\n\n7\na\n4\n0\n\n\n8\na\n4\n2\n\n\n9\nb\n5\n1\n\n\n10\nb\n5\n3\n\n\n\n\n\n\n\n\nThere are three ‚Äúb‚Äù rows in df1 and two in df2, resulting in six ‚Äúb‚Äù rows."
  },
  {
    "objectID": "qmd/pandas3ed8.html#merging-with-multiple-keys",
    "href": "qmd/pandas3ed8.html#merging-with-multiple-keys",
    "title": "Python for Data Analysis",
    "section": "Merging with Multiple Keys",
    "text": "Merging with Multiple Keys\nPass a list of column names:\n\nleft = pd.DataFrame({\"key1\": [\"foo\", \"foo\", \"bar\"],\n                     \"key2\": [\"one\", \"two\", \"one\"],\n                     \"lval\": pd.Series([1, 2, 3], dtype='Int64')})\nright = pd.DataFrame({\"key1\": [\"foo\", \"foo\", \"bar\", \"bar\"],\n                      \"key2\": [\"one\", \"one\", \"one\", \"two\"],\n                      \"rval\": pd.Series([4, 5, 6, 7], dtype='Int64')})\npd.merge(left, right, on=[\"key1\", \"key2\"], how=\"outer\")\n\n\n\n\n\n\n\n\nkey1\nkey2\nlval\nrval\n\n\n\n\n0\nbar\none\n3\n6\n\n\n1\nbar\ntwo\n&lt;NA&gt;\n7\n\n\n2\nfoo\none\n1\n4\n\n\n3\nfoo\none\n1\n5\n\n\n4\nfoo\ntwo\n2\n&lt;NA&gt;\n\n\n\n\n\n\n\n\nThink of multiple keys as forming tuples used as a single join key."
  },
  {
    "objectID": "qmd/pandas3ed8.html#overlapping-column-names",
    "href": "qmd/pandas3ed8.html#overlapping-column-names",
    "title": "Python for Data Analysis",
    "section": "Overlapping Column Names",
    "text": "Overlapping Column Names\n\nmerge has a suffixes option to handle overlapping column names.\n\n\npd.merge(left, right, on=\"key1\")\n\n\n\n\n\n\n\n\nkey1\nkey2_x\nlval\nkey2_y\nrval\n\n\n\n\n0\nfoo\none\n1\none\n4\n\n\n1\nfoo\none\n1\none\n5\n\n\n2\nfoo\ntwo\n2\none\n4\n\n\n3\nfoo\ntwo\n2\none\n5\n\n\n4\nbar\none\n3\none\n6\n\n\n5\nbar\none\n3\ntwo\n7"
  },
  {
    "objectID": "qmd/pandas3ed8.html#overlapping-column-names-suffixes",
    "href": "qmd/pandas3ed8.html#overlapping-column-names-suffixes",
    "title": "Python for Data Analysis",
    "section": "Overlapping Column Names: suffixes",
    "text": "Overlapping Column Names: suffixes\n\npd.merge(left, right, on=\"key1\", suffixes=(\"_left\", \"_right\"))\n\n\n\n\n\n\n\n\nkey1\nkey2_left\nlval\nkey2_right\nrval\n\n\n\n\n0\nfoo\none\n1\none\n4\n\n\n1\nfoo\none\n1\none\n5\n\n\n2\nfoo\ntwo\n2\none\n4\n\n\n3\nfoo\ntwo\n2\none\n5\n\n\n4\nbar\none\n3\none\n6\n\n\n5\nbar\none\n3\ntwo\n7"
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.merge-function-arguments",
    "href": "qmd/pandas3ed8.html#pandas.merge-function-arguments",
    "title": "Python for Data Analysis",
    "section": "pandas.merge Function Arguments",
    "text": "pandas.merge Function Arguments\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nleft\nDataFrame to be merged on the left side.\n\n\nright\nDataFrame to be merged on the right side.\n\n\nhow\nType of join: ‚Äúinner‚Äù, ‚Äúouter‚Äù, ‚Äúleft‚Äù, or ‚Äúright‚Äù (defaults to ‚Äúinner‚Äù).\n\n\non\nColumn names to join on (must be in both DataFrames).\n\n\nleft_on\nColumns in left DataFrame to use as join keys.\n\n\nright_on\nAnalogous to left_on for the right DataFrame.\n\n\nleft_index\nUse row index in left as its join key(s).\n\n\nright_index\nAnalogous to left_index.\n\n\nsort\nSort merged data lexicographically by join keys (False by default).\n\n\nsuffixes\nTuple of strings to append to overlapping column names (defaults to (‚Äú_x‚Äù, ‚Äú_y‚Äù)).\n\n\ncopy\nIf False, avoid copying data in some cases (defaults to copying).\n\n\nvalidate\nVerifies merge type (one-to-one, one-to-many, many-to-many).\n\n\nindicator\nAdds column _merge indicating source of each row (‚Äúleft_only‚Äù, ‚Äúright_only‚Äù, ‚Äúboth‚Äù)."
  },
  {
    "objectID": "qmd/pandas3ed8.html#merging-on-index",
    "href": "qmd/pandas3ed8.html#merging-on-index",
    "title": "Python for Data Analysis",
    "section": "Merging on Index",
    "text": "Merging on Index\n\nUse left_index=True or right_index=True (or both) to merge on the index.\n\n\nleft1 = pd.DataFrame({\"key\": [\"a\", \"b\", \"a\", \"a\", \"b\", \"c\"],\n                      \"value\": pd.Series(range(6), dtype=\"Int64\")})\nright1 = pd.DataFrame({\"group_val\": [3.5, 7]}, index=[\"a\", \"b\"])\n\npd.merge(left1, right1, left_on=\"key\", right_index=True)\n\n\n\n\n\n\n\n\nkey\nvalue\ngroup_val\n\n\n\n\n0\na\n0\n3.5\n\n\n1\nb\n1\n7.0\n\n\n2\na\n2\n3.5\n\n\n3\na\n3\n3.5\n\n\n4\nb\n4\n7.0\n\n\n\n\n\n\n\n\nWe merge left1‚Äôs ‚Äúkey‚Äù column with right1‚Äôs index.\nThe index for left1 is preserved."
  },
  {
    "objectID": "qmd/pandas3ed8.html#hierarchical-index-multiple-key-merge",
    "href": "qmd/pandas3ed8.html#hierarchical-index-multiple-key-merge",
    "title": "Python for Data Analysis",
    "section": "Hierarchical Index: Multiple-Key Merge",
    "text": "Hierarchical Index: Multiple-Key Merge\nWith hierarchical indexing, joining on index is like a multiple-key merge:\n\nlefth = pd.DataFrame({\"key1\": [\"Ohio\", \"Ohio\", \"Ohio\",\n                            \"Nevada\", \"Nevada\"],\n                    \"key2\": [2000, 2001, 2002, 2001, 2002],\n                    \"data\": pd.Series(range(5), dtype=\"Int64\")})\nrighth_index = pd.MultiIndex.from_arrays([\n    [\"Nevada\", \"Nevada\", \"Ohio\", \"Ohio\", \"Ohio\", \"Ohio\"],\n    [2001, 2000, 2000, 2000, 2001, 2002]\n    ])\nrighth = pd.DataFrame({\"event1\": pd.Series([0, 2, 4, 6, 8, 10], dtype=\"Int64\",\n                                        index=righth_index),\n                    \"event2\": pd.Series([1, 3, 5, 7, 9, 11], dtype=\"Int64\",\n                                        index=righth_index)})\n\npd.merge(lefth, righth, left_on=[\"key1\", \"key2\"], right_index=True, how=\"outer\")\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata\nevent1\nevent2\n\n\n\n\n4\nNevada\n2000\n&lt;NA&gt;\n2\n3\n\n\n3\nNevada\n2001\n3\n0\n1\n\n\n4\nNevada\n2002\n4\n&lt;NA&gt;\n&lt;NA&gt;\n\n\n0\nOhio\n2000\n0\n4\n5\n\n\n0\nOhio\n2000\n0\n6\n7\n\n\n1\nOhio\n2001\n1\n8\n9\n\n\n2\nOhio\n2002\n2\n10\n11"
  },
  {
    "objectID": "qmd/pandas3ed8.html#dataframes-join-method",
    "href": "qmd/pandas3ed8.html#dataframes-join-method",
    "title": "Python for Data Analysis",
    "section": "DataFrame‚Äôs join Method",
    "text": "DataFrame‚Äôs join Method\n\nSimplifies merging by index.\nPerforms a left join by default.\n\n\nleft2 = pd.DataFrame([[1., 2.], [3., 4.], [5., 6.]],\n                     index=[\"a\", \"c\", \"e\"],\n                     columns=[\"Ohio\", \"Nevada\"]).astype(\"Int64\")\nright2 = pd.DataFrame([[7., 8.], [9., 10.], [11., 12.], [13, 14]],\n                      index=[\"b\", \"c\", \"d\", \"e\"],\n                      columns=[\"Missouri\", \"Alabama\"]).astype(\"Int64\")\nleft2.join(right2, how=\"outer\")\n\n\n\n\n\n\n\n\nOhio\nNevada\nMissouri\nAlabama\n\n\n\n\na\n1\n2\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nb\n&lt;NA&gt;\n&lt;NA&gt;\n7\n8\n\n\nc\n3\n4\n9\n10\n\n\nd\n&lt;NA&gt;\n&lt;NA&gt;\n11\n12\n\n\ne\n5\n6\n13\n14\n\n\n\n\n\n\n\n\nCan join on one of the calling DataFrame‚Äôs columns.\nSupports joining multiple DataFrames with the similar indexes but non-overlapping columns."
  },
  {
    "objectID": "qmd/pandas3ed8.html#join-on-a-column",
    "href": "qmd/pandas3ed8.html#join-on-a-column",
    "title": "Python for Data Analysis",
    "section": "join on a Column",
    "text": "join on a Column\n\nleft1.join(right1, on=\"key\")\n\n\n\n\n\n\n\n\nkey\nvalue\ngroup_val\n\n\n\n\n0\na\n0\n3.5\n\n\n1\nb\n1\n7.0\n\n\n2\na\n2\n3.5\n\n\n3\na\n3\n3.5\n\n\n4\nb\n4\n7.0\n\n\n5\nc\n5\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed8.html#concatenating-along-an-axis",
    "href": "qmd/pandas3ed8.html#concatenating-along-an-axis",
    "title": "Python for Data Analysis",
    "section": "Concatenating Along an Axis",
    "text": "Concatenating Along an Axis\n\nnumpy.concatenate: Works with NumPy arrays.\n\n\narr = np.arange(12).reshape((3, 4))\nnp.concatenate([arr, arr], axis=1)\n\narray([[ 0,  1,  2,  3,  0,  1,  2,  3],\n       [ 4,  5,  6,  7,  4,  5,  6,  7],\n       [ 8,  9, 10, 11,  8,  9, 10, 11]])\n\n\n\npandas.concat: Addresses concerns like:\n\nHandling different indexes.\nIdentifying concatenated chunks.\nPreserving data."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.concat-with-series",
    "href": "qmd/pandas3ed8.html#pandas.concat-with-series",
    "title": "Python for Data Analysis",
    "section": "pandas.concat with Series",
    "text": "pandas.concat with Series\n\ns1 = pd.Series([0, 1], index=[\"a\", \"b\"], dtype=\"Int64\")\ns2 = pd.Series([2, 3, 4], index=[\"c\", \"d\", \"e\"], dtype=\"Int64\")\ns3 = pd.Series([5, 6], index=[\"f\", \"g\"], dtype=\"Int64\")\npd.concat([s1, s2, s3])\n\na    0\nb    1\nc    2\nd    3\ne    4\nf    5\ng    6\ndtype: Int64\n\n\n\nBy default, concat works along axis=\"index\" (rows), producing another Series.\nGlues together values and indexes."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.concat-axiscolumns",
    "href": "qmd/pandas3ed8.html#pandas.concat-axiscolumns",
    "title": "Python for Data Analysis",
    "section": "pandas.concat: axis=\"columns\"",
    "text": "pandas.concat: axis=\"columns\"\n\npd.concat([s1, s2, s3], axis=\"columns\")\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\na\n0\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nb\n1\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nc\n&lt;NA&gt;\n2\n&lt;NA&gt;\n\n\nd\n&lt;NA&gt;\n3\n&lt;NA&gt;\n\n\ne\n&lt;NA&gt;\n4\n&lt;NA&gt;\n\n\nf\n&lt;NA&gt;\n&lt;NA&gt;\n5\n\n\ng\n&lt;NA&gt;\n&lt;NA&gt;\n6\n\n\n\n\n\n\n\n\naxis=\"columns\" produces a DataFrame.\nThe result is the union (outer join) of the indexes."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.concat-joininner",
    "href": "qmd/pandas3ed8.html#pandas.concat-joininner",
    "title": "Python for Data Analysis",
    "section": "pandas.concat: join=\"inner\"",
    "text": "pandas.concat: join=\"inner\"\n\ns4 = pd.concat([s1, s3])\npd.concat([s1, s4], axis=\"columns\", join=\"inner\")\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\na\n0\n0\n\n\nb\n1\n1\n\n\n\n\n\n\n\n\njoin=\"inner\" performs an intersection on the indexes."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.concat-keys-argument",
    "href": "qmd/pandas3ed8.html#pandas.concat-keys-argument",
    "title": "Python for Data Analysis",
    "section": "pandas.concat: keys Argument",
    "text": "pandas.concat: keys Argument\n\nresult = pd.concat([s1, s1, s3], keys=[\"one\", \"two\", \"three\"])\nresult\n\none    a    0\n       b    1\ntwo    a    0\n       b    1\nthree  f    5\n       g    6\ndtype: Int64"
  },
  {
    "objectID": "qmd/pandas3ed8.html#unstack-the-result",
    "href": "qmd/pandas3ed8.html#unstack-the-result",
    "title": "Python for Data Analysis",
    "section": "unstack() the Result",
    "text": "unstack() the Result\n\nresult.unstack()\n\n\n\n\n\n\n\n\na\nb\nf\ng\n\n\n\n\none\n0\n1\n&lt;NA&gt;\n&lt;NA&gt;\n\n\ntwo\n0\n1\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nthree\n&lt;NA&gt;\n&lt;NA&gt;\n5\n6\n\n\n\n\n\n\n\n\nkeys creates a hierarchical index. Identifies the concatenated pieces.\nWhen combining along axis=\"columns\", keys become DataFrame column headers."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.concat-with-dataframes",
    "href": "qmd/pandas3ed8.html#pandas.concat-with-dataframes",
    "title": "Python for Data Analysis",
    "section": "pandas.concat with DataFrames",
    "text": "pandas.concat with DataFrames\nThe logic is the same as with Series:\n\ndf1 = pd.DataFrame(np.arange(6).reshape(3, 2), index=[\"a\", \"b\", \"c\"],\n                   columns=[\"one\", \"two\"])\ndf2 = pd.DataFrame(5 + np.arange(4).reshape(2, 2), index=[\"a\", \"c\"],\n                   columns=[\"three\", \"four\"])\npd.concat([df1, df2], axis=\"columns\", keys=[\"level1\", \"level2\"])\n\n\n\n\n\n\n\n\nlevel1\nlevel2\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\na\n0\n1\n5.0\n6.0\n\n\nb\n2\n3\nNaN\nNaN\n\n\nc\n4\n5\n7.0\n8.0\n\n\n\n\n\n\n\n\nYou can name the created axis levels using the names argument.\nIf the row index contains no relevant data, use ignore_index=True."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.concat-function-arguments",
    "href": "qmd/pandas3ed8.html#pandas.concat-function-arguments",
    "title": "Python for Data Analysis",
    "section": "pandas.concat Function Arguments",
    "text": "pandas.concat Function Arguments\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nobjs\nList or dictionary of pandas objects to be concatenated (required).\n\n\naxis\nAxis to concatenate along (defaults to ‚Äúindex‚Äù).\n\n\njoin\n‚Äúinner‚Äù or ‚Äúouter‚Äù (defaults to ‚Äúouter‚Äù).\n\n\nkeys\nValues to associate with objects, forming a hierarchical index.\n\n\nlevels\nSpecific indexes to use as hierarchical index levels.\n\n\nnames\nNames for created hierarchical levels.\n\n\nverify_integrity\nCheck new axis for duplicates and raise exception if so (defaults to False).\n\n\nignore_index\nDon‚Äôt preserve indexes; produce a new range(total_length) index."
  },
  {
    "objectID": "qmd/pandas3ed8.html#combining-data-with-overlap",
    "href": "qmd/pandas3ed8.html#combining-data-with-overlap",
    "title": "Python for Data Analysis",
    "section": "Combining Data with Overlap",
    "text": "Combining Data with Overlap\n\nnumpy.where: Performs an array-oriented if-else operation.\n\n\na = pd.Series([np.nan, 2.5, 0.0, 3.5, 4.5, np.nan],\n              index=[\"f\", \"e\", \"d\", \"c\", \"b\", \"a\"])\nb = pd.Series([0., np.nan, 2., np.nan, np.nan, 5.],\n              index=[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\nnp.where(pd.isna(a), b, a)\n\narray([0. , 2.5, 0. , 3.5, 4.5, 5. ])"
  },
  {
    "objectID": "qmd/pandas3ed8.html#series.combine_first",
    "href": "qmd/pandas3ed8.html#series.combine_first",
    "title": "Python for Data Analysis",
    "section": "Series.combine_first",
    "text": "Series.combine_first\n\nSeries.combine_first: Lines up values by index and ‚Äúpatches‚Äù missing data.\n\n\na.combine_first(b)\n\na    0.0\nb    4.5\nc    3.5\nd    0.0\ne    2.5\nf    5.0\ndtype: float64\n\n\n\ncombine_first aligns by index (unlike np.where)."
  },
  {
    "objectID": "qmd/pandas3ed8.html#combine_first-with-dataframes",
    "href": "qmd/pandas3ed8.html#combine_first-with-dataframes",
    "title": "Python for Data Analysis",
    "section": "combine_first with DataFrames",
    "text": "combine_first with DataFrames\n\ncombine_first works column by column.\nIt ‚Äúpatches‚Äù missing data in the calling object with data from the passed object.\n\n\ndf1 = pd.DataFrame({\"a\": [1., np.nan, 5., np.nan],\n                    \"b\": [np.nan, 2., np.nan, 6.],\n                    \"c\": range(2, 18, 4)})\ndf2 = pd.DataFrame({\"a\": [5., 4., np.nan, 3., 7.],\n                    \"b\": [np.nan, 3., 4., 6., 8.]})\ndf1.combine_first(df2)\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\n1.0\nNaN\n2.0\n\n\n1\n4.0\n2.0\n6.0\n\n\n2\n5.0\n4.0\n10.0\n\n\n3\n3.0\n6.0\n14.0\n\n\n4\n7.0\n8.0\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed8.html#reshaping-and-pivoting",
    "href": "qmd/pandas3ed8.html#reshaping-and-pivoting",
    "title": "Python for Data Analysis",
    "section": "Reshaping and Pivoting",
    "text": "Reshaping and Pivoting\n\nReshape/Pivot operations: Rearrange tabular data.\nHierarchical indexing provides a consistent way to reshape.\nTwo primary actions:\n\nstack: ‚ÄúRotates‚Äù or pivots columns to rows.\nunstack: Pivots rows to columns."
  },
  {
    "objectID": "qmd/pandas3ed8.html#stack-and-unstack-example-dataframe",
    "href": "qmd/pandas3ed8.html#stack-and-unstack-example-dataframe",
    "title": "Python for Data Analysis",
    "section": "stack and unstack: Example DataFrame",
    "text": "stack and unstack: Example DataFrame\n\ndata = pd.DataFrame(np.arange(6).reshape((2, 3)),\n                    index=pd.Index([\"Ohio\", \"Colorado\"], name=\"state\"),\n                    columns=pd.Index([\"one\", \"two\", \"three\"],\n                    name=\"number\"))\ndata\n\n\n\n\n\n\n\nnumber\none\ntwo\nthree\n\n\nstate\n\n\n\n\n\n\n\nOhio\n0\n1\n2\n\n\nColorado\n3\n4\n5"
  },
  {
    "objectID": "qmd/pandas3ed8.html#stack-example-1",
    "href": "qmd/pandas3ed8.html#stack-example-1",
    "title": "Python for Data Analysis",
    "section": "stack Example",
    "text": "stack Example\n\nresult = data.stack()\nresult\n\nstate     number\nOhio      one       0\n          two       1\n          three     2\nColorado  one       3\n          two       4\n          three     5\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed8.html#unstack-example-1",
    "href": "qmd/pandas3ed8.html#unstack-example-1",
    "title": "Python for Data Analysis",
    "section": "unstack Example",
    "text": "unstack Example\n\nresult.unstack()\n\n\n\n\n\n\n\nnumber\none\ntwo\nthree\n\n\nstate\n\n\n\n\n\n\n\nOhio\n0\n1\n2\n\n\nColorado\n3\n4\n5"
  },
  {
    "objectID": "qmd/pandas3ed8.html#unstack-with-different-levels",
    "href": "qmd/pandas3ed8.html#unstack-with-different-levels",
    "title": "Python for Data Analysis",
    "section": "unstack with Different Levels",
    "text": "unstack with Different Levels\n\nBy default, the innermost level is unstacked.\nSpecify a different level by number or name.\n\n\nresult.unstack(level=0) # or result.unstack(\"state\")\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\nnumber\n\n\n\n\n\n\none\n0\n3\n\n\ntwo\n1\n4\n\n\nthree\n2\n5\n\n\n\n\n\n\n\n\nUnstacking might introduce missing data.\nStacking filters out missing data by default."
  },
  {
    "objectID": "qmd/pandas3ed8.html#stacking-with-dropnafalse",
    "href": "qmd/pandas3ed8.html#stacking-with-dropnafalse",
    "title": "Python for Data Analysis",
    "section": "Stacking with dropna=False",
    "text": "Stacking with dropna=False\n\ns1 = pd.Series([0, 1, 2, 3], index=[\"a\", \"b\", \"c\", \"d\"], dtype=\"Int64\")\ns2 = pd.Series([4, 5, 6], index=[\"c\", \"d\", \"e\"], dtype=\"Int64\")\ndata2 = pd.concat([s1, s2], keys=[\"one\", \"two\"])\ndata2.unstack().stack(dropna=False)\n\n/tmp/ipykernel_3421/2546955875.py:4: FutureWarning: The previous implementation of stack is deprecated and will be removed in a future version of pandas. See the What's New notes for pandas 2.1.0 for details. Specify future_stack=True to adopt the new implementation and silence this warning.\n  data2.unstack().stack(dropna=False)\n\n\none  a       0\n     b       1\n     c       2\n     d       3\n     e    &lt;NA&gt;\ntwo  a    &lt;NA&gt;\n     b    &lt;NA&gt;\n     c       4\n     d       5\n     e       6\ndtype: Int64"
  },
  {
    "objectID": "qmd/pandas3ed8.html#unstack-in-a-dataframe",
    "href": "qmd/pandas3ed8.html#unstack-in-a-dataframe",
    "title": "Python for Data Analysis",
    "section": "unstack in a DataFrame",
    "text": "unstack in a DataFrame\nWhen unstacking in a DataFrame, the unstacked level becomes the lowest level.\n\ndf = pd.DataFrame({\"left\": result, \"right\": result + 5},\n                  columns=pd.Index([\"left\", \"right\"], name=\"side\"))\ndf\n\n\n\n\n\n\n\n\nside\nleft\nright\n\n\nstate\nnumber\n\n\n\n\n\n\nOhio\none\n0\n5\n\n\ntwo\n1\n6\n\n\nthree\n2\n7\n\n\nColorado\none\n3\n8\n\n\ntwo\n4\n9\n\n\nthree\n5\n10"
  },
  {
    "objectID": "qmd/pandas3ed8.html#unstack-and-stack-example",
    "href": "qmd/pandas3ed8.html#unstack-and-stack-example",
    "title": "Python for Data Analysis",
    "section": "unstack and stack Example",
    "text": "unstack and stack Example\n\ndf.unstack(level=\"state\").stack(level=\"side\")\n\n/tmp/ipykernel_3421/2617337668.py:1: FutureWarning: The previous implementation of stack is deprecated and will be removed in a future version of pandas. See the What's New notes for pandas 2.1.0 for details. Specify future_stack=True to adopt the new implementation and silence this warning.\n  df.unstack(level=\"state\").stack(level=\"side\")\n\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\nnumber\nside\n\n\n\n\n\n\none\nleft\n0\n3\n\n\nright\n5\n8\n\n\ntwo\nleft\n1\n4\n\n\nright\n6\n9\n\n\nthree\nleft\n2\n5\n\n\nright\n7\n10"
  },
  {
    "objectID": "qmd/pandas3ed8.html#pivoting-long-to-wide-format",
    "href": "qmd/pandas3ed8.html#pivoting-long-to-wide-format",
    "title": "Python for Data Analysis",
    "section": "Pivoting ‚ÄúLong‚Äù to ‚ÄúWide‚Äù Format",
    "text": "Pivoting ‚ÄúLong‚Äù to ‚ÄúWide‚Äù Format\n\nLong/Stacked Format: Common for storing multiple time series. Each row is an observation.\nWide Format: Each variable has its own column."
  },
  {
    "objectID": "qmd/pandas3ed8.html#example-long-format-data",
    "href": "qmd/pandas3ed8.html#example-long-format-data",
    "title": "Python for Data Analysis",
    "section": "Example: Long Format Data",
    "text": "Example: Long Format Data\n\ndata = pd.read_csv(\"examples/macrodata.csv\")\ndata = data.loc[:, [\"year\", \"quarter\", \"realgdp\", \"infl\", \"unemp\"]]\nperiods = pd.PeriodIndex(year=data.pop(\"year\"),\n                        quarter=data.pop(\"quarter\"),\n                        name=\"date\")\ndata.index = periods.to_timestamp(\"D\")\ndata = data.reindex(columns=[\"realgdp\", \"infl\", \"unemp\"])\ndata.columns.name = \"item\"\nlong_data = (data.stack()\n                .reset_index()\n                .rename(columns={0: \"value\"}))\nlong_data[:10]\n\n/tmp/ipykernel_3421/1472900609.py:3: FutureWarning: Constructing PeriodIndex from fields is deprecated. Use PeriodIndex.from_fields instead.\n  periods = pd.PeriodIndex(year=data.pop(\"year\"),\n\n\n\n\n\n\n\n\n\ndate\nitem\nvalue\n\n\n\n\n0\n1959-01-01\nrealgdp\n2710.349\n\n\n1\n1959-01-01\ninfl\n0.000\n\n\n2\n1959-01-01\nunemp\n5.800\n\n\n3\n1959-04-01\nrealgdp\n2778.801\n\n\n4\n1959-04-01\ninfl\n2.340\n\n\n5\n1959-04-01\nunemp\n5.100\n\n\n6\n1959-07-01\nrealgdp\n2775.488\n\n\n7\n1959-07-01\ninfl\n2.740\n\n\n8\n1959-07-01\nunemp\n5.300\n\n\n9\n1959-10-01\nrealgdp\n2785.204"
  },
  {
    "objectID": "qmd/pandas3ed8.html#pivot-method",
    "href": "qmd/pandas3ed8.html#pivot-method",
    "title": "Python for Data Analysis",
    "section": "pivot Method",
    "text": "pivot Method\nThe pivot method transforms long format to wide format.\n\npivoted = long_data.pivot(index=\"date\", columns=\"item\",\n                          values=\"value\")\npivoted.head()\n\n\n\n\n\n\n\nitem\ninfl\nrealgdp\nunemp\n\n\ndate\n\n\n\n\n\n\n\n1959-01-01\n0.00\n2710.349\n5.8\n\n\n1959-04-01\n2.34\n2778.801\n5.1\n\n\n1959-07-01\n2.74\n2775.488\n5.3\n\n\n1959-10-01\n0.27\n2785.204\n5.6\n\n\n1960-01-01\n2.31\n2847.699\n5.2\n\n\n\n\n\n\n\n\nindex: Column to use as row index.\ncolumns: Column to use for creating new columns.\nvalues: Column to fill the DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pivoting-with-multiple-value-columns",
    "href": "qmd/pandas3ed8.html#pivoting-with-multiple-value-columns",
    "title": "Python for Data Analysis",
    "section": "Pivoting with Multiple Value Columns",
    "text": "Pivoting with Multiple Value Columns\n\nlong_data[\"value2\"] = np.random.standard_normal(len(long_data))\npivoted = long_data.pivot(index=\"date\", columns=\"item\")\npivoted.head()\n\n\n\n\n\n\n\n\nvalue\nvalue2\n\n\nitem\ninfl\nrealgdp\nunemp\ninfl\nrealgdp\nunemp\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n1959-01-01\n0.00\n2710.349\n5.8\n-0.172782\n-2.214616\n1.150410\n\n\n1959-04-01\n2.34\n2778.801\n5.1\n-0.365902\n-0.390604\n0.062515\n\n\n1959-07-01\n2.74\n2775.488\n5.3\n0.506578\n0.911911\n-0.226620\n\n\n1959-10-01\n0.27\n2785.204\n5.6\n-1.054566\n1.063285\n0.849420\n\n\n1960-01-01\n2.31\n2847.699\n5.2\n0.228258\n-0.205503\n0.732289\n\n\n\n\n\n\n\n\nIf you omit the values argument, you get hierarchical columns."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pivot-is-equivalent-to",
    "href": "qmd/pandas3ed8.html#pivot-is-equivalent-to",
    "title": "Python for Data Analysis",
    "section": "pivot is Equivalent to‚Ä¶",
    "text": "pivot is Equivalent to‚Ä¶\npivot is equivalent to using set_index followed by unstack:\n\nunstacked = long_data.set_index([\"date\", \"item\"]).unstack(level=\"item\")\nunstacked.head()\n\n\n\n\n\n\n\n\nvalue\nvalue2\n\n\nitem\ninfl\nrealgdp\nunemp\ninfl\nrealgdp\nunemp\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n1959-01-01\n0.00\n2710.349\n5.8\n-0.172782\n-2.214616\n1.150410\n\n\n1959-04-01\n2.34\n2778.801\n5.1\n-0.365902\n-0.390604\n0.062515\n\n\n1959-07-01\n2.74\n2775.488\n5.3\n0.506578\n0.911911\n-0.226620\n\n\n1959-10-01\n0.27\n2785.204\n5.6\n-1.054566\n1.063285\n0.849420\n\n\n1960-01-01\n2.31\n2847.699\n5.2\n0.228258\n-0.205503\n0.732289"
  },
  {
    "objectID": "qmd/pandas3ed8.html#pivoting-wide-to-long-format",
    "href": "qmd/pandas3ed8.html#pivoting-wide-to-long-format",
    "title": "Python for Data Analysis",
    "section": "Pivoting ‚ÄúWide‚Äù to ‚ÄúLong‚Äù Format",
    "text": "Pivoting ‚ÄúWide‚Äù to ‚ÄúLong‚Äù Format\n\npandas.melt: Inverse of pivot. Merges multiple columns into one (longer DataFrame).\n\n\ndf = pd.DataFrame({\"key\": [\"foo\", \"bar\", \"baz\"],\n                   \"A\": [1, 2, 3],\n                   \"B\": [4, 5, 6],\n                   \"C\": [7, 8, 9]})\nmelted = pd.melt(df, id_vars=\"key\")\nmelted\n\n\n\n\n\n\n\n\nkey\nvariable\nvalue\n\n\n\n\n0\nfoo\nA\n1\n\n\n1\nbar\nA\n2\n\n\n2\nbaz\nA\n3\n\n\n3\nfoo\nB\n4\n\n\n4\nbar\nB\n5\n\n\n5\nbaz\nB\n6\n\n\n6\nfoo\nC\n7\n\n\n7\nbar\nC\n8\n\n\n8\nbaz\nC\n9\n\n\n\n\n\n\n\n\nid_vars: Group indicator columns.\nvalue_vars: Columns to ‚Äúunpivot‚Äù. If not specified, all others are used."
  },
  {
    "objectID": "qmd/pandas3ed8.html#pandas.melt-examples",
    "href": "qmd/pandas3ed8.html#pandas.melt-examples",
    "title": "Python for Data Analysis",
    "section": "pandas.melt Examples",
    "text": "pandas.melt Examples\n\npd.melt(df, id_vars=\"key\", value_vars=[\"A\", \"B\"])\n\n\n\n\n\n\n\n\nkey\nvariable\nvalue\n\n\n\n\n0\nfoo\nA\n1\n\n\n1\nbar\nA\n2\n\n\n2\nbaz\nA\n3\n\n\n3\nfoo\nB\n4\n\n\n4\nbar\nB\n5\n\n\n5\nbaz\nB\n6\n\n\n\n\n\n\n\n\npd.melt(df, value_vars=[\"A\", \"B\", \"C\"]) # no group id\n\n\n\n\n\n\n\n\nvariable\nvalue\n\n\n\n\n0\nA\n1\n\n\n1\nA\n2\n\n\n2\nA\n3\n\n\n3\nB\n4\n\n\n4\nB\n5\n\n\n5\nB\n6\n\n\n6\nC\n7\n\n\n7\nC\n8\n\n\n8\nC\n9\n\n\n\n\n\n\n\n\npd.melt(df, value_vars=[\"key\", \"A\", \"B\"])\n\n\n\n\n\n\n\n\nvariable\nvalue\n\n\n\n\n0\nkey\nfoo\n\n\n1\nkey\nbar\n\n\n2\nkey\nbaz\n\n\n3\nA\n1\n\n\n4\nA\n2\n\n\n5\nA\n3\n\n\n6\nB\n4\n\n\n7\nB\n5\n\n\n8\nB\n6\n\n\n\n\n\n\n\n\nCan be used without any group identifiers."
  },
  {
    "objectID": "qmd/pandas3ed8.html#reshaping-with-melt-and-pivot",
    "href": "qmd/pandas3ed8.html#reshaping-with-melt-and-pivot",
    "title": "Python for Data Analysis",
    "section": "Reshaping with melt and pivot",
    "text": "Reshaping with melt and pivot\n\nreshaped = melted.pivot(index=\"key\", columns=\"variable\",\n                        values=\"value\")\nreshaped\n\n\n\n\n\n\n\nvariable\nA\nB\nC\n\n\nkey\n\n\n\n\n\n\n\nbar\n2\n5\n8\n\n\nbaz\n3\n6\n9\n\n\nfoo\n1\n4\n7\n\n\n\n\n\n\n\n\nreshaped.reset_index() # move index back\n\n\n\n\n\n\n\nvariable\nkey\nA\nB\nC\n\n\n\n\n0\nbar\n2\n5\n8\n\n\n1\nbaz\n3\n6\n9\n\n\n2\nfoo\n1\n4\n7\n\n\n\n\n\n\n\n\npivot can reshape back to the original layout.\nSince pivot creates an index, reset_index() may be useful."
  },
  {
    "objectID": "qmd/pandas3ed8.html#summary",
    "href": "qmd/pandas3ed8.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary üìù",
    "text": "Summary üìù\n\nWe covered key techniques for data wrangling in pandas:\n\nHierarchical Indexing (MultiIndex).\nmerge (database-style joins).\nconcat (concatenating along an axis).\ncombine_first (patching missing data).\nstack and unstack (reshaping).\npivot (long to wide format).\nmelt (wide to long format).\n\nThese tools are essential for preparing data for analysis."
  },
  {
    "objectID": "qmd/pandas3ed8.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed8.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion ü§î",
    "text": "Thoughts and Discussion ü§î\n\nHow might these techniques be used in your own data analysis projects?\nCan you think of real-world examples?\nWhat are some challenges or limitations?\nWhich method are you most interested in applying, and why?\nWhen would you prefer merge over concat, or vice-versa?\nHow can understanding hierarchical indexing improve structuring complex datasets?"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html",
    "href": "qmd/pandas3ed5cn.html",
    "title": "pandasÂÖ•Èó®",
    "section": "",
    "text": "pandas ÊòØ‰∏Ä‰∏™Âº∫Â§ßÁöÑ Python Â∫ìÔºåÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÂíåÂ§ÑÁêÜ„ÄÇ\nÂÆÉÁ±ª‰ºº‰∫éÁîµÂ≠êË°®Ê†ºÁ®ãÂ∫èÔºå‰ΩÜÂäüËÉΩÊõ¥Âº∫Â§ß„ÄÅÊõ¥ÁÅµÊ¥ª„ÄÇ\nÂÆÉÂª∫Á´ãÂú® NumPy ‰πã‰∏äÔºåNumPy ÊòØ Python ‰∏≠Âè¶‰∏Ä‰∏™ÈáçË¶ÅÁöÑÊï∞ÂÄºËÆ°ÁÆóÂ∫ì„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#pandasÁÆÄ‰ªã",
    "href": "qmd/pandas3ed5cn.html#pandasÁÆÄ‰ªã",
    "title": "pandasÂÖ•Èó®",
    "section": "",
    "text": "pandas ÊòØ‰∏Ä‰∏™Âº∫Â§ßÁöÑ Python Â∫ìÔºåÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÂíåÂ§ÑÁêÜ„ÄÇ\nÂÆÉÁ±ª‰ºº‰∫éÁîµÂ≠êË°®Ê†ºÁ®ãÂ∫èÔºå‰ΩÜÂäüËÉΩÊõ¥Âº∫Â§ß„ÄÅÊõ¥ÁÅµÊ¥ª„ÄÇ\nÂÆÉÂª∫Á´ãÂú® NumPy ‰πã‰∏äÔºåNumPy ÊòØ Python ‰∏≠Âè¶‰∏Ä‰∏™ÈáçË¶ÅÁöÑÊï∞ÂÄºËÆ°ÁÆóÂ∫ì„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#pandas-Ê†áÂøó",
    "href": "qmd/pandas3ed5cn.html#pandas-Ê†áÂøó",
    "title": "pandasÂÖ•Èó®",
    "section": "pandas Ê†áÂøó",
    "text": "pandas Ê†áÂøó\n\n\n\n\n\n\n\nNote\n\n\n\nÂèØ‰ª•Êää pandas Áúã‰ΩúÊòØÊâì‰∫ÜÂÖ¥Â•ãÂâÇÁöÑ ExcelÔºÅüí™"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas",
    "href": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas",
    "title": "pandasÂÖ•Èó®",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î\n\nÊï∞ÊçÆÁªìÊûÑÔºö Êèê‰æõÁõ¥ËßÇÁöÑÊï∞ÊçÆÁªìÊûÑÔºåÂ¶Ç SeriesÔºà‰∏ÄÁª¥ÔºâÂíå DataFrameÔºà‰∫åÁª¥ÔºâÔºå‰ª•È´òÊïàÂ§ÑÁêÜÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î (Áª≠)",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î (Áª≠)\n\nÊï∞ÊçÆÊ∏ÖÊ¥óÔºö Êèê‰æõÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÅËøáÊª§ÂíåËΩ¨Êç¢Êï∞ÊçÆÁöÑÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î (Áª≠)",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î (Áª≠)\n\nÊï∞ÊçÆÂàÜÊûêÔºö Âº∫Â§ßÁöÑÂàÜÁªÑ„ÄÅËÅöÂêàÂíåÁªüËÆ°ÂàÜÊûêÂäüËÉΩ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-pandas-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î (Áª≠)",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© pandasÔºüü§î (Áª≠)\n\nÈõÜÊàêÔºö ‰∏é NumPy„ÄÅSciPy„ÄÅscikit-learn Âíå matplotlib Á≠âÂÖ∂‰ªñ Python Â∫ìÊó†ÁºùÂçè‰Ωú„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üîé",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üîé\nÊï∞ÊçÆÂàÜÊûêÊòØÂØπÊï∞ÊçÆËøõË°åÊ£ÄÊü•„ÄÅÊ∏ÖÁêÜ„ÄÅËΩ¨Êç¢ÂíåÂª∫Ê®°ÁöÑËøáÁ®ãÔºåÁõÆÁöÑÊòØÂèëÁé∞ÊúâÁî®‰ø°ÊÅØ„ÄÅÂæóÂá∫ÁªìËÆ∫Âπ∂ÊîØÊåÅÂÜ≥Á≠ñ„ÄÇÂÆÉÊ∂âÂèäÂá†‰∏™ÂÖ≥ÈîÆÊ≠•È™§Ôºö"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üîé (Áª≠)",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üîé (Áª≠)\n\nÊï∞ÊçÆÊî∂ÈõÜÔºö ‰ªéÂêÑÁßçÊù•Ê∫êÊî∂ÈõÜÊï∞ÊçÆ„ÄÇ\nÊï∞ÊçÆÊ∏ÖÁêÜÔºö Â§ÑÁêÜÁº∫Â§±ÂÄº„ÄÅÁ∫†Ê≠£ÈîôËØØÂπ∂Á°Æ‰øùÊï∞ÊçÆ‰∏ÄËá¥ÊÄß„ÄÇ\nÊï∞ÊçÆËΩ¨Êç¢Ôºö Â∞ÜÊï∞ÊçÆËΩ¨Êç¢‰∏∫ÈÄÇÂêàÂàÜÊûêÁöÑÊ†ºÂºèÔºà‰æãÂ¶ÇÔºåÁº©Êîæ„ÄÅËßÑËåÉÂåñÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üîé (Áª≠)",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üîé (Áª≠)\n\nÊï∞ÊçÆÊé¢Á¥¢Ôºö ‰ΩøÁî®ÊèèËø∞ÊÄßÁªüËÆ°ÂíåÂèØËßÜÂåñÊù•‰∫ÜËß£Êï∞ÊçÆÁöÑÊ®°ÂºèÂíåÁâπÂæÅ„ÄÇ\nÊï∞ÊçÆÂª∫Ê®°Ôºö Â∫îÁî®ÁªüËÆ°ÊàñÊú∫Âô®Â≠¶‰π†ÊäÄÊúØÊù•ÊèêÂèñËßÅËß£ÊàñËøõË°åÈ¢ÑÊµã„ÄÇ\nËß£ÈáäÂíåÊä•ÂëäÔºö ‰ª•Ê∏ÖÊô∞ÁÆÄÊ¥ÅÁöÑÊñπÂºè‰º†ËææÁªìÊûú„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ\nÊú∫Âô®Â≠¶‰π†ÊòØ‰∫∫Â∑•Êô∫ËÉΩ (AI) ÁöÑ‰∏Ä‰∏™Â≠êÈ¢ÜÂüüÔºå‰∏ìÊ≥®‰∫é‰ΩøËÆ°ÁÆóÊú∫ËÉΩÂ§ü‰ªéÊï∞ÊçÆ‰∏≠Â≠¶‰π†ÔºåËÄåÊó†ÈúÄÊòæÂºèÁºñÁ®ã„ÄÇÂÖ≥ÈîÆÊ¶ÇÂøµÂåÖÊã¨Ôºö"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ (Áª≠)",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ (Áª≠)\n\nËÆ≠ÁªÉÊï∞ÊçÆÔºö Áî®‰∫éËÆ≠ÁªÉÊú∫Âô®Â≠¶‰π†Ê®°ÂûãÁöÑÊï∞ÊçÆÈõÜ„ÄÇ\nÁâπÂæÅÔºö Êï∞ÊçÆÁöÑÂêÑ‰∏™ÂèØÊµãÈáèÂ±ûÊÄßÊàñÁâπÂæÅÔºà‰æãÂ¶ÇÔºåË°®‰∏≠ÁöÑÂàóÔºâ„ÄÇ\nÊ®°ÂûãÔºö ‰ªéËÆ≠ÁªÉÊï∞ÊçÆ‰∏≠Â≠¶‰π†Ê®°ÂºèÁöÑÊï∞Â≠¶Ë°®Á§∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ (Áª≠)",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ (Áª≠)\n\nÈ¢ÑÊµãÔºö ‰ΩøÁî®ËÆ≠ÁªÉÂ•ΩÁöÑÊ®°ÂûãÂØπÊñ∞ÁöÑ„ÄÅÊú™ËßÅËøáÁöÑÊï∞ÊçÆËøõË°åÈ¢ÑÊµã„ÄÇ\nÁõëÁù£Â≠¶‰π†Ôºö ‰ªéÊ†áËÆ∞Êï∞ÊçÆÔºàÂ∑≤Áü•Ê≠£Á°ÆËæìÂá∫Ôºâ‰∏≠Â≠¶‰π†„ÄÇÁ§∫‰æãÔºöÂàÜÁ±ª„ÄÅÂõûÂΩí„ÄÇ\nÊó†ÁõëÁù£Â≠¶‰π†Ôºö ‰ªéÊú™Ê†áËÆ∞Êï∞ÊçÆÔºàÊú™Áü•Ê≠£Á°ÆËæìÂá∫Ôºâ‰∏≠Â≠¶‰π†„ÄÇÁ§∫‰æãÔºöËÅöÁ±ª„ÄÅÈôçÁª¥„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç\nPython ÊòØ‰∏ÄÁßçÈÄöÁî®ÁöÑÈ´òÁ∫ßÁºñÁ®ãËØ≠Ë®ÄÔºå‰ª•ÂÖ∂ÂèØËØªÊÄßÂíåÂπøÊ≥õÁöÑÂ∫ìËÄåÈóªÂêç„ÄÇÊï∞ÊçÆÂàÜÊûêÁöÑÂÖ≥ÈîÆÁâπÊÄßÔºö\n\nÊòì‰∫éÂ≠¶‰π†Ôºö Ê∏ÖÊô∞ÁöÑËØ≠Ê≥ï‰ΩøÂÖ∂ÂØπÂàùÂ≠¶ËÄÖÂèãÂ•Ω„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç (Áª≠)",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç (Áª≠)\n\nÂ∫ûÂ§ßÁöÑÁ§æÂå∫Ôºö ÂπøÊ≥õÁöÑÂú®Á∫øËµÑÊ∫êÂíåÊîØÊåÅ„ÄÇ\n‰∏∞ÂØåÁöÑÂ∫ìÁîüÊÄÅÁ≥ªÁªüÔºö NumPyÔºàÊï∞ÂÄºËÆ°ÁÆóÔºâ„ÄÅpandasÔºàÊï∞ÊçÆÂ§ÑÁêÜÔºâ„ÄÅscikit-learnÔºàÊú∫Âô®Â≠¶‰π†Ôºâ„ÄÅmatplotlib/seabornÔºàÂèØËßÜÂåñÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç (Áª≠)",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç (Áª≠)\n\nËß£ÈáäÂûãËØ≠Ë®ÄÔºö ‰ª£Á†ÅÈÄêË°åÊâßË°åÔºå‰æø‰∫éÊµãËØïÂíåË∞ÉËØï„ÄÇ\nÂä®ÊÄÅÁ±ªÂûãÔºö Êó†ÈúÄÊòæÂºèÂ£∞ÊòéÂèòÈáèÁ±ªÂûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂØºÂÖ•-pandas",
    "href": "qmd/pandas3ed5cn.html#ÂØºÂÖ•-pandas",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂØºÂÖ• pandas",
    "text": "ÂØºÂÖ• pandas\n\nimport pandas as pd  # ÂØºÂÖ• pandasÔºåÂπ∂Â∞ÜÂÖ∂Âà´Âêç‰∏∫ 'pd'\nimport numpy as np   # ÂØºÂÖ• NumPyÔºåÂπ∂Â∞ÜÂÖ∂Âà´Âêç‰∏∫ 'np'\n\n\nÊàë‰ª¨‰ΩøÁî®Âà´Âêç pd ÂØºÂÖ• pandasÔºàÊ†áÂáÜÊÉØ‰æãÔºâ„ÄÇ\nÊàë‰ª¨‰πüÂØºÂÖ• NumPyÔºåÂà´Âêç‰∏∫ np„ÄÇ pandas ÊûÑÂª∫Âú® NumPy ‰πã‰∏ä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#pandas-Êï∞ÊçÆÁªìÊûÑseries",
    "href": "qmd/pandas3ed5cn.html#pandas-Êï∞ÊçÆÁªìÊûÑseries",
    "title": "pandasÂÖ•Èó®",
    "section": "pandas Êï∞ÊçÆÁªìÊûÑÔºöSeries",
    "text": "pandas Êï∞ÊçÆÁªìÊûÑÔºöSeries\n\nSeries ÊòØ‰∏Ä‰∏™‰∏ÄÁª¥Â∏¶Ê†áÁ≠æÁöÑÊï∞ÁªÑ„ÄÇÂÆÉÁ±ª‰ºº‰∫éÁîµÂ≠êË°®Ê†º‰∏≠ÁöÑ‰∏ÄÂàó„ÄÇ\nÂÆÉÂèØ‰ª•‰øùÂ≠ò‰ªª‰ΩïÁ±ªÂûãÁöÑÊï∞ÊçÆÔºàÊï¥Êï∞„ÄÅÊµÆÁÇπÊï∞„ÄÅÂ≠óÁ¨¶‰∏≤Á≠âÔºâ„ÄÇ\nÂÆÉÊúâ‰∏Ä‰∏™ Á¥¢ÂºïÔºåÁî®‰∫éÊ†áËÆ∞ÊØè‰∏™ÂÖÉÁ¥†„ÄÇ\n\n\nobj = pd.Series([4, 7, -5, 3]) # ‰ªéÂàóË°®ÂàõÂª∫‰∏Ä‰∏™ Series\nobj\n\n0    4\n1    7\n2   -5\n3    3\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#seriesÁ¥¢ÂºïÂíåÂÄº",
    "href": "qmd/pandas3ed5cn.html#seriesÁ¥¢ÂºïÂíåÂÄº",
    "title": "pandasÂÖ•Èó®",
    "section": "SeriesÔºöÁ¥¢ÂºïÂíåÂÄº",
    "text": "SeriesÔºöÁ¥¢ÂºïÂíåÂÄº\n\nprint(obj.array)  # ËÆøÈóÆÂ∫ïÂ±ÇÊï∞ÊçÆ (PandasArray)\nprint(obj.index)  # ËÆøÈóÆÁ¥¢ÂºïÔºàÈªòËÆ§‰∏∫Ôºö0, 1, 2, ...Ôºâ\n\n&lt;NumpyExtensionArray&gt;\n[np.int64(4), np.int64(7), np.int64(-5), np.int64(3)]\nLength: 4, dtype: int64\nRangeIndex(start=0, stop=4, step=1)\n\n\n\n\n\n\n\n\nNote\n\n\n\nobj.array ËøîÂõûÊï∞ÊçÆ„ÄÇ obj.index ËøîÂõûÁ¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Â∏¶ÊúâËá™ÂÆö‰πâÁ¥¢ÂºïÁöÑ-series",
    "href": "qmd/pandas3ed5cn.html#Â∏¶ÊúâËá™ÂÆö‰πâÁ¥¢ÂºïÁöÑ-series",
    "title": "pandasÂÖ•Èó®",
    "section": "Â∏¶ÊúâËá™ÂÆö‰πâÁ¥¢ÂºïÁöÑ Series",
    "text": "Â∏¶ÊúâËá™ÂÆö‰πâÁ¥¢ÂºïÁöÑ Series\n\nobj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c']) # ÂàõÂª∫‰∏Ä‰∏™Â∏¶ÊúâËá™ÂÆö‰πâÁ¥¢ÂºïÁöÑ Series\nobj2\n\nd    4\nb    7\na   -5\nc    3\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#seriesËá™ÂÆö‰πâÁ¥¢Âºï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#seriesËá™ÂÆö‰πâÁ¥¢Âºï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "SeriesÔºöËá™ÂÆö‰πâÁ¥¢Âºï (Áª≠)",
    "text": "SeriesÔºöËá™ÂÆö‰πâÁ¥¢Âºï (Áª≠)\n\nobj2.index # ËÆøÈóÆËá™ÂÆö‰πâÁ¥¢Âºï\n\nIndex(['d', 'b', 'a', 'c'], dtype='object')\n\n\n\n\n\n\n\n\nNote\n\n\n\nÁé∞Âú®Á¥¢ÂºïÊòØ [‚Äòd‚Äô, ‚Äòb‚Äô, ‚Äòa‚Äô, ‚Äòc‚Äô]„ÄÇÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®Ëøô‰∫õÁ¥¢ÂºïÊù•ËÆøÈóÆÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËÆøÈóÆ-series-ÂÖÉÁ¥†",
    "href": "qmd/pandas3ed5cn.html#ËÆøÈóÆ-series-ÂÖÉÁ¥†",
    "title": "pandasÂÖ•Èó®",
    "section": "ËÆøÈóÆ Series ÂÖÉÁ¥†",
    "text": "ËÆøÈóÆ Series ÂÖÉÁ¥†\n\nobj2['a']  # ÈÄöËøáÁ¥¢ÂºïÊ†áÁ≠æ 'a' ËÆøÈóÆÂÖÉÁ¥†\n\nnp.int64(-5)"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËÆøÈóÆ-series-ÂÖÉÁ¥†-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ËÆøÈóÆ-series-ÂÖÉÁ¥†-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ËÆøÈóÆ Series ÂÖÉÁ¥† (Áª≠)",
    "text": "ËÆøÈóÆ Series ÂÖÉÁ¥† (Áª≠)\n\nobj2['d'] = 6  # ‰øÆÊîπÁ¥¢ÂºïÊ†áÁ≠æ 'd' Â§ÑÁöÑÂÖÉÁ¥†"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËÆøÈóÆ-series-ÂÖÉÁ¥†-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ËÆøÈóÆ-series-ÂÖÉÁ¥†-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ËÆøÈóÆ Series ÂÖÉÁ¥† (Áª≠)",
    "text": "ËÆøÈóÆ Series ÂÖÉÁ¥† (Áª≠)\n\nobj2[['c', 'a', 'd']]  # ‰ΩøÁî®Ê†áÁ≠æÂàóË°®ËÆøÈóÆÂ§ö‰∏™ÂÖÉÁ¥†\n\nc    3\na   -5\nd    6\ndtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\nÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®Á¥¢ÂºïÊ†áÁ≠æÂàóË°®Êù•ÈÄâÊã©Â≠êÈõÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËøáÊª§-series",
    "href": "qmd/pandas3ed5cn.html#ËøáÊª§-series",
    "title": "pandasÂÖ•Èó®",
    "section": "ËøáÊª§ Series",
    "text": "ËøáÊª§ Series\n\nobj2[obj2 &gt; 0]  # ÈÄâÊã©Â§ß‰∫é 0 ÁöÑÂÖÉÁ¥†ÔºàÂ∏ÉÂ∞îÁ¥¢ÂºïÔºâ\n\nd    6\nb    7\nc    3\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËøáÊª§-series-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ËøáÊª§-series-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ËøáÊª§ Series (Áª≠)",
    "text": "ËøáÊª§ Series (Áª≠)\n\nobj2 * 2 # Â∞ÜÊØè‰∏™ÂÖÉÁ¥†‰πò‰ª• 2\n\nd    12\nb    14\na   -10\nc     6\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËøáÊª§-series-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ËøáÊª§-series-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ËøáÊª§ Series (Áª≠)",
    "text": "ËøáÊª§ Series (Áª≠)\n\nnp.exp(obj2) # ÈÄêÂÖÉÁ¥†Â∫îÁî®ÊåáÊï∞ÂáΩÊï∞ÔºàÊù•Ëá™ NumPyÔºâ\n\nd     403.428793\nb    1096.633158\na       0.006738\nc      20.085537\ndtype: float64\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂú®Ëøô‰∫õÊìç‰ΩúÊúüÈó¥ÔºåÁ¥¢Âºï-ÂÄºÁöÑÈìæÊé•ÂÖ≥Á≥ª‰ºö‰øùÁïô„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#series-‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏",
    "href": "qmd/pandas3ed5cn.html#series-‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏",
    "title": "pandasÂÖ•Èó®",
    "section": "Series ‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏",
    "text": "Series ‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏\n\n'b' in obj2  # Ê£ÄÊü• 'b' ÊòØÂê¶Âú®Á¥¢Âºï‰∏≠ÔºàÁ±ª‰ºº‰∫éÊ£ÄÊü•Â≠óÂÖ∏‰∏≠ÁöÑÈîÆÔºâ\n\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#series-‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏-Áª≠",
    "href": "qmd/pandas3ed5cn.html#series-‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Series ‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏ (Áª≠)",
    "text": "Series ‰Ωú‰∏∫Âõ∫ÂÆöÈïøÂ∫¶ÁöÑÊúâÂ∫èÂ≠óÂÖ∏ (Áª≠)\n\n'e' in obj2  # Ê£ÄÊü• 'e' ÊòØÂê¶Âú®Á¥¢Âºï‰∏≠\n\nFalse\n\n\n\n\n\n\n\n\nNote\n\n\n\nSeries Á±ª‰ºº‰∫éÂ≠óÂÖ∏ÔºöÈîÆÊòØÁ¥¢ÂºïÊ†áÁ≠æÔºåÂÄºÊòØÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ªéÂ≠óÂÖ∏ÂàõÂª∫-series",
    "href": "qmd/pandas3ed5cn.html#‰ªéÂ≠óÂÖ∏ÂàõÂª∫-series",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ªéÂ≠óÂÖ∏ÂàõÂª∫ Series",
    "text": "‰ªéÂ≠óÂÖ∏ÂàõÂª∫ Series\n\nsdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}\nobj3 = pd.Series(sdata) # ‰ªéÂ≠óÂÖ∏ÂàõÂª∫‰∏Ä‰∏™ Series\nobj3\n\nOhio      35000\nTexas     71000\nOregon    16000\nUtah       5000\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ªéÂ≠óÂÖ∏ÂàõÂª∫-series-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰ªéÂ≠óÂÖ∏ÂàõÂª∫-series-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ªéÂ≠óÂÖ∏ÂàõÂª∫ Series (Áª≠)",
    "text": "‰ªéÂ≠óÂÖ∏ÂàõÂª∫ Series (Áª≠)\n\nobj3.to_dict() #ËΩ¨Êç¢ÂõûÂ≠óÂÖ∏\n\n{'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#seriesÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "href": "qmd/pandas3ed5cn.html#seriesÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "title": "pandasÂÖ•Èó®",
    "section": "SeriesÔºöÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "text": "SeriesÔºöÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ\n\nstates = ['California', 'Ohio', 'Oregon', 'Texas']\nobj4 = pd.Series(sdata, index=states)  # ‰ΩøÁî®ÊåáÂÆöÁöÑÁ¥¢ÂºïÂàõÂª∫‰∏Ä‰∏™ Series\nobj4\n\nCalifornia        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\ndtype: float64\n\n\n\n\n\n\n\n\nNote\n\n\n\n‚ÄòCalifornia‚Äô ÊòØ NaNÔºàNot a NumberÔºâ- ÂÆÉÂú®Á¥¢Âºï‰∏≠Ôºå‰ΩÜ‰∏çÂú® sdata ‰∏≠„ÄÇ‚ÄòUtah‚Äô Ë¢´ÊéíÈô§ - ÂÆÉÂú® sdata ‰∏≠Ôºå‰ΩÜ‰∏çÂú®Á¥¢Âºï‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ",
    "href": "qmd/pandas3ed5cn.html#Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ",
    "text": "Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ\n\npd.isna(obj4)  # Ê£ÄÊü•Áº∫Â§±ÂÄº (NaN) - ËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞î Series\n\nCalifornia     True\nOhio          False\nOregon        False\nTexas         False\ndtype: bool"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ (Áª≠)",
    "text": "Ê£ÄÊµãÁº∫Â§±Êï∞ÊçÆ (Áª≠)\n\npd.notna(obj4) # Ê£ÄÊü•ÈùûÁº∫Â§±ÂÄº - ËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞î Series\n\nCalifornia    False\nOhio           True\nOregon         True\nTexas          True\ndtype: bool\n\n\n\n\n\n\n\n\nNote\n\n\n\nisna() Âíå notna() Ê£ÄÊµãÁº∫Â§±ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#seriesËá™Âä®ÂØπÈΩê",
    "href": "qmd/pandas3ed5cn.html#seriesËá™Âä®ÂØπÈΩê",
    "title": "pandasÂÖ•Èó®",
    "section": "SeriesÔºöËá™Âä®ÂØπÈΩê",
    "text": "SeriesÔºöËá™Âä®ÂØπÈΩê\n\nobj3\n\nOhio      35000\nTexas     71000\nOregon    16000\nUtah       5000\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#seriesËá™Âä®ÂØπÈΩê-Áª≠",
    "href": "qmd/pandas3ed5cn.html#seriesËá™Âä®ÂØπÈΩê-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "SeriesÔºöËá™Âä®ÂØπÈΩê (Áª≠)",
    "text": "SeriesÔºöËá™Âä®ÂØπÈΩê (Áª≠)\n\nobj4\n\nCalifornia        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#seriesËá™Âä®ÂØπÈΩê-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#seriesËá™Âä®ÂØπÈΩê-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "SeriesÔºöËá™Âä®ÂØπÈΩê (Áª≠)",
    "text": "SeriesÔºöËá™Âä®ÂØπÈΩê (Áª≠)\n\nobj3 + obj4  # Â∞Ü‰∏§‰∏™ Series Áõ∏Âä†ÔºõÂÄºÊåâÁ¥¢ÂºïÊ†áÁ≠æÂØπÈΩê\n\nCalifornia         NaN\nOhio           70000.0\nOregon         32000.0\nTexas         142000.0\nUtah               NaN\ndtype: float64\n\n\n\n\n\n\n\n\nNote\n\n\n\nÊï∞ÊçÆÂØπÈΩêÊòØËá™Âä®ÁöÑ„ÄÇÂú®Ê†áÁ≠æ‰∏çÂåπÈÖçÁöÑÂú∞ÊñπÂºïÂÖ• NaN„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#seriesname-Â±ûÊÄß",
    "href": "qmd/pandas3ed5cn.html#seriesname-Â±ûÊÄß",
    "title": "pandasÂÖ•Èó®",
    "section": "SeriesÔºöname Â±ûÊÄß",
    "text": "SeriesÔºöname Â±ûÊÄß\n\nobj4.name = 'population'  # ËÆæÁΩÆ Series ÁöÑÂêçÁß∞\nobj4.index.name = 'state'  # ËÆæÁΩÆÁ¥¢ÂºïÁöÑÂêçÁß∞\nobj4\n\nstate\nCalifornia        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\nName: population, dtype: float64\n\n\n\n\n\n\n\n\nNote\n\n\n\nSeries ÂèäÂÖ∂Á¥¢ÂºïÂèØ‰ª•ÊúâÂêçÁß∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Â∞±Âú∞Êõ¥Êîπ-series-Á¥¢Âºï",
    "href": "qmd/pandas3ed5cn.html#Â∞±Âú∞Êõ¥Êîπ-series-Á¥¢Âºï",
    "title": "pandasÂÖ•Èó®",
    "section": "Â∞±Âú∞Êõ¥Êîπ Series Á¥¢Âºï",
    "text": "Â∞±Âú∞Êõ¥Êîπ Series Á¥¢Âºï\n\nobj\n\n0    4\n1    7\n2   -5\n3    3\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Â∞±Âú∞Êõ¥Êîπ-series-Á¥¢Âºï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Â∞±Âú∞Êõ¥Êîπ-series-Á¥¢Âºï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Â∞±Âú∞Êõ¥Êîπ Series Á¥¢Âºï (Áª≠)",
    "text": "Â∞±Âú∞Êõ¥Êîπ Series Á¥¢Âºï (Áª≠)\n\nobj.index = ['Bob', 'Steve', 'Jeff', 'Ryan']  # Â∞±Âú∞‰øÆÊîπÁ¥¢Âºï\nobj\n\nBob      4\nSteve    7\nJeff    -5\nRyan     3\ndtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂèØ‰ª•ÈÄöËøáËµãÂÄºÊõ¥ÊîπÁ¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#pandas-Êï∞ÊçÆÁªìÊûÑdataframe",
    "href": "qmd/pandas3ed5cn.html#pandas-Êï∞ÊçÆÁªìÊûÑdataframe",
    "title": "pandasÂÖ•Èó®",
    "section": "pandas Êï∞ÊçÆÁªìÊûÑÔºöDataFrame",
    "text": "pandas Êï∞ÊçÆÁªìÊûÑÔºöDataFrame\n\nDataFrame ÊòØ‰∏Ä‰∏™‰∫åÁª¥Â∏¶Ê†áÁ≠æÁöÑÊï∞ÊçÆÁªìÊûÑ„ÄÇÁ±ª‰ºº‰∫éÁîµÂ≠êË°®Ê†º„ÄÇ\nÊúâË°åÂíåÂàó„ÄÇ\nÊØèÂàóÂèØ‰ª•Êúâ‰∏çÂêåÁöÑÁ±ªÂûã„ÄÇ\nÊúâË°åÁ¥¢ÂºïÂíåÂàóÁ¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂàõÂª∫-dataframe",
    "href": "qmd/pandas3ed5cn.html#ÂàõÂª∫-dataframe",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂàõÂª∫ DataFrame",
    "text": "ÂàõÂª∫ DataFrame\n\ndata = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],\n        'year': [2000, 2001, 2002, 2001, 2002, 2003],\n        'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}\nframe = pd.DataFrame(data) # ‰ªéÂ≠óÂÖ∏ÔºàÂÄº‰∏∫ÂàóË°®ÔºâÂàõÂª∫‰∏Ä‰∏™ DataFrame\nframe\n\n\n\n\n\n\n\n\nstate\nyear\npop\n\n\n\n\n0\nOhio\n2000\n1.5\n\n\n1\nOhio\n2001\n1.7\n\n\n2\nOhio\n2002\n3.6\n\n\n3\nNevada\n2001\n2.4\n\n\n4\nNevada\n2002\n2.9\n\n\n5\nNevada\n2003\n3.2\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂàõÂª∫ DataFrame ÁöÑÂ∏∏Áî®ÊñπÊ≥ïÔºöÂ≠óÂÖ∏ÔºåÂÖ∂ÂÄº‰∏∫ÂàóË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframehead-Âíå-tail",
    "href": "qmd/pandas3ed5cn.html#dataframehead-Âíå-tail",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöhead() Âíå tail()",
    "text": "DataFrameÔºöhead() Âíå tail()\n\nframe.head()  # ÊòæÁ§∫Ââç 5 Ë°å\n\n\n\n\n\n\n\n\nstate\nyear\npop\n\n\n\n\n0\nOhio\n2000\n1.5\n\n\n1\nOhio\n2001\n1.7\n\n\n2\nOhio\n2002\n3.6\n\n\n3\nNevada\n2001\n2.4\n\n\n4\nNevada\n2002\n2.9"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframehead-Âíå-tail-Áª≠",
    "href": "qmd/pandas3ed5cn.html#dataframehead-Âíå-tail-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöhead() Âíå tail() (Áª≠)",
    "text": "DataFrameÔºöhead() Âíå tail() (Áª≠)\n\nframe.tail() # ÊòæÁ§∫ÊúÄÂêé 5 Ë°å\n\n\n\n\n\n\n\n\nstate\nyear\npop\n\n\n\n\n1\nOhio\n2001\n1.7\n\n\n2\nOhio\n2002\n3.6\n\n\n3\nNevada\n2001\n2.4\n\n\n4\nNevada\n2002\n2.9\n\n\n5\nNevada\n2003\n3.2"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeÊåáÂÆöÂàóÈ°∫Â∫è",
    "href": "qmd/pandas3ed5cn.html#dataframeÊåáÂÆöÂàóÈ°∫Â∫è",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöÊåáÂÆöÂàóÈ°∫Â∫è",
    "text": "DataFrameÔºöÊåáÂÆöÂàóÈ°∫Â∫è\n\npd.DataFrame(data, columns=['year', 'state', 'pop']) # ÊåáÂÆöÂàóÈ°∫Â∫è\n\n\n\n\n\n\n\n\nyear\nstate\npop\n\n\n\n\n0\n2000\nOhio\n1.5\n\n\n1\n2001\nOhio\n1.7\n\n\n2\n2002\nOhio\n3.6\n\n\n3\n2001\nNevada\n2.4\n\n\n4\n2002\nNevada\n2.9\n\n\n5\n2003\nNevada\n3.2\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂèØ‰ª•ÊåáÂÆöÂàóÁöÑÈ°∫Â∫è„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeÁº∫Â§±Êï∞ÊçÆ",
    "href": "qmd/pandas3ed5cn.html#dataframeÁº∫Â§±Êï∞ÊçÆ",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöÁº∫Â§±Êï∞ÊçÆ",
    "text": "DataFrameÔºöÁº∫Â§±Êï∞ÊçÆ\n\nframe2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt']) # 'debt' ÊòØ‰∏Ä‰∏™Êñ∞Âàó\nframe2\n\n\n\n\n\n\n\n\nyear\nstate\npop\ndebt\n\n\n\n\n0\n2000\nOhio\n1.5\nNaN\n\n\n1\n2001\nOhio\n1.7\nNaN\n\n\n2\n2002\nOhio\n3.6\nNaN\n\n\n3\n2001\nNevada\n2.4\nNaN\n\n\n4\n2002\nNevada\n2.9\nNaN\n\n\n5\n2003\nNevada\n3.2\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeÁº∫Â§±Êï∞ÊçÆ-Áª≠",
    "href": "qmd/pandas3ed5cn.html#dataframeÁº∫Â§±Êï∞ÊçÆ-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöÁº∫Â§±Êï∞ÊçÆ (Áª≠)",
    "text": "DataFrameÔºöÁº∫Â§±Êï∞ÊçÆ (Áª≠)\n\nframe2.columns  # ÊòæÁ§∫ÂàóÂêç\n\nIndex(['year', 'state', 'pop', 'debt'], dtype='object')\n\n\n\n\n\n\n\n\nNote\n\n\n\n‚Äòdebt‚Äô ÂàóÊúâÁº∫Â§±ÂÄº (NaN)ÔºåÂõ†‰∏∫ÂÆÉ‰∏çÂú®ÂéüÂßãÊï∞ÊçÆ‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Âàó",
    "href": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Âàó",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê£ÄÁ¥¢Âàó",
    "text": "Ê£ÄÁ¥¢Âàó\n\nframe2['state']  # Ê£ÄÁ¥¢ 'state' ÂàóÔºàÁ±ª‰ººÂ≠óÂÖ∏ÁöÑË°®Á§∫Ê≥ïÔºâ\n\n0      Ohio\n1      Ohio\n2      Ohio\n3    Nevada\n4    Nevada\n5    Nevada\nName: state, dtype: object"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Âàó-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Âàó-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê£ÄÁ¥¢Âàó (Áª≠)",
    "text": "Ê£ÄÁ¥¢Âàó (Áª≠)\n\nframe2.year  # Ê£ÄÁ¥¢ 'year' ÂàóÔºàÁ±ª‰ººÂ±ûÊÄßÁöÑËÆøÈóÆÔºâ\n\n0    2000\n1    2001\n2    2002\n3    2001\n4    2002\n5    2003\nName: year, dtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\n‰∏§ÁßçÊñπÊ≥ïÈÉΩËøîÂõû‰∏Ä‰∏™ Series„ÄÇÂ±ûÊÄßËÆøÈóÆ‰ªÖÈÄÇÁî®‰∫éÊúâÊïàÁöÑ Python ÂèòÈáèÂêçÔºàÊó†Á©∫Ê†ºÁ≠âÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Ë°å",
    "href": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Ë°å",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê£ÄÁ¥¢Ë°å",
    "text": "Ê£ÄÁ¥¢Ë°å\n\nframe2.loc[1]  # ÊåâÊ†áÁ≠æËÆøÈóÆË°åÔºàÁ¥¢Âºï '1'Ôºâ\n\nyear     2001\nstate    Ohio\npop       1.7\ndebt      NaN\nName: 1, dtype: object"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Ë°å-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ê£ÄÁ¥¢Ë°å-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê£ÄÁ¥¢Ë°å (Áª≠)",
    "text": "Ê£ÄÁ¥¢Ë°å (Áª≠)\n\nframe2.iloc[2]  # ÊåâÊï¥Êï∞‰ΩçÁΩÆËÆøÈóÆË°åÔºàÁ¥¢Âºï 2Ôºâ\n\nyear     2002\nstate    Ohio\npop       3.6\ndebt      NaN\nName: 2, dtype: object\n\n\n\n\n\n\n\n\nNote\n\n\n\nloc Âü∫‰∫éÊ†áÁ≠æ„ÄÇiloc Âü∫‰∫éÊï¥Êï∞‰ΩçÁΩÆ„ÄÇËøôÊòØËá≥ÂÖ≥ÈáçË¶ÅÁöÑÂå∫Âà´„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰øÆÊîπÂàó",
    "href": "qmd/pandas3ed5cn.html#‰øÆÊîπÂàó",
    "title": "pandasÂÖ•Èó®",
    "section": "‰øÆÊîπÂàó",
    "text": "‰øÆÊîπÂàó\n\nframe2['debt'] = 16.5  # Â∞ÜÊ†áÈáèÂÄºËµãÁªô 'debt' Âàó\nframe2\n\n\n\n\n\n\n\n\nyear\nstate\npop\ndebt\n\n\n\n\n0\n2000\nOhio\n1.5\n16.5\n\n\n1\n2001\nOhio\n1.7\n16.5\n\n\n2\n2002\nOhio\n3.6\n16.5\n\n\n3\n2001\nNevada\n2.4\n16.5\n\n\n4\n2002\nNevada\n2.9\n16.5\n\n\n5\n2003\nNevada\n3.2\n16.5"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰øÆÊîπÂàó-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰øÆÊîπÂàó-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰øÆÊîπÂàó (Áª≠)",
    "text": "‰øÆÊîπÂàó (Áª≠)\n\nframe2['debt'] = np.arange(6.)  # Â∞Ü NumPy Êï∞ÁªÑËµãÁªô 'debt' Âàó\nframe2\n\n\n\n\n\n\n\n\nyear\nstate\npop\ndebt\n\n\n\n\n0\n2000\nOhio\n1.5\n0.0\n\n\n1\n2001\nOhio\n1.7\n1.0\n\n\n2\n2002\nOhio\n3.6\n2.0\n\n\n3\n2001\nNevada\n2.4\n3.0\n\n\n4\n2002\nNevada\n2.9\n4.0\n\n\n5\n2003\nNevada\n3.2\n5.0"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËµãÂÄº-series",
    "href": "qmd/pandas3ed5cn.html#ËµãÂÄº-series",
    "title": "pandasÂÖ•Èó®",
    "section": "ËµãÂÄº Series",
    "text": "ËµãÂÄº Series\n\nval = pd.Series([-1.2, -1.5, -1.7], index=[2, 4, 5])  # ÂàõÂª∫Â∏¶ÊúâËá™ÂÆö‰πâÁ¥¢ÂºïÁöÑ Series\nframe2['debt'] = val  # Â∞Ü Series ËµãÁªô 'debt' Âàó\nframe2\n\n\n\n\n\n\n\n\nyear\nstate\npop\ndebt\n\n\n\n\n0\n2000\nOhio\n1.5\nNaN\n\n\n1\n2001\nOhio\n1.7\nNaN\n\n\n2\n2002\nOhio\n3.6\n-1.2\n\n\n3\n2001\nNevada\n2.4\nNaN\n\n\n4\n2002\nNevada\n2.9\n-1.5\n\n\n5\n2003\nNevada\n3.2\n-1.7\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nÊ†áÁ≠æÂ∑≤ÂØπÈΩêÔºÅval ‰∏≠ÁöÑÂÄºË¢´ÂàÜÈÖçÁªô frame2 ‰∏≠Áõ∏Â∫îÁöÑÁ¥¢Âºï„ÄÇÂú®Á¥¢Âºï‰∏çÂåπÈÖçÁöÑÂú∞ÊñπÂ°´ÂÖÖÁº∫Â§±ÂÄº (NaN)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂàõÂª∫Êñ∞Âàó",
    "href": "qmd/pandas3ed5cn.html#ÂàõÂª∫Êñ∞Âàó",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂàõÂª∫Êñ∞Âàó",
    "text": "ÂàõÂª∫Êñ∞Âàó\n\nframe2['eastern'] = frame2['state'] == 'Ohio'  # ÂàõÂª∫‰∏Ä‰∏™Êñ∞Âàó 'eastern'\nframe2\n\n\n\n\n\n\n\n\nyear\nstate\npop\ndebt\neastern\n\n\n\n\n0\n2000\nOhio\n1.5\nNaN\nTrue\n\n\n1\n2001\nOhio\n1.7\nNaN\nTrue\n\n\n2\n2002\nOhio\n3.6\n-1.2\nTrue\n\n\n3\n2001\nNevada\n2.4\nNaN\nFalse\n\n\n4\n2002\nNevada\n2.9\n-1.5\nFalse\n\n\n5\n2003\nNevada\n3.2\n-1.7\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nËµãÂÄºÁªô‰∏çÂ≠òÂú®ÁöÑÂàó‰ºöÂàõÂª∫‰∏Ä‰∏™Êñ∞Âàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Âà†Èô§Âàó",
    "href": "qmd/pandas3ed5cn.html#Âà†Èô§Âàó",
    "title": "pandasÂÖ•Èó®",
    "section": "Âà†Èô§Âàó",
    "text": "Âà†Èô§Âàó\n\ndel frame2['eastern']  # Âà†Èô§ 'eastern' Âàó\nframe2.columns\n\nIndex(['year', 'state', 'pop', 'debt'], dtype='object')\n\n\n\n\n\n\n\n\nNote\n\n\n\ndel ÂÖ≥ÈîÆÂ≠óÂà†Èô§Âàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ªéÂµåÂ•óÂ≠óÂÖ∏ÂàõÂª∫-dataframe",
    "href": "qmd/pandas3ed5cn.html#‰ªéÂµåÂ•óÂ≠óÂÖ∏ÂàõÂª∫-dataframe",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ªéÂµåÂ•óÂ≠óÂÖ∏ÂàõÂª∫ DataFrame",
    "text": "‰ªéÂµåÂ•óÂ≠óÂÖ∏ÂàõÂª∫ DataFrame\n\npopulations = {'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6},\n               'Nevada': {2001: 2.4, 2002: 2.9}}\nframe3 = pd.DataFrame(populations) # ‰ªéÂµåÂ•óÂ≠óÂÖ∏ÂàõÂª∫ DataFrame\nframe3\n\n\n\n\n\n\n\n\nOhio\nNevada\n\n\n\n\n2000\n1.5\nNaN\n\n\n2001\n1.7\n2.4\n\n\n2002\n3.6\n2.9\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂ§ñÂ±ÇÈîÆÊàê‰∏∫ÂàóÔºåÂÜÖÂ±ÇÈîÆÊàê‰∏∫Ë°åÁ¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ËΩ¨ÁΩÆ-dataframe",
    "href": "qmd/pandas3ed5cn.html#ËΩ¨ÁΩÆ-dataframe",
    "title": "pandasÂÖ•Èó®",
    "section": "ËΩ¨ÁΩÆ DataFrame",
    "text": "ËΩ¨ÁΩÆ DataFrame\n\nframe3.T  # ËΩ¨ÁΩÆ DataFrameÔºà‰∫§Êç¢Ë°åÂíåÂàóÔºâ\n\n\n\n\n\n\n\n\n2000\n2001\n2002\n\n\n\n\nOhio\n1.5\n1.7\n3.6\n\n\nNevada\nNaN\n2.4\n2.9\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n‰∫§Êç¢Ë°åÂíåÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeindex.name-Âíå-columns.name",
    "href": "qmd/pandas3ed5cn.html#dataframeindex.name-Âíå-columns.name",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöindex.name Âíå columns.name",
    "text": "DataFrameÔºöindex.name Âíå columns.name\n\nframe3.index.name = 'year'    # ËÆæÁΩÆË°åÁ¥¢ÂºïÁöÑÂêçÁß∞\nframe3.columns.name = 'state' # ËÆæÁΩÆÂàóÁ¥¢ÂºïÁöÑÂêçÁß∞\nframe3\n\n\n\n\n\n\n\nstate\nOhio\nNevada\n\n\nyear\n\n\n\n\n\n\n2000\n1.5\nNaN\n\n\n2001\n1.7\n2.4\n\n\n2002\n3.6\n2.9"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeto_numpy",
    "href": "qmd/pandas3ed5cn.html#dataframeto_numpy",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöto_numpy()",
    "text": "DataFrameÔºöto_numpy()\n\nframe3.to_numpy()  # Â∞Ü DataFrame ËΩ¨Êç¢‰∏∫ NumPy Êï∞ÁªÑ\n\narray([[1.5, nan],\n       [1.7, 2.4],\n       [3.6, 2.9]])\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂ∞ÜÊï∞ÊçÆ‰Ωú‰∏∫‰∫åÁª¥ NumPy Êï∞ÁªÑËøîÂõû„ÄÇÂ¶ÇÊûúÂ≠òÂú®Ê∑∑ÂêàÁ±ªÂûãÔºådtype Â∞ÜÈÄÇÂ∫îÊâÄÊúâÂàóÔºåÈÄöÂ∏∏‰∏∫ object„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂØπË±°",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂØπË±°",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢ÂºïÂØπË±°",
    "text": "Á¥¢ÂºïÂØπË±°\n\nobj = pd.Series(np.arange(3), index=['a', 'b', 'c'])\nindex = obj.index  # Ëé∑Âèñ Index ÂØπË±°\nindex\n\nIndex(['a', 'b', 'c'], dtype='object')"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂØπË±°-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂØπË±°-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢ÂºïÂØπË±° (Áª≠)",
    "text": "Á¥¢ÂºïÂØπË±° (Áª≠)\n\nindex[1:]  # ÂØπ Index ÂØπË±°ËøõË°åÂàáÁâáÔºàÁ±ª‰ºº‰∫éÂàóË°®Ôºâ\n\nIndex(['b', 'c'], dtype='object')\n\n\n\n\n\n\n\n\nNote\n\n\n\nÁ¥¢ÂºïÂØπË±°Â≠òÂÇ®ËΩ¥Ê†áÁ≠æÂíåÂÖÉÊï∞ÊçÆ„ÄÇÂÆÉ‰ª¨ÊòØ‰∏çÂèØÂèòÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÁöÑ‰∏çÂèØÂèòÊÄß",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÁöÑ‰∏çÂèØÂèòÊÄß",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢ÂºïÁöÑ‰∏çÂèØÂèòÊÄß",
    "text": "Á¥¢ÂºïÁöÑ‰∏çÂèØÂèòÊÄß\n\nindex[1] = 'd'  # TypeError: Index does not support mutable operations\n\n\n\n\n\n\n\nNote\n\n\n\nÁ¥¢ÂºïÂØπË±°Âú®ÂàõÂª∫Âêé‰∏çËÉΩÊõ¥Êîπ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà",
    "href": "qmd/pandas3ed5cn.html#Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà",
    "text": "Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà\n\nframe3\n\n\n\n\n\n\n\nstate\nOhio\nNevada\n\n\nyear\n\n\n\n\n\n\n2000\n1.5\nNaN\n\n\n2001\n1.7\n2.4\n\n\n2002\n3.6\n2.9"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà (Áª≠)",
    "text": "Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà (Áª≠)\n\n'Ohio' in frame3.columns  # Ê£ÄÊü•ÂàóÊàêÂëòËµÑÊ†º\n\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà (Áª≠)",
    "text": "Á¥¢Âºï‰Ωú‰∏∫Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÈõÜÂêà (Áª≠)\n\n2003 in frame3.index  # Ê£ÄÊü•Ë°åÁ¥¢ÂºïÊàêÂëòËµÑÊ†º\n\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢Âºï",
    "href": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢Âºï",
    "title": "pandasÂÖ•Èó®",
    "section": "ÈáçÊñ∞Á¥¢Âºï",
    "text": "ÈáçÊñ∞Á¥¢Âºï\n\nreindex ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÂØπË±°ÔºõÊï∞ÊçÆ‰ºöÊ†πÊçÆÊñ∞Á¥¢ÂºïËøõË°åË∞ÉÊï¥„ÄÇ\n\n\nobj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])\nobj\n\nd    4.5\nb    7.2\na   -5.3\nc    3.6\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢Âºï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢Âºï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÈáçÊñ∞Á¥¢Âºï (Áª≠)",
    "text": "ÈáçÊñ∞Á¥¢Âºï (Áª≠)\n\nobj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])  # ÈáçÊñ∞Á¥¢Âºï Series\nobj2\n\na   -5.3\nb    7.2\nc    3.6\nd    4.5\ne    NaN\ndtype: float64\n\n\n\n\n\n\n\n\nNote\n\n\n\nreindex ÂàõÂª∫Êñ∞ÁöÑ Series„ÄÇ‰∏∫Áº∫Â§±ÁöÑÁ¥¢ÂºïÂºïÂÖ• NaN„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢ÂºïÊèíÂÄºÁöÑ-method",
    "href": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢ÂºïÊèíÂÄºÁöÑ-method",
    "title": "pandasÂÖ•Èó®",
    "section": "ÈáçÊñ∞Á¥¢ÂºïÔºöÊèíÂÄºÁöÑ method",
    "text": "ÈáçÊñ∞Á¥¢ÂºïÔºöÊèíÂÄºÁöÑ method\n\nobj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])\nobj3\n\n0      blue\n2    purple\n4    yellow\ndtype: object"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢ÂºïÊèíÂÄºÁöÑ-method-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢ÂºïÊèíÂÄºÁöÑ-method-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÈáçÊñ∞Á¥¢ÂºïÔºöÊèíÂÄºÁöÑ method (Áª≠)",
    "text": "ÈáçÊñ∞Á¥¢ÂºïÔºöÊèíÂÄºÁöÑ method (Áª≠)\n\nobj3.reindex(np.arange(6), method='ffill')  # ÂâçÂêëÂ°´ÂÖÖÁº∫Â§±ÂÄº\n\n0      blue\n1      blue\n2    purple\n3    purple\n4    yellow\n5    yellow\ndtype: object\n\n\n\n\n\n\n\n\nNote\n\n\n\nffillÔºàÂâçÂêëÂ°´ÂÖÖÔºâÂ∞ÜÊúÄÂêé‰∏Ä‰∏™ÊúâÊïàÂÄºÂêëÂâç‰º†Êí≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-dataframe-ÈáçÊñ∞Á¥¢Âºï",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-dataframe-ÈáçÊñ∞Á¥¢Âºï",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® DataFrame ÈáçÊñ∞Á¥¢Âºï",
    "text": "‰ΩøÁî® DataFrame ÈáçÊñ∞Á¥¢Âºï\n\nframe = pd.DataFrame(np.arange(9).reshape((3, 3)),\n                     index=['a', 'c', 'd'],\n                     columns=['Ohio', 'Texas', 'California'])\nframe\n\n\n\n\n\n\n\n\nOhio\nTexas\nCalifornia\n\n\n\n\na\n0\n1\n2\n\n\nc\n3\n4\n5\n\n\nd\n6\n7\n8"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-dataframe-ÈáçÊñ∞Á¥¢Âºï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-dataframe-ÈáçÊñ∞Á¥¢Âºï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® DataFrame ÈáçÊñ∞Á¥¢Âºï (Áª≠)",
    "text": "‰ΩøÁî® DataFrame ÈáçÊñ∞Á¥¢Âºï (Áª≠)\n\nframe2 = frame.reindex(index=['a', 'b', 'c', 'd']) # ÈáçÊñ∞Á¥¢ÂºïË°å\nframe2\n\n\n\n\n\n\n\n\nOhio\nTexas\nCalifornia\n\n\n\n\na\n0.0\n1.0\n2.0\n\n\nb\nNaN\nNaN\nNaN\n\n\nc\n3.0\n4.0\n5.0\n\n\nd\n6.0\n7.0\n8.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDataFrame ‰∏äÁöÑ reindex ÂèØ‰ª•Êõ¥ÊîπË°åÁ¥¢Âºï„ÄÅÂàóÊàñ‰∏§ËÄÖ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢ÂºïÂàó",
    "href": "qmd/pandas3ed5cn.html#ÈáçÊñ∞Á¥¢ÂºïÂàó",
    "title": "pandasÂÖ•Èó®",
    "section": "ÈáçÊñ∞Á¥¢ÂºïÂàó",
    "text": "ÈáçÊñ∞Á¥¢ÂºïÂàó\n\nstates = ['Texas', 'Utah', 'California']\nframe.reindex(columns=states)  # ÈáçÊñ∞Á¥¢ÂºïÂàó\n\n\n\n\n\n\n\n\nTexas\nUtah\nCalifornia\n\n\n\n\na\n1\nNaN\n2\n\n\nc\n4\nNaN\n5\n\n\nd\n7\nNaN\n8"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Âà†Èô§Êù°ÁõÆ",
    "href": "qmd/pandas3ed5cn.html#Âà†Èô§Êù°ÁõÆ",
    "title": "pandasÂÖ•Èó®",
    "section": "Âà†Èô§Êù°ÁõÆ",
    "text": "Âà†Èô§Êù°ÁõÆ\n\nobj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])\nobj\n\na    0.0\nb    1.0\nc    2.0\nd    3.0\ne    4.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Âà†Èô§Êù°ÁõÆ-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Âà†Èô§Êù°ÁõÆ-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Âà†Èô§Êù°ÁõÆ (Áª≠)",
    "text": "Âà†Èô§Êù°ÁõÆ (Áª≠)\n\nnew_obj = obj.drop('c')  # Âà†Èô§Êù°ÁõÆ 'c'ÔºàÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ SeriesÔºâ\nnew_obj\n\na    0.0\nb    1.0\nd    3.0\ne    4.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Âà†Èô§Êù°ÁõÆ-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Âà†Èô§Êù°ÁõÆ-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Âà†Èô§Êù°ÁõÆ (Áª≠)",
    "text": "Âà†Èô§Êù°ÁõÆ (Áª≠)\n\nobj.drop(['d', 'c'])  # Âà†Èô§Â§ö‰∏™Êù°ÁõÆ\n\na    0.0\nb    1.0\ne    4.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§",
    "href": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ªé DataFrame ‰∏≠Âà†Èô§",
    "text": "‰ªé DataFrame ‰∏≠Âà†Èô§\n\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndata\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOhio\n0\n1\n2\n3\n\n\nColorado\n4\n5\n6\n7\n\n\nUtah\n8\n9\n10\n11\n\n\nNew York\n12\n13\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ªé DataFrame ‰∏≠Âà†Èô§ (Áª≠)",
    "text": "‰ªé DataFrame ‰∏≠Âà†Èô§ (Áª≠)\n\ndata.drop(index=['Colorado', 'Ohio'])  # ÊåâÁ¥¢ÂºïÊ†áÁ≠æÂà†Èô§Ë°å\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nUtah\n8\n9\n10\n11\n\n\nNew York\n12\n13\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ªé DataFrame ‰∏≠Âà†Èô§ (Áª≠)",
    "text": "‰ªé DataFrame ‰∏≠Âà†Èô§ (Áª≠)\n\ndata.drop(columns=['two']) # ÊåâÂàóÂêçÂà†Èô§Âàó\n\n\n\n\n\n\n\n\none\nthree\nfour\n\n\n\n\nOhio\n0\n2\n3\n\n\nColorado\n4\n6\n7\n\n\nUtah\n8\n10\n11\n\n\nNew York\n12\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#‰ªé-dataframe-‰∏≠Âà†Èô§-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ªé DataFrame ‰∏≠Âà†Èô§ (Áª≠)",
    "text": "‰ªé DataFrame ‰∏≠Âà†Èô§ (Áª≠)\n\ndata.drop('two', axis=1) # ‰ΩøÁî® axis=1 Âà†Èô§ÂàóÔºà‰∏é‰∏äËø∞Áõ∏ÂêåÔºâ\n\n\n\n\n\n\n\n\none\nthree\nfour\n\n\n\n\nOhio\n0\n2\n3\n\n\nColorado\n4\n6\n7\n\n\nUtah\n8\n10\n11\n\n\nNew York\n12\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§\n\nobj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])\nobj\n\na    0.0\nb    1.0\nc    2.0\nd    3.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)\n\nobj['b']  # ÊåâÊ†áÁ≠æÈÄâÊã©\n\nnp.float64(1.0)"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)\n\nobj[1]  # ÊåâÊï¥Êï∞‰ΩçÁΩÆÈÄâÊã©\n\n/tmp/ipykernel_3363/3909875360.py:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  obj[1]  # ÊåâÊï¥Êï∞‰ΩçÁΩÆÈÄâÊã©\n\n\nnp.float64(1.0)"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)\n\nobj[2:4]  # ÂàáÁâá\n\nc    2.0\nd    3.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-3",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-3",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)\n\nobj[['b', 'a', 'd']]  # ÈÄâÊã©Â§ö‰∏™Ê†áÁ≠æ\n\nb    1.0\na    0.0\nd    3.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-4",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-4",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)\n\nobj[[1, 3]]  # ÈÄâÊã©Â§ö‰∏™Êï¥Êï∞‰ΩçÁΩÆ\n\n/tmp/ipykernel_3363/2120319348.py:1: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  obj[[1, 3]]  # ÈÄâÊã©Â§ö‰∏™Êï¥Êï∞‰ΩçÁΩÆ\n\n\nb    1.0\nd    3.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-5",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåËøáÊª§-Áª≠-5",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåËøáÊª§ (Áª≠)\n\nobj[obj &lt; 2]  # Â∏ÉÂ∞îÁ¥¢Âºï\n\na    0.0\nb    1.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢Âºï",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢Âºï",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï",
    "text": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï\n\nlocÔºöÊåâÊ†áÁ≠æÈÄâÊã©„ÄÇ\nilocÔºöÊåâÊï¥Êï∞‰ΩçÁΩÆÈÄâÊã©„ÄÇ\n\n\nobj.loc[['b', 'a', 'd']] # ‰ΩøÁî® loc ÊåâÊ†áÁ≠æÈÄâÊã©\n\nb    1.0\na    0.0\nd    3.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢ÂºïÁª≠",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢ÂºïÁª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï(Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï(Áª≠)\n\nobj1 = pd.Series([1, 2, 3], index=[2, 0, 1])\nobj2 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢ÂºïÁª≠-1",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢ÂºïÁª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï(Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï(Áª≠)\n\nobj1[[0,1,2]] #Â¶ÇÊûúSeriesÁöÑÁ¥¢ÂºïÊòØÊï¥Êï∞,ÂàôÈªòËÆ§ÊåâÊ†áÁ≠æÈÄâÊã©\n\n0    2\n1    3\n2    1\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢ÂºïÁª≠-2",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢ÂºïÁª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï(Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï(Áª≠)\n\nobj2.loc[[0, 1]] # Á¥¢ÂºïÊòØÂ≠óÁ¨¶‰∏≤Ôºå0Âíå1‰∏çÊòØobj2ÁöÑÊ†áÁ≠æÊó∂Ôºå‰ºöÂá∫Èîô"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢Âºï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢Âºï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï (Áª≠)\n\nobj1.iloc[[0, 1, 2]] # iloc ‰ΩøÁî®Êï¥Êï∞‰ΩçÁΩÆ\n\n2    1\n0    2\n1    3\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢Âºï-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-ËøõË°åÁ¥¢Âºï-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc ËøõË°åÁ¥¢Âºï (Áª≠)\n\nobj2.iloc[[0, 1, 2]] # iloc ‰ΩøÁî®Êï¥Êï∞‰ΩçÁΩÆ\n\na    1\nb    2\nc    3\ndtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\n‰ΩøÁî® loc Âíå iloc ÂèØ‰ª•ÈÅøÂÖçÊ≠ß‰πâÔºåÂ∞§ÂÖ∂ÊòØÂú®‰ΩøÁî®Êï¥Êï∞Á¥¢ÂºïÊó∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÂåÖÂê´",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÂåÖÂê´",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÔºàÂåÖÂê´Ôºâ",
    "text": "‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÔºàÂåÖÂê´Ôºâ\n\nobj2.loc['b':'c']  # ÂåÖÊã¨Á´ØÁÇπ ('c')ÔºÅ\n\nb    2\nc    3\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÂåÖÂê´Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÂåÖÂê´Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÔºàÂåÖÂê´Ôºâ(Áª≠)",
    "text": "‰ΩøÁî®Ê†áÁ≠æÂàáÁâáÔºàÂåÖÂê´Ôºâ(Áª≠)\n\nobj2.loc['b':'c'] = 5  # ‰ΩøÁî®Âü∫‰∫éÊ†áÁ≠æÁöÑÂàáÁâáËµãÂÄº\nobj2\n\na    1\nb    5\nc    5\ndtype: int64\n\n\n\n\n\n\n\n\nNote\n\n\n\n‰ΩøÁî® loc ËøõË°åÊ†áÁ≠æÂàáÁâáÂåÖÊã¨Á´ØÁÇπ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂà∞-dataframe-‰∏≠",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂà∞-dataframe-‰∏≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢ÂºïÂà∞ DataFrame ‰∏≠",
    "text": "Á¥¢ÂºïÂà∞ DataFrame ‰∏≠\n\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndata\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOhio\n0\n1\n2\n3\n\n\nColorado\n4\n5\n6\n7\n\n\nUtah\n8\n9\n10\n11\n\n\nNew York\n12\n13\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂà∞-dataframe-‰∏≠-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂà∞-dataframe-‰∏≠-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢ÂºïÂà∞ DataFrame ‰∏≠ (Áª≠)",
    "text": "Á¥¢ÂºïÂà∞ DataFrame ‰∏≠ (Áª≠)\n\ndata['two']  # ÈÄâÊã©Âàó 'two'\n\nOhio         1\nColorado     5\nUtah         9\nNew York    13\nName: two, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂà∞-dataframe-‰∏≠-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Á¥¢ÂºïÂà∞-dataframe-‰∏≠-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Á¥¢ÂºïÂà∞ DataFrame ‰∏≠ (Áª≠)",
    "text": "Á¥¢ÂºïÂà∞ DataFrame ‰∏≠ (Áª≠)\n\ndata[['three', 'one']]  # ÈÄâÊã©Â§öÂàó\n\n\n\n\n\n\n\n\nthree\none\n\n\n\n\nOhio\n2\n0\n\n\nColorado\n6\n4\n\n\nUtah\n10\n8\n\n\nNew York\n14\n12"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ",
    "href": "qmd/pandas3ed5cn.html#dataframeÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ",
    "text": "DataFrameÔºöÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ\n\ndata[:2]  # ÂàáÁâáË°åÔºàÈÄâÊã©Á¨¨ 0 Ë°åÂíåÁ¨¨ 1 Ë°åÔºâ\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOhio\n0\n1\n2\n3\n\n\nColorado\n4\n5\n6\n7"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ-Áª≠",
    "href": "qmd/pandas3ed5cn.html#dataframeÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ (Áª≠)",
    "text": "DataFrameÔºöÁ¥¢ÂºïÁöÑÁâπÊÆäÊÉÖÂÜµ (Áª≠)\n\ndata[data['three'] &gt; 5]  # Â∏ÉÂ∞îÁ¥¢ÂºïÔºàÈÄâÊã© 'three' &gt; 5 ÁöÑË°åÔºâ\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nColorado\n4\n5\n6\n7\n\n\nUtah\n8\n9\n10\n11\n\n\nNew York\n12\n13\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeÂ∏ÉÂ∞îÁ¥¢Âºï",
    "href": "qmd/pandas3ed5cn.html#dataframeÂ∏ÉÂ∞îÁ¥¢Âºï",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöÂ∏ÉÂ∞îÁ¥¢Âºï",
    "text": "DataFrameÔºöÂ∏ÉÂ∞îÁ¥¢Âºï\n\ndata &lt; 5  # ÈÄêÂÖÉÁ¥†ÊØîËæÉÔºàËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞î DataFrameÔºâ\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOhio\nTrue\nTrue\nTrue\nTrue\n\n\nColorado\nTrue\nFalse\nFalse\nFalse\n\n\nUtah\nFalse\nFalse\nFalse\nFalse\n\n\nNew York\nFalse\nFalse\nFalse\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframeÂ∏ÉÂ∞îÁ¥¢Âºï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#dataframeÂ∏ÉÂ∞îÁ¥¢Âºï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrameÔºöÂ∏ÉÂ∞îÁ¥¢Âºï (Áª≠)",
    "text": "DataFrameÔºöÂ∏ÉÂ∞îÁ¥¢Âºï (Áª≠)\n\ndata[data &lt; 5] = 0  # Â∞ÜÂ∞è‰∫é 5 ÁöÑÂÄºËÆæÁΩÆ‰∏∫ 0\ndata\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOhio\n0\n0\n0\n0\n\n\nColorado\n0\n5\n6\n7\n\n\nUtah\n8\n9\n10\n11\n\n\nNew York\n12\n13\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã©",
    "text": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã©\n\ndata.loc['Colorado'] # ÊåâÊ†áÁ≠æÈÄâÊã©‰∏ÄË°å\n\none      0\ntwo      5\nthree    6\nfour     7\nName: Colorado, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)\n\ndata.loc[['Colorado', 'New York']] # ÊåâÊ†áÁ≠æÈÄâÊã©Â§öË°å\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nColorado\n0\n5\n6\n7\n\n\nNew York\n12\n13\n14\n15"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)\n\ndata.loc['Colorado', ['two', 'three']]  # ÊåâÊ†áÁ≠æÈÄâÊã©Ë°åÂíåÂàó\n\ntwo      5\nthree    6\nName: Colorado, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)\n\ndata.iloc[2] # Êåâ‰ΩçÁΩÆÈÄâÊã©‰∏ÄË°å\n\none       8\ntwo       9\nthree    10\nfour     11\nName: Utah, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-3",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-3",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)\n\ndata.iloc[[2, 1]] # Êåâ‰ΩçÁΩÆÈÄâÊã©Â§öË°å\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nUtah\n8\n9\n10\n11\n\n\nColorado\n0\n5\n6\n7"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-4",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-4",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)\n\ndata.iloc[2, [3, 0, 1]] # Êåâ‰ΩçÁΩÆÈÄâÊã©Ë°åÂíåÂàó\n\nfour    11\none      8\ntwo      9\nName: Utah, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-5",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-loc-Âíå-iloc-Âú®-dataframe-‰∏äËøõË°åÈÄâÊã©-Áª≠-5",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)",
    "text": "‰ΩøÁî® loc Âíå iloc Âú® DataFrame ‰∏äËøõË°åÈÄâÊã© (Áª≠)\n\ndata.iloc[[1, 2], [3, 0, 1]] # Êåâ‰ΩçÁΩÆÈÄâÊã©Ë°åÂíåÂàó\n\n\n\n\n\n\n\n\nfour\none\ntwo\n\n\n\n\nColorado\n7\n0\n5\n\n\nUtah\n11\n8\n9"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê",
    "href": "qmd/pandas3ed5cn.html#ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê",
    "title": "pandasÂÖ•Èó®",
    "section": "ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê",
    "text": "ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê\n\nÊâßË°åÁÆóÊúØËøêÁÆóÊó∂ÔºåÊï∞ÊçÆÊåâÁ¥¢ÂºïÊ†áÁ≠æÂØπÈΩê„ÄÇ\nÂú®Ê†áÁ≠æ‰∏çÈáçÂè†ÁöÑÂú∞Êñπ‰ΩøÁî® NaN„ÄÇ\n\n\ns1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'])\ns2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'])"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê (Áª≠)",
    "text": "ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê (Áª≠)\n\ns1\n\na    7.3\nc   -2.5\nd    3.4\ne    1.5\ndtype: float64\n\n\n\ns2\n\na   -2.1\nc    3.6\ne   -1.5\nf    4.0\ng    3.1\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê (Áª≠)",
    "text": "ÁÆóÊúØÂíåÊï∞ÊçÆÂØπÈΩê (Áª≠)\n\ns1 + s2  # Series Áõ∏Âä†ÔºõÊåâÁ¥¢ÂºïÊ†áÁ≠æÂØπÈΩê\n\na    5.2\nc    1.1\nd    NaN\ne    0.0\nf    NaN\ng    NaN\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó",
    "href": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó",
    "text": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó\n\ndf1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('bcd'),\n                   index=['Ohio', 'Texas', 'Colorado'])\ndf2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'),\n                   index=['Utah', 'Ohio', 'Texas', 'Oregon'])"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó-Áª≠",
    "href": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó (Áª≠)",
    "text": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó (Áª≠)\n\ndf1\n\n\n\n\n\n\n\n\nb\nc\nd\n\n\n\n\nOhio\n0.0\n1.0\n2.0\n\n\nTexas\n3.0\n4.0\n5.0\n\n\nColorado\n6.0\n7.0\n8.0"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó (Áª≠)",
    "text": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó (Áª≠)\n\ndf2\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n0.0\n1.0\n2.0\n\n\nOhio\n3.0\n4.0\n5.0\n\n\nTexas\n6.0\n7.0\n8.0\n\n\nOregon\n9.0\n10.0\n11.0"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#dataframe-ÁöÑÁÆóÊúØËøêÁÆó-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó (Áª≠)",
    "text": "DataFrame ÁöÑÁÆóÊúØËøêÁÆó (Áª≠)\n\ndf1 + df2  # DataFrame Áõ∏Âä†ÔºõÊåâË°åÂíåÂàóÊ†áÁ≠æÂØπÈΩê\n\n\n\n\n\n\n\n\nb\nc\nd\ne\n\n\n\n\nColorado\nNaN\nNaN\nNaN\nNaN\n\n\nOhio\n3.0\nNaN\n6.0\nNaN\n\n\nOregon\nNaN\nNaN\nNaN\nNaN\n\n\nTexas\n9.0\nNaN\n12.0\nNaN\n\n\nUtah\nNaN\nNaN\nNaN\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï",
    "text": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï\n\ndf1 = pd.DataFrame(np.arange(12.).reshape((3, 4)),\n                   columns=list('abcd'))\ndf2 = pd.DataFrame(np.arange(20.).reshape((4, 5)),\n                   columns=list('abcde'))\ndf2.loc[1, 'b'] = np.nan  # ÂºïÂÖ•‰∏Ä‰∏™Áº∫Â§±ÂÄº"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï (Áª≠)",
    "text": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï (Áª≠)\n\ndf1\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\n\n\n0\n0.0\n1.0\n2.0\n3.0\n\n\n1\n4.0\n5.0\n6.0\n7.0\n\n\n2\n8.0\n9.0\n10.0\n11.0"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï (Áª≠)",
    "text": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï (Áª≠)\n\ndf2\n\n\n\n\n\n\n\n\na\nb\nc\nd\ne\n\n\n\n\n0\n0.0\n1.0\n2.0\n3.0\n4.0\n\n\n1\n5.0\nNaN\n7.0\n8.0\n9.0\n\n\n2\n10.0\n11.0\n12.0\n13.0\n14.0\n\n\n3\n15.0\n16.0\n17.0\n18.0\n19.0"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï (Áª≠)",
    "text": "ÂÖ∑ÊúâÂ°´ÂÖÖÂÄºÁöÑÁÆóÊúØÊñπÊ≥ï (Áª≠)\n\ndf1 + df2  # Áõ∏Âä†ÔºåÂèØËÉΩ‰∫ßÁîü NaN\n\n\n\n\n\n\n\n\na\nb\nc\nd\ne\n\n\n\n\n0\n0.0\n2.0\n4.0\n6.0\nNaN\n\n\n1\n9.0\nNaN\n13.0\n15.0\nNaN\n\n\n2\n18.0\n20.0\n22.0\n24.0\nNaN\n\n\n3\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNaN Ë°®Á§∫Áº∫Â§±ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-add-Âíå-fill_value",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-add-Âíå-fill_value",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® add Âíå fill_value",
    "text": "‰ΩøÁî® add Âíå fill_value\n\ndf1.add(df2, fill_value=0)  # Áõ∏Âä†ÔºåÂú®Áõ∏Âä†*‰πãÂâç*Áî® 0 Â°´ÂÖÖÁº∫Â§±ÂÄº\n\n\n\n\n\n\n\n\na\nb\nc\nd\ne\n\n\n\n\n0\n0.0\n2.0\n4.0\n6.0\n4.0\n\n\n1\n9.0\n5.0\n13.0\n15.0\n9.0\n\n\n2\n18.0\n20.0\n22.0\n24.0\n14.0\n\n\n3\n15.0\n16.0\n17.0\n18.0\n19.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nfill_value Âú®ËøêÁÆó‰πãÂâçÊõøÊç¢Áº∫Â§±ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÁÅµÊ¥ªÁöÑÁÆóÊúØÊñπÊ≥ï",
    "href": "qmd/pandas3ed5cn.html#ÁÅµÊ¥ªÁöÑÁÆóÊúØÊñπÊ≥ï",
    "title": "pandasÂÖ•Èó®",
    "section": "ÁÅµÊ¥ªÁöÑÁÆóÊúØÊñπÊ≥ï",
    "text": "ÁÅµÊ¥ªÁöÑÁÆóÊúØÊñπÊ≥ï\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nadd, radd\nÂä†Ê≥ï (+)\n\n\nsub, rsub\nÂáèÊ≥ï (-)\n\n\ndiv, rdiv\nÈô§Ê≥ï (/)\n\n\nmul, rmul\n‰πòÊ≥ï (*)\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nr ÊñπÊ≥ïÔºöÂèçËΩ¨ÂèÇÊï∞Ôºà‰æãÂ¶ÇÔºå1 / df1 Á≠â‰ª∑‰∫é df1.rdiv(1)Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó",
    "href": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó",
    "text": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó\n\nframe = pd.DataFrame(np.arange(12.).reshape((4, 3)),\n                     columns=list('bde'),\n                     index=['Utah', 'Ohio', 'Texas', 'Oregon'])\nseries = frame.iloc[0] # Ëé∑ÂèñÁ¨¨‰∏ÄË°å"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó-Áª≠",
    "href": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó (Áª≠)",
    "text": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó (Áª≠)\n\nframe\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n0.0\n1.0\n2.0\n\n\nOhio\n3.0\n4.0\n5.0\n\n\nTexas\n6.0\n7.0\n8.0\n\n\nOregon\n9.0\n10.0\n11.0"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó (Áª≠)",
    "text": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó (Áª≠)\n\nseries\n\nb    0.0\nd    1.0\ne    2.0\nName: Utah, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#dataframe-Âíå-series-‰πãÈó¥ÁöÑËøêÁÆó-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó (Áª≠)",
    "text": "DataFrame Âíå Series ‰πãÈó¥ÁöÑËøêÁÆó (Áª≠)\n\nframe - series  # ‰ªé DataFrame ‰∏≠ÂáèÂéª SeriesÔºàÂπøÊí≠Ôºâ\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n0.0\n0.0\n0.0\n\n\nOhio\n3.0\n3.0\n3.0\n\n\nTexas\n6.0\n6.0\n6.0\n\n\nOregon\n9.0\n9.0\n9.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDataFrame Âíå Series ‰πãÈó¥ÁöÑÁÆóÊúØËøêÁÆóÈªòËÆ§Ê≤øË°åÂπøÊí≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ë∑®ÂàóÂπøÊí≠",
    "href": "qmd/pandas3ed5cn.html#Ë∑®ÂàóÂπøÊí≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ë∑®ÂàóÂπøÊí≠",
    "text": "Ë∑®ÂàóÂπøÊí≠\n\nseries3 = frame['d']  # Ëé∑Âèñ 'd' Âàó\nseries3\n\nUtah       1.0\nOhio       4.0\nTexas      7.0\nOregon    10.0\nName: d, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ë∑®ÂàóÂπøÊí≠-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ë∑®ÂàóÂπøÊí≠-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ë∑®ÂàóÂπøÊí≠ (Áª≠)",
    "text": "Ë∑®ÂàóÂπøÊí≠ (Áª≠)\n\nframe.sub(series3, axis='index')  # ÂåπÈÖçÁ¥¢ÂºïÔºàË°åÔºâÔºåË∑®ÂàóÂπøÊí≠\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n-1.0\n0.0\n1.0\n\n\nOhio\n-1.0\n0.0\n1.0\n\n\nTexas\n-1.0\n0.0\n1.0\n\n\nOregon\n-1.0\n0.0\n1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\naxis='index'ÔºàÊàñ axis=0ÔºâË∑®ÂàóÂπøÊí≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ",
    "href": "qmd/pandas3ed5cn.html#ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ",
    "text": "ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ\n\nframe = pd.DataFrame(np.random.standard_normal((4, 3)),\n                     columns=list('bde'),\n                     index=['Utah', 'Ohio', 'Texas', 'Oregon'])\nframe\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n0.738900\n0.533998\n-0.421569\n\n\nOhio\n-0.517954\n-0.180628\n0.425241\n\n\nTexas\n0.128705\n-0.990548\n-0.332398\n\n\nOregon\n0.868579\n1.981279\n-0.147146"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ (Áª≠)",
    "text": "ÂáΩÊï∞Â∫îÁî®ÂíåÊò†Â∞Ñ (Áª≠)\n\nnp.abs(frame)  # ÈÄêÂÖÉÁ¥†Â∫îÁî® NumPy ÁöÑÁªùÂØπÂÄºÂáΩÊï∞ (ufunc)\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n0.738900\n0.533998\n0.421569\n\n\nOhio\n0.517954\n0.180628\n0.425241\n\n\nTexas\n0.128705\n0.990548\n0.332398\n\n\nOregon\n0.868579\n1.981279\n0.147146"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-apply-Â∫îÁî®ÂáΩÊï∞",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-apply-Â∫îÁî®ÂáΩÊï∞",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® apply Â∫îÁî®ÂáΩÊï∞",
    "text": "‰ΩøÁî® apply Â∫îÁî®ÂáΩÊï∞\n\ndef f1(x):\n    return x.max() - x.min() # ÂÆö‰πâ‰∏Ä‰∏™ÂØπ Series ËøõË°åÊìç‰ΩúÁöÑÂáΩÊï∞\n\nframe.apply(f1)  # Ê≤øÂàóÂ∫îÁî®ÂáΩÊï∞ÔºàÈªòËÆ§ËΩ¥ÊòØ 'index'Ôºâ\n\nb    1.386533\nd    2.971827\ne    0.846811\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-apply-Â∫îÁî®ÂáΩÊï∞-Áª≠",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-apply-Â∫îÁî®ÂáΩÊï∞-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® apply Â∫îÁî®ÂáΩÊï∞ (Áª≠)",
    "text": "‰ΩøÁî® apply Â∫îÁî®ÂáΩÊï∞ (Áª≠)\n\nframe.apply(f1, axis='columns')  # Ê≤øË°åÂ∫îÁî®ÂáΩÊï∞ (axis='columns')\n\nUtah      1.160469\nOhio      0.943195\nTexas     1.119253\nOregon    2.128425\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Â∫îÁî®ËøîÂõû-series-ÁöÑÂáΩÊï∞",
    "href": "qmd/pandas3ed5cn.html#Â∫îÁî®ËøîÂõû-series-ÁöÑÂáΩÊï∞",
    "title": "pandasÂÖ•Èó®",
    "section": "Â∫îÁî®ËøîÂõû Series ÁöÑÂáΩÊï∞",
    "text": "Â∫îÁî®ËøîÂõû Series ÁöÑÂáΩÊï∞\n\ndef f2(x):\n    # ÂÆö‰πâ‰∏Ä‰∏™ËøîÂõûÂ∏¶Êúâ 'min' Âíå 'max' ÁöÑ Series ÁöÑÂáΩÊï∞\n    return pd.Series([x.min(), x.max()], index=['min', 'max'])\n\nframe.apply(f2)\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nmin\n-0.517954\n-0.990548\n-0.421569\n\n\nmax\n0.868579\n1.981279\n0.425241"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#‰ΩøÁî®-applymap-ËøõË°åÈÄêÂÖÉÁ¥†Ê†ºÂºèÂåñ",
    "href": "qmd/pandas3ed5cn.html#‰ΩøÁî®-applymap-ËøõË°åÈÄêÂÖÉÁ¥†Ê†ºÂºèÂåñ",
    "title": "pandasÂÖ•Èó®",
    "section": "‰ΩøÁî® applymap ËøõË°åÈÄêÂÖÉÁ¥†Ê†ºÂºèÂåñ",
    "text": "‰ΩøÁî® applymap ËøõË°åÈÄêÂÖÉÁ¥†Ê†ºÂºèÂåñ\n\ndef my_format(x):\n    return f\"{x:.2f}\"  # ÂÆö‰πâ‰∏Ä‰∏™Ê†ºÂºèÂåñÂáΩÊï∞\n\nframe.applymap(my_format) # ÂØπ DataFrame ÈÄêÂÖÉÁ¥†Â∫îÁî®\n\n/tmp/ipykernel_3363/116467557.py:4: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  frame.applymap(my_format) # ÂØπ DataFrame ÈÄêÂÖÉÁ¥†Â∫îÁî®\n\n\n\n\n\n\n\n\n\nb\nd\ne\n\n\n\n\nUtah\n0.74\n0.53\n-0.42\n\n\nOhio\n-0.52\n-0.18\n0.43\n\n\nTexas\n0.13\n-0.99\n-0.33\n\n\nOregon\n0.87\n1.98\n-0.15\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\napplymap Áî®‰∫é DataFrame ÁöÑÈÄêÂÖÉÁ¥†Êìç‰ΩúÔºõmap Áî®‰∫é Series ÁöÑÈÄêÂÖÉÁ¥†Êìç‰Ωú„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊéíÂ∫è",
    "href": "qmd/pandas3ed5cn.html#ÊéíÂ∫è",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊéíÂ∫è",
    "text": "ÊéíÂ∫è\n\nobj = pd.Series(np.arange(4), index=['d', 'a', 'b', 'c'])\nobj.sort_index()  # ÊåâÁ¥¢ÂºïÊ†áÁ≠æÊéíÂ∫è\n\na    1\nb    2\nc    3\nd    0\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊéíÂ∫è-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÊéíÂ∫è-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊéíÂ∫è (Áª≠)",
    "text": "ÊéíÂ∫è (Áª≠)\n\nframe = pd.DataFrame(np.arange(8).reshape((2, 4)),\n                     index=['three', 'one'],\n                     columns=['d', 'a', 'b', 'c'])\nframe.sort_index() # ÊåâË°åÁ¥¢ÂºïÊéíÂ∫è\n\n\n\n\n\n\n\n\nd\na\nb\nc\n\n\n\n\none\n4\n5\n6\n7\n\n\nthree\n0\n1\n2\n3"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊéíÂ∫è-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ÊéíÂ∫è-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊéíÂ∫è (Áª≠)",
    "text": "ÊéíÂ∫è (Áª≠)\n\nframe.sort_index(axis='columns') # ÊåâÂàóÁ¥¢ÂºïÊéíÂ∫è\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\n\n\nthree\n1\n2\n3\n0\n\n\none\n5\n6\n7\n4"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊéíÂ∫è-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#ÊéíÂ∫è-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊéíÂ∫è (Áª≠)",
    "text": "ÊéíÂ∫è (Áª≠)\n\nframe.sort_index(axis='columns', ascending=False) # ÈôçÂ∫èÊéíÂ∫è\n\n\n\n\n\n\n\n\nd\nc\nb\na\n\n\n\n\nthree\n0\n3\n2\n1\n\n\none\n4\n7\n6\n5"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊåâÂÄºÊéíÂ∫è",
    "href": "qmd/pandas3ed5cn.html#ÊåâÂÄºÊéíÂ∫è",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊåâÂÄºÊéíÂ∫è",
    "text": "ÊåâÂÄºÊéíÂ∫è\n\nobj = pd.Series([4, 7, -3, 2])\nobj.sort_values()  # ÊåâÂÄºÊéíÂ∫è\n\n2   -3\n3    2\n0    4\n1    7\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊåâÂÄºÊéíÂ∫è-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÊåâÂÄºÊéíÂ∫è-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊåâÂÄºÊéíÂ∫è (Áª≠)",
    "text": "ÊåâÂÄºÊéíÂ∫è (Áª≠)\n\nobj = pd.Series([4, np.nan, 7, np.nan, -3, 2])\nobj.sort_values()  # Áº∫Â§±ÂÄº (NaN) ÈªòËÆ§ÊéíÂ∫èÂà∞Êú´Â∞æ\n\n4   -3.0\n5    2.0\n0    4.0\n2    7.0\n1    NaN\n3    NaN\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊåâÂàóÂØπ-dataframe-ÊéíÂ∫è",
    "href": "qmd/pandas3ed5cn.html#ÊåâÂàóÂØπ-dataframe-ÊéíÂ∫è",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊåâÂàóÂØπ DataFrame ÊéíÂ∫è",
    "text": "ÊåâÂàóÂØπ DataFrame ÊéíÂ∫è\n\nframe = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]})\nframe\n\n\n\n\n\n\n\n\nb\na\n\n\n\n\n0\n4\n0\n\n\n1\n7\n1\n\n\n2\n-3\n0\n\n\n3\n2\n1"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊåâÂàóÂØπ-dataframe-ÊéíÂ∫è-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÊåâÂàóÂØπ-dataframe-ÊéíÂ∫è-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊåâÂàóÂØπ DataFrame ÊéíÂ∫è (Áª≠)",
    "text": "ÊåâÂàóÂØπ DataFrame ÊéíÂ∫è (Áª≠)\n\nframe.sort_values('b')  # Êåâ 'b' ÂàóÊéíÂ∫è\n\n\n\n\n\n\n\n\nb\na\n\n\n\n\n2\n-3\n0\n\n\n3\n2\n1\n\n\n0\n4\n0\n\n\n1\n7\n1"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊåâÂàóÂØπ-dataframe-ÊéíÂ∫è-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ÊåâÂàóÂØπ-dataframe-ÊéíÂ∫è-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊåâÂàóÂØπ DataFrame ÊéíÂ∫è (Áª≠)",
    "text": "ÊåâÂàóÂØπ DataFrame ÊéíÂ∫è (Áª≠)\n\nframe.sort_values(['a', 'b'])  # ÊåâÂ§öÂàóÊéíÂ∫èÔºàÂÖà 'a'ÔºåÂÜç 'b'Ôºâ\n\n\n\n\n\n\n\n\nb\na\n\n\n\n\n2\n-3\n0\n\n\n0\n4\n0\n\n\n3\n2\n1\n\n\n1\n7\n1"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊéíÂêç",
    "href": "qmd/pandas3ed5cn.html#ÊéíÂêç",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊéíÂêç",
    "text": "ÊéíÂêç\n\nobj = pd.Series([7, -5, 7, 4, 2, 0, 4])\nobj.rank()  # ÂàÜÈÖçÊéíÂêçÔºàÂπ≥Â±Ä‰ΩøÁî®Âπ≥ÂùáÊéíÂêçÔºâ\n\n0    6.5\n1    1.0\n2    6.5\n3    4.5\n4    3.0\n5    2.0\n6    4.5\ndtype: float64\n\n\n\n\n\n\n\n\nNote\n\n\n\nÊéíÂêçÔºöÂàÜÈÖç‰ªé 1 Âà∞ÊúâÊïàÊï∞ÊçÆÁÇπÊï∞ÈáèÁöÑÊéíÂêç„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊéíÂêçÊñπÊ≥ï",
    "href": "qmd/pandas3ed5cn.html#ÊéíÂêçÊñπÊ≥ï",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊéíÂêçÊñπÊ≥ï",
    "text": "ÊéíÂêçÊñπÊ≥ï\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\naverage\nÈªòËÆ§ÔºöÂπ≥Â±Ä‰ΩøÁî®Âπ≥ÂùáÊéíÂêç\n\n\nmin\n‰ΩøÁî®ÊúÄÂ∞èÊéíÂêç\n\n\nmax\n‰ΩøÁî®ÊúÄÂ§ßÊéíÂêç\n\n\nfirst\nÊåâÂÄºÂá∫Áé∞ÁöÑÈ°∫Â∫èÊéíÂêç"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï",
    "text": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï\n\nobj = pd.Series(np.arange(5), index=['a', 'a', 'b', 'b', 'c'])\nobj\n\na    0\na    1\nb    2\nb    3\nc    4\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï (Áª≠)",
    "text": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï (Áª≠)\n\nobj.index.is_unique  # Ê£ÄÊü•Á¥¢ÂºïÊ†áÁ≠æÊòØÂê¶ÂîØ‰∏Ä\n\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï (Áª≠)",
    "text": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï (Áª≠)\n\nobj['a']  # ËøîÂõû‰∏Ä‰∏™ SeriesÔºàÂõ†‰∏∫ 'a' ÈáçÂ§çÔºâ\n\na    0\na    1\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï (Áª≠)",
    "text": "ÂÖ∑ÊúâÈáçÂ§çÊ†áÁ≠æÁöÑËΩ¥Á¥¢Âºï (Áª≠)\n\nobj['c']  # ËøîÂõû‰∏Ä‰∏™Ê†áÈáèÔºàÂõ†‰∏∫ 'c' ÂîØ‰∏ÄÔºâ\n\nnp.int64(4)"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°",
    "href": "qmd/pandas3ed5cn.html#Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°",
    "text": "Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°\n\ndf = pd.DataFrame([[1.4, np.nan], [7.1, -4.5],\n                   [np.nan, np.nan], [0.75, -1.3]],\n                  index=['a', 'b', 'c', 'd'],\n                  columns=['one', 'two'])\ndf\n\n\n\n\n\n\n\n\none\ntwo\n\n\n\n\na\n1.40\nNaN\n\n\nb\n7.10\n-4.5\n\n\nc\nNaN\nNaN\n\n\nd\n0.75\n-1.3"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ° (Áª≠)",
    "text": "Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ° (Áª≠)\n\ndf.sum()  # ËÆ°ÁÆóÂàóÊÄªÂíå\n\none    9.25\ntwo   -5.80\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ°-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ° (Áª≠)",
    "text": "Ê±áÊÄªÂíåËÆ°ÁÆóÊèèËø∞ÊÄßÁªüËÆ° (Áª≠)\n\ndf.sum(axis='columns')  # ËÆ°ÁÆóË°åÊÄªÂíå\n\na    1.40\nb    2.60\nc    0.00\nd   -0.55\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº",
    "href": "qmd/pandas3ed5cn.html#Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº",
    "title": "pandasÂÖ•Èó®",
    "section": "Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº",
    "text": "Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº\n\ndf.sum(axis='index', skipna=False) # Âú®ËÆ°ÁÆó‰∏≠ÂåÖÂê´ NaN\n\none   NaN\ntwo   NaN\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº (Áª≠)",
    "text": "Â§ÑÁêÜÂΩíÁ∫¶‰∏≠ÁöÑÁº∫Â§±ÂÄº (Áª≠)\n\ndf.mean(axis='columns') # ËÆ°ÁÆóÂπ≥ÂùáÂÄºÔºåÊéíÈô§ NaNÔºàÈªòËÆ§Ôºâ\n\na    1.400\nb    1.300\nc      NaN\nd   -0.275\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊèèËø∞ÊÄßÁªüËÆ°ÂΩíÁ∫¶ÊñπÊ≥ïÁöÑÈÄâÈ°π",
    "href": "qmd/pandas3ed5cn.html#ÊèèËø∞ÊÄßÁªüËÆ°ÂΩíÁ∫¶ÊñπÊ≥ïÁöÑÈÄâÈ°π",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊèèËø∞ÊÄßÁªüËÆ°ÔºöÂΩíÁ∫¶ÊñπÊ≥ïÁöÑÈÄâÈ°π",
    "text": "ÊèèËø∞ÊÄßÁªüËÆ°ÔºöÂΩíÁ∫¶ÊñπÊ≥ïÁöÑÈÄâÈ°π\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\naxis\nËΩ¥ (‚Äòindex‚Äô Ë°®Á§∫Ë°å, ‚Äòcolumns‚Äô Ë°®Á§∫Âàó)\n\n\nskipna\nÊéíÈô§Áº∫Â§±ÂÄº (ÈªòËÆ§‰∏∫ True)"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Èó¥Êé•ÁªüËÆ°",
    "href": "qmd/pandas3ed5cn.html#Èó¥Êé•ÁªüËÆ°",
    "title": "pandasÂÖ•Èó®",
    "section": "Èó¥Êé•ÁªüËÆ°",
    "text": "Èó¥Êé•ÁªüËÆ°\n\ndf.idxmax()  # ÊúÄÂ§ßÂÄºÁöÑÁ¥¢ÂºïÊ†áÁ≠æÔºàÂØπ‰∫éÊØèÂàóÔºâ\n\none    b\ntwo    d\ndtype: object"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Èó¥Êé•ÁªüËÆ°-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Èó¥Êé•ÁªüËÆ°-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Èó¥Êé•ÁªüËÆ° (Áª≠)",
    "text": "Èó¥Êé•ÁªüËÆ° (Áª≠)\n\ndf.cumsum()  # Á¥ØÁßØÂíåÔºàÂØπ‰∫éÊØèÂàóÔºâ\n\n\n\n\n\n\n\n\none\ntwo\n\n\n\n\na\n1.40\nNaN\n\n\nb\n8.50\n-4.5\n\n\nc\nNaN\nNaN\n\n\nd\n9.25\n-5.8"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#describe-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed5cn.html#describe-ÊñπÊ≥ï",
    "title": "pandasÂÖ•Èó®",
    "section": "describe() ÊñπÊ≥ï",
    "text": "describe() ÊñπÊ≥ï\n\ndf.describe()  # ÁîüÊàêÊèèËø∞ÊÄßÁªüËÆ°\n\n\n\n\n\n\n\n\none\ntwo\n\n\n\n\ncount\n3.000000\n2.000000\n\n\nmean\n3.083333\n-2.900000\n\n\nstd\n3.493685\n2.262742\n\n\nmin\n0.750000\n-4.500000\n\n\n25%\n1.075000\n-3.700000\n\n\n50%\n1.400000\n-2.900000\n\n\n75%\n4.250000\n-2.100000\n\n\nmax\n7.100000\n-1.300000"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#describe-ÊñπÊ≥ï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#describe-ÊñπÊ≥ï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "describe() ÊñπÊ≥ï (Áª≠)",
    "text": "describe() ÊñπÊ≥ï (Áª≠)\n\nobj = pd.Series(['a', 'a', 'b', 'c'] * 4)\nobj.describe() # ÈùûÊï∞ÂÄºÊï∞ÊçÆÁöÑÊèèËø∞ÊÄßÁªüËÆ°\n\ncount     16\nunique     3\ntop        a\nfreq       8\ndtype: object"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊèèËø∞ÊÄßÂíåÊ±áÊÄªÁªüËÆ°",
    "href": "qmd/pandas3ed5cn.html#ÊèèËø∞ÊÄßÂíåÊ±áÊÄªÁªüËÆ°",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊèèËø∞ÊÄßÂíåÊ±áÊÄªÁªüËÆ°",
    "text": "ÊèèËø∞ÊÄßÂíåÊ±áÊÄªÁªüËÆ°\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\ncount\nÈùû NA ÂÄºÁöÑÊï∞Èáè\n\n\ndescribe\nËÆ°ÁÆó‰∏ÄÁªÑÊ±áÊÄªÁªüËÆ°\n\n\nmin, max\nËÆ°ÁÆóÊúÄÂ∞èÂÄºÂíåÊúÄÂ§ßÂÄº\n\n\nidxmin, idxmax\nËÆ°ÁÆóËææÂà∞ÊúÄÂ∞èÂÄº/ÊúÄÂ§ßÂÄºÁöÑÁ¥¢ÂºïÊ†áÁ≠æ\n\n\nquantile\nËÆ°ÁÆóÊ†∑Êú¨ÂàÜ‰ΩçÊï∞ (0 Âà∞ 1)\n\n\nsum\nÊ±ÇÂíå\n\n\nmean\nÂπ≥ÂùáÂÄº\n\n\nmedian\n‰∏≠‰ΩçÊï∞ (50% ÂàÜ‰ΩçÊï∞)\n\n\n‚Ä¶\n‚Ä¶"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ",
    "href": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ",
    "title": "pandasÂÖ•Èó®",
    "section": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ",
    "text": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ\nÈ¶ñÂÖàÂä†ËΩΩÊï∞ÊçÆ\n\nprice = pd.read_pickle('examples/yahoo_price.pkl')\nvolume = pd.read_pickle('examples/yahoo_volume.pkl')"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ-Áª≠",
    "href": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ (Áª≠)",
    "text": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ (Áª≠)\n\nreturns = price.pct_change() # ÂèòÂåñÁôæÂàÜÊØî\nreturns.tail()\n\n\n\n\n\n\n\n\nAAPL\nGOOG\nIBM\nMSFT\n\n\nDate\n\n\n\n\n\n\n\n\n2016-10-17\n-0.000680\n0.001837\n0.002072\n-0.003483\n\n\n2016-10-18\n-0.000681\n0.019616\n-0.026168\n0.007690\n\n\n2016-10-19\n-0.002979\n0.007846\n0.003583\n-0.002255\n\n\n2016-10-20\n-0.000512\n-0.005652\n0.001719\n-0.004867\n\n\n2016-10-21\n-0.003930\n0.003011\n-0.012474\n0.042096"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ (Áª≠)",
    "text": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ (Áª≠)\n\nreturns['MSFT'].corr(returns['IBM']) # MSFT Âíå IBM Êî∂ÁõäÁéá‰πãÈó¥ÁöÑÁõ∏ÂÖ≥ÊÄß\n\nnp.float64(0.49976361144151144)"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ-Áª≠-2",
    "href": "qmd/pandas3ed5cn.html#Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ-Áª≠-2",
    "title": "pandasÂÖ•Èó®",
    "section": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ (Áª≠)",
    "text": "Áõ∏ÂÖ≥ÊÄßÂíåÂçèÊñπÂ∑Æ (Áª≠)\n\nreturns['MSFT'].cov(returns['IBM'])  # MSFT Âíå IBM Êî∂ÁõäÁéá‰πãÈó¥ÁöÑÂçèÊñπÂ∑Æ\n\nnp.float64(8.870655479703546e-05)\n\n\n\n\n\n\n\n\nNote\n\n\n\ncorrÔºöÁõ∏ÂÖ≥ÊÄß„ÄÇcovÔºöÂçèÊñπÂ∑Æ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#dataframe-‰∏äÁöÑ-corr-Âíå-cov",
    "href": "qmd/pandas3ed5cn.html#dataframe-‰∏äÁöÑ-corr-Âíå-cov",
    "title": "pandasÂÖ•Èó®",
    "section": "DataFrame ‰∏äÁöÑ corr Âíå cov",
    "text": "DataFrame ‰∏äÁöÑ corr Âíå cov\n\nreturns.corr()  # Áõ∏ÂÖ≥Áü©Èòµ\n\n\n\n\n\n\n\n\nAAPL\nGOOG\nIBM\nMSFT\n\n\n\n\nAAPL\n1.000000\n0.407919\n0.386817\n0.389695\n\n\nGOOG\n0.407919\n1.000000\n0.405099\n0.465919\n\n\nIBM\n0.386817\n0.405099\n1.000000\n0.499764\n\n\nMSFT\n0.389695\n0.465919\n0.499764\n1.000000"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#corr-Âíå-cov-on-dataframe-Áª≠",
    "href": "qmd/pandas3ed5cn.html#corr-Âíå-cov-on-dataframe-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "corr Âíå cov on DataFrame (Áª≠)",
    "text": "corr Âíå cov on DataFrame (Áª≠)\n\nreturns.cov()  # ÂçèÊñπÂ∑ÆÁü©Èòµ\n\n\n\n\n\n\n\n\nAAPL\nGOOG\nIBM\nMSFT\n\n\n\n\nAAPL\n0.000277\n0.000107\n0.000078\n0.000095\n\n\nGOOG\n0.000107\n0.000251\n0.000078\n0.000108\n\n\nIBM\n0.000078\n0.000078\n0.000146\n0.000089\n\n\nMSFT\n0.000095\n0.000108\n0.000089\n0.000215"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#corrwith-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed5cn.html#corrwith-ÊñπÊ≥ï",
    "title": "pandasÂÖ•Èó®",
    "section": "corrwith ÊñπÊ≥ï",
    "text": "corrwith ÊñπÊ≥ï\n\nreturns.corrwith(returns['IBM'])  # ‰∏é IBM Êî∂ÁõäÁéáÁöÑÊàêÂØπÁõ∏ÂÖ≥ÊÄß\n\nAAPL    0.386817\nGOOG    0.405099\nIBM     1.000000\nMSFT    0.499764\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#corrwith-ÊñπÊ≥ï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#corrwith-ÊñπÊ≥ï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "corrwith ÊñπÊ≥ï (Áª≠)",
    "text": "corrwith ÊñπÊ≥ï (Áª≠)\n\nreturns.corrwith(volume)  # ‰∏éÊàê‰∫§ÈáèÁöÑÊàêÂØπÁõ∏ÂÖ≥ÊÄß\n\nAAPL   -0.075565\nGOOG   -0.007067\nIBM    -0.204849\nMSFT   -0.092950\ndtype: float64\n\n\n\n\n\n\n\n\nNote\n\n\n\nËÆ°ÁÆóÊàêÂØπÁõ∏ÂÖ≥ÊÄß„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂîØ‰∏ÄÂÄºÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º",
    "href": "qmd/pandas3ed5cn.html#ÂîØ‰∏ÄÂÄºÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂîØ‰∏ÄÂÄº„ÄÅÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º",
    "text": "ÂîØ‰∏ÄÂÄº„ÄÅÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º\n\nobj = pd.Series(['c', 'a', 'd', 'a', 'a', 'b', 'b', 'c', 'c'])\nuniques = obj.unique()  # Ëé∑ÂèñÂîØ‰∏ÄÂÄº\nuniques\n\narray(['c', 'a', 'd', 'b'], dtype=object)"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂîØ‰∏ÄÂÄºÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º-Áª≠",
    "href": "qmd/pandas3ed5cn.html#ÂîØ‰∏ÄÂÄºÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂîØ‰∏ÄÂÄº„ÄÅÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º (Áª≠)",
    "text": "ÂîØ‰∏ÄÂÄº„ÄÅÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º (Áª≠)\n\nobj.value_counts()  # ËÆ°ÁÆóÊØè‰∏™ÂÄºÁöÑÂá∫Áé∞Ê¨°Êï∞\n\nc    3\na    3\nb    2\nd    1\nName: count, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÂîØ‰∏ÄÂÄºÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º-Áª≠-1",
    "href": "qmd/pandas3ed5cn.html#ÂîØ‰∏ÄÂÄºÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º-Áª≠-1",
    "title": "pandasÂÖ•Èó®",
    "section": "ÂîØ‰∏ÄÂÄº„ÄÅÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º (Áª≠)",
    "text": "ÂîØ‰∏ÄÂÄº„ÄÅÂÄºËÆ°Êï∞ÂíåÊàêÂëòËµÑÊ†º (Áª≠)\n\npd.value_counts(obj.to_numpy(), sort=False) #‰ΩøÁî®pd.value_counts()\n\n/tmp/ipykernel_3363/2588954155.py:1: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n  pd.value_counts(obj.to_numpy(), sort=False) #‰ΩøÁî®pd.value_counts()\n\n\nc    3\na    3\nd    1\nb    2\nName: count, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#isin-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed5cn.html#isin-ÊñπÊ≥ï",
    "title": "pandasÂÖ•Èó®",
    "section": "isin ÊñπÊ≥ï",
    "text": "isin ÊñπÊ≥ï\n\nobj\n\n0    c\n1    a\n2    d\n3    a\n4    a\n5    b\n6    b\n7    c\n8    c\ndtype: object"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#isin-ÊñπÊ≥ïÁª≠",
    "href": "qmd/pandas3ed5cn.html#isin-ÊñπÊ≥ïÁª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "isin ÊñπÊ≥ï(Áª≠)",
    "text": "isin ÊñπÊ≥ï(Áª≠)\n\nmask = obj.isin(['b', 'c'])  # Ê£ÄÊü•ÊòØÂê¶Â±û‰∫é ['b', 'c']\nmask\n\n0     True\n1    False\n2    False\n3    False\n4    False\n5     True\n6     True\n7     True\n8     True\ndtype: bool"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#isin-ÊñπÊ≥ï-Áª≠",
    "href": "qmd/pandas3ed5cn.html#isin-ÊñπÊ≥ï-Áª≠",
    "title": "pandasÂÖ•Èó®",
    "section": "isin ÊñπÊ≥ï (Áª≠)",
    "text": "isin ÊñπÊ≥ï (Áª≠)\n\nobj[mask]  # ÈÄâÊã© mask ‰∏∫ True ÁöÑÂÖÉÁ¥†\n\n0    c\n5    b\n6    b\n7    c\n8    c\ndtype: object\n\n\n\n\n\n\n\n\nNote\n\n\n\nisinÔºöÊ£ÄÊü•ÊàêÂëòËµÑÊ†º„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed5cn.html#ÊÄªÁªì",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nÊàë‰ª¨Â≠¶‰π†‰∫Ü pandas ÁöÑÂü∫Á°ÄÊï∞ÊçÆÁªìÊûÑÔºöSeries Âíå DataFrame„ÄÇ\nÊéåÊè°‰∫ÜÂÖ≥ÈîÆÊìç‰ΩúÔºöÁ¥¢Âºï„ÄÅÈÄâÊã©„ÄÅËøáÊª§„ÄÅÁÆóÊúØËøêÁÆó„ÄÅÂáΩÊï∞Â∫îÁî®„ÄÅÊéíÂ∫è„ÄÅÊéíÂêç‰ª•ÂèäÊèèËø∞ÊÄßÁªüËÆ°„ÄÇ\n‰∫ÜËß£‰∫ÜÂ¶Ç‰ΩïÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed5cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed5cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "pandasÂÖ•Èó®",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫\n\nÂØπÊØî pandas ÂíåÂÖ∂‰ªñÊï∞ÊçÆÂàÜÊûêÂ∑•ÂÖ∑ (‰æãÂ¶Ç Excel, R)ÔºåÂêÑËá™ÁöÑ‰ºòÂäøÂíåÂä£ÂäøÊòØ‰ªÄ‰πàÔºü\nÂú®ÂÆûÈôÖÂ∑•‰Ωú‰∏≠ÔºåÊúâÂì™‰∫õ pandas ÁöÑÂ∫îÁî®Âú∫ÊôØÔºü\npandas ÊúâÂì™‰∫õÂ±ÄÈôêÊÄßÔºü Âú®‰ªÄ‰πàÊÉÖÂÜµ‰∏ãÂ∫îËØ•ÈÄâÊã©ÂÖ∂‰ªñÂ∑•ÂÖ∑Ôºü\nÊï∞ÊçÆÂØπÈΩêÂíåÂπøÊí≠Âú® pandas ‰∏≠‰∏∫‰ΩïÂ¶ÇÊ≠§ÈáçË¶ÅÔºü"
  },
  {
    "objectID": "qmd/pandas3ed1.html",
    "href": "qmd/pandas3ed1.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This book focuses on the practical aspects of data manipulation, processing, cleaning, and crunching in Python. It equips you with the essential Python programming skills, libraries, and tools necessary to become an effective data analyst."
  },
  {
    "objectID": "qmd/pandas3ed1.html#what-is-this-book-about",
    "href": "qmd/pandas3ed1.html#what-is-this-book-about",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This book focuses on the practical aspects of data manipulation, processing, cleaning, and crunching in Python. It equips you with the essential Python programming skills, libraries, and tools necessary to become an effective data analyst."
  },
  {
    "objectID": "qmd/pandas3ed1.html#what-is-this-book-about-cont.",
    "href": "qmd/pandas3ed1.html#what-is-this-book-about-cont.",
    "title": "Python for Data Analysis",
    "section": "What Is This Book About? (Cont.)",
    "text": "What Is This Book About? (Cont.)\n\nGoal: Provide a guide to the parts of Python and its data-oriented libraries that are crucial for data analysis.\nFocus: Emphasizes Python programming, libraries, and tools rather than data analysis methodologies.\nAnalogy: Think of this book as learning the mechanics of a car (Python and its tools) rather than learning how to drive on different terrains (data analysis methods)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#what-is-this-book-about-cont.-1",
    "href": "qmd/pandas3ed1.html#what-is-this-book-about-cont.-1",
    "title": "Python for Data Analysis",
    "section": "What Is This Book About? (Cont.)",
    "text": "What Is This Book About? (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nWhile the book is titled ‚ÄúData Analysis,‚Äù it centers on the Python tools needed for data analysis, not the analysis techniques themselves. It‚Äôs like learning how to use a hammer, saw, and drill before building a house. üî®ü™öü™õ"
  },
  {
    "objectID": "qmd/pandas3ed1.html#data-science-an-umbrella-term",
    "href": "qmd/pandas3ed1.html#data-science-an-umbrella-term",
    "title": "Python for Data Analysis",
    "section": "Data Science: An Umbrella Term ‚òÇÔ∏è",
    "text": "Data Science: An Umbrella Term ‚òÇÔ∏è\nSince the book‚Äôs original publication in 2012, the term ‚Äúdata science‚Äù has become widely used. It encompasses a broad range of activities, from basic descriptive statistics to sophisticated statistical analysis and machine learning."
  },
  {
    "objectID": "qmd/pandas3ed1.html#data-science-an-umbrella-term-cont.",
    "href": "qmd/pandas3ed1.html#data-science-an-umbrella-term-cont.",
    "title": "Python for Data Analysis",
    "section": "Data Science: An Umbrella Term (Cont.)",
    "text": "Data Science: An Umbrella Term (Cont.)\n\nData Science Evolution: The field, and Python‚Äôs role in it, has grown significantly.\nExpanded Ecosystem: Many new Python libraries and tools have emerged, supporting more advanced data science methodologies.\nFoundation: This book provides the fundamental Python skills needed to explore more specialized data science resources."
  },
  {
    "objectID": "qmd/pandas3ed1.html#data-science-an-umbrella-term-cont.-1",
    "href": "qmd/pandas3ed1.html#data-science-an-umbrella-term-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Data Science: An Umbrella Term (Cont.)",
    "text": "Data Science: An Umbrella Term (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nThink of ‚ÄúData Science‚Äù as a big umbrella covering various disciplines like statistics, machine learning, data visualization, and more. This book provides the handle (Python skills) to hold that umbrella!"
  },
  {
    "objectID": "qmd/pandas3ed1.html#data-wranglingmunging",
    "href": "qmd/pandas3ed1.html#data-wranglingmunging",
    "title": "Python for Data Analysis",
    "section": "Data Wrangling/Munging ü§º",
    "text": "Data Wrangling/Munging ü§º\nA significant portion of data analysis involves data manipulation, also referred to as data wrangling or data munging. These terms all describe the process of transforming and preparing data for analysis."
  },
  {
    "objectID": "qmd/pandas3ed1.html#data-wranglingmunging-cont.",
    "href": "qmd/pandas3ed1.html#data-wranglingmunging-cont.",
    "title": "Python for Data Analysis",
    "section": "Data Wrangling/Munging (Cont.)",
    "text": "Data Wrangling/Munging (Cont.)\n\nData Manipulation: The core process of transforming raw data into a usable format.\nSynonyms: Wrangling and munging are interchangeable terms for data manipulation.\nImportance: This is a crucial step, as real-world data is often messy and needs cleaning before it can be analyzed."
  },
  {
    "objectID": "qmd/pandas3ed1.html#data-wranglingmunging-cont.-1",
    "href": "qmd/pandas3ed1.html#data-wranglingmunging-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Data Wrangling/Munging (Cont.)",
    "text": "Data Wrangling/Munging (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nImagine you have a box of LEGO bricks scattered all over the floor. Data wrangling is like sorting and organizing those bricks by color, size, and shape before you can start building something meaningful. üß±"
  },
  {
    "objectID": "qmd/pandas3ed1.html#what-kinds-of-data",
    "href": "qmd/pandas3ed1.html#what-kinds-of-data",
    "title": "Python for Data Analysis",
    "section": "What Kinds of Data? üóÇÔ∏è",
    "text": "What Kinds of Data? üóÇÔ∏è\nThe book primarily focuses on structured data, which includes various common forms of data:\n\nTabular Data: Spreadsheet-like data with columns of different types (text, numbers, dates, etc.). This is the most common type and includes data from relational databases (like SQL) and CSV files."
  },
  {
    "objectID": "qmd/pandas3ed1.html#what-kinds-of-data-cont.",
    "href": "qmd/pandas3ed1.html#what-kinds-of-data-cont.",
    "title": "Python for Data Analysis",
    "section": "What Kinds of Data? (Cont.)",
    "text": "What Kinds of Data? (Cont.)\n\nMultidimensional Arrays: Matrices, often used in numerical computations.\nMultiple Tables: Data spread across multiple related tables, linked by key columns (like in relational databases)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#what-kinds-of-data-cont.-1",
    "href": "qmd/pandas3ed1.html#what-kinds-of-data-cont.-1",
    "title": "Python for Data Analysis",
    "section": "What Kinds of Data? (Cont.)",
    "text": "What Kinds of Data? (Cont.)\n\nTime Series: Data points collected over time, either at regular or irregular intervals."
  },
  {
    "objectID": "qmd/pandas3ed1.html#what-kinds-of-data-cont.-2",
    "href": "qmd/pandas3ed1.html#what-kinds-of-data-cont.-2",
    "title": "Python for Data Analysis",
    "section": "What Kinds of Data? (Cont.)",
    "text": "What Kinds of Data? (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nEven unstructured data (like a collection of news articles) can often be transformed into a structured form (like a word frequency table) for analysis. Think of it like turning a pile of ingredients (unstructured data) into a neatly organized recipe (structured data). üç≤‚û°Ô∏èüìù"
  },
  {
    "objectID": "qmd/pandas3ed1.html#example-structured-data-tabular",
    "href": "qmd/pandas3ed1.html#example-structured-data-tabular",
    "title": "Python for Data Analysis",
    "section": "Example: Structured Data (Tabular)",
    "text": "Example: Structured Data (Tabular)\n\n\n\nCustomerID\nName\nCity\nOrderDate\nTotalAmount\n\n\n\n\n1\nAlice\nNew York\n2023-10-26\n120.00\n\n\n2\nBob\nLondon\n2023-10-27\n250.50\n\n\n3\nCharlie\nParis\n2023-10-27\n75.25\n\n\n4\nAlice\nNew York\n2023-10-28\n180.00"
  },
  {
    "objectID": "qmd/pandas3ed1.html#example-structured-data-tabular-cont.",
    "href": "qmd/pandas3ed1.html#example-structured-data-tabular-cont.",
    "title": "Python for Data Analysis",
    "section": "Example: Structured Data (Tabular) (Cont.)",
    "text": "Example: Structured Data (Tabular) (Cont.)\n\nColumns: Represent different attributes (CustomerID, Name, City, etc.).\nRows: Represent individual records or observations (each customer‚Äôs order).\nData Types: Each column can hold a different type of data (integer, text, date, numeric)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#why-python-for-data-analysis",
    "href": "qmd/pandas3ed1.html#why-python-for-data-analysis",
    "title": "Python for Data Analysis",
    "section": "Why Python for Data Analysis? üêç",
    "text": "Why Python for Data Analysis? üêç\nPython has become extremely popular for data analysis due to several key advantages:\n\nInterpreted Language: Easier to learn and use, promoting rapid development and experimentation.\nLarge and Active Community: A vast network of users and developers provides support, libraries, and tools."
  },
  {
    "objectID": "qmd/pandas3ed1.html#why-python-for-data-analysis-cont.",
    "href": "qmd/pandas3ed1.html#why-python-for-data-analysis-cont.",
    "title": "Python for Data Analysis",
    "section": "Why Python for Data Analysis? (Cont.)",
    "text": "Why Python for Data Analysis? (Cont.)\n\nRich Ecosystem of Libraries: Powerful libraries like NumPy, pandas, and scikit-learn simplify complex data analysis tasks.\nGeneral-Purpose Language: Suitable for both data analysis and building complete data-driven applications.\nGlue Language: Excellent for integrating with existing code and systems (often written in C, C++, or FORTRAN)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#why-python-for-data-analysis-cont.-1",
    "href": "qmd/pandas3ed1.html#why-python-for-data-analysis-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Why Python for Data Analysis? (Cont.)",
    "text": "Why Python for Data Analysis? (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nPython is like a Swiss Army knife for data analysis: versatile, with many tools for different tasks, and easy to use. üî™üõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed1.html#python-as-glue",
    "href": "qmd/pandas3ed1.html#python-as-glue",
    "title": "Python for Data Analysis",
    "section": "Python as ‚ÄúGlue‚Äù üîó",
    "text": "Python as ‚ÄúGlue‚Äù üîó\nA significant advantage of Python is its ability to act as ‚Äúglue code,‚Äù connecting different software components and systems, especially legacy code written in languages like C, C++, and FORTRAN."
  },
  {
    "objectID": "qmd/pandas3ed1.html#python-as-glue-cont.",
    "href": "qmd/pandas3ed1.html#python-as-glue-cont.",
    "title": "Python for Data Analysis",
    "section": "Python as ‚ÄúGlue‚Äù (Cont.)",
    "text": "Python as ‚ÄúGlue‚Äù (Cont.)\n\nIntegration: Easily integrates with existing codebases, particularly those used in scientific computing.\nLegacy Systems: Allows organizations to leverage existing investments in older software while benefiting from Python‚Äôs data analysis capabilities.\nOptimization: ‚ÄúGlue code‚Äù in Python can connect to optimized, low-level code (e.g., C libraries) for performance-critical computations."
  },
  {
    "objectID": "qmd/pandas3ed1.html#python-as-glue-cont.-1",
    "href": "qmd/pandas3ed1.html#python-as-glue-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Python as ‚ÄúGlue‚Äù (Cont.)",
    "text": "Python as ‚ÄúGlue‚Äù (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nThink of Python as the universal adapter that allows you to connect different types of plugs (software components) into the same socket (your data analysis workflow). üîå"
  },
  {
    "objectID": "qmd/pandas3ed1.html#the-two-language-problem-and-pythons-solution",
    "href": "qmd/pandas3ed1.html#the-two-language-problem-and-pythons-solution",
    "title": "Python for Data Analysis",
    "section": "The ‚ÄúTwo-Language‚Äù Problem and Python‚Äôs Solution ‚úåÔ∏è",
    "text": "The ‚ÄúTwo-Language‚Äù Problem and Python‚Äôs Solution ‚úåÔ∏è\nTraditionally, data analysis often involved a ‚Äútwo-language problem‚Äù:\n\nResearch/Prototyping: Using specialized languages like R or MATLAB for initial exploration and model development.\nProduction: Rewriting the code in a different language (e.g., Java, C++) for deployment in larger systems."
  },
  {
    "objectID": "qmd/pandas3ed1.html#the-two-language-problem-pythons-solution",
    "href": "qmd/pandas3ed1.html#the-two-language-problem-pythons-solution",
    "title": "Python for Data Analysis",
    "section": "The ‚ÄúTwo-Language‚Äù Problem: Python‚Äôs Solution",
    "text": "The ‚ÄúTwo-Language‚Äù Problem: Python‚Äôs Solution\nPython solves this problem by being suitable for both research/prototyping and production:\n\nSingle Environment: Reduces the need to maintain separate development environments.\nEfficiency: Saves time and resources by using the same language throughout the entire process."
  },
  {
    "objectID": "qmd/pandas3ed1.html#the-two-language-problem-pythons-solution-cont.",
    "href": "qmd/pandas3ed1.html#the-two-language-problem-pythons-solution-cont.",
    "title": "Python for Data Analysis",
    "section": "The ‚ÄúTwo-Language‚Äù Problem: Python‚Äôs Solution (Cont.)",
    "text": "The ‚ÄúTwo-Language‚Äù Problem: Python‚Äôs Solution (Cont.)\n\nCollaboration: Facilitates collaboration between researchers and software engineers, who can now use the same tools.\nJIT Compilers: Libraries like Numba provide ‚Äújust-in-time‚Äù compilation, significantly improving performance without leaving the Python environment."
  },
  {
    "objectID": "qmd/pandas3ed1.html#the-two-language-problem-pythons-solution-cont.-1",
    "href": "qmd/pandas3ed1.html#the-two-language-problem-pythons-solution-cont.-1",
    "title": "Python for Data Analysis",
    "section": "The ‚ÄúTwo-Language‚Äù Problem: Python‚Äôs Solution (Cont.)",
    "text": "The ‚ÄúTwo-Language‚Äù Problem: Python‚Äôs Solution (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nPython bridges the gap between research and production, allowing for a smoother, more efficient workflow. It‚Äôs like having a single language that everyone on a team, from data scientists to software engineers, can understand and use. üåâ"
  },
  {
    "objectID": "qmd/pandas3ed1.html#why-not-python",
    "href": "qmd/pandas3ed1.html#why-not-python",
    "title": "Python for Data Analysis",
    "section": "Why Not Python? üö´",
    "text": "Why Not Python? üö´\nWhile Python excels in many areas, there are situations where it might not be the ideal choice:\n\nPerformance-Critical Applications: For applications requiring extremely low latency or highly demanding resource utilization (e.g., high-frequency trading), compiled languages like C++ might be more appropriate."
  },
  {
    "objectID": "qmd/pandas3ed1.html#why-not-python-cont.",
    "href": "qmd/pandas3ed1.html#why-not-python-cont.",
    "title": "Python for Data Analysis",
    "section": "Why Not Python? (Cont.)",
    "text": "Why Not Python? (Cont.)\n\nConcurrency and the GIL: Python‚Äôs Global Interpreter Lock (GIL) can limit true multithreading in CPU-bound applications. However, workarounds exist (e.g., using C extensions or multiprocessing)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#why-not-python-cont.-1",
    "href": "qmd/pandas3ed1.html#why-not-python-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Why Not Python? (Cont.)",
    "text": "Why Not Python? (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nThe GIL in Python is like a single-lane road that allows only one car (thread) to pass at a time, even if you have multiple cars (cores) available. This can be a bottleneck for some CPU-intensive tasks. But, you can use bypass like C-extension. üõ£Ô∏èüöó"
  },
  {
    "objectID": "qmd/pandas3ed1.html#essential-python-libraries",
    "href": "qmd/pandas3ed1.html#essential-python-libraries",
    "title": "Python for Data Analysis",
    "section": "Essential Python Libraries üìö",
    "text": "Essential Python Libraries üìö\nThis section introduces some of the core Python libraries that are fundamental to data analysis."
  },
  {
    "objectID": "qmd/pandas3ed1.html#numpy-numerical-python",
    "href": "qmd/pandas3ed1.html#numpy-numerical-python",
    "title": "Python for Data Analysis",
    "section": "NumPy: Numerical Python",
    "text": "NumPy: Numerical Python\nNumPy is the foundation for numerical computing in Python. It provides:\n\nndarray: A fast and efficient multidimensional array object for storing and manipulating numerical data.\nMathematical Functions: A wide range of functions for performing element-wise operations on arrays and mathematical computations between arrays."
  },
  {
    "objectID": "qmd/pandas3ed1.html#numpy-numerical-python-cont.",
    "href": "qmd/pandas3ed1.html#numpy-numerical-python-cont.",
    "title": "Python for Data Analysis",
    "section": "NumPy: Numerical Python (Cont.)",
    "text": "NumPy: Numerical Python (Cont.)\n\nLinear Algebra, Fourier Transforms, Random Number Generation: Essential tools for scientific computing and data analysis.\nData Container: Serves as an efficient container for passing data between algorithms and libraries.\nC API: Allow to connect with C, C++, and FORTRAN."
  },
  {
    "objectID": "qmd/pandas3ed1.html#numpy-numerical-python-cont.-1",
    "href": "qmd/pandas3ed1.html#numpy-numerical-python-cont.-1",
    "title": "Python for Data Analysis",
    "section": "NumPy: Numerical Python (Cont.)",
    "text": "NumPy: Numerical Python (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nThink of NumPy‚Äôs ndarray as a highly optimized container for numbers, like a super-efficient spreadsheet designed for fast calculations. üî¢üöÄ"
  },
  {
    "objectID": "qmd/pandas3ed1.html#pandas-data-manipulation-and-analysis",
    "href": "qmd/pandas3ed1.html#pandas-data-manipulation-and-analysis",
    "title": "Python for Data Analysis",
    "section": "pandas: Data Manipulation and Analysis",
    "text": "pandas: Data Manipulation and Analysis\npandas builds upon NumPy to provide high-level data structures and functions for working with structured or tabular data. Key features include:\n\nDataFrame: A tabular, column-oriented data structure with row and column labels (similar to a spreadsheet or SQL table).\nSeries: A one-dimensional labeled array object."
  },
  {
    "objectID": "qmd/pandas3ed1.html#pandas-data-manipulation-and-analysis-cont.",
    "href": "qmd/pandas3ed1.html#pandas-data-manipulation-and-analysis-cont.",
    "title": "Python for Data Analysis",
    "section": "pandas: Data Manipulation and Analysis (Cont.)",
    "text": "pandas: Data Manipulation and Analysis (Cont.)\n\nData Alignment: Automatic or explicit data alignment based on labels, preventing common errors caused by misaligned data.\nData Manipulation: Tools for reshaping, slicing, dicing, aggregating, and selecting subsets of data.\nMissing Data Handling: Flexible handling of missing data."
  },
  {
    "objectID": "qmd/pandas3ed1.html#pandas-data-manipulation-and-analysis-cont.-1",
    "href": "qmd/pandas3ed1.html#pandas-data-manipulation-and-analysis-cont.-1",
    "title": "Python for Data Analysis",
    "section": "pandas: Data Manipulation and Analysis (Cont.)",
    "text": "pandas: Data Manipulation and Analysis (Cont.)\n\nTime Series Functionality: Specialized tools for working with time series data.\nIntegration with Databases: Support for merging and joining data from different sources, including SQL databases.\nDerived from Panel Data: ‚Äúpandas‚Äù comes from ‚Äúpanel data,‚Äù an econometrics term, and ‚ÄúPython data analysis.‚Äù ## pandas: Data Manipulation and Analysis (Cont.)\n\n\n\n\n\n\n\nNote\n\n\n\npandas is like a supercharged spreadsheet program within Python, allowing you to easily manipulate, clean, and analyze data. üìäüìà"
  },
  {
    "objectID": "qmd/pandas3ed1.html#matplotlib-data-visualization",
    "href": "qmd/pandas3ed1.html#matplotlib-data-visualization",
    "title": "Python for Data Analysis",
    "section": "matplotlib: Data Visualization üìä",
    "text": "matplotlib: Data Visualization üìä\nmatplotlib is the most widely used Python library for creating static plots and other two-dimensional data visualizations.\n\nPublication-Quality Plots: Designed for generating high-quality plots suitable for publications.\nIntegration: Integrates well with other libraries in the Python data ecosystem.\nDefault Choice: A reliable and widely adopted choice for basic data visualization."
  },
  {
    "objectID": "qmd/pandas3ed1.html#matplotlib-data-visualization-cont.",
    "href": "qmd/pandas3ed1.html#matplotlib-data-visualization-cont.",
    "title": "Python for Data Analysis",
    "section": "matplotlib: Data Visualization (Cont.)",
    "text": "matplotlib: Data Visualization (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nmatplotlib is your go-to tool for creating visual representations of your data, like turning your data into charts and graphs. üìâüìä"
  },
  {
    "objectID": "qmd/pandas3ed1.html#ipython-and-jupyter-interactive-computing",
    "href": "qmd/pandas3ed1.html#ipython-and-jupyter-interactive-computing",
    "title": "Python for Data Analysis",
    "section": "IPython and Jupyter: Interactive Computing üíª",
    "text": "IPython and Jupyter: Interactive Computing üíª\nIPython and Jupyter provide an interactive environment for Python development and data analysis.\n\nIPython: An enhanced interactive Python shell that promotes an ‚Äúexecute-explore‚Äù workflow."
  },
  {
    "objectID": "qmd/pandas3ed1.html#ipython-and-jupyter-interactive-computing-cont.",
    "href": "qmd/pandas3ed1.html#ipython-and-jupyter-interactive-computing-cont.",
    "title": "Python for Data Analysis",
    "section": "IPython and Jupyter: Interactive Computing (Cont.)",
    "text": "IPython and Jupyter: Interactive Computing (Cont.)\n\nJupyter Notebook: A web-based notebook environment that supports multiple programming languages (including Python via IPython) and allows you to combine code, text, and visualizations in a single document.\nExploration and Iteration: Ideal for exploring data, trying out different code snippets, and iterating on your analysis."
  },
  {
    "objectID": "qmd/pandas3ed1.html#ipython-and-jupyter-interactive-computing-cont.-1",
    "href": "qmd/pandas3ed1.html#ipython-and-jupyter-interactive-computing-cont.-1",
    "title": "Python for Data Analysis",
    "section": "IPython and Jupyter: Interactive Computing (Cont.)",
    "text": "IPython and Jupyter: Interactive Computing (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nIPython and Jupyter are like a digital lab notebook for data scientists, allowing you to experiment, document your work, and share your findings. üß™üìì"
  },
  {
    "objectID": "qmd/pandas3ed1.html#scipy-scientific-computing-tools",
    "href": "qmd/pandas3ed1.html#scipy-scientific-computing-tools",
    "title": "Python for Data Analysis",
    "section": "SciPy: Scientific Computing Tools",
    "text": "SciPy: Scientific Computing Tools\nSciPy is a collection of packages that provide tools for various scientific computing tasks, including:\n\nscipy.integrate: Numerical integration and differential equation solvers.\nscipy.linalg: Linear algebra routines.\nscipy.optimize: Function optimization and root-finding algorithms."
  },
  {
    "objectID": "qmd/pandas3ed1.html#scipy-scientific-computing-tools-cont.",
    "href": "qmd/pandas3ed1.html#scipy-scientific-computing-tools-cont.",
    "title": "Python for Data Analysis",
    "section": "SciPy: Scientific Computing Tools (Cont.)",
    "text": "SciPy: Scientific Computing Tools (Cont.)\n\nscipy.signal: Signal processing tools.\nscipy.sparse: Sparse matrices and solvers.\nscipy.special: Special mathematical functions.\nscipy.stats: Statistical distributions, tests, and descriptive statistics."
  },
  {
    "objectID": "qmd/pandas3ed1.html#scipy-scientific-computing-tools-cont.-1",
    "href": "qmd/pandas3ed1.html#scipy-scientific-computing-tools-cont.-1",
    "title": "Python for Data Analysis",
    "section": "SciPy: Scientific Computing Tools (Cont.)",
    "text": "SciPy: Scientific Computing Tools (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nSciPy is like a toolbox filled with specialized instruments for scientific computing, extending the capabilities of NumPy. üß∞üî¨"
  },
  {
    "objectID": "qmd/pandas3ed1.html#scikit-learn-machine-learning",
    "href": "qmd/pandas3ed1.html#scikit-learn-machine-learning",
    "title": "Python for Data Analysis",
    "section": "scikit-learn: Machine Learning ü§ñ",
    "text": "scikit-learn: Machine Learning ü§ñ\nscikit-learn is the primary general-purpose machine learning toolkit for Python. It includes submodules for:\n\nClassification: Algorithms for identifying to which category an object belongs (e.g., spam detection).\nRegression: Algorithms for predicting a continuous-valued attribute (e.g., predicting house prices)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#scikit-learn-machine-learning-cont.",
    "href": "qmd/pandas3ed1.html#scikit-learn-machine-learning-cont.",
    "title": "Python for Data Analysis",
    "section": "scikit-learn: Machine Learning (Cont.)",
    "text": "scikit-learn: Machine Learning (Cont.)\n\nClustering: Algorithms for grouping similar objects (e.g., customer segmentation).\nDimensionality Reduction: Techniques for reducing the number of variables in a dataset."
  },
  {
    "objectID": "qmd/pandas3ed1.html#scikit-learn-machine-learning-cont.-1",
    "href": "qmd/pandas3ed1.html#scikit-learn-machine-learning-cont.-1",
    "title": "Python for Data Analysis",
    "section": "scikit-learn: Machine Learning (Cont.)",
    "text": "scikit-learn: Machine Learning (Cont.)\n\nModel Selection: Tools for choosing the best model and parameters.\nPreprocessing: Feature extraction and normalization."
  },
  {
    "objectID": "qmd/pandas3ed1.html#scikit-learn-machine-learning-cont.-2",
    "href": "qmd/pandas3ed1.html#scikit-learn-machine-learning-cont.-2",
    "title": "Python for Data Analysis",
    "section": "scikit-learn: Machine Learning (Cont.)",
    "text": "scikit-learn: Machine Learning (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nscikit-learn is your machine learning workshop, providing a wide range of tools for building and evaluating predictive models. ü§ñüõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed1.html#statsmodels-statistical-modeling",
    "href": "qmd/pandas3ed1.html#statsmodels-statistical-modeling",
    "title": "Python for Data Analysis",
    "section": "statsmodels: Statistical Modeling",
    "text": "statsmodels: Statistical Modeling\nstatsmodels is a statistical analysis package focused on statistical inference, providing uncertainty estimates and p-values. It includes:\n\nRegression Models: Linear regression, generalized linear models, etc.\nAnalysis of Variance (ANOVA)"
  },
  {
    "objectID": "qmd/pandas3ed1.html#statsmodels-statistical-modeling-cont.",
    "href": "qmd/pandas3ed1.html#statsmodels-statistical-modeling-cont.",
    "title": "Python for Data Analysis",
    "section": "statsmodels: Statistical Modeling (Cont.)",
    "text": "statsmodels: Statistical Modeling (Cont.)\n\nTime Series Analysis: AR, ARMA, ARIMA, VAR models.\nNonparametric Methods: Kernel density estimation, etc.\nVisualization: Tools for visualizing statistical model results."
  },
  {
    "objectID": "qmd/pandas3ed1.html#statsmodels-statistical-modeling-cont.-1",
    "href": "qmd/pandas3ed1.html#statsmodels-statistical-modeling-cont.-1",
    "title": "Python for Data Analysis",
    "section": "statsmodels: Statistical Modeling (Cont.)",
    "text": "statsmodels: Statistical Modeling (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nstatsmodels is your statistical laboratory, providing tools for conducting rigorous statistical analyses and drawing inferences from data. It complements scikit-learn, which is more focused on prediction. üß™üìä"
  },
  {
    "objectID": "qmd/pandas3ed1.html#other-packages",
    "href": "qmd/pandas3ed1.html#other-packages",
    "title": "Python for Data Analysis",
    "section": "Other Packages üì¶",
    "text": "Other Packages üì¶\n\nThere are many other important Python libraries.\nTensorFlow and PyTorch: popular for machine learning or artificial intelligence work."
  },
  {
    "objectID": "qmd/pandas3ed1.html#installation-and-setup",
    "href": "qmd/pandas3ed1.html#installation-and-setup",
    "title": "Python for Data Analysis",
    "section": "Installation and Setup ‚öôÔ∏è",
    "text": "Installation and Setup ‚öôÔ∏è\nThis section provides instructions for setting up a Python environment for data analysis using Miniconda and conda-forge."
  },
  {
    "objectID": "qmd/pandas3ed1.html#miniconda",
    "href": "qmd/pandas3ed1.html#miniconda",
    "title": "Python for Data Analysis",
    "section": "Miniconda",
    "text": "Miniconda\nMiniconda is a minimal installer for conda, a package, dependency, and environment management system. conda-forge is a community-maintained software distribution based on conda.\n\nWhy Miniconda? Provides a lightweight and flexible way to manage Python environments and packages."
  },
  {
    "objectID": "qmd/pandas3ed1.html#miniconda-cont.",
    "href": "qmd/pandas3ed1.html#miniconda-cont.",
    "title": "Python for Data Analysis",
    "section": "Miniconda (Cont.)",
    "text": "Miniconda (Cont.)\n\nconda-forge: Offers a wide range of packages, including those commonly used in data science.\nPython 3.10: The book uses Python 3.10, but newer versions can also be used."
  },
  {
    "objectID": "qmd/pandas3ed1.html#miniconda-cont.-1",
    "href": "qmd/pandas3ed1.html#miniconda-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Miniconda (Cont.)",
    "text": "Miniconda (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nThink of conda as a virtual container for your Python projects. It keeps your projects isolated and prevents conflicts between different package versions. Miniconda is a small version of Anaconda. üì¶"
  },
  {
    "objectID": "qmd/pandas3ed1.html#installation-steps-windows-macos-linux",
    "href": "qmd/pandas3ed1.html#installation-steps-windows-macos-linux",
    "title": "Python for Data Analysis",
    "section": "Installation Steps (Windows, macOS, Linux) üíª",
    "text": "Installation Steps (Windows, macOS, Linux) üíª\nThe book provides detailed instructions for installing Miniconda on Windows, macOS, and Linux. The general steps are:\n\nDownload: Download the appropriate Miniconda installer from https://conda.io."
  },
  {
    "objectID": "qmd/pandas3ed1.html#installation-steps-cont.",
    "href": "qmd/pandas3ed1.html#installation-steps-cont.",
    "title": "Python for Data Analysis",
    "section": "Installation Steps (Cont.)",
    "text": "Installation Steps (Cont.)\n\nInstall: Run the installer, following the on-screen prompts.\nVerify: Open a terminal (or Anaconda Prompt on Windows) and type python. You should see the Python interpreter start."
  },
  {
    "objectID": "qmd/pandas3ed1.html#installation-steps-cont.-1",
    "href": "qmd/pandas3ed1.html#installation-steps-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Installation Steps (Cont.)",
    "text": "Installation Steps (Cont.)\n\nExit: Type exit() or press Ctrl-D (Ctrl-Z then Enter on Windows) to exit the interpreter."
  },
  {
    "objectID": "qmd/pandas3ed1.html#installation-steps-cont.-2",
    "href": "qmd/pandas3ed1.html#installation-steps-cont.-2",
    "title": "Python for Data Analysis",
    "section": "Installation Steps (Cont.)",
    "text": "Installation Steps (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nThese steps are like setting up your workbench before you start a woodworking project. You‚Äôre getting your tools (Python and its libraries) ready to use. üõ†Ô∏èü™ö"
  },
  {
    "objectID": "qmd/pandas3ed1.html#installing-necessary-packages",
    "href": "qmd/pandas3ed1.html#installing-necessary-packages",
    "title": "Python for Data Analysis",
    "section": "Installing Necessary Packages üì¶",
    "text": "Installing Necessary Packages üì¶\nOnce Miniconda is installed, you can create a conda environment and install the necessary packages:\n\nConfigure conda-forge: bash     conda config --add channels conda-forge     conda config --set channel_priority strict"
  },
  {
    "objectID": "qmd/pandas3ed1.html#installing-necessary-packages-cont.",
    "href": "qmd/pandas3ed1.html#installing-necessary-packages-cont.",
    "title": "Python for Data Analysis",
    "section": "Installing Necessary Packages (Cont.)",
    "text": "Installing Necessary Packages (Cont.)\n\nCreate Environment: bash     conda create -y -n pydata-book python=3.10\nActivate Environment: bash     conda activate pydata-book"
  },
  {
    "objectID": "qmd/pandas3ed1.html#installing-necessary-packages-cont.-1",
    "href": "qmd/pandas3ed1.html#installing-necessary-packages-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Installing Necessary Packages (Cont.)",
    "text": "Installing Necessary Packages (Cont.)\n\nInstall Packages: bash     conda install -y pandas jupyter matplotlib (or install all packages listed in the book)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#installing-necessary-packages-cont.-2",
    "href": "qmd/pandas3ed1.html#installing-necessary-packages-cont.-2",
    "title": "Python for Data Analysis",
    "section": "Installing Necessary Packages (Cont.)",
    "text": "Installing Necessary Packages (Cont.)\n\nconda install vs.¬†pip install: Prefer conda install when using Miniconda. Use pip install if a package is not available via conda.\nUpdating Packages: Use conda update package_name or pip install --upgrade package_name."
  },
  {
    "objectID": "qmd/pandas3ed1.html#installing-necessary-packages-cont.-3",
    "href": "qmd/pandas3ed1.html#installing-necessary-packages-cont.-3",
    "title": "Python for Data Analysis",
    "section": "Installing Necessary Packages (Cont.)",
    "text": "Installing Necessary Packages (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nCreating a conda environment is like setting up a separate workspace for each project. It helps avoid conflicts between different projects that might require different versions of the same package. üè¢"
  },
  {
    "objectID": "qmd/pandas3ed1.html#integrated-development-environments-ides-and-text-editors",
    "href": "qmd/pandas3ed1.html#integrated-development-environments-ides-and-text-editors",
    "title": "Python for Data Analysis",
    "section": "Integrated Development Environments (IDEs) and Text Editors",
    "text": "Integrated Development Environments (IDEs) and Text Editors\n\nThe author suggests ‚ÄúIPython plus a text editor‚Äù.\nSome IDEs for you to explore:\n\nPyDev (free)\nPyCharm from JetBrains\nPython Tools for Visual Studio\nSpyder (free)\nKomodo IDE (commercial)"
  },
  {
    "objectID": "qmd/pandas3ed1.html#community-and-conferences",
    "href": "qmd/pandas3ed1.html#community-and-conferences",
    "title": "Python for Data Analysis",
    "section": "Community and Conferences ü§ù",
    "text": "Community and Conferences ü§ù\nEngaging with the Python community is a great way to learn and get help. Useful resources include:\n\nMailing Lists:\n\npydata (general Python for data analysis)\npystatsmodels (statsmodels and pandas)\nscikit-learn (machine learning)\nnumpy-discussion\nscipy-user"
  },
  {
    "objectID": "qmd/pandas3ed1.html#community-and-conferences-cont.",
    "href": "qmd/pandas3ed1.html#community-and-conferences-cont.",
    "title": "Python for Data Analysis",
    "section": "Community and Conferences (Cont.)",
    "text": "Community and Conferences (Cont.)\n\nConferences:\n\nPyCon and EuroPython (general Python)\nSciPy and EuroSciPy (scientific computing)\nPyData (data science and data analysis)"
  },
  {
    "objectID": "qmd/pandas3ed1.html#community-and-conferences-cont.-1",
    "href": "qmd/pandas3ed1.html#community-and-conferences-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Community and Conferences (Cont.)",
    "text": "Community and Conferences (Cont.)\n\n\n\n\n\n\nNote\n\n\n\nThe Python community is known for being welcoming and helpful. Don‚Äôt hesitate to ask questions and connect with other users! ü§ó"
  },
  {
    "objectID": "qmd/pandas3ed1.html#navigating-this-book",
    "href": "qmd/pandas3ed1.html#navigating-this-book",
    "title": "Python for Data Analysis",
    "section": "Navigating This Book üó∫Ô∏è",
    "text": "Navigating This Book üó∫Ô∏è\n\nChapters 2 & 3: A condensed tutorial on Python language features, IPython, and Jupyter notebooks (essential for beginners).\nNumPy Introduction: A brief overview of NumPy, with more advanced topics in Appendix A."
  },
  {
    "objectID": "qmd/pandas3ed1.html#navigating-this-book-cont.",
    "href": "qmd/pandas3ed1.html#navigating-this-book-cont.",
    "title": "Python for Data Analysis",
    "section": "Navigating This Book (Cont.)",
    "text": "Navigating This Book (Cont.)\n\npandas Focus: The rest of the book focuses on data analysis using pandas, NumPy, and matplotlib.\nIncremental Structure: The material is presented in a step-by-step manner."
  },
  {
    "objectID": "qmd/pandas3ed1.html#navigating-this-book-cont.-1",
    "href": "qmd/pandas3ed1.html#navigating-this-book-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Navigating This Book (Cont.)",
    "text": "Navigating This Book (Cont.)\nThe book covers the following key areas:\n\nInteracting with the outside world: Reading and writing data.\nPreparation: Cleaning, transforming, and reshaping data."
  },
  {
    "objectID": "qmd/pandas3ed1.html#navigating-this-book-cont.-2",
    "href": "qmd/pandas3ed1.html#navigating-this-book-cont.-2",
    "title": "Python for Data Analysis",
    "section": "Navigating This Book (Cont.)",
    "text": "Navigating This Book (Cont.)\n\nTransformation: Applying mathematical and statistical operations.\nModeling and computation: Connecting data to models and algorithms.\nPresentation: Creating visualizations and summaries."
  },
  {
    "objectID": "qmd/pandas3ed1.html#code-examples",
    "href": "qmd/pandas3ed1.html#code-examples",
    "title": "Python for Data Analysis",
    "section": "Code Examples",
    "text": "Code Examples\n\nThe code examples are based on IPython shell or Jupyter notebooks.\nFor example:\n\nIn [5]: CODE EXAMPLE\nOut[5]: OUTPUT"
  },
  {
    "objectID": "qmd/pandas3ed1.html#code-examples-cont.",
    "href": "qmd/pandas3ed1.html#code-examples-cont.",
    "title": "Python for Data Analysis",
    "section": "Code Examples (Cont.)",
    "text": "Code Examples (Cont.)\n\nReproducibility: The book provides instructions for setting up your environment to match the output shown in the examples.\nData: Datasets for the examples are hosted on GitHub (or Gitee)."
  },
  {
    "objectID": "qmd/pandas3ed1.html#import-conventions",
    "href": "qmd/pandas3ed1.html#import-conventions",
    "title": "Python for Data Analysis",
    "section": "Import Conventions",
    "text": "Import Conventions\n\nCommon import statements:\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statsmodels as sm"
  },
  {
    "objectID": "qmd/pandas3ed1.html#summary",
    "href": "qmd/pandas3ed1.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary üìù",
    "text": "Summary üìù\n\nThis chapter introduced the core concepts and tools that will be used throughout the book.\nWe learned about the scope of the book (Python for data analysis), the meaning of data science, and the importance of data wrangling."
  },
  {
    "objectID": "qmd/pandas3ed1.html#summary-cont.",
    "href": "qmd/pandas3ed1.html#summary-cont.",
    "title": "Python for Data Analysis",
    "section": "Summary (Cont.)",
    "text": "Summary (Cont.)\n\nWe explored the advantages of using Python for data analysis, as well as some potential limitations.\nWe were introduced to key Python libraries: NumPy, pandas, matplotlib, IPython/Jupyter, SciPy, scikit-learn, and statsmodels.\nWe covered the installation and setup of a Python environment using Miniconda."
  },
  {
    "objectID": "qmd/pandas3ed1.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed1.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion üí≠",
    "text": "Thoughts and Discussion üí≠\n\nWhat are your initial impressions of Python as a tool for data analysis?\nWhich of the libraries introduced in this chapter are you most excited to learn more about?"
  },
  {
    "objectID": "qmd/pandas3ed1.html#thoughts-and-discussion-cont.",
    "href": "qmd/pandas3ed1.html#thoughts-and-discussion-cont.",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion (Cont.)",
    "text": "Thoughts and Discussion (Cont.)\n\nCan you think of any real-world examples where data wrangling would be a crucial step in the analysis process?\nHow does the concept of a ‚Äútwo-language problem‚Äù relate to your own experiences (if any) with data analysis or software development?"
  },
  {
    "objectID": "qmd/pandas3ed1.html#thoughts-and-discussion-cont.-1",
    "href": "qmd/pandas3ed1.html#thoughts-and-discussion-cont.-1",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion (Cont.)",
    "text": "Thoughts and Discussion (Cont.)\n\nWhy is it important to create separate environments for different Python projects?\nDo you perfer using IDE, or text editor plus IPython?"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html",
    "href": "qmd/pandas3ed4cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "NumPyÔºåÂÖ®Áß∞ Numerical PythonÔºåÊòØ Python ‰∏≠Áî®‰∫éÊï∞ÂÄºËÆ°ÁÆóÁöÑÂü∫Á°ÄÂåÖ„ÄÇ\n‰∏∫‰ªÄ‰πà NumPy ÂæàÈáçË¶ÅÔºü üßê ËÆ∏Â§öÁßëÂ≠¶ËÆ°ÁÆóÂåÖÈÉΩ‰æùËµñ NumPy ÁöÑÊï∞ÁªÑÂØπË±°ËøõË°åÊï∞ÊçÆ‰∫§Êç¢„ÄÇÂèØ‰ª•ÊääÂÆÉÁúã‰ΩúÊòØ Python Êï∞ÊçÆÂàÜÊûêÁöÑÈÄöÁî®ËØ≠Ë®Ä„ÄÇ\nNumPy ‰∏ì‰∏∫È´òÊïàÂ§ÑÁêÜÂ§ßÂûãÊï∞ÊçÆÊï∞ÁªÑËÄåËÆæËÆ°„ÄÇ\nÊàë‰ª¨Â∞ÜÂ≠¶Âà∞‰ªÄ‰πàÔºü Êàë‰ª¨Â∞ÜÊ∂µÁõñ NumPy ÁöÑÂü∫Á°ÄÁü•ËØÜÔºåÈáçÁÇπÂÖ≥Ê≥® NumPy Â¶Ç‰ΩïÂÆûÁé∞Âø´ÈÄüÁöÑ„ÄÅÈù¢ÂêëÊï∞ÁªÑÁöÑÊìç‰ΩúÔºåËøôÂØπ‰∫é‰ΩøÁî® pandas Á≠âÂ∫ìËøõË°åÊï∞ÊçÆÂàÜÊûêËá≥ÂÖ≥ÈáçË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-ÁÆÄ‰ªã",
    "href": "qmd/pandas3ed4cn.html#numpy-ÁÆÄ‰ªã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "NumPyÔºåÂÖ®Áß∞ Numerical PythonÔºåÊòØ Python ‰∏≠Áî®‰∫éÊï∞ÂÄºËÆ°ÁÆóÁöÑÂü∫Á°ÄÂåÖ„ÄÇ\n‰∏∫‰ªÄ‰πà NumPy ÂæàÈáçË¶ÅÔºü üßê ËÆ∏Â§öÁßëÂ≠¶ËÆ°ÁÆóÂåÖÈÉΩ‰æùËµñ NumPy ÁöÑÊï∞ÁªÑÂØπË±°ËøõË°åÊï∞ÊçÆ‰∫§Êç¢„ÄÇÂèØ‰ª•ÊääÂÆÉÁúã‰ΩúÊòØ Python Êï∞ÊçÆÂàÜÊûêÁöÑÈÄöÁî®ËØ≠Ë®Ä„ÄÇ\nNumPy ‰∏ì‰∏∫È´òÊïàÂ§ÑÁêÜÂ§ßÂûãÊï∞ÊçÆÊï∞ÁªÑËÄåËÆæËÆ°„ÄÇ\nÊàë‰ª¨Â∞ÜÂ≠¶Âà∞‰ªÄ‰πàÔºü Êàë‰ª¨Â∞ÜÊ∂µÁõñ NumPy ÁöÑÂü∫Á°ÄÁü•ËØÜÔºåÈáçÁÇπÂÖ≥Ê≥® NumPy Â¶Ç‰ΩïÂÆûÁé∞Âø´ÈÄüÁöÑ„ÄÅÈù¢ÂêëÊï∞ÁªÑÁöÑÊìç‰ΩúÔºåËøôÂØπ‰∫é‰ΩøÁî® pandas Á≠âÂ∫ìËøõË°åÊï∞ÊçÆÂàÜÊûêËá≥ÂÖ≥ÈáçË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-ÁöÑÂÖ≥ÈîÆÁâπÊÄß",
    "href": "qmd/pandas3ed4cn.html#numpy-ÁöÑÂÖ≥ÈîÆÁâπÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy ÁöÑÂÖ≥ÈîÆÁâπÊÄß",
    "text": "NumPy ÁöÑÂÖ≥ÈîÆÁâπÊÄß\n‰ª•‰∏ãÊòØ NumPy Êèê‰æõÁöÑ‰∏ªË¶ÅÂäüËÉΩÔºö\n\nndarray: NumPy ÁöÑÊ†∏ÂøÉ„ÄÇ‰∏ÄÁßçÈ´òÊïàÁöÑÂ§öÁª¥Êï∞ÁªÑ„ÄÇÂèØ‰ª•ÊääÂÆÉÊÉ≥Ë±°Êàê‰∏Ä‰∏™ÂÆπÂô®ÔºåÈáåÈù¢Ë£ÖÁùÄÁõ∏ÂêåÁ±ªÂûãÁöÑÊï∞ÊçÆÔºà‰æãÂ¶ÇÔºåÂÖ®ÊòØÊï∞Â≠óÔºâ„ÄÇÂÆÉÂÖÅËÆ∏Âø´ÈÄüÊìç‰ΩúÂíåÂπøÊí≠ÔºàÁ®çÂêé‰ºö‰ªãÁªçÔºÅÔºâ„ÄÇ\nÊï∞Â≠¶ÂáΩÊï∞: ‰∏ÄÂ•ó‰∏∞ÂØåÁöÑÂáΩÊï∞ÔºåÂèØ‰ª•ÂØπÊï¥‰∏™Êï∞ÁªÑËøõË°åÊìç‰ΩúÔºåÊó†ÈúÄÊòæÂºèÂæ™ÁéØ„ÄÇËøôË¢´Áß∞‰∏∫ÂêëÈáèÂåñÔºåÂÆÉÊØîÂú® Python ‰∏≠ÁºñÂÜôÂæ™ÁéØË¶ÅÂø´ÂæóÂ§ö„ÄÇ\nÊï∞ÊçÆ I/O: Áî®‰∫éÂ∞ÜÊï∞ÁªÑÊï∞ÊçÆËØªÂÜôÂà∞Á£ÅÁõòÁöÑÂ∑•ÂÖ∑„ÄÇ\nÁ∫øÊÄß‰ª£Êï∞: Á∫øÊÄß‰ª£Êï∞„ÄÅÈöèÊú∫Êï∞ÁîüÊàêÂíåÂÇÖÈáåÂè∂ÂèòÊç¢ÁöÑÂäüËÉΩ„ÄÇËøô‰∫õÊòØËÆ∏Â§öÁßëÂ≠¶ÂíåÂ∑•Á®ã‰ªªÂä°ÁöÑÂü∫Êú¨Â∑•ÂÖ∑„ÄÇ\nC API: ÂÖÅËÆ∏‰∏éÁî® C„ÄÅC++ Êàñ FORTRAN ÁºñÂÜôÁöÑÂ∫ìÊó†ÁºùÈõÜÊàê„ÄÇËøôÊòØÂà©Áî®È´òÊÄßËÉΩÈÅóÁïô‰ª£Á†ÅÁöÑÂÖ≥ÈîÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏∫‰ªÄ‰πà-numpy-È´òÊïà",
    "href": "qmd/pandas3ed4cn.html#‰∏∫‰ªÄ‰πà-numpy-È´òÊïà",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πà NumPy È´òÊïàÔºü",
    "text": "‰∏∫‰ªÄ‰πà NumPy È´òÊïàÔºü\nNumPy ÁöÑÊïàÁéáÊ∫ê‰∫é‰ª•‰∏ãÂá†‰∏™ËÆæËÆ°ÈÄâÊã©Ôºö\n\nËøûÁª≠ÂÜÖÂ≠ò: ‰∏é Python ÂàóË°®‰∏çÂêåÔºåNumPy Êï∞ÁªÑÂ∞ÜÊï∞ÊçÆÂ≠òÂÇ®Âú®Âçï‰∏™ËøûÁª≠ÁöÑÂÜÖÂ≠òÂùó‰∏≠„ÄÇËøô‰ΩøÂæóËÆøÈóÆÂíåÊìç‰ΩúÊï∞ÊçÆÊõ¥Âø´„ÄÇ\nÂü∫‰∫é C ÁöÑÁÆóÊ≥ï: ËÆ∏Â§ö NumPy Êìç‰ΩúÈÉΩÊòØÁî® C ÂÆûÁé∞ÁöÑÔºåÈÅøÂÖç‰∫Ü Python Ëß£ÈáäÂô®ÁöÑÂºÄÈîÄ„ÄÇ\nÊõ¥Â∞ëÁöÑÂÜÖÂ≠ò‰ΩøÁî®: NumPy Êï∞ÁªÑÈÄöÂ∏∏ÊØî Python ÂàóË°®Ê∂àËÄóÊõ¥Â∞ëÁöÑÂÜÖÂ≠òÔºåÁâπÂà´ÊòØÂØπ‰∫éÊï∞ÂÄºÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-vs.-python-ÂàóË°®ÊÄßËÉΩÂØπÂÜ≥",
    "href": "qmd/pandas3ed4cn.html#numpy-vs.-python-ÂàóË°®ÊÄßËÉΩÂØπÂÜ≥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy vs.¬†Python ÂàóË°®ÔºöÊÄßËÉΩÂØπÂÜ≥ üèÉ‚Äç‚ôÇÔ∏è",
    "text": "NumPy vs.¬†Python ÂàóË°®ÔºöÊÄßËÉΩÂØπÂÜ≥ üèÉ‚Äç‚ôÇÔ∏è\nËÆ©Êàë‰ª¨ÁúãÁúã NumPy ÁöÑÈÄüÂ∫¶‰ºòÂäø„ÄÇÊàë‰ª¨Â∞ÜÊØîËæÉ‰ΩøÁî® NumPy Êï∞ÁªÑÂíå Python ÂàóË°®Â∞Ü‰∏ÄÁôæ‰∏á‰∏™Êï¥Êï∞‰πò‰ª• 2 ÁöÑÈÄüÂ∫¶Ôºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy Â∫ìÔºåÂπ∂Â∞ÜÂÖ∂ÂëΩÂêç‰∏∫ np\nmy_arr = np.arange(1_000_000)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 999,999 ÁöÑ NumPy Êï∞ÁªÑ\nmy_list = list(range(1_000_000)) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 999,999 ÁöÑ Python ÂàóË°®"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-vs.-python-ÂàóË°®ËÆ°Êó∂Êìç‰Ωú",
    "href": "qmd/pandas3ed4cn.html#numpy-vs.-python-ÂàóË°®ËÆ°Êó∂Êìç‰Ωú",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy vs.¬†Python ÂàóË°®ÔºöËÆ°Êó∂Êìç‰Ωú",
    "text": "NumPy vs.¬†Python ÂàóË°®ÔºöËÆ°Êó∂Êìç‰Ωú\nÁé∞Âú®ÔºåËøõË°åËÆ°Êó∂Êìç‰ΩúÔºö\nNumPy Êï∞ÁªÑÊìç‰ΩúÔºö\n\n# %timeit my_arr2 = my_arr * 2  # ‰ΩøÁî® %timeit È≠îÊ≥ïÂëΩ‰ª§ÊµãÈáè NumPy Êï∞ÁªÑÊìç‰ΩúÁöÑÊó∂Èó¥"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-vs.-python-ÂàóË°®ËÆ°Êó∂Áª≠",
    "href": "qmd/pandas3ed4cn.html#numpy-vs.-python-ÂàóË°®ËÆ°Êó∂Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy vs.¬†Python ÂàóË°®ÔºöËÆ°Êó∂ÔºàÁª≠Ôºâ",
    "text": "NumPy vs.¬†Python ÂàóË°®ÔºöËÆ°Êó∂ÔºàÁª≠Ôºâ\nPython ÂàóË°®Êìç‰ΩúÔºà‰ΩøÁî®ÂàóË°®Êé®ÂØºÂºèÔºâÔºö\n\n# %timeit my_list2 = [x * 2 for x in my_list]  # ‰ΩøÁî® %timeit ÊµãÈáè Python ÂàóË°®Êé®ÂØºÂºèÁöÑÊó∂Èó¥\n\nÂü∫‰∫é NumPy ÁöÑÁÆóÊ≥ïÈÄöÂ∏∏ÊØîÁ∫Ø Python ÁÆóÊ≥ïÂø´ 10 Âà∞ 100 ÂÄçÔºàÊàñÊõ¥Â§öÔºâÔºåÂπ∂‰∏î‰ΩøÁî®ÁöÑÂÜÖÂ≠òÊòæËëóÂáèÂ∞ë„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-ndarrayÊ∑±ÂÖ•‰∫ÜËß£",
    "href": "qmd/pandas3ed4cn.html#numpy-ndarrayÊ∑±ÂÖ•‰∫ÜËß£",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy ndarrayÔºöÊ∑±ÂÖ•‰∫ÜËß£",
    "text": "NumPy ndarrayÔºöÊ∑±ÂÖ•‰∫ÜËß£\nndarrayÔºàN Áª¥Êï∞ÁªÑÔºâÊòØ NumPy ‰∏≠ÁöÑÊ†∏ÂøÉÊï∞ÊçÆÁªìÊûÑ„ÄÇ\n\nÂêåË¥®Êï∞ÊçÆ: ndarray ‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†ÂøÖÈ°ªÂÖ∑ÊúâÁõ∏ÂêåÁöÑÊï∞ÊçÆÁ±ªÂûãÔºà‰æãÂ¶ÇÔºåÂÖ®ÊòØÊï¥Êï∞ÔºåÂÖ®ÊòØÊµÆÁÇπÊï∞Ôºâ„ÄÇ\nÂÖ≥ÈîÆÂ±ûÊÄß:\n\nshape: ‰∏Ä‰∏™ÂÖÉÁªÑÔºåË°®Á§∫ÊØè‰∏™Áª¥Â∫¶ÁöÑÂ§ßÂ∞è„ÄÇÂØπ‰∫é 2x3 Êï∞ÁªÑÔºåÂΩ¢Áä∂Â∞ÜÊòØ (2, 3)„ÄÇ\ndtype: ‰∏Ä‰∏™ÊèèËø∞ÂÖÉÁ¥†Êï∞ÊçÆÁ±ªÂûãÔºà‰æãÂ¶ÇÔºåint64„ÄÅfloat32ÔºâÁöÑÂØπË±°„ÄÇ\n\nÂàõÂª∫ ndarray: ÂàõÂª∫Êï∞ÁªÑÁöÑÊúÄÁÆÄÂçïÊñπÊ≥ïÊòØ‰ΩøÁî® array ÂáΩÊï∞„ÄÇÂÆÉÊé•Âèó‰ªª‰ΩïÁ±ª‰ººÂ∫èÂàóÁöÑÂØπË±°ÔºàÂåÖÊã¨ÂÖ∂‰ªñÊï∞ÁªÑÔºâÔºåÂπ∂ÁîüÊàê‰∏Ä‰∏™Êñ∞ÁöÑ NumPy Êï∞ÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÂàõÂª∫-ndarrayÁ§∫‰æã‰ªéÂàóË°®",
    "href": "qmd/pandas3ed4cn.html#ÂàõÂª∫-ndarrayÁ§∫‰æã‰ªéÂàóË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàõÂª∫ ndarrayÔºöÁ§∫‰æãÔºà‰ªéÂàóË°®Ôºâ",
    "text": "ÂàõÂª∫ ndarrayÔºöÁ§∫‰æãÔºà‰ªéÂàóË°®Ôºâ\nËÆ©Êàë‰ª¨ÂàõÂª∫‰∏Ä‰∫õÊï∞ÁªÑÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\n\n# ‰ªéÂàóË°®ÂàõÂª∫\ndata1 = [6, 7.5, 8, 0, 1]  # ‰∏Ä‰∏™ Python ÂàóË°®\narr1 = np.array(data1)  # ‰ΩøÁî® np.array Â∞ÜÂàóË°®ËΩ¨Êç¢‰∏∫ NumPy Êï∞ÁªÑ\nprint(arr1)  # ÊâìÂç∞Êï∞ÁªÑ\nprint(arr1.dtype)  # ÊâìÂç∞Êï∞ÁªÑÁöÑÊï∞ÊçÆÁ±ªÂûã\n\n[6.  7.5 8.  0.  1. ]\nfloat64"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÂàõÂª∫-ndarrayÁ§∫‰æã‰ªéÂµåÂ•óÂàóË°®",
    "href": "qmd/pandas3ed4cn.html#ÂàõÂª∫-ndarrayÁ§∫‰æã‰ªéÂµåÂ•óÂàóË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàõÂª∫ ndarrayÔºöÁ§∫‰æãÔºà‰ªéÂµåÂ•óÂàóË°®Ôºâ",
    "text": "ÂàõÂª∫ ndarrayÔºöÁ§∫‰æãÔºà‰ªéÂµåÂ•óÂàóË°®Ôºâ\n\n# ‰ªéÂµåÂ•óÂàóË°®ÂàõÂª∫ÔºàÂàõÂª∫‰∏Ä‰∏™‰∫åÁª¥Êï∞ÁªÑÔºâ\ndata2 = [[1, 2, 3, 4], [5, 6, 7, 8]]  # ‰∏Ä‰∏™ÂµåÂ•óÁöÑ Python ÂàóË°®\narr2 = np.array(data2)  # Â∞ÜÂµåÂ•óÂàóË°®ËΩ¨Êç¢‰∏∫ NumPy ‰∫åÁª¥Êï∞ÁªÑ\nprint(arr2)\nprint(arr2.ndim)  # ÊâìÂç∞Êï∞ÁªÑÁöÑÁª¥Â∫¶Êï∞\nprint(arr2.shape) # ÊâìÂç∞Êï∞ÁªÑÁöÑÂΩ¢Áä∂\nprint(arr2.dtype) # ÊâìÂç∞Êï∞ÁªÑÁöÑÊï∞ÊçÆÁ±ªÂûã\n\n[[1 2 3 4]\n [5 6 7 8]]\n2\n(2, 4)\nint64"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞zeros",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞zeros",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÔºöZeros",
    "text": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÔºöZeros\nNumPy Êèê‰æõ‰∫ÜÂá†‰∏™Êñπ‰æøÁöÑÂáΩÊï∞Êù•ÂàõÂª∫Êï∞ÁªÑÔºö\n\n# ÂàõÂª∫ÂÖ®Èõ∂Êï∞ÁªÑ\nimport numpy as np  # ÂØºÂÖ• NumPy\nzeros_arr = np.zeros(10)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 10 ‰∏™Èõ∂ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\nprint(zeros_arr)\n\nzeros_arr_2d = np.zeros((3, 6)) # ÂàõÂª∫‰∏Ä‰∏™ 3x6 ÁöÑ‰∫åÁª¥ÂÖ®Èõ∂Êï∞ÁªÑ\nprint(zeros_arr_2d)\n\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n[[0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0.]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ones-Âíå-empty",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ones-Âíå-empty",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÔºöOnes Âíå Empty",
    "text": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÔºöOnes Âíå Empty\n\n# ÂàõÂª∫ÂÖ®‰∏ÄÊï∞ÁªÑ\nones_arr = np.ones((2, 3)) # ÂàõÂª∫‰∏Ä‰∏™ 2x3 ÁöÑ‰∫åÁª¥ÂÖ®‰∏ÄÊï∞ÁªÑ\nprint(ones_arr)\n\n[[1. 1. 1.]\n [1. 1. 1.]]\n\n\n\n# ÂàõÂª∫Êú™ÂàùÂßãÂåñÁöÑÊï∞ÁªÑÔºàÂèØËÉΩÂåÖÂê´ÂûÉÂúæÂÄºÔºâ\nempty_arr = np.empty((2, 3, 2)) # ÂàõÂª∫‰∏Ä‰∏™ 2x3x2 ÁöÑ‰∏âÁª¥Êï∞ÁªÑÔºåÂÄºÊú™ÂàùÂßãÂåñ\nprint(empty_arr)\n\n[[[6.93158276e-310 3.30272805e-315]\n  [4.06149994e-311 2.10966031e-321]\n  [3.58750788e-306 1.99336965e-311]]\n\n [[3.62861280e-312 3.33734766e-309]\n  [1.74423621e-104 3.37446836e-321]\n  [1.16562303e-099 5.39656285e+067]]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞arange",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞arange",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÔºöArange",
    "text": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÔºöArange\n\n# 'arange': Á±ª‰ºº‰∫é Python ÁöÑ 'range'Ôºå‰ΩÜËøîÂõû‰∏Ä‰∏™ ndarray\nrange_arr = np.arange(15)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 14 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\nprint(range_arr)\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªì",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªì",
    "text": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªì\n‰∏ãË°®ÊÄªÁªì‰∫ÜÂ∏∏ËßÅÁöÑÊï∞ÁªÑÂàõÂª∫ÂáΩÊï∞Ôºö\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\narray\nÂ∞ÜËæìÂÖ•Êï∞ÊçÆÔºàÂàóË°®„ÄÅÂÖÉÁªÑ„ÄÅÊï∞ÁªÑÁ≠âÔºâËΩ¨Êç¢‰∏∫ ndarray„ÄÇ\n\n\nasarray\nÁ±ª‰ºº‰∫é arrayÔºå‰ΩÜÂ¶ÇÊûúËæìÂÖ•Â∑≤ÁªèÊòØ ndarrayÔºåÂàô‰∏çÂ§çÂà∂„ÄÇ\n\n\narange\nÁ±ª‰ºº‰∫é Python ÁöÑ rangeÔºå‰ΩÜËøîÂõû ndarray„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÁª≠",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÔºàÁª≠Ôºâ",
    "text": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nones, ones_like\nÂàõÂª∫ÂÖ® 1 Êï∞ÁªÑ„ÄÇones_like Êé•ÂèóÂè¶‰∏Ä‰∏™Êï∞ÁªÑÔºåÂπ∂ÂàõÂª∫‰∏Ä‰∏™ÂΩ¢Áä∂Âíå dtype Áõ∏ÂêåÁöÑÂÖ® 1 Êï∞ÁªÑ„ÄÇ\n\n\nzeros, zeros_like\nÁ±ª‰ºº‰∫é ones Âíå ones_likeÔºå‰ΩÜÂàõÂª∫ÂÖ® 0 Êï∞ÁªÑ„ÄÇ\n\n\nempty, empty_like\nÂàõÂª∫Êú™ÂàùÂßãÂåñÂÄºÁöÑÊï∞ÁªÑ„ÄÇË∞®ÊÖé‰ΩøÁî®ÔºÅ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÁª≠-1",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÔºàÁª≠Ôºâ",
    "text": "Êï∞ÁªÑÂàõÂª∫ÂáΩÊï∞ÊÄªÁªìÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nfull, full_like\nÂàõÂª∫‰∏Ä‰∏™Áî®ÊåáÂÆöÂÄºÂ°´ÂÖÖÁöÑÊï∞ÁªÑ„ÄÇfull_like Êé•ÂèóÂè¶‰∏Ä‰∏™Êï∞ÁªÑÂπ∂‰ΩøÁî®ÂÖ∂ÂΩ¢Áä∂Âíå dtype„ÄÇ\n\n\neye, identity\nÂàõÂª∫‰∏Ä‰∏™Ê≠£ÊñπÂΩ¢Âçï‰ΩçÁü©ÈòµÔºàÂØπËßíÁ∫ø‰∏ä‰∏∫ 1ÔºåÂÖ∂‰ªñÂú∞Êñπ‰∏∫ 0Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÊçÆÁ±ªÂûã-dtypes",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÊçÆÁ±ªÂûã-dtypes",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÁ±ªÂûã (dtypes)",
    "text": "Êï∞ÊçÆÁ±ªÂûã (dtypes)\n\n‰ªÄ‰πàÊòØ dtypeÔºü ‰∏Ä‰∏™ÁâπÊÆäÁöÑÂØπË±°ÔºåÂåÖÂê´ÊúâÂÖ≥ ndarray ÊâÄÊåÅÊúâÁöÑÊï∞ÊçÆÁ±ªÂûãÁöÑ‰ø°ÊÅØÔºà‰æãÂ¶ÇÔºåfloat64„ÄÅint32„ÄÅboolÔºâ„ÄÇ\n‰∏∫‰ªÄ‰πà dtype ÂæàÈáçË¶ÅÔºü ÂÆÉ‰ª¨‰ΩøÊÇ®ÂèØ‰ª•Á≤æÁªÜÂú∞ÊéßÂà∂Êï∞ÊçÆÂú®ÂÜÖÂ≠ò‰∏≠ÁöÑÂ≠òÂÇ®ÊñπÂºè„ÄÇËøôÂØπ‰∫éÊÄßËÉΩËá≥ÂÖ≥ÈáçË¶ÅÔºåÂ∞§ÂÖ∂ÊòØÂú®Â§ÑÁêÜÂ§ßÂûãÊï∞ÊçÆÈõÜÊó∂„ÄÇÂÆÉ‰ª¨ËøòÂÖÅËÆ∏ NumPy ‰∏éÊï∞ÊçÆÊé•Âè£„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÊçÆÁ±ªÂûãÊåáÂÆö-dtypes",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÊçÆÁ±ªÂûãÊåáÂÆö-dtypes",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÁ±ªÂûãÔºöÊåáÂÆö dtypes",
    "text": "Êï∞ÊçÆÁ±ªÂûãÔºöÊåáÂÆö dtypes\nÊåáÂÆö dtypesÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\narr1 = np.array([1, 2, 3], dtype=np.float64)  # ÊòæÂºèËÆæÁΩÆ dtype ‰∏∫ float64\narr2 = np.array([1, 2, 3], dtype=np.int32)  # ÊòæÂºèËÆæÁΩÆ dtype ‰∏∫ int32\nprint(arr1.dtype)  # ÊâìÂç∞ arr1 ÁöÑ dtype\nprint(arr2.dtype)  # ÊâìÂç∞ arr2 ÁöÑ dtype\n\nfloat64\nint32"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy-Êï∞ÊçÆÁ±ªÂûã",
    "href": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy-Êï∞ÊçÆÁ±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏ËßÅÁöÑ NumPy Êï∞ÊçÆÁ±ªÂûã",
    "text": "Â∏∏ËßÅÁöÑ NumPy Êï∞ÊçÆÁ±ªÂûã\n\n\n\n\n\n\n\n\nÁ±ªÂûã\nÁ±ªÂûã‰ª£Á†Å\nÊèèËø∞\n\n\n\n\nint8, uint8\ni1, u1\nÊúâÁ¨¶Âè∑ÂíåÊó†Á¨¶Âè∑ 8 ‰ΩçÔºà1 Â≠óËäÇÔºâÊï¥Êï∞Á±ªÂûã\n\n\nint16, uint16\ni2, u2\nÊúâÁ¨¶Âè∑ÂíåÊó†Á¨¶Âè∑ 16 ‰ΩçÊï¥Êï∞Á±ªÂûã\n\n\nint32, uint32\ni4, u4\nÊúâÁ¨¶Âè∑ÂíåÊó†Á¨¶Âè∑ 32 ‰ΩçÊï¥Êï∞Á±ªÂûã\n\n\nint64, uint64\ni8, u8\nÊúâÁ¨¶Âè∑ÂíåÊó†Á¨¶Âè∑ 64 ‰ΩçÊï¥Êï∞Á±ªÂûã"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy-Êï∞ÊçÆÁ±ªÂûãÁª≠",
    "href": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy-Êï∞ÊçÆÁ±ªÂûãÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏ËßÅÁöÑ NumPy Êï∞ÊçÆÁ±ªÂûãÔºàÁª≠Ôºâ",
    "text": "Â∏∏ËßÅÁöÑ NumPy Êï∞ÊçÆÁ±ªÂûãÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\n\nÁ±ªÂûã\nÁ±ªÂûã‰ª£Á†Å\nÊèèËø∞\n\n\n\n\nfloat16\nf2\nÂçäÁ≤æÂ∫¶ÊµÆÁÇπÊï∞\n\n\nfloat32\nf4 Êàñ f\nÊ†áÂáÜÂçïÁ≤æÂ∫¶ÊµÆÁÇπÊï∞Ôºõ‰∏é C float ÂÖºÂÆπ\n\n\nfloat64\nf8 Êàñ d\nÊ†áÂáÜÂèåÁ≤æÂ∫¶ÊµÆÁÇπÊï∞Ôºõ‰∏é C double Âíå Python float ÂÖºÂÆπ\n\n\nfloat128\nf16 Êàñ g\nÊâ©Â±ïÁ≤æÂ∫¶ÊµÆÁÇπÊï∞"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy-Êï∞ÊçÆÁ±ªÂûãÁª≠-1",
    "href": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy-Êï∞ÊçÆÁ±ªÂûãÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏ËßÅÁöÑ NumPy Êï∞ÊçÆÁ±ªÂûãÔºàÁª≠Ôºâ",
    "text": "Â∏∏ËßÅÁöÑ NumPy Êï∞ÊçÆÁ±ªÂûãÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\n\nÁ±ªÂûã\nÁ±ªÂûã‰ª£Á†Å\nÊèèËø∞\n\n\n\n\ncomplex64, complex128, complex256\nc8, c16, c32\nÂàÜÂà´Áî±‰∏§‰∏™ 32„ÄÅ64 Êàñ 128 ‰ΩçÊµÆÁÇπÊï∞Ë°®Á§∫ÁöÑÂ§çÊï∞\n\n\nbool\n?\nÂ∏ÉÂ∞îÁ±ªÂûãÔºåÂ≠òÂÇ® True Âíå False ÂÄº\n\n\nobject\nO\nPython ÂØπË±°Á±ªÂûãÔºõÂÄºÂèØ‰ª•ÊòØ‰ªª‰Ωï Python ÂØπË±°\n\n\nstring_\nS\nÂõ∫ÂÆöÈïøÂ∫¶ÁöÑ ASCII Â≠óÁ¨¶‰∏≤Á±ªÂûãÔºàÊØè‰∏™Â≠óÁ¨¶ 1 ‰∏™Â≠óËäÇÔºâ„ÄÇ‰ΩøÁî® S10 Ë°®Á§∫ÈïøÂ∫¶‰∏∫ 10 ÁöÑÂ≠óÁ¨¶‰∏≤„ÄÇ\n\n\nunicode_\nU\nÂõ∫ÂÆöÈïøÂ∫¶ÁöÑ Unicode Á±ªÂûãÔºàÂ≠óËäÇÊï∞ÂèñÂÜ≥‰∫éÂπ≥Âè∞Ôºâ\n\n\n\nÊó¢ÊúâÊúâÁ¨¶Âè∑Êï¥Êï∞Á±ªÂûãÔºå‰πüÊúâÊó†Á¨¶Âè∑Êï¥Êï∞Á±ªÂûã„ÄÇÊúâÁ¨¶Âè∑Êï¥Êï∞ÂèØ‰ª•Ë°®Á§∫Ê≠£Êï¥Êï∞ÂíåË¥üÊï¥Êï∞ÔºåËÄåÊó†Á¨¶Âè∑Êï¥Êï∞Âè™ËÉΩË°®Á§∫ÈùûË¥üÊï¥Êï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰ΩøÁî®-astype-ËøõË°åÁ±ªÂûãËΩ¨Êç¢Êï¥Êï∞Âà∞ÊµÆÁÇπÊï∞",
    "href": "qmd/pandas3ed4cn.html#‰ΩøÁî®-astype-ËøõË°åÁ±ªÂûãËΩ¨Êç¢Êï¥Êï∞Âà∞ÊµÆÁÇπÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® astype ËøõË°åÁ±ªÂûãËΩ¨Êç¢ÔºöÊï¥Êï∞Âà∞ÊµÆÁÇπÊï∞",
    "text": "‰ΩøÁî® astype ËøõË°åÁ±ªÂûãËΩ¨Êç¢ÔºöÊï¥Êï∞Âà∞ÊµÆÁÇπÊï∞\n\n‰ªÄ‰πàÊòØÁ±ªÂûãËΩ¨Êç¢Ôºü Â∞ÜÊï∞ÁªÑ‰ªé‰∏ÄÁßç dtype ËΩ¨Êç¢‰∏∫Âè¶‰∏ÄÁßç dtype„ÄÇ\nÂ¶Ç‰ΩïËøõË°åÁ±ªÂûãËΩ¨Êç¢: ‰ΩøÁî® astype ÊñπÊ≥ï„ÄÇastype ÊÄªÊòØÂàõÂª∫‰∏Ä‰∏™Êñ∞Êï∞ÁªÑÔºàÊï∞ÊçÆÁöÑÂâØÊú¨ÔºâÔºåÂç≥‰ΩøÊñ∞ÁöÑ dtype ‰∏éÊóßÁöÑ dtype Áõ∏Âêå„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\narr = np.array([1, 2, 3, 4, 5])  # ÂàõÂª∫‰∏Ä‰∏™Êï¥Êï∞Êï∞ÁªÑ\nprint(arr.dtype)  # ÊâìÂç∞ÂéüÂßã dtype\nfloat_arr = arr.astype(np.float64) # Â∞ÜÊï¥Êï∞Êï∞ÁªÑËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞Êï∞ÁªÑ\nprint(float_arr.dtype) # ÊâìÂç∞ËΩ¨Êç¢ÂêéÁöÑ dtype\n\nint64\nfloat64"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰ΩøÁî®-astype-ËøõË°åÁ±ªÂûãËΩ¨Êç¢Â≠óÁ¨¶‰∏≤Âà∞ÊµÆÁÇπÊï∞",
    "href": "qmd/pandas3ed4cn.html#‰ΩøÁî®-astype-ËøõË°åÁ±ªÂûãËΩ¨Êç¢Â≠óÁ¨¶‰∏≤Âà∞ÊµÆÁÇπÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® astype ËøõË°åÁ±ªÂûãËΩ¨Êç¢ÔºöÂ≠óÁ¨¶‰∏≤Âà∞ÊµÆÁÇπÊï∞",
    "text": "‰ΩøÁî® astype ËøõË°åÁ±ªÂûãËΩ¨Êç¢ÔºöÂ≠óÁ¨¶‰∏≤Âà∞ÊµÆÁÇπÊï∞\n\n# `np.string_` Âú® NumPy 2.0 ÁâàÊú¨‰∏≠Â∑≤ÁßªÈô§„ÄÇËØ∑ÊîπÁî® `np.bytes_`„ÄÇ\nnumeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.bytes_)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Â≠óÁ¨¶‰∏≤ÁöÑÊï∞ÁªÑ\nfloat_arr = numeric_strings.astype(float) # Â∞ÜÂ≠óÁ¨¶‰∏≤Êï∞ÁªÑËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞Êï∞ÁªÑ\nprint(float_arr)  # ÊâìÂç∞ËΩ¨Êç¢ÂêéÁöÑÊï∞ÁªÑ\n\n[ 1.25 -9.6  42.  ]\n\n\n‰ΩøÁî® numpy.string_ Á±ªÂûãÊó∂Ë¶ÅÂ∞èÂøÉÔºåÂõ†‰∏∫ NumPy ‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤Êï∞ÊçÆÊòØÂõ∫ÂÆöÂ§ßÂ∞èÁöÑÔºåÂèØËÉΩ‰ºöÊà™Êñ≠ËæìÂÖ•ËÄå‰∏çÂèëÂá∫Ë≠¶Âëä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆóÂêëÈáèÂåñ",
    "href": "qmd/pandas3ed4cn.html#numpy-Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆóÂêëÈáèÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆóÔºöÂêëÈáèÂåñ",
    "text": "NumPy Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆóÔºöÂêëÈáèÂåñ\n\nÂêëÈáèÂåñ: NumPy ‰∏≠ÁöÑ‰∏Ä‰∏™Ê†∏ÂøÉÊ¶ÇÂøµ„ÄÇÂÆÉÊÑèÂë≥ÁùÄÂØπÊï¥‰∏™Êï∞ÁªÑÊâßË°åÊìç‰ΩúÔºåÊó†ÈúÄÁºñÂÜôÊòæÂºèÁöÑ for Âæ™ÁéØ„ÄÇËøôÊõ¥Âø´„ÄÅÊõ¥ÁÆÄÊ¥Å„ÄÇ\nÈÄêÂÖÉÁ¥†Êìç‰Ωú: Á≠âÂ§ßÂ∞èÊï∞ÁªÑ‰πãÈó¥ÁöÑÁÆóÊúØËøêÁÆóÊòØÈÄêÂÖÉÁ¥†Â∫îÁî®ÁöÑÔºö\n\n\narr = np.array([[1., 2., 3.], [4., 5., 6.]])  # ÂàõÂª∫‰∏Ä‰∏™‰∫åÁª¥Êï∞ÁªÑ\nprint(arr * arr) # ÈÄêÂÖÉÁ¥†‰πòÊ≥ï\nprint(arr - arr) # ÈÄêÂÖÉÁ¥†ÂáèÊ≥ï\n\n[[ 1.  4.  9.]\n [16. 25. 36.]]\n[[0. 0. 0.]\n [0. 0. 0.]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆó‰∏éÊ†áÈáèÁöÑËøêÁÆó",
    "href": "qmd/pandas3ed4cn.html#numpy-Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆó‰∏éÊ†áÈáèÁöÑËøêÁÆó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆóÔºö‰∏éÊ†áÈáèÁöÑËøêÁÆó",
    "text": "NumPy Êï∞ÁªÑÁöÑÁÆóÊúØËøêÁÆóÔºö‰∏éÊ†áÈáèÁöÑËøêÁÆó\n\n‰∏éÊ†áÈáèÁöÑËøêÁÆó: ‰∏éÊ†áÈáèÁöÑÁÆóÊúØËøêÁÆó‰ºöÂ∞ÜÊ†áÈáèÂÄº‰º†Êí≠Âà∞Êï∞ÁªÑ‰∏≠ÁöÑÊØè‰∏™ÂÖÉÁ¥†Ôºö\n\n\nprint(1 / arr)   # ÊØè‰∏™ÂÖÉÁ¥†Èô§‰ª• 1\nprint(arr ** 2) # ÊØè‰∏™ÂÖÉÁ¥†Âπ≥Êñπ\n\n[[1.         0.5        0.33333333]\n [0.25       0.2        0.16666667]]\n[[ 1.  4.  9.]\n [16. 25. 36.]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÂπøÊí≠ÁÆÄË¶Å‰ªãÁªç",
    "href": "qmd/pandas3ed4cn.html#ÂπøÊí≠ÁÆÄË¶Å‰ªãÁªç",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂπøÊí≠ÔºàÁÆÄË¶Å‰ªãÁªçÔºâ",
    "text": "ÂπøÊí≠ÔºàÁÆÄË¶Å‰ªãÁªçÔºâ\n\n‰ªÄ‰πàÊòØÂπøÊí≠Ôºü ‰∏ÄÁßçÂº∫Â§ßÁöÑÊú∫Âà∂ÔºåÂÖÅËÆ∏ NumPy Âú®Êüê‰∫õÊù°‰ª∂‰∏ãÂØπ‰∏çÂêåÂΩ¢Áä∂ÁöÑÊï∞ÁªÑÊâßË°åÁÆóÊúØËøêÁÆó„ÄÇ\nÁ§∫‰æã: ÊÇ®ÂèØ‰ª•Â∞ÜÊ†áÈáèÊ∑ªÂä†Âà∞‰ªª‰ΩïÂΩ¢Áä∂ÁöÑÊï∞ÁªÑ„ÄÇÊ†áÈáèÂÆûÈôÖ‰∏äË¢´‚ÄúÊãâ‰º∏‚Äù‰ª•ÂåπÈÖçÊï∞ÁªÑÁöÑÂΩ¢Áä∂„ÄÇ\nÊàë‰ª¨Á®çÂêé‰ºöÊõ¥ËØ¶ÁªÜÂú∞‰ªãÁªçÂπøÊí≠„ÄÇÁé∞Âú®ÔºåÂè™ÈúÄÁü•ÈÅìÂÆÉÁöÑÂ≠òÂú®Âç≥ÂèØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâá",
    "href": "qmd/pandas3ed4cn.html#Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâá",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâá",
    "text": "Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâá\n\nÁ±ª‰ºº‰∫é Python ÂàóË°®: ‰∏ÄÁª¥ NumPy Êï∞ÁªÑÁöÑÁ¥¢ÂºïÂíåÂàáÁâáÊñπÂºè‰∏é Python ÂàóË°®ÈùûÂ∏∏Áõ∏‰ººÔºö\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\narr = np.arange(10)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 9 ÁöÑÊï∞ÁªÑ\nprint(arr[5])      # ËÆøÈóÆÁ¥¢Âºï 5 Â§ÑÁöÑÂÖÉÁ¥†\nprint(arr[5:8])    # ÂØπÁ¥¢Âºï 5 Âà∞ 8Ôºà‰∏çÂåÖÊã¨ 8ÔºâÁöÑÂÖÉÁ¥†ËøõË°åÂàáÁâá\narr[5:8] = 12     # Â∞Ü‰∏Ä‰∏™ÂÄºËµãÁªô‰∏Ä‰∏™ÂàáÁâá\nprint(arr)  # ÊâìÂç∞‰øÆÊîπÂêéÁöÑÊï∞ÁªÑ\n\n5\n[5 6 7]\n[ 0  1  2  3  4 12 12 12  8  9]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâáËßÜÂõæ-vs.-ÂâØÊú¨",
    "href": "qmd/pandas3ed4cn.html#Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâáËßÜÂõæ-vs.-ÂâØÊú¨",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâáÔºöËßÜÂõæ vs.¬†ÂâØÊú¨",
    "text": "Âü∫Êú¨Á¥¢ÂºïÂíåÂàáÁâáÔºöËßÜÂõæ vs.¬†ÂâØÊú¨\n\nËßÜÂõæ vs.¬†ÂâØÊú¨: Êï∞ÁªÑÂàáÁâáÊòØÂéüÂßãÊï∞ÁªÑ‰∏äÁöÑËßÜÂõæ„ÄÇËøôÊÑèÂë≥ÁùÄ‰øÆÊîπÂàáÁâáÂ∞Ü‰øÆÊîπÂéüÂßãÊï∞ÁªÑ„ÄÇËøô‰∏é Python ÂàóË°®‰∏çÂêå„ÄÇ\n\n\narr_slice = arr[5:8]  # ÂàõÂª∫‰∏Ä‰∏™ÂàáÁâá\narr_slice[1] = 12345  # ‰øÆÊîπÂàáÁâá\nprint(arr)          # ÂéüÂßãÊï∞ÁªÑ‰πüË¢´‰øÆÊîπÔºÅ\n\n[    0     1     2     3     4    12 12345    12     8     9]\n\n\nÂ¶ÇÊûúÊÇ®ÊÉ≥Ë¶Å ndarray ÂàáÁâáÁöÑÂâØÊú¨ËÄå‰∏çÊòØËßÜÂõæÔºåÂàôÈúÄË¶ÅÊòæÂºèÂ§çÂà∂ËØ•Êï∞ÁªÑ - ‰æãÂ¶ÇÔºåarr[5:8].copy()„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶‰∫åÁª¥Êï∞ÁªÑ",
    "href": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶‰∫åÁª¥Êï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶Ôºà‰∫åÁª¥Êï∞ÁªÑÔºâ",
    "text": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶Ôºà‰∫åÁª¥Êï∞ÁªÑÔºâ\n\n‰∫åÁª¥Êï∞ÁªÑ: ÊÇ®ÂèØ‰ª•‰ΩøÁî®ÈÄóÂè∑ÂàÜÈöîÁöÑÁ¥¢ÂºïÊù•ËÆøÈóÆÂÖÉÁ¥†Ôºö\n\n\narr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # ÂàõÂª∫‰∏Ä‰∏™‰∫åÁª¥Êï∞ÁªÑ\nprint(arr2d[2])     # ËÆøÈóÆÁ¨¨‰∏âË°åÔºàÁ¥¢Âºï 2Ôºâ\nprint(arr2d[0][2])  # ËÆøÈóÆÁ¨¨ 0 Ë°åÁ¨¨ 2 ÂàóÁöÑÂÖÉÁ¥†Ôºà‰∏§ÁßçÊñπÂºèÔºâ\nprint(arr2d[0, 2])   # ËÆøÈóÆÁ¨¨ 0 Ë°åÁ¨¨ 2 ÂàóÁöÑÂÖÉÁ¥†\n\n[7 8 9]\n3\n3"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶ËΩ¥",
    "href": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶ËΩ¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàËΩ¥Ôºâ",
    "text": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàËΩ¥Ôºâ\n\nÂÖ≥‰∫éËΩ¥ÁöÑÊ¶ÇÂøµ:\n\nËΩ¥ 0: Ë°å\nËΩ¥ 1: Âàó"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#numpy-Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†Á¥¢Âºï",
    "href": "qmd/pandas3ed4cn.html#numpy-Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†Á¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†Á¥¢Âºï„ÄÇ",
    "text": "NumPy Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†Á¥¢Âºï„ÄÇ\n\n\n\n\n\ngraph LR\n    subgraph \"Axis 0 (Rows)\"\n        0 --&gt; 1\n        1 --&gt; 2\n    end\n    subgraph \"Axis 1 (Columns)\"\n        0 --&gt; 0[0,0]\n        0 --&gt; 1[0,1]\n        0 --&gt; 2[0,2]\n        1 --&gt; 3[1,0]\n        1 --&gt; 4[1,1]\n        1 --&gt; 5[1,2]\n        2 --&gt; 6[2,0]\n        2 --&gt; 7[2,1]\n        2 --&gt; 8[2,2]\n    end"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶Â§öÁª¥ÂàáÁâá",
    "href": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶Â§öÁª¥ÂàáÁâá",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàÂ§öÁª¥ÂàáÁâáÔºâ",
    "text": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàÂ§öÁª¥ÂàáÁâáÔºâ\n\nÂ§öÁª¥ÂàáÁâá:\n\n\nprint(arr2d[:2])      # ÈÄâÊã©Ââç‰∏§Ë°å\nprint(arr2d[:2, 1:])   # ÈÄâÊã©Ââç‰∏§Ë°åÔºå‰ª•ÂèäÁ¥¢Âºï 1 Âèä‰πãÂêéÁöÑÂàó\n\n[[1 2 3]\n [4 5 6]]\n[[2 3]\n [5 6]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶Ê∑∑ÂêàÊï¥Êï∞Á¥¢ÂºïÂíåÂàáÁâá",
    "href": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶Ê∑∑ÂêàÊï¥Êï∞Á¥¢ÂºïÂíåÂàáÁâá",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàÊ∑∑ÂêàÊï¥Êï∞Á¥¢ÂºïÂíåÂàáÁâáÔºâ",
    "text": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàÊ∑∑ÂêàÊï¥Êï∞Á¥¢ÂºïÂíåÂàáÁâáÔºâ\n\nÊ∑∑ÂêàÊï¥Êï∞Á¥¢ÂºïÂíåÂàáÁâá:\n\n\nprint(arr2d[1, :2])   # ÈÄâÊã©Á¨¨‰∫åË°åÔºåÂâç‰∏§ÂàóÔºàËæÉ‰ΩéÁª¥Â∫¶ÁöÑÂàáÁâáÔºâ\nprint(arr2d[:2, 2])    # ÈÄâÊã©Ââç‰∏§Ë°åÔºåÁ¨¨‰∏âÂàó\n\n[4 5]\n[3 6]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶ÂÜíÂè∑Ë°®Á§∫Êï¥‰∏™ËΩ¥",
    "href": "qmd/pandas3ed4cn.html#Á¥¢ÂºïÂíåÂàáÁâáÊõ¥È´òÁª¥Â∫¶ÂÜíÂè∑Ë°®Á§∫Êï¥‰∏™ËΩ¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàÂÜíÂè∑Ë°®Á§∫Êï¥‰∏™ËΩ¥Ôºâ",
    "text": "Á¥¢ÂºïÂíåÂàáÁâáÔºöÊõ¥È´òÁª¥Â∫¶ÔºàÂÜíÂè∑Ë°®Á§∫Êï¥‰∏™ËΩ¥Ôºâ\n\nÂÜíÂè∑Ë°®Á§∫Êï¥‰∏™ËΩ¥:\n\n\nprint(arr2d[:, :1])   # ÈÄâÊã©ÊâÄÊúâË°åÔºå‰ΩÜÂè™ÈÄâÊã©Á¨¨‰∏ÄÂàó\n\n[[1]\n [4]\n [7]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr21",
    "href": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr21",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[:2,1:]",
    "text": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[:2,1:]\n\n\n\nË°®ËææÂºè\nÂΩ¢Áä∂\n\n\n\n\narr[:2,1:]\n(2,2)"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr2",
    "href": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[2]",
    "text": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[2]\n\n\n\nË°®ËææÂºè\nÂΩ¢Áä∂\n\n\n\n\narr[2]\n(3,)"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr2-1",
    "href": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr2-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[2,:]",
    "text": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[2,:]\n\n\n\nË°®ËææÂºè\nÂΩ¢Áä∂\n\n\n\n\narr[2,:]\n(3,)"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr2-2",
    "href": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr2-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[2:,:]",
    "text": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[2:,:]\n\n\n\nË°®ËææÂºè\nÂΩ¢Áä∂\n\n\n\n\narr[2:,:]\n(1,3)"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr-2",
    "href": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[:, :2]",
    "text": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[:, :2]\n\n\n\nË°®ËææÂºè\nÂΩ¢Áä∂\n\n\n\n\narr[:, :2]\n(3,2)"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr1-2",
    "href": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr1-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[1, :2]",
    "text": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[1, :2]\n\n\n\nË°®ËææÂºè\nÂΩ¢Áä∂\n\n\n\n\narr[1, :2]\n(2,)"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr12-2",
    "href": "qmd/pandas3ed4cn.html#‰∫åÁª¥Êï∞ÁªÑÂàáÁâáarr12-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[1:2, :2]",
    "text": "‰∫åÁª¥Êï∞ÁªÑÂàáÁâáÔºöarr[1:2, :2]\n\n\n\nË°®ËææÂºè\nÂΩ¢Áä∂\n\n\n\n\narr[1:2, :2]\n(1,2)"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢ÂºïÂàõÂª∫Â∏ÉÂ∞îÊï∞ÁªÑ",
    "href": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢ÂºïÂàõÂª∫Â∏ÉÂ∞îÊï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºöÂàõÂª∫Â∏ÉÂ∞îÊï∞ÁªÑ",
    "text": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºöÂàõÂª∫Â∏ÉÂ∞îÊï∞ÁªÑ\n\nÊ¶ÇÂøµ: Ê†πÊçÆÂ∏ÉÂ∞îÊï∞ÁªÑÈÄâÊã©Êï∞ÊçÆ„ÄÇÂ∏ÉÂ∞îÊï∞ÁªÑÈÄöÂ∏∏‰∏éÊÇ®Ë¶ÅÁ¥¢ÂºïÁöÑÊï∞ÁªÑÂÖ∑ÊúâÁõ∏ÂêåÁöÑÂΩ¢Áä∂„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÂêçÂ≠óÁöÑÊï∞ÁªÑ\ndata = np.array([[4, 7], [0, 2], [-5, 6], [0, 0], [1, 2],\n                 [-12, -4], [3, 4]])  # ÂàõÂª∫‰∏Ä‰∏™Êï∞ÊçÆÊï∞ÁªÑ\n\nprint(names == 'Bob')  # ÂàõÂª∫‰∏Ä‰∏™Â∏ÉÂ∞îÊï∞ÁªÑÔºåÊåáÁ§∫Âì™‰∫õÂêçÂ≠óÊòØ 'Bob'\n\n[ True False False  True False False False]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢ÂºïÈÄâÊã©Ë°å",
    "href": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢ÂºïÈÄâÊã©Ë°å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºöÈÄâÊã©Ë°å",
    "text": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºöÈÄâÊã©Ë°å\n\nprint(data[names == 'Bob'])  # ÈÄâÊã©ÂêçÂ≠ó‰∏∫ 'Bob' ÁöÑÂØπÂ∫îË°å\n\n[[4 7]\n [0 0]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢Âºï‰∏éÂàáÁâáÁ¥¢ÂºïÁªìÂêà",
    "href": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢Âºï‰∏éÂàáÁâáÁ¥¢ÂºïÁªìÂêà",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºö‰∏éÂàáÁâá/Á¥¢ÂºïÁªìÂêà",
    "text": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºö‰∏éÂàáÁâá/Á¥¢ÂºïÁªìÂêà\n\nprint(data[names == 'Bob', 1:])  # ÈÄâÊã©ÂêçÂ≠ó‰∏∫ 'Bob' ÁöÑÂØπÂ∫îË°åÔºå‰ª•ÂèäÁ¥¢Âºï 1 Âèä‰πãÂêéÁöÑÂàó\nprint(data[names != 'Bob'])     # ÈÄâÊã©ÂêçÂ≠ó‰∏çÊòØ 'Bob' ÁöÑÂØπÂ∫îË°å\n\n[[7]\n [0]]\n[[  0   2]\n [ -5   6]\n [  1   2]\n [-12  -4]\n [  3   4]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢ÂºïÈÄªËæëËøêÁÆóÁ¨¶",
    "href": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÁ¥¢ÂºïÈÄªËæëËøêÁÆóÁ¨¶",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºöÈÄªËæëËøêÁÆóÁ¨¶",
    "text": "Â∏ÉÂ∞îÁ¥¢ÂºïÔºöÈÄªËæëËøêÁÆóÁ¨¶\n\nÈÄªËæëËøêÁÆóÁ¨¶:\n\n~: ÂØπÂ∏ÉÂ∞îÊï∞ÁªÑÂèñÂèçÔºàÁ±ª‰ºº‰∫é notÔºâ\n&: ÁªÑÂêàÊù°‰ª∂ÔºàÁ±ª‰ºº‰∫é andÔºâ\n|: ÁªÑÂêàÊù°‰ª∂ÔºàÁ±ª‰ºº‰∫é orÔºâ\n\n\n\nmask = (names == 'Bob') | (names == 'Will')  # ÂàõÂª∫‰∏Ä‰∏™Êé©Á†ÅÔºåÈÄâÊã©ÂêçÂ≠ó‰∏∫ 'Bob' Êàñ 'Will' ÁöÑË°å\nprint(data[mask])  # ‰ΩøÁî®Êé©Á†ÅÈÄâÊã©Êï∞ÊçÆ\n\n[[ 4  7]\n [-5  6]\n [ 0  0]\n [ 1  2]]\n\n\nPython ÂÖ≥ÈîÆÂ≠ó and Âíå or ‰∏çÈÄÇÁî®‰∫éÂ∏ÉÂ∞îÊï∞ÁªÑ„ÄÇËØ∑ÊîπÁî® & (and) Âíå | (or)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Ëä±ÂºèÁ¥¢ÂºïÈÄâÊã©ÁâπÂÆöË°å",
    "href": "qmd/pandas3ed4cn.html#Ëä±ÂºèÁ¥¢ÂºïÈÄâÊã©ÁâπÂÆöË°å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ëä±ÂºèÁ¥¢ÂºïÔºöÈÄâÊã©ÁâπÂÆöË°å",
    "text": "Ëä±ÂºèÁ¥¢ÂºïÔºöÈÄâÊã©ÁâπÂÆöË°å\n\nÊ¶ÇÂøµ: ‰ΩøÁî®Êï¥Êï∞Êï∞ÁªÑËøõË°åÁ¥¢Âºï„ÄÇÂÖÅËÆ∏ÊÇ®ÈÄâÊã©ÁâπÂÆöÁöÑË°åÊàñÂàóÔºåÁîöËá≥ÈáçÊñ∞ÊéíÂàóÂÆÉ‰ª¨„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\narr = np.zeros((8, 4))  # ÂàõÂª∫‰∏Ä‰∏™ 8x4 ÁöÑÂÖ®Èõ∂Êï∞ÁªÑ\nfor i in range(8):      # Âæ™ÁéØÈÅçÂéÜÊØè‰∏ÄË°å\n    arr[i] = i          # Â∞ÜÊØè‰∏ÄË°åÁöÑÂÄºËÆæÁΩÆ‰∏∫Ë°åÂè∑\nprint(arr)\nprint(arr[[4, 3, 0, 6]])  # ÊåâÊåáÂÆöÈ°∫Â∫èÈÄâÊã©Á¨¨ 4„ÄÅ3„ÄÅ0 Âíå 6 Ë°å\n\n[[0. 0. 0. 0.]\n [1. 1. 1. 1.]\n [2. 2. 2. 2.]\n [3. 3. 3. 3.]\n [4. 4. 4. 4.]\n [5. 5. 5. 5.]\n [6. 6. 6. 6.]\n [7. 7. 7. 7.]]\n[[4. 4. 4. 4.]\n [3. 3. 3. 3.]\n [0. 0. 0. 0.]\n [6. 6. 6. 6.]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Ëä±ÂºèÁ¥¢ÂºïÈÄâÊã©ÁâπÂÆöÂÖÉÁ¥†",
    "href": "qmd/pandas3ed4cn.html#Ëä±ÂºèÁ¥¢ÂºïÈÄâÊã©ÁâπÂÆöÂÖÉÁ¥†",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ëä±ÂºèÁ¥¢ÂºïÔºöÈÄâÊã©ÁâπÂÆöÂÖÉÁ¥†",
    "text": "Ëä±ÂºèÁ¥¢ÂºïÔºöÈÄâÊã©ÁâπÂÆöÂÖÉÁ¥†\n\narr = np.arange(32).reshape((8, 4))  # ÂàõÂª∫‰∏Ä‰∏™ 8x4 ÁöÑÊï∞ÁªÑÔºåÂÄº‰∏∫ 0 Âà∞ 31\nprint(arr[[1, 5, 7, 2], [0, 3, 1, 2]]) # ÈÄâÊã©ÂÖÉÁ¥† (1, 0), (5, 3), (7, 1), (2, 2)\n\n[ 4 23 29 10]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Ëä±ÂºèÁ¥¢ÂºïÈÄâÊã©Áü©ÂΩ¢Âå∫Âüü",
    "href": "qmd/pandas3ed4cn.html#Ëä±ÂºèÁ¥¢ÂºïÈÄâÊã©Áü©ÂΩ¢Âå∫Âüü",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ëä±ÂºèÁ¥¢ÂºïÔºöÈÄâÊã©Áü©ÂΩ¢Âå∫Âüü",
    "text": "Ëä±ÂºèÁ¥¢ÂºïÔºöÈÄâÊã©Áü©ÂΩ¢Âå∫Âüü\n\nprint(arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]])  # ÈÄâÊã©Á¨¨ 1„ÄÅ5„ÄÅ7„ÄÅ2 Ë°åÔºåÂπ∂ÈáçÊñ∞ÊéíÂàóÂàóÁöÑÈ°∫Â∫è\n\n[[ 4  7  5  6]\n [20 23 21 22]\n [28 31 29 30]\n [ 8 11  9 10]]\n\n\n\nÈáçË¶ÅÊèêÁ§∫: ‰∏éÂàáÁâá‰∏çÂêåÔºåËä±ÂºèÁ¥¢ÂºïÊÄªÊòØÂ∞ÜÊï∞ÊçÆÂ§çÂà∂Âà∞Êñ∞Êï∞ÁªÑ‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ËΩ¨ÁΩÆÊï∞ÁªÑÂíå‰∫§Êç¢ËΩ¥",
    "href": "qmd/pandas3ed4cn.html#ËΩ¨ÁΩÆÊï∞ÁªÑÂíå‰∫§Êç¢ËΩ¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËΩ¨ÁΩÆÊï∞ÁªÑÂíå‰∫§Êç¢ËΩ¥",
    "text": "ËΩ¨ÁΩÆÊï∞ÁªÑÂíå‰∫§Êç¢ËΩ¥\n\nËΩ¨ÁΩÆ: ÈÄöËøá‰∫§Êç¢Ë°åÂíåÂàóÊù•ÈáçÊñ∞ÊéíÂàóÊï∞ÊçÆ„ÄÇ‰ΩøÁî® .T Â±ûÊÄßÊàñ transpose ÊñπÊ≥ï„ÄÇ\n\n\narr = np.arange(15).reshape((3, 5))  # ÂàõÂª∫‰∏Ä‰∏™ 3x5 ÁöÑÊï∞ÁªÑ\nprint(arr)  # ÊâìÂç∞ÂéüÂßãÊï∞ÁªÑ\nprint(arr.T)  # ËΩ¨ÁΩÆÊï∞ÁªÑ\n\n[[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]]\n[[ 0  5 10]\n [ 1  6 11]\n [ 2  7 12]\n [ 3  8 13]\n [ 4  9 14]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ËΩ¨ÁΩÆÊï∞ÁªÑÁü©Èòµ‰πòÊ≥ï",
    "href": "qmd/pandas3ed4cn.html#ËΩ¨ÁΩÆÊï∞ÁªÑÁü©Èòµ‰πòÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËΩ¨ÁΩÆÊï∞ÁªÑÔºöÁü©Èòµ‰πòÊ≥ï",
    "text": "ËΩ¨ÁΩÆÊï∞ÁªÑÔºöÁü©Èòµ‰πòÊ≥ï\n\nÁü©Èòµ‰πòÊ≥ï: ‰ΩøÁî® np.dot Êàñ @ ËøêÁÆóÁ¨¶ËøõË°åÁü©Èòµ‰πòÊ≥ï„ÄÇ\n\n\narr = np.array([[0, 1, 0], [1, 2, -2], [6, 3, 2], [-1, 0, -1], [1, 0, 1]])  # ÂàõÂª∫‰∏Ä‰∏™Êï∞ÁªÑ\nprint(np.dot(arr.T, arr))  # Áü©Èòµ‰πòÊ≥ï\nprint(arr.T @ arr) # ‰ΩøÁî® @ ËøêÁÆóÁ¨¶ËøõË°åÁü©Èòµ‰πòÊ≥ï\n\n[[39 20 12]\n [20 14  2]\n [12  2 10]]\n[[39 20 12]\n [20 14  2]\n [12  2 10]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ËΩ¨ÁΩÆÊï∞ÁªÑ‰∫§Êç¢ËΩ¥",
    "href": "qmd/pandas3ed4cn.html#ËΩ¨ÁΩÆÊï∞ÁªÑ‰∫§Êç¢ËΩ¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËΩ¨ÁΩÆÊï∞ÁªÑÔºö‰∫§Êç¢ËΩ¥",
    "text": "ËΩ¨ÁΩÆÊï∞ÁªÑÔºö‰∫§Êç¢ËΩ¥\n\n‰∫§Êç¢ËΩ¥: swapaxes ÊñπÊ≥ïÊé•Âèó‰∏ÄÂØπËΩ¥ÁºñÂè∑Âπ∂‰∫§Êç¢ÊåáÂÆöÁöÑËΩ¥„ÄÇ\n\n\nprint(arr.swapaxes(0, 1)) # ‰∫§Êç¢ËΩ¥ 0 ÂíåËΩ¥ 1\n\n[[ 0  1  6 -1  1]\n [ 1  2  3  0  0]\n [ 0 -2  2 -1  1]]\n\n\nËΩ¨ÁΩÆÂíå swapaxes ËøîÂõûÂ∫ïÂ±ÇÊï∞ÊçÆ‰∏äÁöÑËßÜÂõæÔºåËÄå‰∏çËøõË°åÂ§çÂà∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰º™ÈöèÊú∫Êï∞ÁîüÊàê",
    "href": "qmd/pandas3ed4cn.html#‰º™ÈöèÊú∫Êï∞ÁîüÊàê",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰º™ÈöèÊú∫Êï∞ÁîüÊàê",
    "text": "‰º™ÈöèÊú∫Êï∞ÁîüÊàê\n\nnumpy.random Ê®°Âùó: Êèê‰æõÁîüÊàêÈöèÊú∫Êï∞Êï∞ÁªÑÁöÑÂáΩÊï∞„ÄÇ\ndefault_rng: ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®ÁöÑÊé®ËçêÊñπÊ≥ï„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÁßçÂ≠êÁöÑÁîüÊàêÂô®\ndata = rng.standard_normal((2, 3))       # ÁîüÊàê‰∏Ä‰∏™ 2x3 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÂÄºÊï∞ÁªÑ\nprint(data)  # ÊâìÂç∞ÁîüÊàêÁöÑÊï∞ÁªÑ\n\n[[-1.42382504  1.26372846 -0.87066174]\n [-0.25917323 -0.07534331 -0.74088465]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰º™ÈöèÊú∫Êï∞ÁîüÊàêÁª≠",
    "href": "qmd/pandas3ed4cn.html#‰º™ÈöèÊú∫Êï∞ÁîüÊàêÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰º™ÈöèÊú∫Êï∞ÁîüÊàêÔºàÁª≠Ôºâ",
    "text": "‰º™ÈöèÊú∫Êï∞ÁîüÊàêÔºàÁª≠Ôºâ\n\n‰∏∫‰ªÄ‰πàË¶Å‰ΩøÁî®ÁßçÂ≠êÔºü ËÆæÁΩÆÁßçÂ≠êÂèØÁ°Æ‰øùÂèØÈáçÂ§çÊÄß„ÄÇÊØèÊ¨°ÈÉΩ‰ºöÂæóÂà∞Áõ∏ÂêåÁöÑÈöèÊú∫Êï∞„ÄÇ\nÁîüÊàêÂô®ÈöîÁ¶ª: ÁîüÊàêÂô®ÂØπË±° rng ‰∏éÂèØËÉΩ‰πü‰ΩøÁî® numpy.random Ê®°ÂùóÁöÑÂÖ∂‰ªñ‰ª£Á†ÅÈöîÁ¶ª„ÄÇ\nÊÄßËÉΩ: numpy.random Âú®ÁîüÊàêÂ§ßÂûãÊï∞ÁªÑÊñπÈù¢ÊØî Python ÁöÑÂÜÖÁΩÆ random Ê®°ÂùóÂø´ÂæóÂ§ö„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy.random-ÂáΩÊï∞",
    "href": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy.random-ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏ËßÅÁöÑ numpy.random ÂáΩÊï∞",
    "text": "Â∏∏ËßÅÁöÑ numpy.random ÂáΩÊï∞\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\npermutation\nËøîÂõûÂ∫èÂàóÁöÑÈöèÊú∫ÊéíÂàóÔºåÊàñÊéíÂàóÂêéÁöÑËåÉÂõ¥„ÄÇ\n\n\nshuffle\nÂ∞±Âú∞ÈöèÊú∫ÊéíÂàóÂ∫èÂàó„ÄÇ\n\n\nuniform\n‰ªéÂùáÂåÄÂàÜÂ∏É‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy.random-ÂáΩÊï∞Áª≠",
    "href": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy.random-ÂáΩÊï∞Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏ËßÅÁöÑ numpy.random ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "Â∏∏ËßÅÁöÑ numpy.random ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nintegers\n‰ªéÁªôÂÆöÁöÑ‰ΩéÂà∞È´òËåÉÂõ¥‰∏≠ÊäΩÂèñÈöèÊú∫Êï¥Êï∞„ÄÇ\n\n\nstandard_normal\n‰ªéÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÔºàÂùáÂÄº‰∏∫ 0ÔºåÊ†áÂáÜÂ∑Æ‰∏∫ 1Ôºâ‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ\n\n\nbinomial\n‰ªé‰∫åÈ°πÂàÜÂ∏É‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy.random-ÂáΩÊï∞Áª≠-1",
    "href": "qmd/pandas3ed4cn.html#Â∏∏ËßÅÁöÑ-numpy.random-ÂáΩÊï∞Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏ËßÅÁöÑ numpy.random ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "Â∏∏ËßÅÁöÑ numpy.random ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nnormal\n‰ªéÊ≠£ÊÄÅÔºàÈ´òÊñØÔºâÂàÜÂ∏É‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ\n\n\nbeta\n‰ªé Beta ÂàÜÂ∏É‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ\n\n\nchisquare\n‰ªéÂç°ÊñπÂàÜÂ∏É‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ\n\n\ngamma\n‰ªé‰ºΩÈ©¨ÂàÜÂ∏É‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ\n\n\nuniform\n‰ªéÂùáÂåÄ [0, 1) ÂàÜÂ∏É‰∏≠ÊäΩÂèñÊ†∑Êú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÈÄöÁî®ÂáΩÊï∞-ufuncs",
    "href": "qmd/pandas3ed4cn.html#ÈÄöÁî®ÂáΩÊï∞-ufuncs",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÄöÁî®ÂáΩÊï∞ (ufuncs)",
    "text": "ÈÄöÁî®ÂáΩÊï∞ (ufuncs)\n\n‰ªÄ‰πàÊòØ ufuncsÔºü ÂØπ ndarray ÊâßË°åÈÄêÂÖÉÁ¥†Êìç‰ΩúÁöÑÂáΩÊï∞„ÄÇÂÆÉ‰ª¨ÊòØÁÆÄÂçïÂáΩÊï∞ÁöÑÂø´ÈÄüÂêëÈáèÂåñÂåÖË£ÖÂô®„ÄÇ\n‰∏ÄÂÖÉ ufuncs: Êé•ÂèóÂçï‰∏™Êï∞ÁªÑ‰Ωú‰∏∫ËæìÂÖ•„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\narr = np.arange(10)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 9 ÁöÑÊï∞ÁªÑ\nprint(np.sqrt(arr))    # ÊØè‰∏™ÂÖÉÁ¥†ÁöÑÂπ≥ÊñπÊ†π\nprint(np.exp(arr))     # ÊØè‰∏™ÂÖÉÁ¥†ÁöÑÊåáÊï∞\n\n[0.         1.         1.41421356 1.73205081 2.         2.23606798\n 2.44948974 2.64575131 2.82842712 3.        ]\n[1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01\n 5.45981500e+01 1.48413159e+02 4.03428793e+02 1.09663316e+03\n 2.98095799e+03 8.10308393e+03]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÈÄöÁî®ÂáΩÊï∞-ufuncs‰∫åÂÖÉÂíåËøîÂõûÂ§ö‰∏™Êï∞ÁªÑÁöÑÂáΩÊï∞",
    "href": "qmd/pandas3ed4cn.html#ÈÄöÁî®ÂáΩÊï∞-ufuncs‰∫åÂÖÉÂíåËøîÂõûÂ§ö‰∏™Êï∞ÁªÑÁöÑÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÄöÁî®ÂáΩÊï∞ (ufuncs)Ôºö‰∫åÂÖÉÂíåËøîÂõûÂ§ö‰∏™Êï∞ÁªÑÁöÑÂáΩÊï∞",
    "text": "ÈÄöÁî®ÂáΩÊï∞ (ufuncs)Ôºö‰∫åÂÖÉÂíåËøîÂõûÂ§ö‰∏™Êï∞ÁªÑÁöÑÂáΩÊï∞\n\n‰∫åÂÖÉ ufuncs: Êé•Âèó‰∏§‰∏™Êï∞ÁªÑ‰Ωú‰∏∫ËæìÂÖ•„ÄÇ\n\n\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫‰∏Ä‰∏™ÈöèÊú∫Êï∞ÁîüÊàêÂô®\nx = rng.standard_normal(8)  # ÁîüÊàê 8 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞\ny = rng.standard_normal(8)  # ÁîüÊàê 8 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞\nprint(np.maximum(x, y))  # ÈÄêÂÖÉÁ¥†ÊúÄÂ§ßÂÄº\n\n[ 0.36105811  1.26372846  2.34740965  0.96849691 -0.07534331  0.90219827\n -0.46695317  0.6488928 ]\n\n\n\nËøîÂõûÂ§ö‰∏™Êï∞ÁªÑÁöÑ ufuncs:\n\n\narr = rng.standard_normal(7) * 5  # ÁîüÊàê 7 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞Âπ∂‰πò‰ª• 5\nremainder, whole_part = np.modf(arr)  # ËøîÂõûÂ∞èÊï∞ÈÉ®ÂàÜÂíåÊï¥Êï∞ÈÉ®ÂàÜ\nprint(remainder)  # ÊâìÂç∞Â∞èÊï∞ÈÉ®ÂàÜ\nprint(whole_part) # ÊâìÂç∞Êï¥Êï∞ÈÉ®ÂàÜ\n\n[ 0.94422172 -0.28334067  0.87928757  0.99489497  0.6114903  -0.49849258\n  0.51459671]\n[ 3. -6.  2.  6.  6. -1.  4.]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞",
    "href": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞",
    "text": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nabs, fabs\nÈÄêÂÖÉÁ¥†ËÆ°ÁÆóÁªùÂØπÂÄº„ÄÇfabs ÂØπ‰∫éÈùûÂ§çÊï∞Êï∞ÊçÆÊõ¥Âø´„ÄÇ\n\n\nsqrt\nËÆ°ÁÆóÊØè‰∏™ÂÖÉÁ¥†ÁöÑÂπ≥ÊñπÊ†πÔºàÁõ∏ÂΩì‰∫é arr ** 0.5Ôºâ„ÄÇ\n\n\nsquare\nËÆ°ÁÆóÊØè‰∏™ÂÖÉÁ¥†ÁöÑÂπ≥ÊñπÔºàÁõ∏ÂΩì‰∫é arr ** 2Ôºâ„ÄÇ\n\n\nexp\nËÆ°ÁÆóÊØè‰∏™ÂÖÉÁ¥†ÁöÑÊåáÊï∞ ex„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠",
    "href": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nlog, log10, log2, log1p\nËá™ÁÑ∂ÂØπÊï∞Ôºà‰ª• e ‰∏∫Â∫ïÔºâ„ÄÅ‰ª• 10 ‰∏∫Â∫ïÁöÑÂØπÊï∞„ÄÅ‰ª• 2 ‰∏∫Â∫ïÁöÑÂØπÊï∞Âíå log(1 + x)„ÄÇ\n\n\nsign\nËÆ°ÁÆóÊØè‰∏™ÂÖÉÁ¥†ÁöÑÁ¨¶Âè∑Ôºö1ÔºàÊ≠£Êï∞Ôºâ„ÄÅ0ÔºàÈõ∂ÔºâÊàñ -1ÔºàË¥üÊï∞Ôºâ„ÄÇ\n\n\nceil\nËÆ°ÁÆóÊØè‰∏™ÂÖÉÁ¥†ÁöÑ‰∏äÈôêÔºàÂ§ß‰∫éÊàñÁ≠â‰∫éËØ•Êï∞Â≠óÁöÑÊúÄÂ∞èÊï¥Êï∞Ôºâ„ÄÇ\n\n\nfloor\nËÆ°ÁÆóÊØè‰∏™ÂÖÉÁ¥†ÁöÑ‰∏ãÈôêÔºàÂ∞è‰∫éÊàñÁ≠â‰∫éÊØè‰∏™ÂÖÉÁ¥†ÁöÑÊúÄÂ§ßÊï¥Êï∞Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠-1",
    "href": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nrint\nÂ∞ÜÂÖÉÁ¥†ÂõõËàç‰∫îÂÖ•Âà∞ÊúÄÊé•ËøëÁöÑÊï¥Êï∞Ôºå‰øùÁïô dtype„ÄÇ\n\n\nmodf\nÂ∞ÜÊï∞ÁªÑÁöÑÂ∞èÊï∞ÈÉ®ÂàÜÂíåÊï¥Êï∞ÈÉ®ÂàÜ‰Ωú‰∏∫ÂçïÁã¨ÁöÑÊï∞ÁªÑËøîÂõû„ÄÇ\n\n\nisnan\nËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞îÊï∞ÁªÑÔºåÊåáÁ§∫ÊØè‰∏™ÂÄºÊòØÂê¶‰∏∫ NaNÔºàÈùûÊï∞Â≠óÔºâ„ÄÇ\n\n\nisfinite, isinf\nËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞îÊï∞ÁªÑÔºåÊåáÁ§∫ÊØè‰∏™ÂÖÉÁ¥†ÊòØÂê¶ÊúâÈôêÊàñÊó†Èôê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠-2",
    "href": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "‰∏Ä‰∫õ‰∏ÄÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\ncos, cosh, sin, sinh, tan, tanh\nÂ∏∏ËßÑÂíåÂèåÊõ≤‰∏âËßíÂáΩÊï∞„ÄÇ\n\n\narccos, arccosh, arcsin, arcsinh, arctan, arctanh\nÂèç‰∏âËßíÂáΩÊï∞„ÄÇ\n\n\nlogical_not\nÈÄêÂÖÉÁ¥†ËÆ°ÁÆó not x ÁöÑÁúüÂÄºÔºàÁõ∏ÂΩì‰∫é ~arrÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞",
    "href": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞",
    "text": "‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nadd\nÂ∞ÜÊï∞ÁªÑ‰∏≠ÁöÑÂØπÂ∫îÂÖÉÁ¥†Áõ∏Âä†„ÄÇ\n\n\nsubtract\n‰ªéÁ¨¨‰∏Ä‰∏™Êï∞ÁªÑ‰∏≠ÂáèÂéªÁ¨¨‰∫å‰∏™Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†„ÄÇ\n\n\nmultiply\nÂ∞ÜÊï∞ÁªÑÂÖÉÁ¥†Áõ∏‰πò„ÄÇ\n\n\ndivide, floor_divide\nÈô§Ê≥ïÊàñÂêë‰∏ãÂèñÊï¥Èô§Ê≥ïÔºàÊà™Êñ≠‰ΩôÊï∞Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠",
    "href": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\npower\nÂ∞ÜÁ¨¨‰∏Ä‰∏™Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†ÊèêÂçáÂà∞Á¨¨‰∫å‰∏™Êï∞ÁªÑ‰∏≠ÊåáÁ§∫ÁöÑÂπÇ„ÄÇ\n\n\nmaximum, fmax\nÈÄêÂÖÉÁ¥†ÊúÄÂ§ßÂÄº„ÄÇfmax ÂøΩÁï• NaN„ÄÇ\n\n\nminimum, fmin\nÈÄêÂÖÉÁ¥†ÊúÄÂ∞èÂÄº„ÄÇfmin ÂøΩÁï• NaN„ÄÇ\n\n\nmod\nÈÄêÂÖÉÁ¥†ÂèñÊ®°ÔºàÈô§Ê≥ïÁöÑ‰ΩôÊï∞Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠-1",
    "href": "qmd/pandas3ed4cn.html#‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "‰∏Ä‰∫õ‰∫åÂÖÉÈÄöÁî®ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\ncopysign\nÂ∞ÜÁ¨¨‰∫å‰∏™ÂèÇÊï∞‰∏≠ÁöÑÂÄºÁöÑÁ¨¶Âè∑Â§çÂà∂Âà∞Á¨¨‰∏Ä‰∏™ÂèÇÊï∞‰∏≠ÁöÑÂÄº„ÄÇ\n\n\ngreater, greater_equal, less, less_equal, equal, not_equal\nÊâßË°åÈÄêÂÖÉÁ¥†ÊØîËæÉÔºå‰∫ßÁîü‰∏Ä‰∏™Â∏ÉÂ∞îÊï∞ÁªÑ„ÄÇ\n\n\nlogical_and, logical_or, logical_xor\nËÆ°ÁÆóÈÄªËæëËøêÁÆóÁöÑÈÄêÂÖÉÁ¥†ÁúüÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÁ§∫‰æã",
    "href": "qmd/pandas3ed4cn.html#Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÔºöÁ§∫‰æã",
    "text": "Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÔºöÁ§∫‰æã\nËÆ©Êàë‰ª¨ËÆ°ÁÆóÂáΩÊï∞ ‚àö(x^2 + y^2) Âú®‰∏Ä‰∏™ÂÄºÁΩëÊ†º‰∏äÁöÑÁªìÊûúÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\npoints = np.arange(-5, 5, 0.01)  # 1000 ‰∏™Á≠âË∑ùÁÇπ\nxs, ys = np.meshgrid(points, points)  # ÂàõÂª∫ÂùêÊ†áÁü©Èòµ\nz = np.sqrt(xs ** 2 + ys ** 2)      # ËÆ°ÁÆóÂáΩÊï∞"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed4cn.html#Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÔºöÂèØËßÜÂåñ",
    "text": "Èù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÔºöÂèØËßÜÂåñ\nÁé∞Âú®ÔºåËÆ©Êàë‰ª¨‰ΩøÁî® Matplotlib ÂèØËßÜÂåñÁªìÊûúÔºö\n\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• Matplotlib\nplt.imshow(z, cmap=plt.cm.gray, extent=[-5, 5, -5, 5])  # ÊòæÁ§∫ÂõæÂÉè\nplt.colorbar()  # Ê∑ªÂä†È¢úËâ≤Êù°\nplt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\")  # ËÆæÁΩÆÊ†áÈ¢ò\n# plt.close('all') # Â¶ÇÊûúÊÇ®‰∏çÊÉ≥Á´ãÂç≥ÊòæÁ§∫ÂõæÂΩ¢ÔºåÂèØ‰ª•ÂèñÊ∂àÊ≥®ÈáäÊ≠§Ë°å\nplt.show() # ÊòæÁ§∫ÁªòÂõæÁªìÊûú\n\n&lt;&gt;:4: SyntaxWarning: invalid escape sequence '\\s'\n&lt;&gt;:4: SyntaxWarning: invalid escape sequence '\\s'\n/tmp/ipykernel_3252/2810001697.py:4: SyntaxWarning: invalid escape sequence '\\s'\n  plt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\")  # ËÆæÁΩÆÊ†áÈ¢ò\n\n\n\n\n\n\n\n\n\nÊ≠§Á§∫‰æãÊºîÁ§∫‰∫ÜÈù¢ÂêëÊï∞ÁªÑÁºñÁ®ãÁöÑÁÆÄÊ¥ÅÂíåÈ´òÊïà„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Ë°®ËææÊù°‰ª∂ÈÄªËæënp.where",
    "href": "qmd/pandas3ed4cn.html#Ë°®ËææÊù°‰ª∂ÈÄªËæënp.where",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ë°®ËææÊù°‰ª∂ÈÄªËæëÔºönp.where",
    "text": "Ë°®ËææÊù°‰ª∂ÈÄªËæëÔºönp.where\n\nnp.where: ‰∏âÂÖÉË°®ËææÂºè x if condition else y ÁöÑÂêëÈáèÂåñÁâàÊú¨„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])  # ÂàõÂª∫Êï∞ÁªÑ xarr\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])  # ÂàõÂª∫Êï∞ÁªÑ yarr\ncond = np.array([True, False, True, True, False])  # ÂàõÂª∫Êù°‰ª∂Êï∞ÁªÑ\n\nresult = np.where(cond, xarr, yarr)  # Â¶ÇÊûú cond ‰∏∫ TrueÔºåÂàôÈÄâÊã© xarr ‰∏≠ÁöÑÂÖÉÁ¥†ÔºåÂê¶ÂàôÈÄâÊã© yarr ‰∏≠ÁöÑÂÖÉÁ¥†\nprint(result)  # ÊâìÂç∞ÁªìÊûú\n\n[1.1 2.2 1.3 1.4 2.5]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Ë°®ËææÊù°‰ª∂ÈÄªËæënp.whereÁ§∫‰æã",
    "href": "qmd/pandas3ed4cn.html#Ë°®ËææÊù°‰ª∂ÈÄªËæënp.whereÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ë°®ËææÊù°‰ª∂ÈÄªËæëÔºönp.whereÔºàÁ§∫‰æãÔºâ",
    "text": "Ë°®ËææÊù°‰ª∂ÈÄªËæëÔºönp.whereÔºàÁ§∫‰æãÔºâ\n\nÁ§∫‰æã: Â∞ÜÊï∞ÁªÑ‰∏≠ÁöÑÊ≠£ÂÄºÊõøÊç¢‰∏∫ 2ÔºåÂ∞ÜË¥üÂÄºÊõøÊç¢‰∏∫ -2Ôºö\n\n\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\narr = rng.standard_normal((4, 4))  # ÂàõÂª∫‰∏Ä‰∏™ 4x4 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nresult = np.where(arr &gt; 0, 2, -2)  # Â∞ÜÂ§ß‰∫é 0 ÁöÑÂÖÉÁ¥†ÊõøÊç¢‰∏∫ 2ÔºåÂ∞è‰∫é 0 ÁöÑÂÖÉÁ¥†ÊõøÊç¢‰∏∫ -2\nprint(result)  # ÊâìÂç∞ÁªìÊûú\n\n[[-2  2 -2 -2]\n [-2 -2 -2  2]\n [ 2 -2  2  2]\n [-2  2 -2 -2]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ï",
    "href": "qmd/pandas3ed4cn.html#Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ï",
    "text": "Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ï\nNumPy Êèê‰æõ‰∫Ü‰∏ÄÁªÑÁî®‰∫éËÆ°ÁÆóÊï∞ÁªÑÁªüËÆ°‰ø°ÊÅØÁöÑÊñπÊ≥ïÔºö\n\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\narr = rng.standard_normal((5, 4))  # ÂàõÂª∫‰∏Ä‰∏™ 5x4 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nprint(arr.mean())       # ÊâÄÊúâÂÖÉÁ¥†ÁöÑÂπ≥ÂùáÂÄº\nprint(np.mean(arr))    # Á≠âÂêå‰∫é arr.mean()\nprint(arr.sum())        # ÊâÄÊúâÂÖÉÁ¥†ÁöÑÊÄªÂíå\n\n0.0010611661248891013\n0.0010611661248891013\n0.021223322497782027"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïËΩ¥ÂèÇÊï∞",
    "href": "qmd/pandas3ed4cn.html#Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïËΩ¥ÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïÔºöËΩ¥ÂèÇÊï∞",
    "text": "Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïÔºöËΩ¥ÂèÇÊï∞\n\nËΩ¥ÂèÇÊï∞: ËÆ∏Â§öÊñπÊ≥ïÈááÁî®ÂèØÈÄâÁöÑ axis ÂèÇÊï∞Êù•ËÆ°ÁÆóÊ≤øÁâπÂÆöËΩ¥ÁöÑÁªüËÆ°‰ø°ÊÅØÔºö\n\n\nprint(arr.mean(axis=1))  # Ê≤øÂàóËÆ°ÁÆóÂπ≥ÂùáÂÄºÔºàÂØπ‰∫éÊØè‰∏ÄË°åÔºâ\nprint(arr.sum(axis=0))   # Ê≤øË°åËÆ°ÁÆóÊÄªÂíåÔºàÂØπ‰∫éÊØè‰∏ÄÂàóÔºâ\n\n[-0.32248289 -0.38378196  0.4310254  -0.0962079   0.37675318]\n[-1.10865307 -1.78448912  0.21785956  2.69650595]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïcumsum-Âíå-cumprod",
    "href": "qmd/pandas3ed4cn.html#Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïcumsum-Âíå-cumprod",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïÔºöcumsum Âíå cumprod",
    "text": "Êï∞Â≠¶ÂíåÁªüËÆ°ÊñπÊ≥ïÔºöcumsum Âíå cumprod\n\ncumsum Âíå cumprod: ËÆ°ÁÆóÁ¥ØÁßØÂíåÂíåÁ¥ØÁßØÁßØÔºö\n\n\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7])  # ÂàõÂª∫‰∏Ä‰∏™Êï∞ÁªÑ\nprint(arr.cumsum())  # ËÆ°ÁÆóÁ¥ØÁßØÂíå\n\n[ 0  1  3  6 10 15 21 28]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ï",
    "href": "qmd/pandas3ed4cn.html#Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ï",
    "text": "Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ï\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nsum\nÊï∞ÁªÑ‰∏≠ÊâÄÊúâÂÖÉÁ¥†ÊàñÊ≤øËΩ¥ÁöÑÂÖÉÁ¥†ÊÄªÂíåÔºõÈõ∂ÈïøÂ∫¶Êï∞ÁªÑÁöÑÊÄªÂíå‰∏∫ 0„ÄÇ\n\n\nmean\nÁÆóÊúØÂπ≥ÂùáÂÄºÔºõÂØπ‰∫éÈõ∂ÈïøÂ∫¶Êï∞ÁªÑÊó†ÊïàÔºàËøîÂõû NaNÔºâ„ÄÇ\n\n\nstd, var\nÂàÜÂà´‰∏∫Ê†áÂáÜÂ∑ÆÂíåÊñπÂ∑Æ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ïÁª≠",
    "href": "qmd/pandas3ed4cn.html#Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ïÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ïÔºàÁª≠Ôºâ",
    "text": "Âü∫Êú¨Êï∞ÁªÑÁªüËÆ°ÊñπÊ≥ïÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nmin,max\nÊúÄÂ∞èÂÄºÂíåÊúÄÂ§ßÂÄº„ÄÇ\n\n\nargmin, argmax\nÂàÜÂà´‰∏∫ÊúÄÂ∞èÂíåÊúÄÂ§ßÂÖÉÁ¥†ÁöÑÁ¥¢Âºï„ÄÇ\n\n\ncumsum\n‰ªé 0 ÂºÄÂßãÁöÑÂÖÉÁ¥†Á¥ØÁßØÂíå„ÄÇ\n\n\ncumprod\n‰ªé 1 ÂºÄÂßãÁöÑÂÖÉÁ¥†Á¥ØÁßØÁßØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïÂ∏ÉÂ∞îÂÄºÊ±ÇÂíå",
    "href": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïÂ∏ÉÂ∞îÂÄºÊ±ÇÂíå",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïÔºöÂ∏ÉÂ∞îÂÄºÊ±ÇÂíå",
    "text": "Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïÔºöÂ∏ÉÂ∞îÂÄºÊ±ÇÂíå\n\nÂ∏ÉÂ∞îÂÄº sum: True ÂÄºË¢´ËßÜ‰∏∫ 1ÔºåFalse ÂÄºË¢´ËßÜ‰∏∫ 0„ÄÇÁî®‰∫éËÆ°ÁÆó True ÂÄºÁöÑÊï∞Èáè„ÄÇ\n\n\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\narr = rng.standard_normal(100)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 100 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÂÄºÁöÑÊï∞ÁªÑ\nprint((arr &gt; 0).sum())  # ËÆ°ÁÆóÊ≠£ÂÄºÁöÑÊï∞Èáè\n\n50"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïany-Âíå-all",
    "href": "qmd/pandas3ed4cn.html#Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïany-Âíå-all",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïÔºöany Âíå all",
    "text": "Â∏ÉÂ∞îÊï∞ÁªÑÁöÑÊñπÊ≥ïÔºöany Âíå all\n\nany Âíå all:\n\nany: Ê£ÄÊü•Â∏ÉÂ∞îÊï∞ÁªÑ‰∏≠ÊòØÂê¶Ëá≥Â∞ëÊúâ‰∏Ä‰∏™ÂÄº‰∏∫ True„ÄÇ\nall: Ê£ÄÊü•Â∏ÉÂ∞îÊï∞ÁªÑ‰∏≠ÊòØÂê¶ÊâÄÊúâÂÄºÈÉΩ‰∏∫ True„ÄÇ\n\n\n\nbools = np.array([False, False, True, False])  # ÂàõÂª∫‰∏Ä‰∏™Â∏ÉÂ∞îÊï∞ÁªÑ\nprint(bools.any())  # ÊòØÂê¶Ëá≥Â∞ëÊúâ‰∏Ä‰∏™ TrueÔºü\nprint(bools.all())  # ÊòØÂê¶ÊâÄÊúâÂÄºÈÉΩ‰∏∫ TrueÔºü\n\nTrue\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÊéíÂ∫èsort-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed4cn.html#ÊéíÂ∫èsort-ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊéíÂ∫èÔºösort ÊñπÊ≥ï",
    "text": "ÊéíÂ∫èÔºösort ÊñπÊ≥ï\n\nsort ÊñπÊ≥ï: Â∞±Âú∞ÂØπÊï∞ÁªÑËøõË°åÊéíÂ∫è„ÄÇ\n\n\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\narr = rng.standard_normal(6) #ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´6‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÂÖÉÁ¥†ÁöÑÊï∞ÁªÑ\narr.sort()  # Â∞±Âú∞ÂØπÊï∞ÁªÑËøõË°åÊéíÂ∫è\nprint(arr)  # ÊâìÂç∞ÊéíÂ∫èÂêéÁöÑÊï∞ÁªÑ\n\n[-1.42382504 -0.87066174 -0.74088465 -0.25917323 -0.07534331  1.26372846]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÊéíÂ∫èÊ≤øËΩ¥ÊéíÂ∫è",
    "href": "qmd/pandas3ed4cn.html#ÊéíÂ∫èÊ≤øËΩ¥ÊéíÂ∫è",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊéíÂ∫èÔºöÊ≤øËΩ¥ÊéíÂ∫è",
    "text": "ÊéíÂ∫èÔºöÊ≤øËΩ¥ÊéíÂ∫è\n\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\narr = rng.standard_normal((5, 3))   # ÂàõÂª∫‰∏Ä‰∏™ 5x3 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\narr.sort(axis=0)  # Âú®ÊØè‰∏ÄÂàóÂÜÖÊéíÂ∫è\nprint(arr)  # ÊâìÂç∞ÊéíÂ∫èÂêéÁöÑÊï∞ÁªÑ\n\n[[-1.95286306 -0.07534331 -0.87066174]\n [-1.42382504  0.6488928  -0.74088465]\n [-1.3677927   0.90219827 -0.46695317]\n [-0.75938718  1.26372846  0.36105811]\n [-0.25917323  2.34740965  0.96849691]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÊéíÂ∫èÊ≤øËΩ¥ÊéíÂ∫èÁª≠",
    "href": "qmd/pandas3ed4cn.html#ÊéíÂ∫èÊ≤øËΩ¥ÊéíÂ∫èÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊéíÂ∫èÔºöÊ≤øËΩ¥ÊéíÂ∫èÔºàÁª≠Ôºâ",
    "text": "ÊéíÂ∫èÔºöÊ≤øËΩ¥ÊéíÂ∫èÔºàÁª≠Ôºâ\n\narr.sort(axis=1) # Âú®ÊØè‰∏ÄË°åÂÜÖÊéíÂ∫è\nprint(arr)  # ÊâìÂç∞ÊéíÂ∫èÂêéÁöÑÊï∞ÁªÑ\n\n[[-1.95286306 -0.87066174 -0.07534331]\n [-1.42382504 -0.74088465  0.6488928 ]\n [-1.3677927  -0.46695317  0.90219827]\n [-0.75938718  0.36105811  1.26372846]\n [-0.25917323  0.96849691  2.34740965]]\n\n\n\nnp.sort ÂáΩÊï∞: ËøîÂõûÊï∞ÁªÑÁöÑÊéíÂ∫èÂâØÊú¨Ôºà‰∏ç‰øÆÊîπÂéüÂßãÊï∞ÁªÑÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæënp.unique",
    "href": "qmd/pandas3ed4cn.html#ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæënp.unique",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæëÔºönp.unique",
    "text": "ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæëÔºönp.unique\n\nnp.unique: ËøîÂõûÊï∞ÁªÑ‰∏≠Â∑≤ÊéíÂ∫èÁöÑÂîØ‰∏ÄÂÄº„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nnames = np.array(['Bob', 'Will', 'Joe', 'Bob', 'Will', 'Joe', 'Joe'])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÂêçÂ≠óÁöÑÊï∞ÁªÑ\nprint(np.unique(names)) # Ëé∑ÂèñÂîØ‰∏ÄÁöÑÂêçÂ≠ó\n\n['Bob' 'Joe' 'Will']"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæënp.in1d",
    "href": "qmd/pandas3ed4cn.html#ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæënp.in1d",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæëÔºönp.in1d",
    "text": "ÂîØ‰∏ÄÂÄºÂíåÂÖ∂‰ªñÈõÜÂêàÈÄªËæëÔºönp.in1d\n\nnp.in1d: ÊµãËØï‰∏Ä‰∏™Êï∞ÁªÑ‰∏≠ÁöÑÂÄºÊòØÂê¶Âú®Âè¶‰∏Ä‰∏™Êï∞ÁªÑ‰∏≠„ÄÇ\n\n\nvalues = np.array([6, 0, 0, 3, 2, 5, 6])  # ÂàõÂª∫‰∏Ä‰∏™Êï∞ÁªÑ\nprint(np.in1d(values, [2, 3, 6]))  # Ê£ÄÊü• 'values' ‰∏≠ÁöÑÊØè‰∏™ÂÄºÊòØÂê¶Âú® [2, 3, 6] ‰∏≠\n\n[ True False False  True  True False  True]\n\n\n/tmp/ipykernel_3252/3548356960.py:2: DeprecationWarning: `in1d` is deprecated. Use `np.isin` instead.\n  print(np.in1d(values, [2, 3, 6]))  # Ê£ÄÊü• 'values' ‰∏≠ÁöÑÊØè‰∏™ÂÄºÊòØÂê¶Âú® [2, 3, 6] ‰∏≠"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÈõÜÂêàÊìç‰Ωú",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÈõÜÂêàÊìç‰Ωú",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÈõÜÂêàÊìç‰Ωú",
    "text": "Êï∞ÁªÑÈõÜÂêàÊìç‰Ωú\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nunique(x)\nËÆ°ÁÆó x ‰∏≠Â∑≤ÊéíÂ∫èÁöÑÂîØ‰∏ÄÂÖÉÁ¥†„ÄÇ\n\n\nintersect1d(x, y)\nËÆ°ÁÆó x Âíå y ‰∏≠Â∑≤ÊéíÂ∫èÁöÑÂÖ¨ÂÖ±ÂÖÉÁ¥†„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÁª≠",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÔºàÁª≠Ôºâ",
    "text": "Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nunion1d(x, y)\nËÆ°ÁÆóÂÖÉÁ¥†ÁöÑÊéíÂ∫èÂπ∂ÈõÜ„ÄÇ\n\n\nin1d(x, y)\nËÆ°ÁÆó‰∏Ä‰∏™Â∏ÉÂ∞îÊï∞ÁªÑÔºåÊåáÁ§∫ x ÁöÑÊØè‰∏™ÂÖÉÁ¥†ÊòØÂê¶Âú® y ‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÁª≠-1",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÔºàÁª≠Ôºâ",
    "text": "Êï∞ÁªÑÈõÜÂêàÊìç‰ΩúÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nsetdiff1d(x, y)\nÈõÜÂêàÂ∑ÆÔºöÂú® x ‰∏≠‰ΩÜ‰∏çÂú® y ‰∏≠ÁöÑÂÖÉÁ¥†„ÄÇ\n\n\nsetxor1d(x, y)\nÈõÜÂêàÂØπÁß∞Â∑ÆÔºõÂú®‰ªª‰∏ÄÊï∞ÁªÑ‰∏≠‰ΩÜ‰∏çÂêåÊó∂Âú®‰∏§‰∏™Êï∞ÁªÑ‰∏≠ÁöÑÂÖÉÁ¥†„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫np.save-Âíå-np.load",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫np.save-Âíå-np.load",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫Ôºönp.save Âíå np.load",
    "text": "Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫Ôºönp.save Âíå np.load\n\nnp.save Âíå np.load: Áî®‰∫é‰ª• NumPy ÁöÑ‰∫åËøõÂà∂Ê†ºÂºè (.npy) ‰øùÂ≠òÂíåÂä†ËΩΩÊï∞ÁªÑÁöÑÂáΩÊï∞„ÄÇ\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\narr = np.arange(10)  # ÂàõÂª∫‰∏Ä‰∏™Êï∞ÁªÑ\nnp.save('some_array', arr)  # ‰øùÂ≠òÂà∞ 'some_array.npy'\nloaded_arr = np.load('some_array.npy')  # ‰ªé 'some_array.npy' Âä†ËΩΩ\nprint(loaded_arr)  # ÊâìÂç∞Âä†ËΩΩÁöÑÊï∞ÁªÑ\n\n[0 1 2 3 4 5 6 7 8 9]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫np.savez",
    "href": "qmd/pandas3ed4cn.html#Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫np.savez",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫Ôºönp.savez",
    "text": "Êï∞ÁªÑÁöÑÊñá‰ª∂ËæìÂÖ•ÂíåËæìÂá∫Ôºönp.savez\n\nnp.savez: Â∞ÜÂ§ö‰∏™Êï∞ÁªÑ‰øùÂ≠òÂà∞‰∏Ä‰∏™Êú™ÂéãÁº©ÁöÑÂ≠òÊ°£ (.npz) ‰∏≠„ÄÇ\n\n\nnp.savez('array_archive.npz', a=arr, b=arr)  # ‰øùÂ≠òÂ§ö‰∏™Êï∞ÁªÑ\narch = np.load('array_archive.npz')        # Âä†ËΩΩÂ≠òÊ°£\nprint(arch['b'])  # ÊåâÂêçÁß∞ËÆøÈóÆÊï∞ÁªÑ\n\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\nnp.savez_compressed: Â∞ÜÂ§ö‰∏™Êï∞ÁªÑ‰øùÂ≠òÂà∞‰∏Ä‰∏™ÂéãÁº©Â≠òÊ°£‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á∫øÊÄß‰ª£Êï∞Áü©Èòµ‰πòÊ≥ï",
    "href": "qmd/pandas3ed4cn.html#Á∫øÊÄß‰ª£Êï∞Áü©Èòµ‰πòÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á∫øÊÄß‰ª£Êï∞ÔºöÁü©Èòµ‰πòÊ≥ï",
    "text": "Á∫øÊÄß‰ª£Êï∞ÔºöÁü©Èòµ‰πòÊ≥ï\n\nnumpy.linalg Ê®°Âùó: Êèê‰æõÁî®‰∫éÁ∫øÊÄß‰ª£Êï∞ËøêÁÆóÁöÑÂáΩÊï∞„ÄÇ\nÁü©Èòµ‰πòÊ≥ï:\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nx = np.array([[1., 2., 3.], [4., 5., 6.]])  # ÂàõÂª∫Êï∞ÁªÑ x\ny = np.array([[6., 23.], [-1, 7], [8, 9]])  # ÂàõÂª∫Êï∞ÁªÑ y\nprint(x.dot(y))        # Áü©Èòµ‰πòÊ≥ïÔºàÊñπÊ≥ïÔºâ\nprint(np.dot(x, y))    # Áü©Èòµ‰πòÊ≥ïÔºàÂáΩÊï∞Ôºâ\nprint( x @ np.ones(3)) # ‰ΩøÁî® @ ËøêÁÆóÁ¨¶ËøõË°åÁü©Èòµ‰πòÊ≥ï\n\n[[ 28.  64.]\n [ 67. 181.]]\n[[ 28.  64.]\n [ 67. 181.]]\n[ 6. 15.]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á∫øÊÄß‰ª£Êï∞ÈÄÜÂíåË°åÂàóÂºè",
    "href": "qmd/pandas3ed4cn.html#Á∫øÊÄß‰ª£Êï∞ÈÄÜÂíåË°åÂàóÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á∫øÊÄß‰ª£Êï∞ÔºöÈÄÜÂíåË°åÂàóÂºè",
    "text": "Á∫øÊÄß‰ª£Êï∞ÔºöÈÄÜÂíåË°åÂàóÂºè\n\nÈÄÜÂíåË°åÂàóÂºè:\n\n\nfrom numpy.linalg import inv, qr  # ‰ªé numpy.linalg ÂØºÂÖ• inv Âíå qr\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\nX = rng.standard_normal((5, 5))  # ÂàõÂª∫‰∏Ä‰∏™ 5x5 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nmat = X.T @ X  # ËÆ°ÁÆó X ÁöÑËΩ¨ÁΩÆ‰∏é X ÁöÑ‰πòÁßØ\nprint(inv(mat))   # ËÆ°ÁÆóÁü©ÈòµÁöÑÈÄÜ\n\n[[ 0.15548538 -0.36723081 -0.52638547 -0.2300642  -0.04646089]\n [-0.36723081  2.54917814  3.47827334  1.48196722  0.22206454]\n [-0.52638547  3.47827334  5.46389554  2.46214396  0.63467543]\n [-0.2300642   1.48196722  2.46214396  1.38302896  0.33430132]\n [-0.04646089  0.22206454  0.63467543  0.33430132  0.33879566]]"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞",
    "href": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞",
    "text": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\ndiag\nÂ∞ÜÊñπÈòµÁöÑÂØπËßíÁ∫øÔºàÊàñÈùûÂØπËßíÁ∫øÔºâÂÖÉÁ¥†‰Ωú‰∏∫‰∏ÄÁª¥Êï∞ÁªÑËøîÂõûÔºåÊàñÂ∞Ü‰∏ÄÁª¥Êï∞ÁªÑËΩ¨Êç¢‰∏∫ÊñπÈòµ„ÄÇ\n\n\ndot\nÁü©Èòµ‰πòÊ≥ï„ÄÇ\n\n\ntrace\nËÆ°ÁÆóÂØπËßíÁ∫øÂÖÉÁ¥†ÁöÑÊÄªÂíå„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞Áª≠",
    "href": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\ndet\nËÆ°ÁÆóÁü©ÈòµË°åÂàóÂºè„ÄÇ\n\n\neig\nËÆ°ÁÆóÊñπÈòµÁöÑÁâπÂæÅÂÄºÂíåÁâπÂæÅÂêëÈáè„ÄÇ\n\n\ninv\nËÆ°ÁÆóÊñπÈòµÁöÑÈÄÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞Áª≠-1",
    "href": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\npinv\nËÆ°ÁÆóÁü©ÈòµÁöÑ Moore-Penrose ‰º™ÈÄÜ„ÄÇ\n\n\nqr\nËÆ°ÁÆó QR ÂàÜËß£„ÄÇ\n\n\nsvd\nËÆ°ÁÆóÂ•áÂºÇÂÄºÂàÜËß£ (SVD)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞Áª≠-2",
    "href": "qmd/pandas3ed4cn.html#Â∏∏Áî®ÁöÑ-numpy.linalg-ÂáΩÊï∞Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞ÔºàÁª≠Ôºâ",
    "text": "Â∏∏Áî®ÁöÑ numpy.linalg ÂáΩÊï∞ÔºàÁª≠Ôºâ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nsolve\nÊ±ÇËß£Á∫øÊÄßÊñπÁ®ãÁªÑ Ax = bÔºåÂÖ∂‰∏≠ A ÊòØÊñπÈòµ„ÄÇ\n\n\nlstsq\nËÆ°ÁÆó Ax = b ÁöÑÊúÄÂ∞è‰∫å‰πòËß£„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á§∫‰æãÈöèÊú∫Ê∏∏Ëµ∞",
    "href": "qmd/pandas3ed4cn.html#Á§∫‰æãÈöèÊú∫Ê∏∏Ëµ∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÈöèÊú∫Ê∏∏Ëµ∞",
    "text": "Á§∫‰æãÔºöÈöèÊú∫Ê∏∏Ëµ∞\nËÆ©Êàë‰ª¨‰ΩøÁî® NumPy Ê®°Êãü‰∏Ä‰∏™ÁÆÄÂçïÁöÑÈöèÊú∫Ê∏∏Ëµ∞Ôºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nnsteps = 1000  # ËÆæÁΩÆÊ≠•Êï∞\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\ndraws = rng.integers(0, 2, size=nsteps)  # ÁîüÊàê 0 Âíå 1ÔºàÁ°¨Â∏ÅÊäïÊé∑Ôºâ\nsteps = np.where(draws == 0, 1, -1)      # Â∞Ü 0 ËΩ¨Êç¢‰∏∫ 1Ôºå1 ËΩ¨Êç¢‰∏∫ -1\nwalk = steps.cumsum()                    # ËÆ°ÁÆóÁ¥ØÁßØÂíåÔºàÊ∏∏Ëµ∞Ôºâ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Á§∫‰æãÈöèÊú∫Ê∏∏Ëµ∞ÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed4cn.html#Á§∫‰æãÈöèÊú∫Ê∏∏Ëµ∞ÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÈöèÊú∫Ê∏∏Ëµ∞ÔºàÂèØËßÜÂåñÔºâ",
    "text": "Á§∫‰æãÔºöÈöèÊú∫Ê∏∏Ëµ∞ÔºàÂèØËßÜÂåñÔºâ\nÁÆÄÂçïÈöèÊú∫Ê∏∏Ëµ∞ÁöÑÂâç 100 Ê≠•Ôºö\n\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• Matplotlib\nplt.plot(walk[:100])  # ÁªòÂà∂Ââç 100 Ê≠•\nplt.show() # ÊòæÁ§∫ÁªòÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÈöèÊú∫Ê∏∏Ëµ∞ÂàÜÊûê",
    "href": "qmd/pandas3ed4cn.html#ÈöèÊú∫Ê∏∏Ëµ∞ÂàÜÊûê",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈöèÊú∫Ê∏∏Ëµ∞ÔºöÂàÜÊûê",
    "text": "ÈöèÊú∫Ê∏∏Ëµ∞ÔºöÂàÜÊûê\nÊàë‰ª¨ÂèØ‰ª•ÂàÜÊûêÈöèÊú∫Ê∏∏Ëµ∞Ôºö\n\nprint(walk.min())  # ÊúÄÂ∞èÂÄº\nprint(walk.max())  # ÊúÄÂ§ßÂÄº\n\n-8\n50"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÈöèÊú∫Ê∏∏Ëµ∞È¶ñÊ¨°Á©øË∂äÊó∂Èó¥",
    "href": "qmd/pandas3ed4cn.html#ÈöèÊú∫Ê∏∏Ëµ∞È¶ñÊ¨°Á©øË∂äÊó∂Èó¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈöèÊú∫Ê∏∏Ëµ∞ÔºöÈ¶ñÊ¨°Á©øË∂äÊó∂Èó¥",
    "text": "ÈöèÊú∫Ê∏∏Ëµ∞ÔºöÈ¶ñÊ¨°Á©øË∂äÊó∂Èó¥\n\nÈ¶ñÊ¨°Á©øË∂äÊó∂Èó¥: Ê∏∏Ëµ∞ËææÂà∞ÁâπÂÆöÂÄºÁöÑÊ≠•Êï∞„ÄÇ\n\n\nprint((np.abs(walk) &gt;= 10).argmax())  # ÊâæÂà∞ÁªùÂØπÂÄº &gt;= 10 ÁöÑÁ¨¨‰∏ÄÊ≠•\n\n155\n\n\nÂú®ËøôÈáå‰ΩøÁî® argmax Âπ∂‰∏çÊÄªÊòØÊúâÊïàÁöÑÔºåÂõ†‰∏∫ÂÆÉÊÄªÊòØÂØπÊï∞ÁªÑËøõË°åÂÖ®Èù¢Êâ´Êèè„ÄÇÂú®ËøôÁßçÁâπÊÆäÊÉÖÂÜµ‰∏ãÔºå‰∏ÄÊó¶ËßÇÂØüÂà∞ TrueÔºåÊàë‰ª¨Â∞±Áü•ÈÅìÂÆÉÊòØÊúÄÂ§ßÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#‰∏ÄÊ¨°Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞",
    "href": "qmd/pandas3ed4cn.html#‰∏ÄÊ¨°Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏ÄÊ¨°Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞",
    "text": "‰∏ÄÊ¨°Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞\nÊàë‰ª¨ÂèØ‰ª•È´òÊïàÂú∞‰∏ÄÊ¨°Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞Ôºö\n\nnwalks = 5000  # ËÆæÁΩÆÊ∏∏Ëµ∞Ê¨°Êï∞\nnsteps = 1000  # ËÆæÁΩÆÊ≠•Êï∞\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫ÈöèÊú∫Êï∞ÁîüÊàêÂô®\ndraws = rng.integers(0, 2, size=(nwalks, nsteps))  # ‰∏∫ÊâÄÊúâÊ∏∏Ëµ∞ÁîüÊàêÈöèÊú∫Êï∞\nsteps = np.where(draws &gt; 0, 1, -1)  # Â∞Ü 0 ËΩ¨Êç¢‰∏∫ 1Ôºå1 ËΩ¨Êç¢‰∏∫ -1\nwalks = steps.cumsum(axis=1)                     # ËÆ°ÁÆóÊØè‰∏™Ê∏∏Ëµ∞ÁöÑÁ¥ØÁßØÂíå"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞Âπ≥ÂùáÁ©øË∂äÊó∂Èó¥",
    "href": "qmd/pandas3ed4cn.html#Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞Âπ≥ÂùáÁ©øË∂äÊó∂Èó¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞ÔºöÂπ≥ÂùáÁ©øË∂äÊó∂Èó¥",
    "text": "Ê®°ÊãüÂ§ö‰∏™ÈöèÊú∫Ê∏∏Ëµ∞ÔºöÂπ≥ÂùáÁ©øË∂äÊó∂Èó¥\nÁÑ∂ÂêéÔºå‰æãÂ¶ÇÔºåËÆ°ÁÆóÂπ≥ÂùáÊúÄÂ∞èÁ©øË∂äÊó∂Èó¥Ôºö\n\nhits30 = (np.abs(walks) &gt;= 30).any(axis=1)  # Ê£ÄÊü•ÊòØÂê¶Êúâ‰ªª‰ΩïÊ∏∏Ëµ∞ËææÂà∞ 30 Êàñ -30\ncrossing_times = (np.abs(walks[hits30]) &gt;= 30).argmax(axis=1)  # ËÆ°ÁÆóËææÂà∞ 30 Êàñ -30 ÁöÑÊ≠•Êï∞\nprint(crossing_times.mean())  # ËÆ°ÁÆóÂπ≥ÂùáÁ©øË∂äÊó∂Èó¥\n\n500.6182621502209\n\n\nËøôÁßçÂêëÈáèÂåñÊñπÊ≥ïÈúÄË¶ÅÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ nwalks * nsteps ‰∏™ÂÖÉÁ¥†ÁöÑÊï∞ÁªÑÔºåËøôÂèØËÉΩ‰ºöÂú®Â§ßÂûãÊ®°Êãü‰∏≠‰ΩøÁî®Â§ßÈáèÂÜÖÂ≠ò„ÄÇÂ¶ÇÊûúÂÜÖÂ≠òÊõ¥ÂèóÈôêÂà∂ÔºåÂàôÈúÄË¶ÅÈááÁî®‰∏çÂêåÁöÑÊñπÊ≥ï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed4cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nNumPy ÁöÑÂº∫Â§ß‰πãÂ§Ñ: NumPy Âá≠ÂÄüÂÖ∂È´òÊïàÁöÑ ndarray ÂíåÂêëÈáèÂåñÊìç‰ΩúÔºå‰∏∫ Python ‰∏≠ÁöÑÊï∞ÂÄºËÆ°ÁÆóÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÂü∫Á°Ä„ÄÇ\nÂÖ≥ÈîÆÊ¶ÇÂøµ:\n\nndarray: ÂÖ∑ÊúâÂêåË¥®Êï∞ÊçÆÁöÑÂ§öÁª¥Êï∞ÁªÑ„ÄÇ\ndtype: Êï∞ÁªÑÂÖÉÁ¥†ÁöÑÊï∞ÊçÆÁ±ªÂûã„ÄÇ\nÂêëÈáèÂåñ: ÂØπÊï¥‰∏™Êï∞ÁªÑÊâßË°åÊìç‰ΩúÔºåÊó†ÈúÄÂæ™ÁéØ„ÄÇ\nÂπøÊí≠: ÂØπ‰∏çÂêåÂΩ¢Áä∂ÁöÑÊï∞ÁªÑËøõË°åÁÆóÊúØËøêÁÆó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÊÄªÁªìÁª≠",
    "href": "qmd/pandas3ed4cn.html#ÊÄªÁªìÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªìÔºàÁª≠Ôºâ",
    "text": "ÊÄªÁªìÔºàÁª≠Ôºâ\n\nÂÖ≥ÈîÆÊ¶ÇÂøµÔºàÁª≠Ôºâ:\n\nÁ¥¢ÂºïÂíåÂàáÁâá: ËÆøÈóÆÂíå‰øÆÊîπÊï∞ÁªÑÂÖÉÁ¥†ÂíåÂ≠êÊï∞ÁªÑ„ÄÇ\nËä±ÂºèÁ¥¢Âºï: ‰ΩøÁî®Êï¥Êï∞Êï∞ÁªÑËøõË°åÁ¥¢Âºï„ÄÇ\nËΩ¨ÁΩÆ: ÈáçÊñ∞ÊéíÂàóÊï∞ÊçÆ„ÄÇ\nufuncs: Âø´ÈÄüÁöÑÈÄêÂÖÉÁ¥†ÂáΩÊï∞„ÄÇ\nnumpy.random: ÁîüÊàêÈöèÊú∫Êï∞Êï∞ÁªÑ„ÄÇ\nÁ∫øÊÄß‰ª£Êï∞\n\nÊïàÁéá: NumPy ‰∏ì‰∏∫ÊÄßËÉΩËÄåËÆæËÆ°ÔºåÂ∞§ÂÖ∂ÊòØÂú®Â§ÑÁêÜÂ§ßÂûãÊï∞ÊçÆÈõÜÊó∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed4cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î\n\nNumPy ‰∏≠ÂêëÈáèÂåñÁöÑÊ¶ÇÂøµ‰∏éÊÇ®ÂèØËÉΩÂú®ÊÇ®‰∫ÜËß£ÁöÑÂÖ∂‰ªñÁºñÁ®ãËØ≠Ë®Ä‰∏≠ÊâßË°åÁ±ª‰ººÊìç‰ΩúÁöÑÊñπÂºèÁõ∏ÊØîÂ¶Ç‰ΩïÔºü\nÊÇ®ËÉΩÊÉ≥Âà∞Âì™‰∫õÂÖ∑‰ΩìÁöÑÊï∞ÊçÆÂàÜÊûê‰ªªÂä°ÔºåÂÖ∂‰∏≠ NumPy ÁöÑÈù¢ÂêëÊï∞ÁªÑÊñπÊ≥ïÊØî‰ΩøÁî® Python ÂàóË°®ÂíåÂæ™ÁéØÊõ¥ÊúâÊïàÔºü\nNumPy Êï∞ÁªÑÂàáÁâáÊòØËßÜÂõæËÄå‰∏çÊòØÂâØÊú¨ÔºåÊúâÂì™‰∫õ‰ºòÁÇπÂíåÊΩúÂú®Áº∫ÁÇπÔºü‰ªÄ‰πàÊó∂ÂÄôÂèØËÉΩÈúÄË¶ÅÊòæÂºèÂàõÂª∫ÂâØÊú¨Ôºü"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫-Áª≠",
    "href": "qmd/pandas3ed4cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§îÔºàÁª≠Ôºâ",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§îÔºàÁª≠Ôºâ\n\nËÄÉËôë np.where ÂáΩÊï∞„ÄÇÊÇ®Â¶Ç‰Ωï‰ΩøÁî®ÂÆÉÊù•ÂÆûÁé∞ÊØîÊàë‰ª¨ÁúãÂà∞ÁöÑÁÆÄÂçïÁ§∫‰æãÊõ¥Â§çÊùÇÁöÑÊù°‰ª∂ÈÄªËæëÔºü\n‰∏∫‰ªÄ‰πàÁêÜËß£ NumPy ÁöÑÊï∞ÊçÆÁ±ªÂûã (dtypes) ÂæàÈáçË¶ÅÔºüÂÆÉ‰ª¨Â¶Ç‰ΩïÂΩ±ÂìçÊÄßËÉΩÂíåÂÜÖÂ≠ò‰ΩøÁî®Ôºü\nËÆ®ËÆ∫ÊÇ®ÂèØËÉΩ‰ΩøÁî® NumPy Á∫øÊÄß‰ª£Êï∞ÂáΩÊï∞Ôºà‰æãÂ¶ÇÔºådot„ÄÅinv„ÄÅeigÔºâÁöÑÂú∫ÊôØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4cn.html#ÂØπÊÄùËÄÉÈ¢òÁöÑÊõ¥Ê∑±ÂÖ•Ëß£Á≠î",
    "href": "qmd/pandas3ed4cn.html#ÂØπÊÄùËÄÉÈ¢òÁöÑÊõ¥Ê∑±ÂÖ•Ëß£Á≠î",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØπÊÄùËÄÉÈ¢òÁöÑÊõ¥Ê∑±ÂÖ•Ëß£Á≠î",
    "text": "ÂØπÊÄùËÄÉÈ¢òÁöÑÊõ¥Ê∑±ÂÖ•Ëß£Á≠î\n\nÂêëÈáèÂåñ‰∏éÂÖ∂‰ªñÁºñÁ®ãËØ≠Ë®ÄÁöÑÊØîËæÉ:\n\nËÆ∏Â§öÁºñÁ®ãËØ≠Ë®ÄÈÉΩÊúâÁ±ª‰ººÂêëÈáèÂåñÊìç‰ΩúÁöÑÊ¶ÇÂøµ„ÄÇ‰æãÂ¶ÇÔºåMATLAB ÁöÑÊ†∏ÂøÉÂ∞±ÊòØÁü©ÈòµËøêÁÆóÔºåR ËØ≠Ë®Ä‰πü heavily relies on ÂêëÈáèÂåñ„ÄÇ\n‰∏é C/C++ Á≠âÂ∫ïÂ±ÇËØ≠Ë®ÄÁõ∏ÊØî,NumPy Êèê‰æõ‰∫ÜÊõ¥È´òÂ±ÇÊ¨°ÁöÑÊäΩË±°„ÄÇÂú® C/C++ ‰∏≠ÔºåÊÇ®ÂèØËÉΩÈúÄË¶ÅÊâãÂä®ÁºñÂÜôÂæ™ÁéØÊù•Â§ÑÁêÜÊï∞ÁªÑÔºåÂπ∂ÁÆ°ÁêÜÂÜÖÂ≠òÂàÜÈÖç„ÄÇNumPy Â§ÑÁêÜ‰∫ÜËøô‰∫õÂ∫ïÂ±ÇÁªÜËäÇÔºåËÆ©ÊÇ®‰∏ìÊ≥®‰∫éËß£ÂÜ≥ÈóÆÈ¢ò„ÄÇ\n‰∏é Java Á≠âËØ≠Ë®ÄÁõ∏ÊØîÔºåNumPy Êõ¥Âä†ÁÅµÊ¥ªÔºåÂõ†‰∏∫ Python ÊòØÂä®ÊÄÅÁ±ªÂûãËØ≠Ë®ÄÔºåËÄåJavaÊòØÈùôÊÄÅÁ±ªÂûãËØ≠Ë®Ä„ÄÇÂú®Êï∞ÊçÆÂàÜÊûêÂíåÁßëÂ≠¶ËÆ°ÁÆóÈ¢ÜÂüüÔºåËøôÊèê‰æõ‰∫ÜÊõ¥Â§ßÁöÑ‰æøÂà©ÊÄß„ÄÇ\n\nNumPy Êõ¥È´òÊïàÁöÑ‰ªªÂä°Á§∫‰æã:\n\nÂõæÂÉèÂ§ÑÁêÜ: ÂõæÂÉèÊú¨Ë¥®‰∏äÊòØÂ§öÁª¥Êï∞ÁªÑ„ÄÇNumPy ÂèØ‰ª•È´òÊïàÂú∞ÊâßË°åÂõæÂÉèÁöÑË£ÅÂâ™„ÄÅÁº©Êîæ„ÄÅÈ¢úËâ≤ËΩ¨Êç¢„ÄÅÊª§Ê≥¢Á≠âÊìç‰Ωú„ÄÇ\n‰ø°Âè∑Â§ÑÁêÜ: NumPy ÂèØ‰ª•Áî®‰∫éÈü≥È¢ë„ÄÅËßÜÈ¢ëÁ≠â‰ø°Âè∑ÁöÑÂàÜÊûêÂíåÂ§ÑÁêÜÔºåÂ¶ÇÂÇÖÈáåÂè∂ÂèòÊç¢„ÄÅÊª§Ê≥¢Á≠â„ÄÇ\nÊï∞ÂÄºÊ®°Êãü: ËÆ∏Â§öÁßëÂ≠¶ÂíåÂ∑•Á®ãÈ¢ÜÂüüÁöÑÊï∞ÂÄºÊ®°ÊãüÈÉΩÊ∂âÂèäÂ§ßÈáèÁöÑÁü©ÈòµÂíåÂêëÈáèËøêÁÆóÔºåNumPy ÊòØÁêÜÊÉ≥ÁöÑÈÄâÊã©„ÄÇ\nÊú∫Âô®Â≠¶‰π†: NumPy ÊòØËÆ∏Â§öÊú∫Âô®Â≠¶‰π†Â∫ìÁöÑÂü∫Á°ÄÔºåÁî®‰∫éË°®Á§∫Êï∞ÊçÆ„ÄÅÊâßË°åÊ®°ÂûãËÆ≠ÁªÉ‰∏≠ÁöÑËÆ°ÁÆóÁ≠â„ÄÇ\nÈáëËûçÂª∫Ê®°: NumPy ÂèØ‰ª•Áî®‰∫éÂ§ÑÁêÜÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆ„ÄÅËÆ°ÁÆóÁªüËÆ°ÊåáÊ†á„ÄÅÊûÑÂª∫ÈáëËûçÊ®°ÂûãÁ≠â„ÄÇ\n\nËßÜÂõæ vs.¬†ÂâØÊú¨:\n\n‰ºòÁÇπ (ËßÜÂõæ):\n\nËäÇÁúÅÂÜÖÂ≠ò: ËßÜÂõæ‰∏ç‰ºöÂ§çÂà∂Êï∞ÊçÆÔºåÂõ†Ê≠§Âú®Â§ÑÁêÜÂ§ßÂûãÊï∞ÁªÑÊó∂ÂèØ‰ª•ËäÇÁúÅÂ§ßÈáèÂÜÖÂ≠ò„ÄÇ\nÊïàÁéá: ÂØπËßÜÂõæÁöÑ‰øÆÊîπ‰ºöÂèçÊò†Âà∞ÂéüÂßãÊï∞ÁªÑÔºåÈÅøÂÖç‰∫Ü‰∏çÂøÖË¶ÅÁöÑÊï∞ÊçÆÂ§çÂà∂„ÄÇ\n\nÁº∫ÁÇπ (ËßÜÂõæ):\n\nÊÑèÂ§ñ‰øÆÊîπ: Â¶ÇÊûú‰∏çÂ∞èÂøÉ‰øÆÊîπ‰∫ÜËßÜÂõæÔºåÂèØËÉΩ‰ºöÊÑèÂ§ñÂú∞‰øÆÊîπÂéüÂßãÊï∞ÁªÑÔºåÂØºËá¥Èöæ‰ª•Ë∞ÉËØïÁöÑÈîôËØØ„ÄÇ\n\n‰ΩïÊó∂ÈúÄË¶ÅÂâØÊú¨:\n\nÂΩìÊÇ®ÈúÄË¶ÅÁã¨Á´ã‰øÆÊîπÊï∞ÁªÑÁöÑ‰∏ÄÈÉ®ÂàÜÔºåËÄå‰∏çÂΩ±ÂìçÂéüÂßãÊï∞ÁªÑÊó∂„ÄÇ\nÂΩìÊÇ®ÈúÄË¶ÅÂ∞ÜÊï∞ÁªÑ‰º†ÈÄíÁªô‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂπ∂‰∏î‰∏çÂ∏åÊúõËØ•ÂáΩÊï∞‰øÆÊîπÂéüÂßãÊï∞ÁªÑÊó∂„ÄÇ\n\nÂàõÂª∫ÂâØÊú¨ÁöÑÊñπÊ≥ïÔºö\n\n\n\narr_copy = arr[5:8].copy()\n\n\nnp.where ÂÆûÁé∞Êõ¥Â§çÊùÇÁöÑÊù°‰ª∂ÈÄªËæë:\n\nÂµåÂ•ó np.where:\n\n\n\n# Â§ö‰∏™Êù°‰ª∂\nresult = np.where(cond1, value1, np.where(cond2, value2, value3))\n\n*   **ÁªìÂêàÂ∏ÉÂ∞îËøêÁÆóÁ¨¶:**\n\n# ‰ΩøÁî® & (and), | (or), ~ (not)\nresult = np.where((arr &gt; 0) & (arr &lt; 10), arr * 2, arr / 2)\n\n\ndtypes ÁöÑÈáçË¶ÅÊÄß:\n\nÂÜÖÂ≠ò‰ºòÂåñ: ÈÄâÊã©ÂêàÈÄÇÁöÑ dtype ÂèØ‰ª•ÊòæËëóÂáèÂ∞ëÂÜÖÂ≠òÂç†Áî®„ÄÇ‰æãÂ¶ÇÔºåÂ¶ÇÊûúÊÇ®ÁöÑÊï∞ÊçÆÈÉΩÊòØ 0 Âà∞ 255 ‰πãÈó¥ÁöÑÊï¥Êï∞Ôºå‰ΩøÁî® uint8 ÊØî‰ΩøÁî® int64 ÂèØ‰ª•ËäÇÁúÅÂ§ßÈáèÂÜÖÂ≠ò„ÄÇ\nÁ≤æÂ∫¶ÊéßÂà∂: ÂØπ‰∫éÊµÆÁÇπÊï∞ÔºåÈÄâÊã© float32 Êàñ float64 ÂèñÂÜ≥‰∫éÊÇ®ÈúÄË¶ÅÁöÑÁ≤æÂ∫¶„ÄÇ\n‰∏éÂ∫ïÂ±Ç‰ª£Á†Å‰∫§‰∫í: ÂΩì‰∏é C/C++ ‰ª£Á†Å‰∫§‰∫íÊó∂ÔºåÊ≠£Á°ÆÈÄâÊã© dtype ÈùûÂ∏∏ÈáçË¶ÅÔºå‰ª•Á°Æ‰øùÊï∞ÊçÆÁ±ªÂûãÂåπÈÖç„ÄÇ\nÈò≤Ê≠¢Ê∫¢Âá∫: Â¶ÇÊûúÊ≤°ÊúâÈÄâÊã©ÂêàÈÄÇÁöÑdtype, Âú®ËÆ°ÁÆó‰∏≠ÂèØËÉΩ‰ºö‰∫ßÁîü‰∏äÊ∫¢Âá∫ÊàñËÄÖ‰∏ãÊ∫¢Âá∫ÔºåÂØºËá¥ËÆ°ÁÆóÁªìÊûúÈîôËØØ„ÄÇ\n\nÁ∫øÊÄß‰ª£Êï∞Â∫îÁî®Âú∫ÊôØ:\n\nÊ±ÇËß£Á∫øÊÄßÊñπÁ®ãÁªÑ: np.linalg.solve\nËÆ°ÁÆóÁâπÂæÅÂÄºÂíåÁâπÂæÅÂêëÈáè: np.linalg.eig (Áî®‰∫é‰∏ªÊàêÂàÜÂàÜÊûêÁ≠â)\nÁü©ÈòµÂàÜËß£: np.linalg.svd, np.linalg.qr (Áî®‰∫éÈôçÁª¥„ÄÅÊé®ËçêÁ≥ªÁªüÁ≠â)\nËÆ°ÁÆóË°åÂàóÂºè: np.linalg.det (Áî®‰∫éÂà§Êñ≠Áü©ÈòµÊòØÂê¶ÂèØÈÄÜ)\nÊúÄÂ∞è‰∫å‰πòÊãüÂêà : np.linalg.lstsq\n\n\nÊú™Êù•Â≠¶‰π†ÊñπÂêë\n\nÊéåÊè° NumPy ÁöÑÈ´òÁ∫ßÂäüËÉΩ:\n\nÂπøÊí≠ (Broadcasting): Ê∑±ÂÖ•ÁêÜËß£ÂπøÊí≠Êú∫Âà∂ÔºåËøôÊòØ NumPy Âº∫Â§ßÂäüËÉΩÁöÑÂü∫Á°Ä„ÄÇ\nufuncs: Êé¢Á¥¢Êõ¥Â§ö ufuncsÔºå‰∫ÜËß£ÂÆÉ‰ª¨ÁöÑÊÄßËÉΩ‰ºòÂäø„ÄÇ\nÁªìÊûÑÂåñÊï∞ÁªÑ (Structured Arrays): ‰∫ÜËß£Â¶Ç‰Ωï‰ΩøÁî®ÁªìÊûÑÂåñÊï∞ÁªÑÊù•Ë°®Á§∫Êõ¥Â§çÊùÇÁöÑÊï∞ÊçÆ„ÄÇ\nÂÜÖÂ≠òÊò†Â∞Ñ (Memory Mapping): ‰∫ÜËß£Â¶Ç‰Ωï‰ΩøÁî® np.memmap Êù•Â§ÑÁêÜË∂ÖÂá∫ÂÜÖÂ≠òÂÆπÈáèÁöÑÂ§ßÂûãÊï∞ÁªÑ„ÄÇ\n\n‰∏éÂÖ∂‰ªñÁßëÂ≠¶ËÆ°ÁÆóÂ∫ìÁªìÂêà:\n\nSciPy: Â≠¶‰π† SciPyÔºåÂÆÉÊèê‰æõ‰∫ÜÊõ¥Â§öÈ´òÁ∫ßÁöÑÁßëÂ≠¶ËÆ°ÁÆóÂäüËÉΩÔºåÂ¶Ç‰ºòÂåñ„ÄÅÁßØÂàÜ„ÄÅÊèíÂÄº„ÄÅ‰ø°Âè∑Â§ÑÁêÜÁ≠â„ÄÇ\nPandas: Â≠¶‰π† PandasÔºåÂÆÉÊûÑÂª∫Âú® NumPy ‰πã‰∏äÔºåÊèê‰æõ‰∫Ü DataFrame Êï∞ÊçÆÁªìÊûÑÔºåÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÂíåÂ§ÑÁêÜ„ÄÇ\nMatplotlib/Seaborn: Â≠¶‰π† Matplotlib Âíå SeabornÔºåÁî®‰∫éÊï∞ÊçÆÂèØËßÜÂåñ„ÄÇ\nScikit-learn: Â≠¶‰π† Scikit-learnÔºåÂÆÉÊòØ‰∏Ä‰∏™ÊµÅË°åÁöÑÊú∫Âô®Â≠¶‰π†Â∫ìÔºå‰πüÊûÑÂª∫Âú® NumPy ‰πã‰∏ä„ÄÇ\n\nÊÄßËÉΩ‰ºòÂåñ:\n\nCython: Â¶ÇÊûúÈúÄË¶ÅÊûÅËá¥ÁöÑÊÄßËÉΩÔºåÂèØ‰ª•Â≠¶‰π† CythonÔºåÂÆÉÂÖÅËÆ∏ÊÇ®Â∞Ü Python ‰ª£Á†ÅÁºñËØë‰∏∫ C ‰ª£Á†Å„ÄÇ\nNumba: Âè¶‰∏Ä‰∏™Âä†ÈÄü Python ‰ª£Á†ÅÁöÑÂ∑•ÂÖ∑ÔºåÁâπÂà´ÊòØÂØπ‰∫éÊï∞ÂÄºËÆ°ÁÆó„ÄÇ\nÂπ∂Ë°åËÆ°ÁÆó: ‰∫ÜËß£Â¶Ç‰Ωï‰ΩøÁî® NumPy ËøõË°åÂπ∂Ë°åËÆ°ÁÆóÔºå‰æãÂ¶Ç‰ΩøÁî®Â§öÁ∫øÁ®ãÊàñÂ§öËøõÁ®ã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed4.html",
    "href": "qmd/pandas3ed4.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "NumPy, short for Numerical Python, is a foundational package for numerical computing in Python.\nWhy is it important? üßê Many scientific computing packages rely on NumPy‚Äôs array objects for data exchange. Think of it as the lingua franca (common language) of data analysis in Python.\nIt is designed for efficiency on large arrays of data.\nWhat will we learn? We‚Äôll cover the basics, focusing on how NumPy enables fast, array-oriented operations, which are crucial for data analysis with libraries like pandas."
  },
  {
    "objectID": "qmd/pandas3ed4.html#introduction-to-numpy",
    "href": "qmd/pandas3ed4.html#introduction-to-numpy",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "NumPy, short for Numerical Python, is a foundational package for numerical computing in Python.\nWhy is it important? üßê Many scientific computing packages rely on NumPy‚Äôs array objects for data exchange. Think of it as the lingua franca (common language) of data analysis in Python.\nIt is designed for efficiency on large arrays of data.\nWhat will we learn? We‚Äôll cover the basics, focusing on how NumPy enables fast, array-oriented operations, which are crucial for data analysis with libraries like pandas."
  },
  {
    "objectID": "qmd/pandas3ed4.html#key-features-of-numpy",
    "href": "qmd/pandas3ed4.html#key-features-of-numpy",
    "title": "Python for Data Analysis",
    "section": "Key Features of NumPy",
    "text": "Key Features of NumPy\nHere‚Äôs a glimpse of what NumPy offers:\n\nndarray: The heart of NumPy. A highly efficient multidimensional array. Imagine a container holding data of the same type (e.g., all numbers). It allows for fast operations and broadcasting (we‚Äôll cover this later!).\nMathematical Functions: A rich set of functions that operate on entire arrays without explicit loops. This is called vectorization, and it‚Äôs much faster than writing loops in Python.\nData I/O: Tools to read and write array data to disk.\nLinear Algebra: Capabilities for linear algebra, random number generation, and Fourier transforms. Essential tools for many scientific and engineering tasks.\nC API: Allows seamless integration with libraries written in C, C++, or FORTRAN. This is key for leveraging high-performance legacy code."
  },
  {
    "objectID": "qmd/pandas3ed4.html#why-numpy-is-efficient",
    "href": "qmd/pandas3ed4.html#why-numpy-is-efficient",
    "title": "Python for Data Analysis",
    "section": "Why NumPy is Efficient?",
    "text": "Why NumPy is Efficient?\nNumPy‚Äôs efficiency stems from several design choices:\n\nContiguous Memory: Unlike Python lists, NumPy arrays store data in a single, contiguous block of memory. This makes accessing and manipulating data much faster.\nC-Based Algorithms: Many NumPy operations are implemented in C, avoiding the overhead of Python‚Äôs interpreter.\nLess Memory Usage: NumPy arrays generally consume less memory than Python lists, especially for numerical data."
  },
  {
    "objectID": "qmd/pandas3ed4.html#numpy-vs.-python-lists-a-performance-showdown",
    "href": "qmd/pandas3ed4.html#numpy-vs.-python-lists-a-performance-showdown",
    "title": "Python for Data Analysis",
    "section": "NumPy vs.¬†Python Lists: A Performance Showdown üèÉ‚Äç‚ôÇÔ∏è",
    "text": "NumPy vs.¬†Python Lists: A Performance Showdown üèÉ‚Äç‚ôÇÔ∏è\nLet‚Äôs see NumPy‚Äôs speed advantage in action. We‚Äôll compare multiplying a million integers by 2 using both a NumPy array and a Python list:\n\nimport numpy as np\nmy_arr = np.arange(1_000_000)  # NumPy array\nmy_list = list(range(1_000_000)) # Python list"
  },
  {
    "objectID": "qmd/pandas3ed4.html#numpy-vs.-python-lists-timing-the-operations",
    "href": "qmd/pandas3ed4.html#numpy-vs.-python-lists-timing-the-operations",
    "title": "Python for Data Analysis",
    "section": "NumPy vs.¬†Python Lists: Timing the Operations",
    "text": "NumPy vs.¬†Python Lists: Timing the Operations\nNow, the timed operations:\nNumPy array operation:\n#| echo: true\n# %timeit my_arr2 = my_arr * 2"
  },
  {
    "objectID": "qmd/pandas3ed4.html#numpy-vs.-python-lists-timing-continued",
    "href": "qmd/pandas3ed4.html#numpy-vs.-python-lists-timing-continued",
    "title": "Python for Data Analysis",
    "section": "NumPy vs.¬†Python Lists: Timing (Continued)",
    "text": "NumPy vs.¬†Python Lists: Timing (Continued)\nPython list operation (using a list comprehension):\n#| echo: true\n# %timeit my_list2 = [x * 2 for x in my_list]\nNumPy-based algorithms are generally 10 to 100 times faster (or more) than their pure Python counterparts and use significantly less memory."
  },
  {
    "objectID": "qmd/pandas3ed4.html#the-numpy-ndarray-a-closer-look",
    "href": "qmd/pandas3ed4.html#the-numpy-ndarray-a-closer-look",
    "title": "Python for Data Analysis",
    "section": "The NumPy ndarray: A Closer Look",
    "text": "The NumPy ndarray: A Closer Look\nThe ndarray (N-dimensional array) is the core data structure in NumPy.\n\nHomogeneous Data: All elements in an ndarray must be of the same data type (e.g., all integers, all floats).\nKey Attributes:\n\nshape: A tuple indicating the size of each dimension. For a 2x3 array, the shape would be (2, 3).\ndtype: An object describing the data type of the elements (e.g., int64, float32).\n\nCreating ndarray: The easiest way to create an array is to use the array function. It accepts any sequence-like object (including other arrays) and produces a new NumPy array."
  },
  {
    "objectID": "qmd/pandas3ed4.html#creating-ndarrays-examples-from-a-list",
    "href": "qmd/pandas3ed4.html#creating-ndarrays-examples-from-a-list",
    "title": "Python for Data Analysis",
    "section": "Creating ndarrays: Examples (From a list)",
    "text": "Creating ndarrays: Examples (From a list)\nLet‚Äôs create some arrays:\n\nimport numpy as np\n\n# From a list\ndata1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1)\nprint(arr1)\nprint(arr1.dtype)\n\n[6.  7.5 8.  0.  1. ]\nfloat64"
  },
  {
    "objectID": "qmd/pandas3ed4.html#creating-ndarrays-examples-from-a-nested-list",
    "href": "qmd/pandas3ed4.html#creating-ndarrays-examples-from-a-nested-list",
    "title": "Python for Data Analysis",
    "section": "Creating ndarrays: Examples (From a nested list)",
    "text": "Creating ndarrays: Examples (From a nested list)\n\n# From a nested list (creates a 2D array)\ndata2 = [[1, 2, 3, 4], [5, 6, 7, 8]]\narr2 = np.array(data2)\nprint(arr2)\nprint(arr2.ndim)  # Number of dimensions\nprint(arr2.shape)\nprint(arr2.dtype)\n\n[[1 2 3 4]\n [5 6 7 8]]\n2\n(2, 4)\nint64"
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-creation-functions-zeros",
    "href": "qmd/pandas3ed4.html#array-creation-functions-zeros",
    "title": "Python for Data Analysis",
    "section": "Array Creation Functions: Zeros",
    "text": "Array Creation Functions: Zeros\nNumPy provides several convenient functions to create arrays:\n\n# Array of zeros\nimport numpy as np\nzeros_arr = np.zeros(10)  # 1D array\nprint(zeros_arr)\n\nzeros_arr_2d = np.zeros((3, 6)) # 2D array (3x6)\nprint(zeros_arr_2d)\n\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n[[0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0.]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-creation-functions-ones-and-empty",
    "href": "qmd/pandas3ed4.html#array-creation-functions-ones-and-empty",
    "title": "Python for Data Analysis",
    "section": "Array Creation Functions: Ones and Empty",
    "text": "Array Creation Functions: Ones and Empty\n\n# Array of ones\nones_arr = np.ones((2, 3)) # 2D array (2x3)\nprint(ones_arr)\n\n[[1. 1. 1.]\n [1. 1. 1.]]\n\n\n\n# Uninitialized array (may contain garbage values)\nempty_arr = np.empty((2, 3, 2)) # 3D array\nprint(empty_arr)\n\n[[[5.82537981e-319 0.00000000e+000]\n  [2.38609280e-315 6.90609934e-310]\n  [6.90606300e-310 5.81975339e-317]]\n\n [[6.90606302e-310 5.81975339e-317]\n  [6.90606302e-310 4.79243676e-322]\n  [6.90609934e-310 6.90609934e-310]]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-creation-functions-arange",
    "href": "qmd/pandas3ed4.html#array-creation-functions-arange",
    "title": "Python for Data Analysis",
    "section": "Array Creation Functions: Arange",
    "text": "Array Creation Functions: Arange\n\n# 'arange': Similar to Python's 'range', but returns an ndarray\nrange_arr = np.arange(15)\nprint(range_arr)\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#summary-of-array-creation-functions",
    "href": "qmd/pandas3ed4.html#summary-of-array-creation-functions",
    "title": "Python for Data Analysis",
    "section": "Summary of Array Creation Functions",
    "text": "Summary of Array Creation Functions\nA handy table summarizing common array creation functions:\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\narray\nConverts input data (list, tuple, array, etc.) to an ndarray.\n\n\nasarray\nSimilar to array, but does not copy if the input is already an ndarray.\n\n\narange\nLike Python‚Äôs range, but returns an ndarray."
  },
  {
    "objectID": "qmd/pandas3ed4.html#summary-of-array-creation-functions-continued",
    "href": "qmd/pandas3ed4.html#summary-of-array-creation-functions-continued",
    "title": "Python for Data Analysis",
    "section": "Summary of Array Creation Functions (Continued)",
    "text": "Summary of Array Creation Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nones, ones_like\nCreates an array filled with 1s. ones_like takes another array and creates a ones array of the same shape and dtype.\n\n\nzeros, zeros_like\nSimilar to ones and ones_like, but creates arrays filled with 0s.\n\n\nempty, empty_like\nCreates an array without initializing its values. Use with caution!"
  },
  {
    "objectID": "qmd/pandas3ed4.html#summary-of-array-creation-functions-continued-1",
    "href": "qmd/pandas3ed4.html#summary-of-array-creation-functions-continued-1",
    "title": "Python for Data Analysis",
    "section": "Summary of Array Creation Functions (Continued)",
    "text": "Summary of Array Creation Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nfull, full_like\nCreates an array filled with a specified value. full_like takes another array and uses its shape and dtype.\n\n\neye, identity\nCreates a square identity matrix (1s on the diagonal, 0s elsewhere)."
  },
  {
    "objectID": "qmd/pandas3ed4.html#data-types-dtypes",
    "href": "qmd/pandas3ed4.html#data-types-dtypes",
    "title": "Python for Data Analysis",
    "section": "Data Types (dtypes)",
    "text": "Data Types (dtypes)\n\nWhat is a dtype? A special object that contains information about the data type held by an ndarray (e.g., float64, int32, bool).\nWhy are dtypes important? They give you fine-grained control over how data is stored in memory. This is crucial for performance, especially with large datasets. They also allow NumPy to interface with data."
  },
  {
    "objectID": "qmd/pandas3ed4.html#data-types-specifying-dtypes",
    "href": "qmd/pandas3ed4.html#data-types-specifying-dtypes",
    "title": "Python for Data Analysis",
    "section": "Data Types: Specifying dtypes",
    "text": "Data Types: Specifying dtypes\nSpecifying dtypes:\n\nimport numpy as np\narr1 = np.array([1, 2, 3], dtype=np.float64)  # Explicitly set dtype\narr2 = np.array([1, 2, 3], dtype=np.int32)\nprint(arr1.dtype)\nprint(arr2.dtype)\n\nfloat64\nint32"
  },
  {
    "objectID": "qmd/pandas3ed4.html#common-numpy-data-types",
    "href": "qmd/pandas3ed4.html#common-numpy-data-types",
    "title": "Python for Data Analysis",
    "section": "Common NumPy Data Types",
    "text": "Common NumPy Data Types\n\n\n\n\n\n\n\n\nType\nType Code\nDescription\n\n\n\n\nint8, uint8\ni1, u1\nSigned and unsigned 8-bit (1 byte) integer types\n\n\nint16, uint16\ni2, u2\nSigned and unsigned 16-bit integer types\n\n\nint32, uint32\ni4, u4\nSigned and unsigned 32-bit integer types\n\n\nint64, uint64\ni8, u8\nSigned and unsigned 64-bit integer types"
  },
  {
    "objectID": "qmd/pandas3ed4.html#common-numpy-data-types-continued",
    "href": "qmd/pandas3ed4.html#common-numpy-data-types-continued",
    "title": "Python for Data Analysis",
    "section": "Common NumPy Data Types (Continued)",
    "text": "Common NumPy Data Types (Continued)\n\n\n\n\n\n\n\n\nType\nType Code\nDescription\n\n\n\n\nfloat16\nf2\nHalf-precision floating point\n\n\nfloat32\nf4 or f\nStandard single-precision floating point; compatible with C float\n\n\nfloat64\nf8 or d\nStandard double-precision floating point; compatible with C double and Python float\n\n\nfloat128\nf16 or g\nExtended-precision floating point"
  },
  {
    "objectID": "qmd/pandas3ed4.html#common-numpy-data-types-continued-1",
    "href": "qmd/pandas3ed4.html#common-numpy-data-types-continued-1",
    "title": "Python for Data Analysis",
    "section": "Common NumPy Data Types (Continued)",
    "text": "Common NumPy Data Types (Continued)\n\n\n\n\n\n\n\n\nType\nType Code\nDescription\n\n\n\n\ncomplex64, complex128, complex256\nc8, c16, c32\nComplex numbers represented by two 32, 64, or 128 floats, respectively\n\n\nbool\n?\nBoolean type storing True and False values\n\n\nobject\nO\nPython object type; a value can be any Python object\n\n\nstring_\nS\nFixed-length ASCII string type (1 byte per character). Use S10 for a string of length 10.\n\n\nunicode_\nU\nFixed-length Unicode type (number of bytes platform-specific)\n\n\n\nThere are both signed and unsigned integer types. A signed integer can represent both positive and negative integers, while an unsigned integer can only represent non-zero integers."
  },
  {
    "objectID": "qmd/pandas3ed4.html#casting-with-astype-integer-to-float",
    "href": "qmd/pandas3ed4.html#casting-with-astype-integer-to-float",
    "title": "Python for Data Analysis",
    "section": "Casting with astype: Integer to Float",
    "text": "Casting with astype: Integer to Float\n\nWhat is casting? Converting an array from one dtype to another.\nHow to cast: Use the astype method. astype always creates a new array (a copy of the data), even if the new dtype is the same as the old dtype.\n\n\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(arr.dtype)\nfloat_arr = arr.astype(np.float64) # Integer to float\nprint(float_arr.dtype)\n\nint64\nfloat64"
  },
  {
    "objectID": "qmd/pandas3ed4.html#casting-with-astype-string-to-float",
    "href": "qmd/pandas3ed4.html#casting-with-astype-string-to-float",
    "title": "Python for Data Analysis",
    "section": "Casting with astype: String to Float",
    "text": "Casting with astype: String to Float\n\n# `np.string_` was removed in the NumPy 2.0 release. Use `np.bytes_` instead.\nnumeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.bytes_)\nfloat_arr = numeric_strings.astype(float) # String to float\nprint(float_arr)\n\n[ 1.25 -9.6  42.  ]\n\n\nBe cautious when using the numpy.string_ type, as string data in NumPy is fixed size and may truncate input without warning."
  },
  {
    "objectID": "qmd/pandas3ed4.html#arithmetic-with-numpy-arrays-vectorization",
    "href": "qmd/pandas3ed4.html#arithmetic-with-numpy-arrays-vectorization",
    "title": "Python for Data Analysis",
    "section": "Arithmetic with NumPy Arrays: Vectorization",
    "text": "Arithmetic with NumPy Arrays: Vectorization\n\nVectorization: A core concept in NumPy. It means performing operations on entire arrays without writing explicit for loops. This is much faster and more concise.\nElement-wise Operations: Arithmetic operations between equal-sized arrays are applied element-wise:\n\n\narr = np.array([[1., 2., 3.], [4., 5., 6.]])\nprint(arr * arr) # Element-wise multiplication\nprint(arr - arr) # Element-wise subtraction\n\n[[ 1.  4.  9.]\n [16. 25. 36.]]\n[[0. 0. 0.]\n [0. 0. 0.]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#arithmetic-with-numpy-arrays-operations-with-scalars",
    "href": "qmd/pandas3ed4.html#arithmetic-with-numpy-arrays-operations-with-scalars",
    "title": "Python for Data Analysis",
    "section": "Arithmetic with NumPy Arrays: Operations with Scalars",
    "text": "Arithmetic with NumPy Arrays: Operations with Scalars\n\nOperations with Scalars: Arithmetic operations with scalars propagate the scalar value to each element in the array:\n\n\nprint(1 / arr)   # Divide each element by 1\nprint(arr ** 2) # Square each element\n\n[[1.         0.5        0.33333333]\n [0.25       0.2        0.16666667]]\n[[ 1.  4.  9.]\n [16. 25. 36.]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#broadcasting-brief-introduction",
    "href": "qmd/pandas3ed4.html#broadcasting-brief-introduction",
    "title": "Python for Data Analysis",
    "section": "Broadcasting (Brief Introduction)",
    "text": "Broadcasting (Brief Introduction)\n\nWhat is broadcasting? A powerful mechanism that allows NumPy to perform arithmetic operations on arrays of different shapes, under certain conditions.\nExample: You can add a scalar to an array of any shape. The scalar is effectively ‚Äústretched‚Äù to match the array‚Äôs shape.\nWe‚Äôll cover broadcasting in more detail later. For now, just be aware that it exists."
  },
  {
    "objectID": "qmd/pandas3ed4.html#basic-indexing-and-slicing",
    "href": "qmd/pandas3ed4.html#basic-indexing-and-slicing",
    "title": "Python for Data Analysis",
    "section": "Basic Indexing and Slicing",
    "text": "Basic Indexing and Slicing\n\nSimilar to Python Lists: One-dimensional NumPy arrays can be indexed and sliced much like Python lists:\n\n\nimport numpy as np\narr = np.arange(10)\nprint(arr[5])      # Access element at index 5\nprint(arr[5:8])    # Slice elements from index 5 up to (but not including) 8\narr[5:8] = 12     # Assign a value to a slice\nprint(arr)\n\n5\n[5 6 7]\n[ 0  1  2  3  4 12 12 12  8  9]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#basic-indexing-and-slicing-views-vs.-copies",
    "href": "qmd/pandas3ed4.html#basic-indexing-and-slicing-views-vs.-copies",
    "title": "Python for Data Analysis",
    "section": "Basic Indexing and Slicing: Views vs.¬†Copies",
    "text": "Basic Indexing and Slicing: Views vs.¬†Copies\n\nViews vs.¬†Copies: Array slices are views on the original array. This means that modifying a slice will modify the original array. This is different from Python lists.\n\n\narr_slice = arr[5:8]\narr_slice[1] = 12345  # Modify the slice\nprint(arr)          # Original array is also modified!\n\n[    0     1     2     3     4    12 12345    12     8     9]\n\n\nIf you want a copy of a slice of an ndarray instead of a view, you will need to explicitly copy the array‚Äîfor example, arr[5:8].copy()."
  },
  {
    "objectID": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-two-dimensional-arrays",
    "href": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-two-dimensional-arrays",
    "title": "Python for Data Analysis",
    "section": "Indexing and Slicing: Higher Dimensions (Two-Dimensional Arrays)",
    "text": "Indexing and Slicing: Higher Dimensions (Two-Dimensional Arrays)\n\nTwo-Dimensional Arrays: You can access elements using comma-separated indices:\n\n\narr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arr2d[2])     # Access the third row (index 2)\nprint(arr2d[0][2])  # Access element at row 0, column 2 (two ways)\nprint(arr2d[0, 2])   # Access element at row 0, column 2\n\n[7 8 9]\n3\n3"
  },
  {
    "objectID": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-axes",
    "href": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-axes",
    "title": "Python for Data Analysis",
    "section": "Indexing and Slicing: Higher Dimensions (Axes)",
    "text": "Indexing and Slicing: Higher Dimensions (Axes)\n\nThinking about Axes:\n\nAxis 0: Rows\nAxis 1: Columns"
  },
  {
    "objectID": "qmd/pandas3ed4.html#indexing-elements-in-a-numpy-array.",
    "href": "qmd/pandas3ed4.html#indexing-elements-in-a-numpy-array.",
    "title": "Python for Data Analysis",
    "section": "Indexing elements in a NumPy array.",
    "text": "Indexing elements in a NumPy array.\n\n\n\n\n\ngraph LR\n    subgraph \"Axis 0 (Rows)\"\n        0 --&gt; 1\n        1 --&gt; 2\n    end\n    subgraph \"Axis 1 (Columns)\"\n        0 --&gt; 0[0,0]\n        0 --&gt; 1[0,1]\n        0 --&gt; 2[0,2]\n        1 --&gt; 3[1,0]\n        1 --&gt; 4[1,1]\n        1 --&gt; 5[1,2]\n        2 --&gt; 6[2,0]\n        2 --&gt; 7[2,1]\n        2 --&gt; 8[2,2]\n    end"
  },
  {
    "objectID": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-slicing-in-multiple-dimensions",
    "href": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-slicing-in-multiple-dimensions",
    "title": "Python for Data Analysis",
    "section": "Indexing and Slicing: Higher Dimensions (Slicing in Multiple Dimensions)",
    "text": "Indexing and Slicing: Higher Dimensions (Slicing in Multiple Dimensions)\n\nSlicing in Multiple Dimensions:\n\n\nprint(arr2d[:2])      # Select the first two rows\nprint(arr2d[:2, 1:])   # Select first two rows, columns from index 1 onwards\n\n[[1 2 3]\n [4 5 6]]\n[[2 3]\n [5 6]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-mixing-integer-indexing-and-slicing",
    "href": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-mixing-integer-indexing-and-slicing",
    "title": "Python for Data Analysis",
    "section": "Indexing and Slicing: Higher Dimensions (Mixing Integer Indexing and Slicing)",
    "text": "Indexing and Slicing: Higher Dimensions (Mixing Integer Indexing and Slicing)\n\nMixing Integer Indexing and Slicing:\n\n\nprint(arr2d[1, :2])   # Select second row, first two columns (lower dimensional slice)\nprint(arr2d[:2, 2])    # Select first two rows, third column\n\n[4 5]\n[3 6]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-colon-for-entire-axis",
    "href": "qmd/pandas3ed4.html#indexing-and-slicing-higher-dimensions-colon-for-entire-axis",
    "title": "Python for Data Analysis",
    "section": "Indexing and Slicing: Higher Dimensions (Colon for Entire Axis)",
    "text": "Indexing and Slicing: Higher Dimensions (Colon for Entire Axis)\n\nColon for Entire Axis:\n\n\nprint(arr2d[:, :1])   # Select all rows, but only the first column\n\n[[1]\n [4]\n [7]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr21",
    "href": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr21",
    "title": "Python for Data Analysis",
    "section": "Two-dimensional array slicing: arr[:2,1:]",
    "text": "Two-dimensional array slicing: arr[:2,1:]\n\n\n\nExpression\nShape\n\n\n\n\narr[:2,1:]\n(2,2)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr2",
    "href": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr2",
    "title": "Python for Data Analysis",
    "section": "Two-dimensional array slicing: arr[2]",
    "text": "Two-dimensional array slicing: arr[2]\n\n\n\nExpression\nShape\n\n\n\n\narr[2]\n(3,)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr2-1",
    "href": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr2-1",
    "title": "Python for Data Analysis",
    "section": "Two-dimensional array slicing: arr[2,:]",
    "text": "Two-dimensional array slicing: arr[2,:]\n\n\n\nExpression\nShape\n\n\n\n\narr[2,:]\n(3,)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr2-2",
    "href": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr2-2",
    "title": "Python for Data Analysis",
    "section": "Two-dimensional array slicing: arr[2:,:]",
    "text": "Two-dimensional array slicing: arr[2:,:]\n\n\n\nExpression\nShape\n\n\n\n\narr[2:,:]\n(1,3)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr-2",
    "href": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr-2",
    "title": "Python for Data Analysis",
    "section": "Two-dimensional array slicing: arr[:, :2]",
    "text": "Two-dimensional array slicing: arr[:, :2]\n\n\n\nExpression\nShape\n\n\n\n\narr[:, :2]\n(3,2)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr1-2",
    "href": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr1-2",
    "title": "Python for Data Analysis",
    "section": "Two-dimensional array slicing: arr[1, :2]",
    "text": "Two-dimensional array slicing: arr[1, :2]\n\n\n\nExpression\nShape\n\n\n\n\narr[1, :2]\n(2,)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr12-2",
    "href": "qmd/pandas3ed4.html#two-dimensional-array-slicing-arr12-2",
    "title": "Python for Data Analysis",
    "section": "Two-dimensional array slicing: arr[1:2, :2]",
    "text": "Two-dimensional array slicing: arr[1:2, :2]\n\n\n\nExpression\nShape\n\n\n\n\narr[1:2, :2]\n(1,2)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#boolean-indexing-creating-a-boolean-array",
    "href": "qmd/pandas3ed4.html#boolean-indexing-creating-a-boolean-array",
    "title": "Python for Data Analysis",
    "section": "Boolean Indexing: Creating a Boolean Array",
    "text": "Boolean Indexing: Creating a Boolean Array\n\nConcept: Select data based on a Boolean array. The Boolean array typically has the same shape as the array you‚Äôre indexing.\n\n\nimport numpy as np\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\ndata = np.array([[4, 7], [0, 2], [-5, 6], [0, 0], [1, 2],\n                 [-12, -4], [3, 4]])\n\nprint(names == 'Bob')  # Create a Boolean array\n\n[ True False False  True False False False]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#boolean-indexing-selecting-rows",
    "href": "qmd/pandas3ed4.html#boolean-indexing-selecting-rows",
    "title": "Python for Data Analysis",
    "section": "Boolean Indexing: Selecting Rows",
    "text": "Boolean Indexing: Selecting Rows\n\nprint(data[names == 'Bob'])  # Select rows where names == 'Bob'\n\n[[4 7]\n [0 0]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#boolean-indexing-combining-with-slicingindexing",
    "href": "qmd/pandas3ed4.html#boolean-indexing-combining-with-slicingindexing",
    "title": "Python for Data Analysis",
    "section": "Boolean Indexing: Combining with Slicing/Indexing",
    "text": "Boolean Indexing: Combining with Slicing/Indexing\n\nprint(data[names == 'Bob', 1:])  # Select rows where names == 'Bob', and columns from index 1\nprint(data[names != 'Bob'])     # Select rows where names is NOT 'Bob'\n\n[[7]\n [0]]\n[[  0   2]\n [ -5   6]\n [  1   2]\n [-12  -4]\n [  3   4]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#boolean-indexing-logical-operators",
    "href": "qmd/pandas3ed4.html#boolean-indexing-logical-operators",
    "title": "Python for Data Analysis",
    "section": "Boolean Indexing: Logical Operators",
    "text": "Boolean Indexing: Logical Operators\n\nLogical Operators:\n\n~: Negates a Boolean array (like not)\n&: Combines conditions (like and)\n|: Combines conditions (like or)\n\n\n\nmask = (names == 'Bob') | (names == 'Will')\nprint(data[mask])\n\n[[ 4  7]\n [-5  6]\n [ 0  0]\n [ 1  2]]\n\n\nThe Python keywords and and or do not work with Boolean arrays. Use & (and) and | (or) instead."
  },
  {
    "objectID": "qmd/pandas3ed4.html#fancy-indexing-selecting-specific-rows",
    "href": "qmd/pandas3ed4.html#fancy-indexing-selecting-specific-rows",
    "title": "Python for Data Analysis",
    "section": "Fancy Indexing: Selecting Specific Rows",
    "text": "Fancy Indexing: Selecting Specific Rows\n\nConcept: Indexing using integer arrays. Allows you to select specific rows or columns, and even reorder them.\n\n\nimport numpy as np\narr = np.zeros((8, 4))\nfor i in range(8):\n    arr[i] = i\nprint(arr)\nprint(arr[[4, 3, 0, 6]])  # Select rows 4, 3, 0, and 6, in that order\n\n[[0. 0. 0. 0.]\n [1. 1. 1. 1.]\n [2. 2. 2. 2.]\n [3. 3. 3. 3.]\n [4. 4. 4. 4.]\n [5. 5. 5. 5.]\n [6. 6. 6. 6.]\n [7. 7. 7. 7.]]\n[[4. 4. 4. 4.]\n [3. 3. 3. 3.]\n [0. 0. 0. 0.]\n [6. 6. 6. 6.]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#fancy-indexing-selecting-specific-elements",
    "href": "qmd/pandas3ed4.html#fancy-indexing-selecting-specific-elements",
    "title": "Python for Data Analysis",
    "section": "Fancy Indexing: Selecting Specific Elements",
    "text": "Fancy Indexing: Selecting Specific Elements\n\narr = np.arange(32).reshape((8, 4))\nprint(arr[[1, 5, 7, 2], [0, 3, 1, 2]]) # Select elements (1, 0), (5, 3), (7, 1), (2, 2)\n\n[ 4 23 29 10]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#fancy-indexing-selecting-a-rectangular-region",
    "href": "qmd/pandas3ed4.html#fancy-indexing-selecting-a-rectangular-region",
    "title": "Python for Data Analysis",
    "section": "Fancy Indexing: Selecting a Rectangular Region",
    "text": "Fancy Indexing: Selecting a Rectangular Region\n\nprint(arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]])  # Select rows 1, 5, 7, 2, and reorder columns\n\n[[ 4  7  5  6]\n [20 23 21 22]\n [28 31 29 30]\n [ 8 11  9 10]]\n\n\n\nImportant: Fancy indexing, unlike slicing, always copies the data into a new array."
  },
  {
    "objectID": "qmd/pandas3ed4.html#transposing-arrays-and-swapping-axes",
    "href": "qmd/pandas3ed4.html#transposing-arrays-and-swapping-axes",
    "title": "Python for Data Analysis",
    "section": "Transposing Arrays and Swapping Axes",
    "text": "Transposing Arrays and Swapping Axes\n\nTransposing: Rearranging data by switching rows and columns. Use the .T attribute or the transpose method.\n\n\narr = np.arange(15).reshape((3, 5))\nprint(arr)\nprint(arr.T)  # Transpose the array\n\n[[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]]\n[[ 0  5 10]\n [ 1  6 11]\n [ 2  7 12]\n [ 3  8 13]\n [ 4  9 14]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#transposing-arrays-matrix-multiplication",
    "href": "qmd/pandas3ed4.html#transposing-arrays-matrix-multiplication",
    "title": "Python for Data Analysis",
    "section": "Transposing Arrays: Matrix Multiplication",
    "text": "Transposing Arrays: Matrix Multiplication\n\nMatrix Multiplication: Use np.dot or the @ operator for matrix multiplication.\n\n\narr = np.array([[0, 1, 0], [1, 2, -2], [6, 3, 2], [-1, 0, -1], [1, 0, 1]])\nprint(np.dot(arr.T, arr))  # Matrix multiplication\nprint(arr.T @ arr) # Matrix multiplication using the @ operator\n\n[[39 20 12]\n [20 14  2]\n [12  2 10]]\n[[39 20 12]\n [20 14  2]\n [12  2 10]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#transposing-arrays-swapping-axes",
    "href": "qmd/pandas3ed4.html#transposing-arrays-swapping-axes",
    "title": "Python for Data Analysis",
    "section": "Transposing Arrays: Swapping Axes",
    "text": "Transposing Arrays: Swapping Axes\n\nSwapping Axes: The swapaxes method takes a pair of axis numbers and switches the indicated axes.\n\n\nprint(arr.swapaxes(0, 1))\n\n[[ 0  1  6 -1  1]\n [ 1  2  3  0  0]\n [ 0 -2  2 -1  1]]\n\n\nTransposing and swapaxes return views on the underlying data without making a copy."
  },
  {
    "objectID": "qmd/pandas3ed4.html#pseudorandom-number-generation",
    "href": "qmd/pandas3ed4.html#pseudorandom-number-generation",
    "title": "Python for Data Analysis",
    "section": "Pseudorandom Number Generation",
    "text": "Pseudorandom Number Generation\n\nnumpy.random Module: Provides functions to generate arrays of random numbers.\ndefault_rng: The recommended way to create a random number generator.\n\n\nimport numpy as np\nrng = np.random.default_rng(seed=12345)  # Create a generator with a seed\ndata = rng.standard_normal((2, 3))       # Generate a 2x3 array of standard normal values\nprint(data)\n\n[[-1.42382504  1.26372846 -0.87066174]\n [-0.25917323 -0.07534331 -0.74088465]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#pseudorandom-number-generation-continued",
    "href": "qmd/pandas3ed4.html#pseudorandom-number-generation-continued",
    "title": "Python for Data Analysis",
    "section": "Pseudorandom Number Generation (Continued)",
    "text": "Pseudorandom Number Generation (Continued)\n\nWhy use a seed? Setting a seed ensures reproducibility. You‚Äôll get the same random numbers each time.\nGenerator Isolation: The generator object rng is isolated from other code that might also use the numpy.random module.\nPerformance: numpy.random is much faster than Python‚Äôs built-in random module for generating large arrays."
  },
  {
    "objectID": "qmd/pandas3ed4.html#common-numpy.random-functions",
    "href": "qmd/pandas3ed4.html#common-numpy.random-functions",
    "title": "Python for Data Analysis",
    "section": "Common numpy.random Functions",
    "text": "Common numpy.random Functions\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\npermutation\nReturns a random permutation of a sequence, or a permuted range.\n\n\nshuffle\nRandomly permutes a sequence in place.\n\n\nuniform\nDraws samples from a uniform distribution."
  },
  {
    "objectID": "qmd/pandas3ed4.html#common-numpy.random-functions-continued",
    "href": "qmd/pandas3ed4.html#common-numpy.random-functions-continued",
    "title": "Python for Data Analysis",
    "section": "Common numpy.random Functions (Continued)",
    "text": "Common numpy.random Functions (Continued)\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nintegers\nDraws random integers from a given low-to-high range.\n\n\nstandard_normal\nDraws samples from a standard normal distribution (mean 0, standard deviation 1).\n\n\nbinomial\nDraws samples from a binomial distribution."
  },
  {
    "objectID": "qmd/pandas3ed4.html#common-numpy.random-functions-continued-1",
    "href": "qmd/pandas3ed4.html#common-numpy.random-functions-continued-1",
    "title": "Python for Data Analysis",
    "section": "Common numpy.random Functions (Continued)",
    "text": "Common numpy.random Functions (Continued)\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nnormal\nDraws samples from a normal (Gaussian) distribution.\n\n\nbeta\nDraws samples from a Beta distribution.\n\n\nchisquare\nDraws samples from a chi-square distribution.\n\n\ngamma\nDraws samples from a gamma distribution.\n\n\nuniform\nDraws samples from a uniform [0, 1) distribution."
  },
  {
    "objectID": "qmd/pandas3ed4.html#universal-functions-ufuncs",
    "href": "qmd/pandas3ed4.html#universal-functions-ufuncs",
    "title": "Python for Data Analysis",
    "section": "Universal Functions (ufuncs)",
    "text": "Universal Functions (ufuncs)\n\nWhat are ufuncs? Functions that perform element-wise operations on ndarrays. They are fast vectorized wrappers for simple functions.\nUnary ufuncs: Take a single array as input.\n\n\nimport numpy as np\narr = np.arange(10)\nprint(np.sqrt(arr))    # Square root of each element\nprint(np.exp(arr))     # Exponential of each element\n\n[0.         1.         1.41421356 1.73205081 2.         2.23606798\n 2.44948974 2.64575131 2.82842712 3.        ]\n[1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01\n 5.45981500e+01 1.48413159e+02 4.03428793e+02 1.09663316e+03\n 2.98095799e+03 8.10308393e+03]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#universal-functions-ufuncs-binary-and-those-return-multiple-arrays",
    "href": "qmd/pandas3ed4.html#universal-functions-ufuncs-binary-and-those-return-multiple-arrays",
    "title": "Python for Data Analysis",
    "section": "Universal Functions (ufuncs): Binary and those return multiple arrays",
    "text": "Universal Functions (ufuncs): Binary and those return multiple arrays\n\nBinary ufuncs: Take two arrays as input.\n\n\nrng = np.random.default_rng(seed=12345)\nx = rng.standard_normal(8)\ny = rng.standard_normal(8)\nprint(np.maximum(x, y))  # Element-wise maximum\n\n[ 0.36105811  1.26372846  2.34740965  0.96849691 -0.07534331  0.90219827\n -0.46695317  0.6488928 ]\n\n\n\nufuncs that return multiple arrays:\n\n\narr = rng.standard_normal(7) * 5\nremainder, whole_part = np.modf(arr)  # Returns fractional and integral parts\nprint(remainder)\nprint(whole_part)\n\n[ 0.94422172 -0.28334067  0.87928757  0.99489497  0.6114903  -0.49849258\n  0.51459671]\n[ 3. -6.  2.  6.  6. -1.  4.]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#some-unary-universal-functions",
    "href": "qmd/pandas3ed4.html#some-unary-universal-functions",
    "title": "Python for Data Analysis",
    "section": "Some Unary Universal Functions",
    "text": "Some Unary Universal Functions\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nabs, fabs\nComputes the absolute value element-wise. fabs is faster for non-complex data.\n\n\nsqrt\nComputes the square root of each element (equivalent to arr ** 0.5).\n\n\nsquare\nComputes the square of each element (equivalent to arr ** 2).\n\n\nexp\nComputes the exponent ex of each element."
  },
  {
    "objectID": "qmd/pandas3ed4.html#some-unary-universal-functions-continued",
    "href": "qmd/pandas3ed4.html#some-unary-universal-functions-continued",
    "title": "Python for Data Analysis",
    "section": "Some Unary Universal Functions (Continued)",
    "text": "Some Unary Universal Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nlog, log10, log2, log1p\nNatural logarithm (base e), log base 10, log base 2, and log(1 + x), respectively.\n\n\nsign\nComputes the sign of each element: 1 (positive), 0 (zero), or -1 (negative).\n\n\nceil\nComputes the ceiling of each element (smallest integer greater than or equal to that number).\n\n\nfloor\nComputes the floor of each element (largest integer less than or equal to each element)."
  },
  {
    "objectID": "qmd/pandas3ed4.html#some-unary-universal-functions-continued-1",
    "href": "qmd/pandas3ed4.html#some-unary-universal-functions-continued-1",
    "title": "Python for Data Analysis",
    "section": "Some Unary Universal Functions (Continued)",
    "text": "Some Unary Universal Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nrint\nRounds elements to the nearest integer, preserving the dtype.\n\n\nmodf\nReturns fractional and integral parts of array as separate arrays.\n\n\nisnan\nReturns a Boolean array indicating whether each value is NaN (Not a Number).\n\n\nisfinite, isinf\nReturns a Boolean array indicating whether each element is finite or infinite, respectively."
  },
  {
    "objectID": "qmd/pandas3ed4.html#some-unary-universal-functions-continued-2",
    "href": "qmd/pandas3ed4.html#some-unary-universal-functions-continued-2",
    "title": "Python for Data Analysis",
    "section": "Some Unary Universal Functions (Continued)",
    "text": "Some Unary Universal Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ncos, cosh, sin, sinh, tan, tanh\nRegular and hyperbolic trigonometric functions.\n\n\narccos, arccosh, arcsin, arcsinh, arctan, arctanh\nInverse trigonometric functions.\n\n\nlogical_not\nComputes the truth value of not x element-wise (equivalent to ~arr)."
  },
  {
    "objectID": "qmd/pandas3ed4.html#some-binary-universal-functions",
    "href": "qmd/pandas3ed4.html#some-binary-universal-functions",
    "title": "Python for Data Analysis",
    "section": "Some Binary Universal Functions",
    "text": "Some Binary Universal Functions\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nadd\nAdds corresponding elements in arrays.\n\n\nsubtract\nSubtracts elements in second array from first array.\n\n\nmultiply\nMultiplies array elements.\n\n\ndivide, floor_divide\nDivides or floor divides (truncating the remainder)."
  },
  {
    "objectID": "qmd/pandas3ed4.html#some-binary-universal-functions-continued",
    "href": "qmd/pandas3ed4.html#some-binary-universal-functions-continued",
    "title": "Python for Data Analysis",
    "section": "Some Binary Universal Functions (Continued)",
    "text": "Some Binary Universal Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\npower\nRaises elements in first array to powers indicated in second array.\n\n\nmaximum, fmax\nElement-wise maximum. fmax ignores NaN.\n\n\nminimum, fmin\nElement-wise minimum. fmin ignores NaN.\n\n\nmod\nElement-wise modulus (remainder of division)."
  },
  {
    "objectID": "qmd/pandas3ed4.html#some-binary-universal-functions-continued-1",
    "href": "qmd/pandas3ed4.html#some-binary-universal-functions-continued-1",
    "title": "Python for Data Analysis",
    "section": "Some Binary Universal Functions (Continued)",
    "text": "Some Binary Universal Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ncopysign\nCopies the sign of values in second argument to values in first argument.\n\n\ngreater, greater_equal, less, less_equal, equal, not_equal\nPerforms element-wise comparison, yielding a Boolean array.\n\n\nlogical_and, logical_or, logical_xor\nComputes element-wise truth value of logical operations."
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-oriented-programming-example",
    "href": "qmd/pandas3ed4.html#array-oriented-programming-example",
    "title": "Python for Data Analysis",
    "section": "Array-Oriented Programming: Example",
    "text": "Array-Oriented Programming: Example\nLet‚Äôs compute the function ‚àö(x^2 + y^2) across a grid of values:\n\nimport numpy as np\npoints = np.arange(-5, 5, 0.01)  # 1000 equally spaced points\nxs, ys = np.meshgrid(points, points)  # Create coordinate matrices\nz = np.sqrt(xs ** 2 + ys ** 2)      # Compute the function"
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-oriented-programming-visualization",
    "href": "qmd/pandas3ed4.html#array-oriented-programming-visualization",
    "title": "Python for Data Analysis",
    "section": "Array-Oriented Programming: Visualization",
    "text": "Array-Oriented Programming: Visualization\nNow, let‚Äôs visualize the result using Matplotlib:\n\nimport matplotlib.pyplot as plt\nplt.imshow(z, cmap=plt.cm.gray, extent=[-5, 5, -5, 5])\nplt.colorbar()\nplt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\")\n# plt.close('all')\nplt.show()\n\n&lt;&gt;:4: SyntaxWarning: invalid escape sequence '\\s'\n&lt;&gt;:4: SyntaxWarning: invalid escape sequence '\\s'\n/tmp/ipykernel_3215/1319111413.py:4: SyntaxWarning: invalid escape sequence '\\s'\n  plt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\")\n\n\n\n\n\n\n\n\n\nThis example demonstrates how concise and efficient array-oriented programming can be."
  },
  {
    "objectID": "qmd/pandas3ed4.html#expressing-conditional-logic-np.where",
    "href": "qmd/pandas3ed4.html#expressing-conditional-logic-np.where",
    "title": "Python for Data Analysis",
    "section": "Expressing Conditional Logic: np.where",
    "text": "Expressing Conditional Logic: np.where\n\nnp.where: A vectorized version of the ternary expression x if condition else y.\n\n\nimport numpy as np\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\n\nresult = np.where(cond, xarr, yarr)  # Select from xarr if cond is True, otherwise yarr\nprint(result)\n\n[1.1 2.2 1.3 1.4 2.5]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#expressing-conditional-logic-np.where-example",
    "href": "qmd/pandas3ed4.html#expressing-conditional-logic-np.where-example",
    "title": "Python for Data Analysis",
    "section": "Expressing Conditional Logic: np.where (Example)",
    "text": "Expressing Conditional Logic: np.where (Example)\n\nExample: Replace positive values in an array with 2, and negative values with -2:\n\n\nrng = np.random.default_rng(seed=12345)\narr = rng.standard_normal((4, 4))\nresult = np.where(arr &gt; 0, 2, -2)\nprint(result)\n\n[[-2  2 -2 -2]\n [-2 -2 -2  2]\n [ 2 -2  2  2]\n [-2  2 -2 -2]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#mathematical-and-statistical-methods",
    "href": "qmd/pandas3ed4.html#mathematical-and-statistical-methods",
    "title": "Python for Data Analysis",
    "section": "Mathematical and Statistical Methods",
    "text": "Mathematical and Statistical Methods\nNumPy provides a set of methods for computing statistics on arrays:\n\nrng = np.random.default_rng(seed=12345)\narr = rng.standard_normal((5, 4))\nprint(arr.mean())       # Mean of all elements\nprint(np.mean(arr))    # Equivalent to arr.mean()\nprint(arr.sum())        # Sum of all elements\n\n0.0010611661248891013\n0.0010611661248891013\n0.021223322497782027"
  },
  {
    "objectID": "qmd/pandas3ed4.html#mathematical-and-statistical-methods-axis-argument",
    "href": "qmd/pandas3ed4.html#mathematical-and-statistical-methods-axis-argument",
    "title": "Python for Data Analysis",
    "section": "Mathematical and Statistical Methods: Axis Argument",
    "text": "Mathematical and Statistical Methods: Axis Argument\n\nAxis Argument: Many methods take an optional axis argument to compute the statistic along a specific axis:\n\n\nprint(arr.mean(axis=1))  # Mean across columns (for each row)\nprint(arr.sum(axis=0))   # Sum down rows (for each column)\n\n[-0.32248289 -0.38378196  0.4310254  -0.0962079   0.37675318]\n[-1.10865307 -1.78448912  0.21785956  2.69650595]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#mathematical-and-statistical-methods-cumsum-and-cumprod",
    "href": "qmd/pandas3ed4.html#mathematical-and-statistical-methods-cumsum-and-cumprod",
    "title": "Python for Data Analysis",
    "section": "Mathematical and Statistical Methods: cumsum and cumprod",
    "text": "Mathematical and Statistical Methods: cumsum and cumprod\n\ncumsum and cumprod: Compute cumulative sums and products:\n\n\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7])\nprint(arr.cumsum())  # Cumulative sum\n\n[ 0  1  3  6 10 15 21 28]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#basic-array-statistical-methods",
    "href": "qmd/pandas3ed4.html#basic-array-statistical-methods",
    "title": "Python for Data Analysis",
    "section": "Basic Array Statistical Methods",
    "text": "Basic Array Statistical Methods\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nsum\nSum of all the elements in the array or along an axis; zero-length arrays have sum 0.\n\n\nmean\nArithmetic mean; invalid (returns NaN) on zero-length arrays.\n\n\nstd, var\nStandard deviation and variance, respectively."
  },
  {
    "objectID": "qmd/pandas3ed4.html#basic-array-statistical-methods-continued",
    "href": "qmd/pandas3ed4.html#basic-array-statistical-methods-continued",
    "title": "Python for Data Analysis",
    "section": "Basic Array Statistical Methods (Continued)",
    "text": "Basic Array Statistical Methods (Continued)\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nmin,max\nMinimum and maximum.\n\n\nargmin, argmax\nIndices of minimum and maximum elements, respectively.\n\n\ncumsum\nCumulative sum of elements starting from 0.\n\n\ncumprod\nCumulative product of elements starting from 1."
  },
  {
    "objectID": "qmd/pandas3ed4.html#methods-for-boolean-arrays-sum-with-booleans",
    "href": "qmd/pandas3ed4.html#methods-for-boolean-arrays-sum-with-booleans",
    "title": "Python for Data Analysis",
    "section": "Methods for Boolean Arrays: Sum with Booleans",
    "text": "Methods for Boolean Arrays: Sum with Booleans\n\nsum with Booleans: True values are treated as 1, False as 0. Useful for counting True values.\n\n\nrng = np.random.default_rng(seed=12345)\narr = rng.standard_normal(100)\nprint((arr &gt; 0).sum())  # Count positive values\n\n50"
  },
  {
    "objectID": "qmd/pandas3ed4.html#methods-for-boolean-arrays-any-and-all",
    "href": "qmd/pandas3ed4.html#methods-for-boolean-arrays-any-and-all",
    "title": "Python for Data Analysis",
    "section": "Methods for Boolean Arrays: any and all",
    "text": "Methods for Boolean Arrays: any and all\n\nany and all:\n\nany: Checks if at least one value in a Boolean array is True.\nall: Checks if all values in a Boolean array are True.\n\n\n\nbools = np.array([False, False, True, False])\nprint(bools.any())  # Is there at least one True?\nprint(bools.all())  # Are all values True?\n\nTrue\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed4.html#sorting-sort-method",
    "href": "qmd/pandas3ed4.html#sorting-sort-method",
    "title": "Python for Data Analysis",
    "section": "Sorting: sort Method",
    "text": "Sorting: sort Method\n\nsort Method: Sorts an array in place.\n\n\nrng = np.random.default_rng(seed=12345)\narr = rng.standard_normal(6)\narr.sort()  # Sort the array in place\nprint(arr)\n\n[-1.42382504 -0.87066174 -0.74088465 -0.25917323 -0.07534331  1.26372846]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#sorting-sorting-along-an-axis",
    "href": "qmd/pandas3ed4.html#sorting-sorting-along-an-axis",
    "title": "Python for Data Analysis",
    "section": "Sorting: Sorting Along an Axis",
    "text": "Sorting: Sorting Along an Axis\n\nrng = np.random.default_rng(seed=12345)\narr = rng.standard_normal((5, 3))\narr.sort(axis=0)  # Sort within each column\nprint(arr)\n\n[[-1.95286306 -0.07534331 -0.87066174]\n [-1.42382504  0.6488928  -0.74088465]\n [-1.3677927   0.90219827 -0.46695317]\n [-0.75938718  1.26372846  0.36105811]\n [-0.25917323  2.34740965  0.96849691]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#sorting-sorting-along-an-axis-continued",
    "href": "qmd/pandas3ed4.html#sorting-sorting-along-an-axis-continued",
    "title": "Python for Data Analysis",
    "section": "Sorting: Sorting Along an Axis (Continued)",
    "text": "Sorting: Sorting Along an Axis (Continued)\n\narr.sort(axis=1) # Sort within each row\nprint(arr)\n\n[[-1.95286306 -0.87066174 -0.07534331]\n [-1.42382504 -0.74088465  0.6488928 ]\n [-1.3677927  -0.46695317  0.90219827]\n [-0.75938718  0.36105811  1.26372846]\n [-0.25917323  0.96849691  2.34740965]]\n\n\n\nnp.sort Function: Returns a sorted copy of an array (does not modify the original)."
  },
  {
    "objectID": "qmd/pandas3ed4.html#unique-and-other-set-logic-np.unique",
    "href": "qmd/pandas3ed4.html#unique-and-other-set-logic-np.unique",
    "title": "Python for Data Analysis",
    "section": "Unique and Other Set Logic: np.unique",
    "text": "Unique and Other Set Logic: np.unique\n\nnp.unique: Returns the sorted unique values in an array.\n\n\nimport numpy as np\nnames = np.array(['Bob', 'Will', 'Joe', 'Bob', 'Will', 'Joe', 'Joe'])\nprint(np.unique(names)) # Get unique names\n\n['Bob' 'Joe' 'Will']"
  },
  {
    "objectID": "qmd/pandas3ed4.html#unique-and-other-set-logic-np.in1d",
    "href": "qmd/pandas3ed4.html#unique-and-other-set-logic-np.in1d",
    "title": "Python for Data Analysis",
    "section": "Unique and Other Set Logic: np.in1d",
    "text": "Unique and Other Set Logic: np.in1d\n\nnp.in1d: Tests membership of values in one array within another.\n\n\nvalues = np.array([6, 0, 0, 3, 2, 5, 6])\nprint(np.in1d(values, [2, 3, 6]))  # Check if each value in 'values' is in [2, 3, 6]\n\n[ True False False  True  True False  True]\n\n\n/tmp/ipykernel_3215/1961777543.py:2: DeprecationWarning: `in1d` is deprecated. Use `np.isin` instead.\n  print(np.in1d(values, [2, 3, 6]))  # Check if each value in 'values' is in [2, 3, 6]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-set-operations",
    "href": "qmd/pandas3ed4.html#array-set-operations",
    "title": "Python for Data Analysis",
    "section": "Array Set Operations",
    "text": "Array Set Operations\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nunique(x)\nComputes the sorted, unique elements in x.\n\n\nintersect1d(x, y)\nComputes the sorted, common elements in x and y."
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-set-operations-continued",
    "href": "qmd/pandas3ed4.html#array-set-operations-continued",
    "title": "Python for Data Analysis",
    "section": "Array Set Operations (Continued)",
    "text": "Array Set Operations (Continued)\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nunion1d(x, y)\nComputes the sorted union of elements.\n\n\nin1d(x, y)\nComputes a Boolean array indicating whether each element of x is in y."
  },
  {
    "objectID": "qmd/pandas3ed4.html#array-set-operations-continued-1",
    "href": "qmd/pandas3ed4.html#array-set-operations-continued-1",
    "title": "Python for Data Analysis",
    "section": "Array Set Operations (Continued)",
    "text": "Array Set Operations (Continued)\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nsetdiff1d(x, y)\nSet difference: elements in x that are not in y.\n\n\nsetxor1d(x, y)\nSet symmetric differences; elements that are in either of the arrays, but not both."
  },
  {
    "objectID": "qmd/pandas3ed4.html#file-input-and-output-with-arrays-np.save-and-np.load",
    "href": "qmd/pandas3ed4.html#file-input-and-output-with-arrays-np.save-and-np.load",
    "title": "Python for Data Analysis",
    "section": "File Input and Output with Arrays: np.save and np.load",
    "text": "File Input and Output with Arrays: np.save and np.load\n\nnp.save and np.load: Functions for saving and loading arrays in NumPy‚Äôs binary format (.npy).\n\n\nimport numpy as np\narr = np.arange(10)\nnp.save('some_array', arr)  # Save to 'some_array.npy'\nloaded_arr = np.load('some_array.npy')  # Load from 'some_array.npy'\nprint(loaded_arr)\n\n[0 1 2 3 4 5 6 7 8 9]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#file-input-and-output-with-arrays-np.savez",
    "href": "qmd/pandas3ed4.html#file-input-and-output-with-arrays-np.savez",
    "title": "Python for Data Analysis",
    "section": "File Input and Output with Arrays: np.savez",
    "text": "File Input and Output with Arrays: np.savez\n\nnp.savez: Saves multiple arrays into an uncompressed archive (.npz).\n\n\nnp.savez('array_archive.npz', a=arr, b=arr)  # Save multiple arrays\narch = np.load('array_archive.npz')        # Load the archive\nprint(arch['b'])  # Access arrays by name\n\n[0 1 2 3 4 5 6 7 8 9]\n\n\n\nnp.savez_compressed: Saves multiple arrays into a compressed archive."
  },
  {
    "objectID": "qmd/pandas3ed4.html#linear-algebra-matrix-multiplication",
    "href": "qmd/pandas3ed4.html#linear-algebra-matrix-multiplication",
    "title": "Python for Data Analysis",
    "section": "Linear Algebra: Matrix Multiplication",
    "text": "Linear Algebra: Matrix Multiplication\n\nnumpy.linalg Module: Provides functions for linear algebra operations.\nMatrix Multiplication:\n\n\nimport numpy as np\nx = np.array([[1., 2., 3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7], [8, 9]])\nprint(x.dot(y))        # Matrix multiplication (method)\nprint(np.dot(x, y))    # Matrix multiplication (function)\nprint( x @ np.ones(3)) # Matrix multiplication using the @ operator\n\n[[ 28.  64.]\n [ 67. 181.]]\n[[ 28.  64.]\n [ 67. 181.]]\n[ 6. 15.]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#linear-algebra-inverse-and-determinant",
    "href": "qmd/pandas3ed4.html#linear-algebra-inverse-and-determinant",
    "title": "Python for Data Analysis",
    "section": "Linear Algebra: Inverse and Determinant",
    "text": "Linear Algebra: Inverse and Determinant\n\nInverse and Determinant:\n\n\nfrom numpy.linalg import inv, qr\nrng = np.random.default_rng(seed=12345)\nX = rng.standard_normal((5, 5))\nmat = X.T @ X\nprint(inv(mat))   # Inverse of a matrix\n\n[[ 0.15548538 -0.36723081 -0.52638547 -0.2300642  -0.04646089]\n [-0.36723081  2.54917814  3.47827334  1.48196722  0.22206454]\n [-0.52638547  3.47827334  5.46389554  2.46214396  0.63467543]\n [-0.2300642   1.48196722  2.46214396  1.38302896  0.33430132]\n [-0.04646089  0.22206454  0.63467543  0.33430132  0.33879566]]"
  },
  {
    "objectID": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions",
    "href": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions",
    "title": "Python for Data Analysis",
    "section": "Commonly Used numpy.linalg Functions",
    "text": "Commonly Used numpy.linalg Functions\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ndiag\nReturns the diagonal (or off-diagonal) elements of a square matrix as a 1D array, or converts a 1D array to a square matrix.\n\n\ndot\nMatrix multiplication.\n\n\ntrace\nComputes the sum of the diagonal elements."
  },
  {
    "objectID": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions-continued",
    "href": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions-continued",
    "title": "Python for Data Analysis",
    "section": "Commonly Used numpy.linalg Functions (Continued)",
    "text": "Commonly Used numpy.linalg Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\ndet\nComputes the matrix determinant.\n\n\neig\nComputes the eigenvalues and eigenvectors of a square matrix.\n\n\ninv\nComputes the inverse of a square matrix."
  },
  {
    "objectID": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions-continued-1",
    "href": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions-continued-1",
    "title": "Python for Data Analysis",
    "section": "Commonly Used numpy.linalg Functions (Continued)",
    "text": "Commonly Used numpy.linalg Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\npinv\nComputes the Moore-Penrose pseudoinverse of a matrix.\n\n\nqr\nComputes the QR decomposition.\n\n\nsvd\nComputes the singular value decomposition (SVD)."
  },
  {
    "objectID": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions-continued-2",
    "href": "qmd/pandas3ed4.html#commonly-used-numpy.linalg-functions-continued-2",
    "title": "Python for Data Analysis",
    "section": "Commonly Used numpy.linalg Functions (Continued)",
    "text": "Commonly Used numpy.linalg Functions (Continued)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nsolve\nSolves the linear system Ax = b for x, where A is a square matrix.\n\n\nlstsq\nComputes the least-squares solution to Ax = b."
  },
  {
    "objectID": "qmd/pandas3ed4.html#example-random-walks",
    "href": "qmd/pandas3ed4.html#example-random-walks",
    "title": "Python for Data Analysis",
    "section": "Example: Random Walks",
    "text": "Example: Random Walks\nLet‚Äôs simulate a simple random walk using NumPy:\n\nimport numpy as np\nnsteps = 1000\nrng = np.random.default_rng(seed=12345)\ndraws = rng.integers(0, 2, size=nsteps)  # Generate 0s and 1s (coin flips)\nsteps = np.where(draws == 0, 1, -1)      # Convert to 1 and -1\nwalk = steps.cumsum()                    # Cumulative sum (the walk)"
  },
  {
    "objectID": "qmd/pandas3ed4.html#example-random-walks-visualization",
    "href": "qmd/pandas3ed4.html#example-random-walks-visualization",
    "title": "Python for Data Analysis",
    "section": "Example: Random Walks (Visualization)",
    "text": "Example: Random Walks (Visualization)\nFirst 100 steps of a simple random walk:\n\nimport matplotlib.pyplot as plt\nplt.plot(walk[:100])\nplt.show()"
  },
  {
    "objectID": "qmd/pandas3ed4.html#random-walks-analysis",
    "href": "qmd/pandas3ed4.html#random-walks-analysis",
    "title": "Python for Data Analysis",
    "section": "Random Walks: Analysis",
    "text": "Random Walks: Analysis\nWe can analyze the random walk:\n\nprint(walk.min())  # Minimum value\nprint(walk.max())  # Maximum value\n\n-8\n50"
  },
  {
    "objectID": "qmd/pandas3ed4.html#random-walks-first-crossing-time",
    "href": "qmd/pandas3ed4.html#random-walks-first-crossing-time",
    "title": "Python for Data Analysis",
    "section": "Random Walks: First Crossing Time",
    "text": "Random Walks: First Crossing Time\n\nFirst Crossing Time: The step at which the walk reaches a particular value.\n\n\nprint((np.abs(walk) &gt;= 10).argmax())  # Find the first step where the absolute value is &gt;= 10\n\n155\n\n\nUsing argmax here is not always efficient because it always makes a full scan of the array. In this special case, once a True is observed we know it to be the maximum value."
  },
  {
    "objectID": "qmd/pandas3ed4.html#simulating-many-random-walks-at-once",
    "href": "qmd/pandas3ed4.html#simulating-many-random-walks-at-once",
    "title": "Python for Data Analysis",
    "section": "Simulating Many Random Walks at Once",
    "text": "Simulating Many Random Walks at Once\nWe can efficiently simulate many random walks simultaneously:\n\nnwalks = 5000\nnsteps = 1000\nrng = np.random.default_rng(seed=12345)\ndraws = rng.integers(0, 2, size=(nwalks, nsteps))  # Generate draws for all walks\nsteps = np.where(draws &gt; 0, 1, -1)\nwalks = steps.cumsum(axis=1)                     # Cumulative sum for each walk"
  },
  {
    "objectID": "qmd/pandas3ed4.html#simulating-many-random-walks-average-crossing-time",
    "href": "qmd/pandas3ed4.html#simulating-many-random-walks-average-crossing-time",
    "title": "Python for Data Analysis",
    "section": "Simulating Many Random Walks: Average Crossing Time",
    "text": "Simulating Many Random Walks: Average Crossing Time\nThen, for example, calculate the average minimum crossing time:\n\nhits30 = (np.abs(walks) &gt;= 30).any(axis=1)\ncrossing_times = (np.abs(walks[hits30]) &gt;= 30).argmax(axis=1)\nprint(crossing_times.mean())\n\n500.6182621502209\n\n\nThis vectorized approach requires creating an array with nwalks * nsteps elements, which may use a large amount of memory for large simulations. If memory is more constrained, then a different approach will be required."
  },
  {
    "objectID": "qmd/pandas3ed4.html#summary",
    "href": "qmd/pandas3ed4.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary",
    "text": "Summary\n\nNumPy‚Äôs Power: NumPy provides a powerful foundation for numerical computing in Python, thanks to its efficient ndarray and vectorized operations.\nKey Concepts:\n\nndarray: Multidimensional array with homogeneous data.\ndtype: Data type of array elements.\nVectorization: Performing operations on entire arrays without loops.\nBroadcasting: Arithmetic operations on arrays of different shapes."
  },
  {
    "objectID": "qmd/pandas3ed4.html#summary-continued",
    "href": "qmd/pandas3ed4.html#summary-continued",
    "title": "Python for Data Analysis",
    "section": "Summary (Continued)",
    "text": "Summary (Continued)\n\nKey Concepts (Continued):\n\nIndexing and Slicing: Accessing and modifying array elements and subarrays.\nFancy Indexing: Indexing with integer arrays.\nTransposing: Rearranging data.\nufuncs: Fast element-wise functions.\nnumpy.random: Generating arrays of random numbers.\nLinear Algebra\n\nEfficiency: NumPy is designed for performance, especially with large datasets."
  },
  {
    "objectID": "qmd/pandas3ed4.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed4.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion ü§î",
    "text": "Thoughts and Discussion ü§î\n\nHow does the concept of vectorization in NumPy compare to how you might perform similar operations in other programming languages you know?\nCan you think of specific data analysis tasks where NumPy‚Äôs array-oriented approach would be significantly more efficient than using Python lists and loops?\nWhat are the advantages and potential disadvantages of NumPy array slices being views rather than copies? When might you need to explicitly create a copy?"
  },
  {
    "objectID": "qmd/pandas3ed4.html#thoughts-and-discussion-continued",
    "href": "qmd/pandas3ed4.html#thoughts-and-discussion-continued",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion ü§î (Continued)",
    "text": "Thoughts and Discussion ü§î (Continued)\n\nConsider the np.where function. How could you use it to implement more complex conditional logic than the simple examples we saw?\nWhy is it important to understand NumPy‚Äôs data types (dtypes)? How can they impact performance and memory usage?\nDiscuss scenarios where you might use NumPy‚Äôs linear algebra functions (e.g., dot, inv, eig)."
  },
  {
    "objectID": "qmd/pandas3ed5.html",
    "href": "qmd/pandas3ed5.html",
    "title": "",
    "section": "",
    "text": "---\ntitle: \"Getting Started with pandas\"\n---\n\n## Introduction to pandas üêº\n\n-   pandas is a powerful Python library for data analysis and manipulation.\n-   It's like a spreadsheet program, but much more powerful and flexible.\n-   It's built on top of NumPy, another essential library for numerical computing in Python.\n\n## pandas Logo\n\n![](https://pandas.pydata.org/static/img/pandas.svg)\n\n::: {.callout-note}\nThink of pandas as Excel on steroids! üí™\n:::\n\n## Why pandas? ü§î\n\n-   **Data Structures:** Provides intuitive data structures like Series (1D) and DataFrame (2D) to handle data efficiently.\n\n## Why pandas? ü§î (Continued)\n\n-   **Data Cleaning:** Tools for handling missing data, filtering, and transforming data.\n\n## Why pandas? ü§î (Continued)\n\n-   **Data Analysis:** Powerful functions for grouping, aggregation, and statistical analysis.\n\n## Why pandas? ü§î (Continued)\n\n-   **Integration:** Works seamlessly with other Python libraries like NumPy, SciPy, scikit-learn, and matplotlib.\n\n## Core Concepts: Data Analysis üîé\n\nData analysis is the process of inspecting, cleansing, transforming, and modeling data with the goal of discovering useful information, informing conclusions, and supporting decision-making. It involves several key steps:\n\n## Core Concepts: Data Analysis üîé (Continued)\n\n1.  **Data Collection:** Gathering data from various sources.\n2.  **Data Cleaning:** Handling missing values, correcting errors, and ensuring data consistency.\n3.  **Data Transformation:** Converting data into a suitable format for analysis (e.g., scaling, normalization).\n\n## Core Concepts: Data Analysis üîé (Continued)\n\n4.  **Data Exploration:**  Using descriptive statistics and visualizations to understand the data's patterns and characteristics.\n5.  **Data Modeling:** Applying statistical or machine learning techniques to extract insights or make predictions.\n6.  **Interpretation and Reporting:**  Communicating findings in a clear and concise manner.\n\n## Core Concepts: Machine Learning ü§ñ\n\nMachine learning is a subfield of artificial intelligence (AI) that focuses on enabling computers to learn from data without being explicitly programmed. Key concepts include:\n\n## Core Concepts: Machine Learning ü§ñ (Continued)\n\n- **Training Data:**  The dataset used to teach the machine learning model.\n- **Features:** The individual measurable properties or characteristics of the data (e.g., columns in a table).\n- **Model:**  A mathematical representation that learns patterns from the training data.\n\n## Core Concepts: Machine Learning ü§ñ (Continued)\n\n- **Prediction:**  Using the trained model to make predictions on new, unseen data.\n- **Supervised Learning:**  Learning from labeled data (where the correct output is known).  Examples: classification, regression.\n- **Unsupervised Learning:** Learning from unlabeled data (where the correct output is unknown). Examples: clustering, dimensionality reduction.\n\n## Core Concepts: Python üêç\n\nPython is a versatile, high-level programming language known for its readability and extensive libraries.  Key features for data analysis:\n\n-   **Easy to Learn:**  Clear syntax makes it beginner-friendly.\n\n## Core Concepts: Python üêç (Continued)\n\n-   **Large Community:**  Extensive online resources and support.\n-   **Rich Ecosystem of Libraries:**  NumPy (numerical computation), pandas (data manipulation), scikit-learn (machine learning), matplotlib/seaborn (visualization).\n\n## Core Concepts: Python üêç (Continued)\n\n-   **Interpreted Language:**  Code is executed line by line, making it easy to test and debug.\n-   **Dynamic Typing:**  You don't need to explicitly declare variable types.\n\n## Importing pandas\n\n```python\nimport pandas as pd  # Import pandas, aliased as 'pd'\nimport numpy as np   # Import NumPy, aliased as 'np'"
  },
  {
    "objectID": "qmd/pandas3ed5.html#pandas-data-structures-series",
    "href": "qmd/pandas3ed5.html#pandas-data-structures-series",
    "title": "",
    "section": "pandas Data Structures: Series",
    "text": "pandas Data Structures: Series\n\nA Series is a one-dimensional labeled array. It‚Äôs like a column in a spreadsheet.\nIt can hold data of any type (integers, floats, strings, etc.).\nIt has an index, which labels each element.\n\nobj = pd.Series([4, 7, -5, 3]) # Create a Series from a list\nobj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-index-and-values",
    "href": "qmd/pandas3ed5.html#series-index-and-values",
    "title": "",
    "section": "Series: Index and Values",
    "text": "Series: Index and Values\nprint(obj.array)  # Access the underlying data (PandasArray)\nprint(obj.index)  # Access the index (default: 0, 1, 2, ...)\n\n\n\n\n\n\nNote\n\n\n\nobj.array returns the data. obj.index returns the index."
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-with-custom-index",
    "href": "qmd/pandas3ed5.html#series-with-custom-index",
    "title": "",
    "section": "Series with Custom Index",
    "text": "Series with Custom Index\nobj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c']) # Create a Series with a custom index\nobj2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-custom-index-continued",
    "href": "qmd/pandas3ed5.html#series-custom-index-continued",
    "title": "",
    "section": "Series: Custom Index (Continued)",
    "text": "Series: Custom Index (Continued)\nobj2.index # Access the custom index\n\n\n\n\n\n\nNote\n\n\n\nNow the index is [‚Äòd‚Äô, ‚Äòb‚Äô, ‚Äòa‚Äô, ‚Äòc‚Äô]. We can use these to access data."
  },
  {
    "objectID": "qmd/pandas3ed5.html#accessing-series-elements",
    "href": "qmd/pandas3ed5.html#accessing-series-elements",
    "title": "",
    "section": "Accessing Series Elements",
    "text": "Accessing Series Elements\nobj2['a']  # Access element by index label 'a'"
  },
  {
    "objectID": "qmd/pandas3ed5.html#accessing-series-elements-continued",
    "href": "qmd/pandas3ed5.html#accessing-series-elements-continued",
    "title": "",
    "section": "Accessing Series Elements (Continued)",
    "text": "Accessing Series Elements (Continued)\nobj2['d'] = 6  # Modify element at index label 'd'"
  },
  {
    "objectID": "qmd/pandas3ed5.html#accessing-series-elements-continued-1",
    "href": "qmd/pandas3ed5.html#accessing-series-elements-continued-1",
    "title": "",
    "section": "Accessing Series Elements (Continued)",
    "text": "Accessing Series Elements (Continued)\nobj2[['c', 'a', 'd']]  # Access multiple elements using a list of labels\n\n\n\n\n\n\nNote\n\n\n\nWe can use a list of index labels to select a subset."
  },
  {
    "objectID": "qmd/pandas3ed5.html#filtering-series",
    "href": "qmd/pandas3ed5.html#filtering-series",
    "title": "",
    "section": "Filtering Series",
    "text": "Filtering Series\nobj2[obj2 &gt; 0]  # Select elements greater than 0 (Boolean indexing)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#filtering-series-continued",
    "href": "qmd/pandas3ed5.html#filtering-series-continued",
    "title": "",
    "section": "Filtering Series (Continued)",
    "text": "Filtering Series (Continued)\nobj2 * 2 # Multiply each element by 2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#filtering-series-continued-1",
    "href": "qmd/pandas3ed5.html#filtering-series-continued-1",
    "title": "",
    "section": "Filtering Series (Continued)",
    "text": "Filtering Series (Continued)\nnp.exp(obj2) # Apply the exponential function (from NumPy) element-wise\n\n\n\n\n\n\nNote\n\n\n\nThe index-value link is preserved during these operations."
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-as-a-fixed-length-ordered-dictionary",
    "href": "qmd/pandas3ed5.html#series-as-a-fixed-length-ordered-dictionary",
    "title": "",
    "section": "Series as a Fixed-Length, Ordered Dictionary",
    "text": "Series as a Fixed-Length, Ordered Dictionary\n'b' in obj2  # Check if 'b' is in the index (like checking keys in a dict)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-as-a-fixed-length-ordered-dictionary-continued",
    "href": "qmd/pandas3ed5.html#series-as-a-fixed-length-ordered-dictionary-continued",
    "title": "",
    "section": "Series as a Fixed-Length, Ordered Dictionary (Continued)",
    "text": "Series as a Fixed-Length, Ordered Dictionary (Continued)\n'e' in obj2  # Check if 'e' is in the index\n\n\n\n\n\n\nNote\n\n\n\nA Series is similar to a dictionary: keys are index labels, values are data."
  },
  {
    "objectID": "qmd/pandas3ed5.html#creating-series-from-a-dictionary",
    "href": "qmd/pandas3ed5.html#creating-series-from-a-dictionary",
    "title": "",
    "section": "Creating Series from a Dictionary",
    "text": "Creating Series from a Dictionary\nsdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}\nobj3 = pd.Series(sdata) # Create a Series from a dictionary\nobj3"
  },
  {
    "objectID": "qmd/pandas3ed5.html#creating-series-from-a-dictionary-continued",
    "href": "qmd/pandas3ed5.html#creating-series-from-a-dictionary-continued",
    "title": "",
    "section": "Creating Series from a Dictionary (Continued)",
    "text": "Creating Series from a Dictionary (Continued)\nobj3.to_dict() #Converting back to dictionary"
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-handling-missing-data",
    "href": "qmd/pandas3ed5.html#series-handling-missing-data",
    "title": "",
    "section": "Series: Handling Missing Data",
    "text": "Series: Handling Missing Data\nstates = ['California', 'Ohio', 'Oregon', 'Texas']\nobj4 = pd.Series(sdata, index=states)  # Create a Series with a specified index\nobj4\n\n\n\n\n\n\nNote\n\n\n\n‚ÄòCalifornia‚Äô is NaN (Not a Number) - it‚Äôs in the index but not in sdata. ‚ÄòUtah‚Äô is excluded - it is in sdata but not in the index."
  },
  {
    "objectID": "qmd/pandas3ed5.html#detecting-missing-data",
    "href": "qmd/pandas3ed5.html#detecting-missing-data",
    "title": "",
    "section": "Detecting Missing Data",
    "text": "Detecting Missing Data\npd.isna(obj4)  # Check for missing values (NaN) - returns a boolean Series"
  },
  {
    "objectID": "qmd/pandas3ed5.html#detecting-missing-data-continued",
    "href": "qmd/pandas3ed5.html#detecting-missing-data-continued",
    "title": "",
    "section": "Detecting Missing Data (Continued)",
    "text": "Detecting Missing Data (Continued)\npd.notna(obj4) # Check for non-missing values - returns a boolean Series\n\n\n\n\n\n\nNote\n\n\n\nisna() and notna() detect missing values."
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-automatic-alignment",
    "href": "qmd/pandas3ed5.html#series-automatic-alignment",
    "title": "",
    "section": "Series: Automatic Alignment",
    "text": "Series: Automatic Alignment\nobj3"
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-automatic-alignment-continued",
    "href": "qmd/pandas3ed5.html#series-automatic-alignment-continued",
    "title": "",
    "section": "Series: Automatic Alignment (Continued)",
    "text": "Series: Automatic Alignment (Continued)\nobj4"
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-automatic-alignment-continued-1",
    "href": "qmd/pandas3ed5.html#series-automatic-alignment-continued-1",
    "title": "",
    "section": "Series: Automatic Alignment (Continued)",
    "text": "Series: Automatic Alignment (Continued)\nobj3 + obj4  # Add two Series; values are aligned by index label\n\n\n\n\n\n\nNote\n\n\n\nData alignment is automatic. NaN is introduced where labels don‚Äôt match."
  },
  {
    "objectID": "qmd/pandas3ed5.html#series-name-attribute",
    "href": "qmd/pandas3ed5.html#series-name-attribute",
    "title": "",
    "section": "Series: name Attribute",
    "text": "Series: name Attribute\nobj4.name = 'population'  # Set the name of the Series\nobj4.index.name = 'state'  # Set the name of the index\nobj4\n\n\n\n\n\n\nNote\n\n\n\nSeries and its index can have names."
  },
  {
    "objectID": "qmd/pandas3ed5.html#altering-series-index-in-place",
    "href": "qmd/pandas3ed5.html#altering-series-index-in-place",
    "title": "",
    "section": "Altering Series Index In-Place",
    "text": "Altering Series Index In-Place\nobj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#altering-series-index-in-place-continued",
    "href": "qmd/pandas3ed5.html#altering-series-index-in-place-continued",
    "title": "",
    "section": "Altering Series Index In-Place (Continued)",
    "text": "Altering Series Index In-Place (Continued)\nobj.index = ['Bob', 'Steve', 'Jeff', 'Ryan']  # Modify the index in-place\nobj\n\n\n\n\n\n\nNote\n\n\n\nThe index can be changed by assignment."
  },
  {
    "objectID": "qmd/pandas3ed5.html#pandas-data-structures-dataframe",
    "href": "qmd/pandas3ed5.html#pandas-data-structures-dataframe",
    "title": "",
    "section": "pandas Data Structures: DataFrame",
    "text": "pandas Data Structures: DataFrame\n\nA DataFrame is a two-dimensional labeled data structure. Like a spreadsheet.\nRows and columns.\nEach column can have a different type.\nRow index and a column index."
  },
  {
    "objectID": "qmd/pandas3ed5.html#creating-a-dataframe",
    "href": "qmd/pandas3ed5.html#creating-a-dataframe",
    "title": "",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\ndata = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],\n        'year': [2000, 2001, 2002, 2001, 2002, 2003],\n        'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}\nframe = pd.DataFrame(data) # Create a DataFrame from a dictionary of lists\nframe\n\n\n\n\n\n\nNote\n\n\n\nA common way to create a DataFrame: dictionary of lists."
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-head-and-tail",
    "href": "qmd/pandas3ed5.html#dataframe-head-and-tail",
    "title": "",
    "section": "DataFrame: head() and tail()",
    "text": "DataFrame: head() and tail()\nframe.head()  # Display the first 5 rows"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-head-and-tail-continued",
    "href": "qmd/pandas3ed5.html#dataframe-head-and-tail-continued",
    "title": "",
    "section": "DataFrame: head() and tail() (Continued)",
    "text": "DataFrame: head() and tail() (Continued)\nframe.tail() # Display the last 5 rows"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-specifying-column-order",
    "href": "qmd/pandas3ed5.html#dataframe-specifying-column-order",
    "title": "",
    "section": "DataFrame: Specifying Column Order",
    "text": "DataFrame: Specifying Column Order\npd.DataFrame(data, columns=['year', 'state', 'pop']) # Specify column order\n\n\n\n\n\n\nNote\n\n\n\nYou can specify the order of columns."
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-missing-data",
    "href": "qmd/pandas3ed5.html#dataframe-missing-data",
    "title": "",
    "section": "DataFrame: Missing Data",
    "text": "DataFrame: Missing Data\nframe2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt']) # 'debt' is a new column\nframe2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-missing-data-continued",
    "href": "qmd/pandas3ed5.html#dataframe-missing-data-continued",
    "title": "",
    "section": "DataFrame: Missing Data (Continued)",
    "text": "DataFrame: Missing Data (Continued)\nframe2.columns  # Show the column names\n\n\n\n\n\n\nNote\n\n\n\n‚Äòdebt‚Äô column has missing values (NaN) because it wasn‚Äôt in the original data."
  },
  {
    "objectID": "qmd/pandas3ed5.html#retrieving-columns",
    "href": "qmd/pandas3ed5.html#retrieving-columns",
    "title": "",
    "section": "Retrieving Columns",
    "text": "Retrieving Columns\nframe2['state']  # Retrieve the 'state' column (dictionary-like notation)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#retrieving-columns-continued",
    "href": "qmd/pandas3ed5.html#retrieving-columns-continued",
    "title": "",
    "section": "Retrieving Columns (Continued)",
    "text": "Retrieving Columns (Continued)\nframe2.year  # Retrieve the 'year' column (attribute-like access)\n\n\n\n\n\n\nNote\n\n\n\nBoth methods return a Series. Attribute access only works for valid Python variable names (no spaces, etc.)."
  },
  {
    "objectID": "qmd/pandas3ed5.html#retrieving-rows",
    "href": "qmd/pandas3ed5.html#retrieving-rows",
    "title": "",
    "section": "Retrieving Rows",
    "text": "Retrieving Rows\nframe2.loc[1]  # Access row by label (index '1')"
  },
  {
    "objectID": "qmd/pandas3ed5.html#retrieving-rows-continued",
    "href": "qmd/pandas3ed5.html#retrieving-rows-continued",
    "title": "",
    "section": "Retrieving Rows (Continued)",
    "text": "Retrieving Rows (Continued)\nframe2.iloc[2]  # Access row by integer position (index 2)\n\n\n\n\n\n\nNote\n\n\n\nloc is label-based. iloc is integer position-based. Crucial distinction."
  },
  {
    "objectID": "qmd/pandas3ed5.html#modifying-columns",
    "href": "qmd/pandas3ed5.html#modifying-columns",
    "title": "",
    "section": "Modifying Columns",
    "text": "Modifying Columns\nframe2['debt'] = 16.5  # Assign a scalar value to the 'debt' column\nframe2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#modifying-columns-continued",
    "href": "qmd/pandas3ed5.html#modifying-columns-continued",
    "title": "",
    "section": "Modifying Columns (Continued)",
    "text": "Modifying Columns (Continued)\nframe2['debt'] = np.arange(6.)  # Assign a NumPy array to the 'debt' column\nframe2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#assigning-a-series",
    "href": "qmd/pandas3ed5.html#assigning-a-series",
    "title": "",
    "section": "Assigning a Series",
    "text": "Assigning a Series\nval = pd.Series([-1.2, -1.5, -1.7], index=[2, 4, 5])  # Create Series with custom index\nframe2['debt'] = val  # Assign the Series to the 'debt' column\nframe2\n\n\n\n\n\n\nNote\n\n\n\nLabels are aligned! Values from val are assigned to corresponding indices in frame2. Missing values (NaN) are filled in where indices don‚Äôt match."
  },
  {
    "objectID": "qmd/pandas3ed5.html#creating-new-columns",
    "href": "qmd/pandas3ed5.html#creating-new-columns",
    "title": "",
    "section": "Creating New Columns",
    "text": "Creating New Columns\nframe2['eastern'] = frame2['state'] == 'Ohio'  # Create a new column 'eastern'\nframe2\n\n\n\n\n\n\nNote\n\n\n\nAssign to a non-existent column to create a new one."
  },
  {
    "objectID": "qmd/pandas3ed5.html#deleting-columns",
    "href": "qmd/pandas3ed5.html#deleting-columns",
    "title": "",
    "section": "Deleting Columns",
    "text": "Deleting Columns\ndel frame2['eastern']  # Delete the 'eastern' column\nframe2.columns\n\n\n\n\n\n\nNote\n\n\n\ndel keyword deletes columns."
  },
  {
    "objectID": "qmd/pandas3ed5.html#creating-a-dataframe-from-nested-dictionaries",
    "href": "qmd/pandas3ed5.html#creating-a-dataframe-from-nested-dictionaries",
    "title": "",
    "section": "Creating a DataFrame from Nested Dictionaries",
    "text": "Creating a DataFrame from Nested Dictionaries\npopulations = {'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6},\n               'Nevada': {2001: 2.4, 2002: 2.9}}\nframe3 = pd.DataFrame(populations) # Create DataFrame from nested dictionary\nframe3\n\n\n\n\n\n\nNote\n\n\n\nOuter keys become columns, inner keys become row indices."
  },
  {
    "objectID": "qmd/pandas3ed5.html#transposing-a-dataframe",
    "href": "qmd/pandas3ed5.html#transposing-a-dataframe",
    "title": "",
    "section": "Transposing a DataFrame",
    "text": "Transposing a DataFrame\nframe3.T  # Transpose the DataFrame (swap rows and columns)\n\n\n\n\n\n\nNote\n\n\n\nSwaps rows and columns."
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-index.name-and-columns.name",
    "href": "qmd/pandas3ed5.html#dataframe-index.name-and-columns.name",
    "title": "",
    "section": "DataFrame: index.name and columns.name",
    "text": "DataFrame: index.name and columns.name\nframe3.index.name = 'year'    # Set the name of the row index\nframe3.columns.name = 'state' # Set the name of the column index\nframe3"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-to_numpy",
    "href": "qmd/pandas3ed5.html#dataframe-to_numpy",
    "title": "",
    "section": "DataFrame: to_numpy()",
    "text": "DataFrame: to_numpy()\nframe3.to_numpy()  # Convert the DataFrame to a NumPy array\n\n\n\n\n\n\nNote\n\n\n\nReturns the data as a 2D NumPy array. If mixed types, the dtype will accommodate all columns, and usually be object."
  },
  {
    "objectID": "qmd/pandas3ed5.html#index-objects",
    "href": "qmd/pandas3ed5.html#index-objects",
    "title": "",
    "section": "Index Objects",
    "text": "Index Objects\nobj = pd.Series(np.arange(3), index=['a', 'b', 'c'])\nindex = obj.index  # Get the Index object\nindex"
  },
  {
    "objectID": "qmd/pandas3ed5.html#index-objects-continued",
    "href": "qmd/pandas3ed5.html#index-objects-continued",
    "title": "",
    "section": "Index Objects (Continued)",
    "text": "Index Objects (Continued)\nindex[1:]  # Slice the Index object (like a list)\n\n\n\n\n\n\nNote\n\n\n\nIndex objects store axis labels and metadata. Immutable."
  },
  {
    "objectID": "qmd/pandas3ed5.html#index-immutability",
    "href": "qmd/pandas3ed5.html#index-immutability",
    "title": "",
    "section": "Index Immutability",
    "text": "Index Immutability\n#| eval: false\n\nindex[1] = 'd'  # TypeError: Index does not support mutable operations\n\n\n\n\n\n\nNote\n\n\n\nIndex objects cannot be changed after creation."
  },
  {
    "objectID": "qmd/pandas3ed5.html#index-as-a-fixed-size-set",
    "href": "qmd/pandas3ed5.html#index-as-a-fixed-size-set",
    "title": "",
    "section": "Index as a Fixed-Size Set",
    "text": "Index as a Fixed-Size Set\nframe3"
  },
  {
    "objectID": "qmd/pandas3ed5.html#index-as-a-fixed-size-set-continued",
    "href": "qmd/pandas3ed5.html#index-as-a-fixed-size-set-continued",
    "title": "",
    "section": "Index as a Fixed-Size Set (Continued)",
    "text": "Index as a Fixed-Size Set (Continued)\n'Ohio' in frame3.columns  # Check for column membership"
  },
  {
    "objectID": "qmd/pandas3ed5.html#index-as-a-fixed-size-set-continued-1",
    "href": "qmd/pandas3ed5.html#index-as-a-fixed-size-set-continued-1",
    "title": "",
    "section": "Index as a Fixed-Size Set (Continued)",
    "text": "Index as a Fixed-Size Set (Continued)\n2003 in frame3.index  # Check for row index membership"
  },
  {
    "objectID": "qmd/pandas3ed5.html#reindexing",
    "href": "qmd/pandas3ed5.html#reindexing",
    "title": "",
    "section": "Reindexing",
    "text": "Reindexing\n\nreindex creates a new object; data is conformed to a new index.\n\nobj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])\nobj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#reindexing-continued",
    "href": "qmd/pandas3ed5.html#reindexing-continued",
    "title": "",
    "section": "Reindexing (Continued)",
    "text": "Reindexing (Continued)\nobj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'])  # Reindex the Series\nobj2\n\n\n\n\n\n\nNote\n\n\n\nreindex creates a new Series. NaN is introduced for missing indices."
  },
  {
    "objectID": "qmd/pandas3ed5.html#reindexing-method-for-interpolation",
    "href": "qmd/pandas3ed5.html#reindexing-method-for-interpolation",
    "title": "",
    "section": "Reindexing: method for Interpolation",
    "text": "Reindexing: method for Interpolation\nobj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])\nobj3"
  },
  {
    "objectID": "qmd/pandas3ed5.html#reindexing-method-for-interpolation-continued",
    "href": "qmd/pandas3ed5.html#reindexing-method-for-interpolation-continued",
    "title": "",
    "section": "Reindexing: method for Interpolation (Continued)",
    "text": "Reindexing: method for Interpolation (Continued)\nobj3.reindex(np.arange(6), method='ffill')  # Forward fill missing values\n\n\n\n\n\n\nNote\n\n\n\nffill (forward fill) propagates the last valid value forward."
  },
  {
    "objectID": "qmd/pandas3ed5.html#reindexing-with-dataframe",
    "href": "qmd/pandas3ed5.html#reindexing-with-dataframe",
    "title": "",
    "section": "Reindexing with DataFrame",
    "text": "Reindexing with DataFrame\nframe = pd.DataFrame(np.arange(9).reshape((3, 3)),\n                     index=['a', 'c', 'd'],\n                     columns=['Ohio', 'Texas', 'California'])\nframe"
  },
  {
    "objectID": "qmd/pandas3ed5.html#reindexing-with-dataframe-continued",
    "href": "qmd/pandas3ed5.html#reindexing-with-dataframe-continued",
    "title": "",
    "section": "Reindexing with DataFrame (Continued)",
    "text": "Reindexing with DataFrame (Continued)\nframe2 = frame.reindex(index=['a', 'b', 'c', 'd']) # Reindex rows\nframe2\n\n\n\n\n\n\nNote\n\n\n\nreindex on DataFrame can change row index, columns, or both."
  },
  {
    "objectID": "qmd/pandas3ed5.html#reindexing-columns",
    "href": "qmd/pandas3ed5.html#reindexing-columns",
    "title": "",
    "section": "Reindexing Columns",
    "text": "Reindexing Columns\nstates = ['Texas', 'Utah', 'California']\nframe.reindex(columns=states)  # Reindex columns"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dropping-entries",
    "href": "qmd/pandas3ed5.html#dropping-entries",
    "title": "",
    "section": "Dropping Entries",
    "text": "Dropping Entries\nobj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])\nobj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dropping-entries-continued",
    "href": "qmd/pandas3ed5.html#dropping-entries-continued",
    "title": "",
    "section": "Dropping Entries (Continued)",
    "text": "Dropping Entries (Continued)\nnew_obj = obj.drop('c')  # Drop entry 'c' (creates a new Series)\nnew_obj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dropping-entries-continued-1",
    "href": "qmd/pandas3ed5.html#dropping-entries-continued-1",
    "title": "",
    "section": "Dropping Entries (Continued)",
    "text": "Dropping Entries (Continued)\nobj.drop(['d', 'c'])  # Drop multiple entries"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dropping-from-dataframe",
    "href": "qmd/pandas3ed5.html#dropping-from-dataframe",
    "title": "",
    "section": "Dropping from DataFrame",
    "text": "Dropping from DataFrame\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndata"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dropping-from-dataframe-continued",
    "href": "qmd/pandas3ed5.html#dropping-from-dataframe-continued",
    "title": "",
    "section": "Dropping from DataFrame (Continued)",
    "text": "Dropping from DataFrame (Continued)\ndata.drop(index=['Colorado', 'Ohio'])  # Drop rows by index label"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dropping-from-dataframe-continued-1",
    "href": "qmd/pandas3ed5.html#dropping-from-dataframe-continued-1",
    "title": "",
    "section": "Dropping from DataFrame (Continued)",
    "text": "Dropping from DataFrame (Continued)\ndata.drop(columns=['two']) # Drop column by column name"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dropping-from-dataframe-continued-2",
    "href": "qmd/pandas3ed5.html#dropping-from-dataframe-continued-2",
    "title": "",
    "section": "Dropping from DataFrame (Continued)",
    "text": "Dropping from DataFrame (Continued)\ndata.drop('two', axis=1) # Drop column using axis=1 (same as above)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-selection-and-filtering",
    "href": "qmd/pandas3ed5.html#indexing-selection-and-filtering",
    "title": "",
    "section": "Indexing, Selection, and Filtering",
    "text": "Indexing, Selection, and Filtering\nobj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])\nobj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued",
    "href": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued",
    "title": "",
    "section": "Indexing, Selection, and Filtering (Continued)",
    "text": "Indexing, Selection, and Filtering (Continued)\nobj['b']  # Select by label"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-1",
    "href": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-1",
    "title": "",
    "section": "Indexing, Selection, and Filtering (Continued)",
    "text": "Indexing, Selection, and Filtering (Continued)\nobj[1]  # Select by integer position"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-2",
    "href": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-2",
    "title": "",
    "section": "Indexing, Selection, and Filtering (Continued)",
    "text": "Indexing, Selection, and Filtering (Continued)\nobj[2:4]  # Slicing"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-3",
    "href": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-3",
    "title": "",
    "section": "Indexing, Selection, and Filtering (Continued)",
    "text": "Indexing, Selection, and Filtering (Continued)\nobj[['b', 'a', 'd']]  # Select multiple labels"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-4",
    "href": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-4",
    "title": "",
    "section": "Indexing, Selection, and Filtering (Continued)",
    "text": "Indexing, Selection, and Filtering (Continued)\nobj[[1, 3]]  # Select multiple integer positions"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-5",
    "href": "qmd/pandas3ed5.html#indexing-selection-and-filtering-continued-5",
    "title": "",
    "section": "Indexing, Selection, and Filtering (Continued)",
    "text": "Indexing, Selection, and Filtering (Continued)\nobj[obj &lt; 2]  # Boolean indexing"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc",
    "href": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc",
    "title": "",
    "section": "Indexing with loc and iloc",
    "text": "Indexing with loc and iloc\n\nloc: Select by label.\niloc: Select by integer position.\n\nobj.loc[['b', 'a', 'd']] # Select by label using loc"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued",
    "href": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued",
    "title": "",
    "section": "Indexing with loc and iloc (Continued)",
    "text": "Indexing with loc and iloc (Continued)\nobj1 = pd.Series([1, 2, 3], index=[2, 0, 1])\nobj2 = pd.Series([1, 2, 3], index=['a', 'b', 'c'])"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-1",
    "href": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-1",
    "title": "",
    "section": "Indexing with loc and iloc (Continued)",
    "text": "Indexing with loc and iloc (Continued)\nobj1[[0,1,2]] #integer index, pandas will treat integers as labels"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-2",
    "href": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-2",
    "title": "",
    "section": "Indexing with loc and iloc (Continued)",
    "text": "Indexing with loc and iloc (Continued)\n#| eval: false\nobj2.loc[[0, 1]] # Error when index is string, 0 and 1 are not labels of obj2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-3",
    "href": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-3",
    "title": "",
    "section": "Indexing with loc and iloc (Continued)",
    "text": "Indexing with loc and iloc (Continued)\nobj1.iloc[[0, 1, 2]] # iloc use integer position"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-4",
    "href": "qmd/pandas3ed5.html#indexing-with-loc-and-iloc-continued-4",
    "title": "",
    "section": "Indexing with loc and iloc (Continued)",
    "text": "Indexing with loc and iloc (Continued)\nobj2.iloc[[0, 1, 2]] # iloc use integer position\n\n\n\n\n\n\nNote\n\n\n\nUse loc and iloc to avoid ambiguity, especially with integer indexes."
  },
  {
    "objectID": "qmd/pandas3ed5.html#slicing-with-labels-inclusive",
    "href": "qmd/pandas3ed5.html#slicing-with-labels-inclusive",
    "title": "",
    "section": "Slicing with Labels (Inclusive)",
    "text": "Slicing with Labels (Inclusive)\nobj2.loc['b':'c']  # Includes the endpoint ('c')!"
  },
  {
    "objectID": "qmd/pandas3ed5.html#slicing-with-labels-inclusive-continued",
    "href": "qmd/pandas3ed5.html#slicing-with-labels-inclusive-continued",
    "title": "",
    "section": "Slicing with Labels (Inclusive) (Continued)",
    "text": "Slicing with Labels (Inclusive) (Continued)\nobj2.loc['b':'c'] = 5  # Assign values using label-based slicing\nobj2\n\n\n\n\n\n\nNote\n\n\n\nSlicing with labels using loc includes the endpoint."
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-into-a-dataframe",
    "href": "qmd/pandas3ed5.html#indexing-into-a-dataframe",
    "title": "",
    "section": "Indexing into a DataFrame",
    "text": "Indexing into a DataFrame\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndata"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-into-a-dataframe-continued",
    "href": "qmd/pandas3ed5.html#indexing-into-a-dataframe-continued",
    "title": "",
    "section": "Indexing into a DataFrame (Continued)",
    "text": "Indexing into a DataFrame (Continued)\ndata['two']  # Select column 'two'"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indexing-into-a-dataframe-continued-1",
    "href": "qmd/pandas3ed5.html#indexing-into-a-dataframe-continued-1",
    "title": "",
    "section": "Indexing into a DataFrame (Continued)",
    "text": "Indexing into a DataFrame (Continued)\ndata[['three', 'one']]  # Select multiple columns"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-special-cases-for-indexing",
    "href": "qmd/pandas3ed5.html#dataframe-special-cases-for-indexing",
    "title": "",
    "section": "DataFrame: Special Cases for Indexing",
    "text": "DataFrame: Special Cases for Indexing\ndata[:2]  # Slicing rows (select rows 0 and 1)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-special-cases-for-indexing-continued",
    "href": "qmd/pandas3ed5.html#dataframe-special-cases-for-indexing-continued",
    "title": "",
    "section": "DataFrame: Special Cases for Indexing (Continued)",
    "text": "DataFrame: Special Cases for Indexing (Continued)\ndata[data['three'] &gt; 5]  # Boolean indexing (select rows where 'three' &gt; 5)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-boolean-indexing",
    "href": "qmd/pandas3ed5.html#dataframe-boolean-indexing",
    "title": "",
    "section": "DataFrame: Boolean Indexing",
    "text": "DataFrame: Boolean Indexing\ndata &lt; 5  # Element-wise comparison (returns a Boolean DataFrame)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#dataframe-boolean-indexing-continued",
    "href": "qmd/pandas3ed5.html#dataframe-boolean-indexing-continued",
    "title": "",
    "section": "DataFrame: Boolean Indexing (Continued)",
    "text": "DataFrame: Boolean Indexing (Continued)\ndata[data &lt; 5] = 0  # Set values less than 5 to 0\ndata"
  },
  {
    "objectID": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc",
    "href": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc",
    "title": "",
    "section": "Selection on DataFrame with loc and iloc",
    "text": "Selection on DataFrame with loc and iloc\ndata.loc['Colorado'] # Select a row by label"
  },
  {
    "objectID": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued",
    "href": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued",
    "title": "",
    "section": "Selection on DataFrame with loc and iloc (Continued)",
    "text": "Selection on DataFrame with loc and iloc (Continued)\ndata.loc[['Colorado', 'New York']] # Select multiple rows by label"
  },
  {
    "objectID": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-1",
    "href": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-1",
    "title": "",
    "section": "Selection on DataFrame with loc and iloc (Continued)",
    "text": "Selection on DataFrame with loc and iloc (Continued)\ndata.loc['Colorado', ['two', 'three']]  # Select row and columns by label"
  },
  {
    "objectID": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-2",
    "href": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-2",
    "title": "",
    "section": "Selection on DataFrame with loc and iloc (Continued)",
    "text": "Selection on DataFrame with loc and iloc (Continued)\ndata.iloc[2] # Select a row by position"
  },
  {
    "objectID": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-3",
    "href": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-3",
    "title": "",
    "section": "Selection on DataFrame with loc and iloc (Continued)",
    "text": "Selection on DataFrame with loc and iloc (Continued)\ndata.iloc[[2, 1]] # Select multiple rows by position"
  },
  {
    "objectID": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-4",
    "href": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-4",
    "title": "",
    "section": "Selection on DataFrame with loc and iloc (Continued)",
    "text": "Selection on DataFrame with loc and iloc (Continued)\ndata.iloc[2, [3, 0, 1]] # Select row and columns by position"
  },
  {
    "objectID": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-5",
    "href": "qmd/pandas3ed5.html#selection-on-dataframe-with-loc-and-iloc-continued-5",
    "title": "",
    "section": "Selection on DataFrame with loc and iloc (Continued)",
    "text": "Selection on DataFrame with loc and iloc (Continued)\ndata.iloc[[1, 2], [3, 0, 1]] # Select rows and columns by position"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-and-data-alignment",
    "href": "qmd/pandas3ed5.html#arithmetic-and-data-alignment",
    "title": "",
    "section": "Arithmetic and Data Alignment",
    "text": "Arithmetic and Data Alignment\n\nData is aligned by index labels when performing arithmetic.\nNaN where labels don‚Äôt overlap.\n\ns1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'])\ns2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'])"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-and-data-alignment-continued",
    "href": "qmd/pandas3ed5.html#arithmetic-and-data-alignment-continued",
    "title": "",
    "section": "Arithmetic and Data Alignment (Continued)",
    "text": "Arithmetic and Data Alignment (Continued)\ns1"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-and-data-alignment-continued-1",
    "href": "qmd/pandas3ed5.html#arithmetic-and-data-alignment-continued-1",
    "title": "",
    "section": "Arithmetic and Data Alignment (Continued)",
    "text": "Arithmetic and Data Alignment (Continued)\ns2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-and-data-alignment-continued-2",
    "href": "qmd/pandas3ed5.html#arithmetic-and-data-alignment-continued-2",
    "title": "",
    "section": "Arithmetic and Data Alignment (Continued)",
    "text": "Arithmetic and Data Alignment (Continued)\ns1 + s2  # Add Series; alignment by index label"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-with-dataframe",
    "href": "qmd/pandas3ed5.html#arithmetic-with-dataframe",
    "title": "",
    "section": "Arithmetic with DataFrame",
    "text": "Arithmetic with DataFrame\ndf1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('bcd'),\n                   index=['Ohio', 'Texas', 'Colorado'])\ndf2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'),\n                   index=['Utah', 'Ohio', 'Texas', 'Oregon'])"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-with-dataframe-continued",
    "href": "qmd/pandas3ed5.html#arithmetic-with-dataframe-continued",
    "title": "",
    "section": "Arithmetic with DataFrame (Continued)",
    "text": "Arithmetic with DataFrame (Continued)\ndf1"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-with-dataframe-continued-1",
    "href": "qmd/pandas3ed5.html#arithmetic-with-dataframe-continued-1",
    "title": "",
    "section": "Arithmetic with DataFrame (Continued)",
    "text": "Arithmetic with DataFrame (Continued)\ndf2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-with-dataframe-continued-2",
    "href": "qmd/pandas3ed5.html#arithmetic-with-dataframe-continued-2",
    "title": "",
    "section": "Arithmetic with DataFrame (Continued)",
    "text": "Arithmetic with DataFrame (Continued)\ndf1 + df2  # Add DataFrames; alignment by row and column labels"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values",
    "href": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values",
    "title": "",
    "section": "Arithmetic Methods with Fill Values",
    "text": "Arithmetic Methods with Fill Values\ndf1 = pd.DataFrame(np.arange(12.).reshape((3, 4)),\n                   columns=list('abcd'))\ndf2 = pd.DataFrame(np.arange(20.).reshape((4, 5)),\n                   columns=list('abcde'))\ndf2.loc[1, 'b'] = np.nan  # Introduce a missing value"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values-continued",
    "href": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values-continued",
    "title": "",
    "section": "Arithmetic Methods with Fill Values (Continued)",
    "text": "Arithmetic Methods with Fill Values (Continued)\ndf1"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values-continued-1",
    "href": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values-continued-1",
    "title": "",
    "section": "Arithmetic Methods with Fill Values (Continued)",
    "text": "Arithmetic Methods with Fill Values (Continued)\ndf2"
  },
  {
    "objectID": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values-continued-2",
    "href": "qmd/pandas3ed5.html#arithmetic-methods-with-fill-values-continued-2",
    "title": "",
    "section": "Arithmetic Methods with Fill Values (Continued)",
    "text": "Arithmetic Methods with Fill Values (Continued)\ndf1 + df2  # Addition with potential for NaN\n\n\n\n\n\n\nNote\n\n\n\nNaN represents missing values."
  },
  {
    "objectID": "qmd/pandas3ed5.html#using-add-with-fill_value",
    "href": "qmd/pandas3ed5.html#using-add-with-fill_value",
    "title": "",
    "section": "Using add with fill_value",
    "text": "Using add with fill_value\ndf1.add(df2, fill_value=0)  # Add, filling missing values with 0 *before* addition\n\n\n\n\n\n\nNote\n\n\n\nfill_value replaces missing values before operation."
  },
  {
    "objectID": "qmd/pandas3ed5.html#flexible-arithmetic-methods",
    "href": "qmd/pandas3ed5.html#flexible-arithmetic-methods",
    "title": "",
    "section": "Flexible Arithmetic Methods",
    "text": "Flexible Arithmetic Methods\n\n\n\nMethod\nDescription\n\n\n\n\nadd, radd\nMethods for addition (+)\n\n\nsub, rsub\nMethods for subtraction (-)\n\n\ndiv, rdiv\nMethods for division (/)\n\n\nmul, rmul\nMethods for multiplication (*)\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nr methods: reversed arguments (e.g., 1 / df1 is df1.rdiv(1))."
  },
  {
    "objectID": "qmd/pandas3ed5.html#operations-between-dataframe-and-series",
    "href": "qmd/pandas3ed5.html#operations-between-dataframe-and-series",
    "title": "",
    "section": "Operations Between DataFrame and Series",
    "text": "Operations Between DataFrame and Series\nframe = pd.DataFrame(np.arange(12.).reshape((4, 3)),\n                     columns=list('bde'),\n                     index=['Utah', 'Ohio', 'Texas', 'Oregon'])\nseries = frame.iloc[0] # Get the first row"
  },
  {
    "objectID": "qmd/pandas3ed5.html#operations-between-dataframe-and-series-continued",
    "href": "qmd/pandas3ed5.html#operations-between-dataframe-and-series-continued",
    "title": "",
    "section": "Operations Between DataFrame and Series (Continued)",
    "text": "Operations Between DataFrame and Series (Continued)\nframe"
  },
  {
    "objectID": "qmd/pandas3ed5.html#operations-between-dataframe-and-series-continued-1",
    "href": "qmd/pandas3ed5.html#operations-between-dataframe-and-series-continued-1",
    "title": "",
    "section": "Operations Between DataFrame and Series (Continued)",
    "text": "Operations Between DataFrame and Series (Continued)\nseries"
  },
  {
    "objectID": "qmd/pandas3ed5.html#operations-between-dataframe-and-series-continued-2",
    "href": "qmd/pandas3ed5.html#operations-between-dataframe-and-series-continued-2",
    "title": "",
    "section": "Operations Between DataFrame and Series (Continued)",
    "text": "Operations Between DataFrame and Series (Continued)\nframe - series  # Subtract Series from DataFrame (broadcasting)\n\n\n\n\n\n\nNote\n\n\n\nArithmetic between DataFrame and Series broadcasts down the rows by default."
  },
  {
    "objectID": "qmd/pandas3ed5.html#broadcasting-over-columns",
    "href": "qmd/pandas3ed5.html#broadcasting-over-columns",
    "title": "",
    "section": "Broadcasting Over Columns",
    "text": "Broadcasting Over Columns\nseries3 = frame['d']  # Get column 'd'\nseries3"
  },
  {
    "objectID": "qmd/pandas3ed5.html#broadcasting-over-columns-continued",
    "href": "qmd/pandas3ed5.html#broadcasting-over-columns-continued",
    "title": "",
    "section": "Broadcasting Over Columns (Continued)",
    "text": "Broadcasting Over Columns (Continued)\nframe.sub(series3, axis='index')  # Match on index (rows), broadcast across columns\n\n\n\n\n\n\nNote\n\n\n\naxis='index' (or axis=0) broadcasts over columns."
  },
  {
    "objectID": "qmd/pandas3ed5.html#function-application-and-mapping",
    "href": "qmd/pandas3ed5.html#function-application-and-mapping",
    "title": "",
    "section": "Function Application and Mapping",
    "text": "Function Application and Mapping\nframe = pd.DataFrame(np.random.standard_normal((4, 3)),\n                     columns=list('bde'),\n                     index=['Utah', 'Ohio', 'Texas', 'Oregon'])\nframe"
  },
  {
    "objectID": "qmd/pandas3ed5.html#function-application-and-mapping-continued",
    "href": "qmd/pandas3ed5.html#function-application-and-mapping-continued",
    "title": "",
    "section": "Function Application and Mapping (Continued)",
    "text": "Function Application and Mapping (Continued)\nnp.abs(frame)  # Apply NumPy's absolute value function (ufunc) element-wise"
  },
  {
    "objectID": "qmd/pandas3ed5.html#applying-functions-with-apply",
    "href": "qmd/pandas3ed5.html#applying-functions-with-apply",
    "title": "",
    "section": "Applying Functions with apply",
    "text": "Applying Functions with apply\ndef f1(x):\n    return x.max() - x.min() # Define a function that operates on a Series\n\nframe.apply(f1)  # Apply the function along columns (default axis is 'index')"
  },
  {
    "objectID": "qmd/pandas3ed5.html#applying-functions-with-apply-continued",
    "href": "qmd/pandas3ed5.html#applying-functions-with-apply-continued",
    "title": "",
    "section": "Applying Functions with apply (Continued)",
    "text": "Applying Functions with apply (Continued)\nframe.apply(f1, axis='columns')  # Apply the function along rows (axis='columns')"
  },
  {
    "objectID": "qmd/pandas3ed5.html#applying-functions-that-return-series",
    "href": "qmd/pandas3ed5.html#applying-functions-that-return-series",
    "title": "",
    "section": "Applying Functions that Return Series",
    "text": "Applying Functions that Return Series\ndef f2(x):\n    # Define function returning a Series with 'min' and 'max'\n    return pd.Series([x.min(), x.max()], index=['min', 'max'])\n\nframe.apply(f2)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#element-wise-formatting-with-applymap",
    "href": "qmd/pandas3ed5.html#element-wise-formatting-with-applymap",
    "title": "",
    "section": "Element-Wise Formatting with applymap",
    "text": "Element-Wise Formatting with applymap\ndef my_format(x):\n    return f\"{x:.2f}\"  # Define a formatting function\n\nframe.applymap(my_format) # Apply element-wise to the DataFrame\n\n\n\n\n\n\nNote\n\n\n\napplymap for element-wise DataFrame operations; map for element-wise Series operations."
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting",
    "href": "qmd/pandas3ed5.html#sorting",
    "title": "",
    "section": "Sorting",
    "text": "Sorting\nobj = pd.Series(np.arange(4), index=['d', 'a', 'b', 'c'])\nobj.sort_index()  # Sort by index labels"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-continued",
    "href": "qmd/pandas3ed5.html#sorting-continued",
    "title": "",
    "section": "Sorting (Continued)",
    "text": "Sorting (Continued)\nframe = pd.DataFrame(np.arange(8).reshape((2, 4)),\n                     index=['three', 'one'],\n                     columns=['d', 'a', 'b', 'c'])\nframe.sort_index() # Sort by row index"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-continued-1",
    "href": "qmd/pandas3ed5.html#sorting-continued-1",
    "title": "",
    "section": "Sorting (Continued)",
    "text": "Sorting (Continued)\nframe.sort_index(axis='columns') # Sort by column index"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-continued-2",
    "href": "qmd/pandas3ed5.html#sorting-continued-2",
    "title": "",
    "section": "Sorting (Continued)",
    "text": "Sorting (Continued)\nframe.sort_index(axis='columns', ascending=False) # Sort descending"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-by-values",
    "href": "qmd/pandas3ed5.html#sorting-by-values",
    "title": "",
    "section": "Sorting by Values",
    "text": "Sorting by Values\nobj = pd.Series([4, 7, -3, 2])\nobj.sort_values()  # Sort by values"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-by-values-continued",
    "href": "qmd/pandas3ed5.html#sorting-by-values-continued",
    "title": "",
    "section": "Sorting by Values (Continued)",
    "text": "Sorting by Values (Continued)\nobj = pd.Series([4, np.nan, 7, np.nan, -3, 2])\nobj.sort_values()  # Missing values (NaN) are sorted to the end by default"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-dataframe-by-columns",
    "href": "qmd/pandas3ed5.html#sorting-dataframe-by-columns",
    "title": "",
    "section": "Sorting DataFrame by Column(s)",
    "text": "Sorting DataFrame by Column(s)\nframe = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]})\nframe"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-dataframe-by-columns-continued",
    "href": "qmd/pandas3ed5.html#sorting-dataframe-by-columns-continued",
    "title": "",
    "section": "Sorting DataFrame by Column(s) (Continued)",
    "text": "Sorting DataFrame by Column(s) (Continued)\nframe.sort_values('b')  # Sort by column 'b'"
  },
  {
    "objectID": "qmd/pandas3ed5.html#sorting-dataframe-by-columns-continued-1",
    "href": "qmd/pandas3ed5.html#sorting-dataframe-by-columns-continued-1",
    "title": "",
    "section": "Sorting DataFrame by Column(s) (Continued)",
    "text": "Sorting DataFrame by Column(s) (Continued)\nframe.sort_values(['a', 'b'])  # Sort by multiple columns ('a', then 'b')"
  },
  {
    "objectID": "qmd/pandas3ed5.html#ranking",
    "href": "qmd/pandas3ed5.html#ranking",
    "title": "",
    "section": "Ranking",
    "text": "Ranking\nobj = pd.Series([7, -5, 7, 4, 2, 0, 4])\nobj.rank()  # Assign ranks (average rank for ties)\n\n::: {.callout-note}\nRanking: assigns ranks from 1 to number of valid data points.\n:::\n\n## Ranking Methods\n\n| Method    | Description                                  |\n| :-------- | :------------------------------------------- |\n| `average` | Default: average rank for ties               |\n| `min`     | Use the minimum rank                         |\n| `max`     | Use the maximum rank                         |\n| `first`   | Ranks in order values appear                   |\n\n## Axis Indexes with Duplicate Labels\n\n```python\nobj = pd.Series(np.arange(5), index=['a', 'a', 'b', 'b', 'c'])\nobj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#axis-indexes-with-duplicate-labels-continued",
    "href": "qmd/pandas3ed5.html#axis-indexes-with-duplicate-labels-continued",
    "title": "",
    "section": "Axis Indexes with Duplicate Labels (Continued)",
    "text": "Axis Indexes with Duplicate Labels (Continued)\nobj.index.is_unique  # Check if index labels are unique"
  },
  {
    "objectID": "qmd/pandas3ed5.html#axis-indexes-with-duplicate-labels-continued-1",
    "href": "qmd/pandas3ed5.html#axis-indexes-with-duplicate-labels-continued-1",
    "title": "",
    "section": "Axis Indexes with Duplicate Labels (Continued)",
    "text": "Axis Indexes with Duplicate Labels (Continued)\nobj['a']  # Returns a Series (because 'a' is duplicated)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#axis-indexes-with-duplicate-labels-continued-2",
    "href": "qmd/pandas3ed5.html#axis-indexes-with-duplicate-labels-continued-2",
    "title": "",
    "section": "Axis Indexes with Duplicate Labels (Continued)",
    "text": "Axis Indexes with Duplicate Labels (Continued)\nobj['c']  # Returns a scalar (because 'c' is unique)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#summarizing-and-computing-descriptive-statistics",
    "href": "qmd/pandas3ed5.html#summarizing-and-computing-descriptive-statistics",
    "title": "",
    "section": "Summarizing and Computing Descriptive Statistics",
    "text": "Summarizing and Computing Descriptive Statistics\ndf = pd.DataFrame([[1.4, np.nan], [7.1, -4.5],\n                   [np.nan, np.nan], [0.75, -1.3]],\n                  index=['a', 'b', 'c', 'd'],\n                  columns=['one', 'two'])\ndf"
  },
  {
    "objectID": "qmd/pandas3ed5.html#summarizing-and-computing-descriptive-statistics-continued",
    "href": "qmd/pandas3ed5.html#summarizing-and-computing-descriptive-statistics-continued",
    "title": "",
    "section": "Summarizing and Computing Descriptive Statistics (Continued)",
    "text": "Summarizing and Computing Descriptive Statistics (Continued)\ndf.sum()  # Calculate column sums"
  },
  {
    "objectID": "qmd/pandas3ed5.html#summarizing-and-computing-descriptive-statistics-continued-1",
    "href": "qmd/pandas3ed5.html#summarizing-and-computing-descriptive-statistics-continued-1",
    "title": "",
    "section": "Summarizing and Computing Descriptive Statistics (Continued)",
    "text": "Summarizing and Computing Descriptive Statistics (Continued)\ndf.sum(axis='columns')  # Calculate row sums"
  },
  {
    "objectID": "qmd/pandas3ed5.html#handling-missing-values-in-reductions",
    "href": "qmd/pandas3ed5.html#handling-missing-values-in-reductions",
    "title": "",
    "section": "Handling Missing Values in Reductions",
    "text": "Handling Missing Values in Reductions\ndf.sum(axis='index', skipna=False) # Include NaN in calculations"
  },
  {
    "objectID": "qmd/pandas3ed5.html#handling-missing-values-in-reductions-continued",
    "href": "qmd/pandas3ed5.html#handling-missing-values-in-reductions-continued",
    "title": "",
    "section": "Handling Missing Values in Reductions (Continued)",
    "text": "Handling Missing Values in Reductions (Continued)\ndf.mean(axis='columns') # Calculate mean, excluding NaN (default)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#descriptive-statistics-options-for-reduction-methods",
    "href": "qmd/pandas3ed5.html#descriptive-statistics-options-for-reduction-methods",
    "title": "",
    "section": "Descriptive Statistics: Options for Reduction Methods",
    "text": "Descriptive Statistics: Options for Reduction Methods\n\n\n\nMethod\nDescription\n\n\n\n\naxis\nAxis (‚Äòindex‚Äô for rows, ‚Äòcolumns‚Äô for columns)\n\n\nskipna\nExclude missing values (True by default)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indirect-statistics",
    "href": "qmd/pandas3ed5.html#indirect-statistics",
    "title": "",
    "section": "Indirect Statistics",
    "text": "Indirect Statistics\ndf.idxmax()  # Index label of the maximum value (for each column)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#indirect-statistics-continued",
    "href": "qmd/pandas3ed5.html#indirect-statistics-continued",
    "title": "",
    "section": "Indirect Statistics (Continued)",
    "text": "Indirect Statistics (Continued)\ndf.cumsum()  # Cumulative sum (for each column)"
  },
  {
    "objectID": "qmd/pandas3ed5.html#describe-method",
    "href": "qmd/pandas3ed5.html#describe-method",
    "title": "",
    "section": "describe() Method",
    "text": "describe() Method\ndf.describe()  # Generate descriptive statistics"
  },
  {
    "objectID": "qmd/pandas3ed5.html#describe-method-continued",
    "href": "qmd/pandas3ed5.html#describe-method-continued",
    "title": "",
    "section": "describe() Method (Continued)",
    "text": "describe() Method (Continued)\nobj = pd.Series(['a', 'a', 'b', 'c'] * 4)\nobj.describe() # Descriptive statistics for non-numeric data"
  },
  {
    "objectID": "qmd/pandas3ed5.html#descriptive-and-summary-statistics",
    "href": "qmd/pandas3ed5.html#descriptive-and-summary-statistics",
    "title": "",
    "section": "Descriptive and Summary Statistics",
    "text": "Descriptive and Summary Statistics\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\ncount\nNumber of non-NA values\n\n\ndescribe\nCompute set of summary statistics\n\n\nmin, max\nCompute minimum and maximum values\n\n\nidxmin, idxmax\nCompute index labels where min/max values attained\n\n\nquantile\nCompute sample quantile (0 to 1)\n\n\nsum\nSum\n\n\nmean\nMean\n\n\nmedian\nMedian (50% quantile)\n\n\n‚Ä¶\n‚Ä¶"
  },
  {
    "objectID": "qmd/pandas3ed5.html#correlation-and-covariance",
    "href": "qmd/pandas3ed5.html#correlation-and-covariance",
    "title": "",
    "section": "Correlation and Covariance",
    "text": "Correlation and Covariance\nFirst load data.\nprice = pd.read_pickle('examples/yahoo_price.pkl')\nvolume = pd.read_pickle('examples/yahoo_volume.pkl')"
  },
  {
    "objectID": "qmd/pandas3ed5.html#correlation-and-covariance-continued",
    "href": "qmd/pandas3ed5.html#correlation-and-covariance-continued",
    "title": "",
    "section": "Correlation and Covariance (Continued)",
    "text": "Correlation and Covariance (Continued)\nreturns = price.pct_change() #percentage change\nreturns.tail()"
  },
  {
    "objectID": "qmd/pandas3ed5.html#correlation-and-covariance-continued-1",
    "href": "qmd/pandas3ed5.html#correlation-and-covariance-continued-1",
    "title": "",
    "section": "Correlation and Covariance (Continued)",
    "text": "Correlation and Covariance (Continued)\nreturns['MSFT'].corr(returns['IBM']) # Correlation between MSFT and IBM returns"
  },
  {
    "objectID": "qmd/pandas3ed5.html#correlation-and-covariance-continued-2",
    "href": "qmd/pandas3ed5.html#correlation-and-covariance-continued-2",
    "title": "",
    "section": "Correlation and Covariance (Continued)",
    "text": "Correlation and Covariance (Continued)\nreturns['MSFT'].cov(returns['IBM'])  # Covariance between MSFT and IBM returns\n\n\n\n\n\n\nNote\n\n\n\ncorr: correlation. cov: covariance."
  },
  {
    "objectID": "qmd/pandas3ed5.html#corr-and-cov-on-dataframe",
    "href": "qmd/pandas3ed5.html#corr-and-cov-on-dataframe",
    "title": "",
    "section": "corr and cov on DataFrame",
    "text": "corr and cov on DataFrame\nreturns.corr()  # Correlation matrix"
  },
  {
    "objectID": "qmd/pandas3ed5.html#corr-and-cov-on-dataframe-continued",
    "href": "qmd/pandas3ed5.html#corr-and-cov-on-dataframe-continued",
    "title": "",
    "section": "corr and cov on DataFrame (Continued)",
    "text": "corr and cov on DataFrame (Continued)\nreturns.cov()  # Covariance matrix"
  },
  {
    "objectID": "qmd/pandas3ed5.html#corrwith-method",
    "href": "qmd/pandas3ed5.html#corrwith-method",
    "title": "",
    "section": "corrwith Method",
    "text": "corrwith Method\nreturns.corrwith(returns['IBM'])  # Pairwise correlations with IBM returns"
  },
  {
    "objectID": "qmd/pandas3ed5.html#corrwith-method-continued",
    "href": "qmd/pandas3ed5.html#corrwith-method-continued",
    "title": "",
    "section": "corrwith Method (Continued)",
    "text": "corrwith Method (Continued)\nreturns.corrwith(volume)  # Pairwise correlations with volume\n\n\n\n\n\n\nNote\n\n\n\nComputes pairwise correlations."
  },
  {
    "objectID": "qmd/pandas3ed5.html#unique-values-value-counts-and-membership",
    "href": "qmd/pandas3ed5.html#unique-values-value-counts-and-membership",
    "title": "",
    "section": "Unique Values, Value Counts, and Membership",
    "text": "Unique Values, Value Counts, and Membership\nobj = pd.Series(['c', 'a', 'd', 'a', 'a', 'b', 'b', 'c', 'c'])\nuniques = obj.unique()  # Get unique values\nuniques"
  },
  {
    "objectID": "qmd/pandas3ed5.html#unique-values-value-counts-and-membership-continued",
    "href": "qmd/pandas3ed5.html#unique-values-value-counts-and-membership-continued",
    "title": "",
    "section": "Unique Values, Value Counts, and Membership (Continued)",
    "text": "Unique Values, Value Counts, and Membership (Continued)\nobj.value_counts()  # Count occurrences of each value"
  },
  {
    "objectID": "qmd/pandas3ed5.html#unique-values-value-counts-and-membership-continued-1",
    "href": "qmd/pandas3ed5.html#unique-values-value-counts-and-membership-continued-1",
    "title": "",
    "section": "Unique Values, Value Counts, and Membership (Continued)",
    "text": "Unique Values, Value Counts, and Membership (Continued)\npd.value_counts(obj.to_numpy(), sort=False) #Using pd.value_counts()"
  },
  {
    "objectID": "qmd/pandas3ed5.html#isin-method",
    "href": "qmd/pandas3ed5.html#isin-method",
    "title": "",
    "section": "isin Method",
    "text": "isin Method\nobj"
  },
  {
    "objectID": "qmd/pandas3ed5.html#isin-method-continued",
    "href": "qmd/pandas3ed5.html#isin-method-continued",
    "title": "",
    "section": "isin Method (Continued)",
    "text": "isin Method (Continued)\nmask = obj.isin(['b', 'c'])  # Check for membership in ['b', 'c']\nmask"
  },
  {
    "objectID": "qmd/pandas3ed5.html#isin-method-continued-1",
    "href": "qmd/pandas3ed5.html#isin-method-continued-1",
    "title": "",
    "section": "isin Method (Continued)",
    "text": "isin Method (Continued)\nobj[mask]  # Select elements where mask is True\n\n\n\n\n\n\nNote\n\n\n\nisin: checks membership."
  },
  {
    "objectID": "qmd/pandas3ed5.html#summary",
    "href": "qmd/pandas3ed5.html#summary",
    "title": "",
    "section": "Summary",
    "text": "Summary\n\npandas basics: Series and DataFrame.\nKey operations: indexing, selection, filtering, arithmetic, function application, sorting, ranking, and descriptive stats.\nHandling missing data."
  },
  {
    "objectID": "qmd/pandas3ed5.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed5.html#thoughts-and-discussion",
    "title": "",
    "section": "Thoughts and Discussion",
    "text": "Thoughts and Discussion\n\nCompare pandas to other data analysis tools (Excel, R)?\nReal-world applications of pandas?\nLimitations of pandas? When to use other tools?\nImportance of data alignment and broadcasting."
  },
  {
    "objectID": "qmd/pandas3ed1cn.html",
    "href": "qmd/pandas3ed1cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨‰π¶ÈáçÁÇπ‰ªãÁªç Python ‰∏≠Êï∞ÊçÆÊìç‰Ωú„ÄÅÂ§ÑÁêÜ„ÄÅÊ∏ÖÊ¥óÂíåÊï¥ÁêÜÁöÑÂÆûË∑µÊñπÈù¢„ÄÇÂÆÉÂ∞Ü‰∏∫‰Ω†Êèê‰æõÊàê‰∏∫È´òÊïàÊï∞ÊçÆÂàÜÊûêÂ∏àÊâÄÂøÖÈúÄÁöÑ Python ÁºñÁ®ãÊäÄËÉΩ„ÄÅÂ∫ìÂíåÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êú¨‰π¶‰∏ªÈ¢ò",
    "href": "qmd/pandas3ed1cn.html#Êú¨‰π¶‰∏ªÈ¢ò",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨‰π¶ÈáçÁÇπ‰ªãÁªç Python ‰∏≠Êï∞ÊçÆÊìç‰Ωú„ÄÅÂ§ÑÁêÜ„ÄÅÊ∏ÖÊ¥óÂíåÊï¥ÁêÜÁöÑÂÆûË∑µÊñπÈù¢„ÄÇÂÆÉÂ∞Ü‰∏∫‰Ω†Êèê‰æõÊàê‰∏∫È´òÊïàÊï∞ÊçÆÂàÜÊûêÂ∏àÊâÄÂøÖÈúÄÁöÑ Python ÁºñÁ®ãÊäÄËÉΩ„ÄÅÂ∫ìÂíåÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êú¨‰π¶‰∏ªÈ¢ò-1",
    "href": "qmd/pandas3ed1cn.html#Êú¨‰π¶‰∏ªÈ¢ò-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êú¨‰π¶‰∏ªÈ¢ò",
    "text": "Êú¨‰π¶‰∏ªÈ¢ò\n\nÁõÆÊ†áÔºö Êèê‰æõ Python ÂèäÂÖ∂Èù¢ÂêëÊï∞ÊçÆÁöÑÂ∫ì‰∏≠ÂØπÊï∞ÊçÆÂàÜÊûêËá≥ÂÖ≥ÈáçË¶ÅÁöÑÈÉ®ÂàÜÁöÑÊåáÂçó„ÄÇ\nÈáçÁÇπÔºö Âº∫Ë∞É Python ÁºñÁ®ã„ÄÅÂ∫ìÂíåÂ∑•ÂÖ∑ÔºåËÄå‰∏çÊòØÊï∞ÊçÆÂàÜÊûêÊñπÊ≥ïËÆ∫„ÄÇ\nÁ±ªÊØîÔºö ÂèØ‰ª•Â∞ÜÊú¨‰π¶Áúã‰ΩúÊòØÂ≠¶‰π†Ê±ΩËΩ¶ÁöÑÊú∫Ê¢∞ÂéüÁêÜÔºàPython ÂèäÂÖ∂Â∑•ÂÖ∑ÔºâÔºåËÄå‰∏çÊòØÂ≠¶‰π†Â¶Ç‰ΩïÂú®‰∏çÂêåÂú∞ÂΩ¢‰∏äÈ©æÈ©∂ÔºàÊï∞ÊçÆÂàÜÊûêÊñπÊ≥ïÔºâ„ÄÇ\n\n\n\n\n\n\n\nNote\n\n\n\nËôΩÁÑ∂Êú¨‰π¶Âêç‰∏∫‚ÄúÊï∞ÊçÆÂàÜÊûê‚ÄùÔºå‰ΩÜÂÆÉ‰æßÈáç‰∫éÊï∞ÊçÆÂàÜÊûêÊâÄÈúÄÁöÑ Python Â∑•ÂÖ∑ÔºåËÄå‰∏çÊòØÂàÜÊûêÊäÄÊúØÊú¨Ë∫´„ÄÇËøôÂ∞±ÂÉèÂú®Âª∫ÈÄ†ÊàøÂ±ã‰πãÂâçÂ≠¶‰π†Â¶Ç‰Ωï‰ΩøÁî®Èî§Â≠ê„ÄÅÈîØÂíåÈíªÂ§¥„ÄÇüî®ü™öü™õ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÁßëÂ≠¶‰∏Ä‰∏™Âπø‰πâÊúØËØ≠",
    "href": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÁßëÂ≠¶‰∏Ä‰∏™Âπø‰πâÊúØËØ≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÁßëÂ≠¶Ôºö‰∏Ä‰∏™Âπø‰πâÊúØËØ≠ ‚òÇÔ∏è",
    "text": "Êï∞ÊçÆÁßëÂ≠¶Ôºö‰∏Ä‰∏™Âπø‰πâÊúØËØ≠ ‚òÇÔ∏è\nËá™Êú¨‰π¶‰∫é 2012 Âπ¥È¶ñÊ¨°Âá∫Áâà‰ª•Êù•Ôºå‚ÄúÊï∞ÊçÆÁßëÂ≠¶‚Äù‰∏ÄËØçÂ∑≤Ë¢´ÂπøÊ≥õ‰ΩøÁî®„ÄÇÂÆÉÊ∂µÁõñ‰∫ÜÂπøÊ≥õÁöÑÊ¥ªÂä®Ôºå‰ªéÂü∫Êú¨ÁöÑÊèèËø∞ÊÄßÁªüËÆ°Âà∞Â§çÊùÇÁöÑÁªüËÆ°ÂàÜÊûêÂíåÊú∫Âô®Â≠¶‰π†„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÁßëÂ≠¶‰∏Ä‰∏™Âπø‰πâÊúØËØ≠-Áª≠",
    "href": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÁßëÂ≠¶‰∏Ä‰∏™Âπø‰πâÊúØËØ≠-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÁßëÂ≠¶Ôºö‰∏Ä‰∏™Âπø‰πâÊúØËØ≠ (Áª≠)",
    "text": "Êï∞ÊçÆÁßëÂ≠¶Ôºö‰∏Ä‰∏™Âπø‰πâÊúØËØ≠ (Áª≠)\n\nÊï∞ÊçÆÁßëÂ≠¶ÁöÑÊºîÂèòÔºö ËØ•È¢ÜÂüü‰ª•Âèä Python Âú®ÂÖ∂‰∏≠ÁöÑ‰ΩúÁî®Â∑≤ÊòæËëóÂ¢ûÈïø„ÄÇ\nÊâ©Â±ïÁöÑÁîüÊÄÅÁ≥ªÁªüÔºö Âá∫Áé∞‰∫ÜËÆ∏Â§öÊñ∞ÁöÑ Python Â∫ìÂíåÂ∑•ÂÖ∑ÔºåÊîØÊåÅÊõ¥È´òÁ∫ßÁöÑÊï∞ÊçÆÁßëÂ≠¶ÊñπÊ≥ïËÆ∫„ÄÇ\nÂü∫Á°ÄÔºö Êú¨‰π¶Êèê‰æõ‰∫ÜÊé¢Á¥¢Êõ¥‰∏ì‰∏öÁöÑÊï∞ÊçÆÁßëÂ≠¶ËµÑÊ∫êÊâÄÈúÄÁöÑÂü∫Êú¨ Python ÊäÄËÉΩ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÁßëÂ≠¶‰∏Ä‰∏™Âπø‰πâÊúØËØ≠-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÁßëÂ≠¶‰∏Ä‰∏™Âπø‰πâÊúØËØ≠-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÁßëÂ≠¶Ôºö‰∏Ä‰∏™Âπø‰πâÊúØËØ≠ (Áª≠)",
    "text": "Êï∞ÊçÆÁßëÂ≠¶Ôºö‰∏Ä‰∏™Âπø‰πâÊúØËØ≠ (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nÂèØ‰ª•Â∞Ü‚ÄúÊï∞ÊçÆÁßëÂ≠¶‚ÄùËßÜ‰∏∫Ê∂µÁõñÁªüËÆ°Â≠¶„ÄÅÊú∫Âô®Â≠¶‰π†„ÄÅÊï∞ÊçÆÂèØËßÜÂåñÁ≠âÂêÑÁßçÂ≠¶ÁßëÁöÑÂ§ß‰ºû„ÄÇÊú¨‰π¶Êèê‰æõ‰∫ÜÊè°‰ΩèÈÇ£Êää‰ºûÁöÑÊüÑÔºàPython ÊäÄËÉΩÔºâÔºÅ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆËûçÂêà",
    "href": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆËûçÂêà",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÊï¥ÁêÜ/Êï∞ÊçÆËûçÂêà ü§º",
    "text": "Êï∞ÊçÆÊï¥ÁêÜ/Êï∞ÊçÆËûçÂêà ü§º\nÊï∞ÊçÆÂàÜÊûêÁöÑÂæàÂ§ß‰∏ÄÈÉ®ÂàÜÊ∂âÂèäÊï∞ÊçÆÊìç‰ΩúÔºå‰πüÁß∞‰∏∫Êï∞ÊçÆÊï¥ÁêÜÊàñÊï∞ÊçÆËûçÂêà„ÄÇËøô‰∫õÊúØËØ≠ÈÉΩÊèèËø∞‰∫ÜËΩ¨Êç¢ÂíåÂáÜÂ§áÊï∞ÊçÆ‰ª•ËøõË°åÂàÜÊûêÁöÑËøáÁ®ã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆËûçÂêà-Áª≠",
    "href": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆËûçÂêà-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÊï¥ÁêÜ/Êï∞ÊçÆËûçÂêà (Áª≠)",
    "text": "Êï∞ÊçÆÊï¥ÁêÜ/Êï∞ÊçÆËûçÂêà (Áª≠)\n\nÊï∞ÊçÆÊìç‰ΩúÔºö Â∞ÜÂéüÂßãÊï∞ÊçÆËΩ¨Êç¢‰∏∫ÂèØÁî®Ê†ºÂºèÁöÑÊ†∏ÂøÉËøáÁ®ã„ÄÇ\nÂêå‰πâËØçÔºö Êï¥ÁêÜ (Wrangling) ÂíåËûçÂêà (Munging) ÊòØÊï∞ÊçÆÊìç‰ΩúÁöÑÂèØ‰∫íÊç¢ÊúØËØ≠„ÄÇ\nÈáçË¶ÅÊÄßÔºö ËøôÊòØËá≥ÂÖ≥ÈáçË¶ÅÁöÑ‰∏ÄÊ≠•ÔºåÂõ†‰∏∫Áé∞ÂÆû‰∏ñÁïåÁöÑÊï∞ÊçÆÈÄöÂ∏∏ÂæàÊ∑∑‰π±ÔºåÈúÄË¶ÅÂú®ÂàÜÊûê‰πãÂâçËøõË°åÊ∏ÖÁêÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆËûçÂêà-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆËûçÂêà-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÊï¥ÁêÜ/Êï∞ÊçÆËûçÂêà (Áª≠)",
    "text": "Êï∞ÊçÆÊï¥ÁêÜ/Êï∞ÊçÆËûçÂêà (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nÊÉ≥Ë±°‰∏Ä‰∏ãÔºå‰Ω†Êúâ‰∏ÄÁõí‰πêÈ´òÁßØÊú®Êï£ËêΩÂú®Âú∞Êùø‰∏ä„ÄÇÊï∞ÊçÆÊï¥ÁêÜÂ∞±ÂÉèÊåâÈ¢úËâ≤„ÄÅÂ§ßÂ∞èÂíåÂΩ¢Áä∂ÂØπËøô‰∫õÁßØÊú®ËøõË°åÂàÜÁ±ªÂíåÁªÑÁªáÔºåÁÑ∂ÂêéÊâçËÉΩÂºÄÂßãÊûÑÂª∫ÊúâÊÑè‰πâÁöÑ‰∏úË•ø„ÄÇüß±"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆ",
    "href": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü üóÇÔ∏è",
    "text": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü üóÇÔ∏è\nÊú¨‰π¶‰∏ªË¶ÅÂÖ≥Ê≥®ÁªìÊûÑÂåñÊï∞ÊçÆÔºåÂÖ∂‰∏≠ÂåÖÊã¨ÂêÑÁßçÂ∏∏ËßÅÁöÑÊï∞ÊçÆÂΩ¢ÂºèÔºö\n\nË°®Ê†ºÊï∞ÊçÆÔºö Á±ª‰ººÁîµÂ≠êË°®Ê†ºÁöÑÊï∞ÊçÆÔºåÂÖ∑Êúâ‰∏çÂêåÁ±ªÂûãÁöÑÂàóÔºàÊñáÊú¨„ÄÅÊï∞Â≠ó„ÄÅÊó•ÊúüÁ≠âÔºâ„ÄÇËøôÊòØÊúÄÂ∏∏ËßÅÁöÑÁ±ªÂûãÔºåÂåÖÊã¨Êù•Ëá™ÂÖ≥Á≥ªÊï∞ÊçÆÂ∫ìÔºàÂ¶Ç SQLÔºâÂíå CSV Êñá‰ª∂ÁöÑÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÁª≠",
    "href": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü(Áª≠)",
    "text": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü(Áª≠)\n\nÂ§öÁª¥Êï∞ÁªÑÔºö Áü©ÈòµÔºåÈÄöÂ∏∏Áî®‰∫éÊï∞ÂÄºËÆ°ÁÆó„ÄÇ\nÂ§ö‰∏™Ë°®Ôºö Êï∞ÊçÆÂàÜÂ∏ÉÂú®Â§ö‰∏™Áõ∏ÂÖ≥Ë°®‰∏≠ÔºåÈÄöËøáÂÖ≥ÈîÆÂàóÈìæÊé•ÔºàÂ¶ÇÂú®ÂÖ≥Á≥ªÊï∞ÊçÆÂ∫ì‰∏≠Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÁª≠-1",
    "href": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü(Áª≠)",
    "text": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü(Áª≠)\n\nÊó∂Èó¥Â∫èÂàóÔºö ÈöèÊó∂Èó¥Êî∂ÈõÜÁöÑÊï∞ÊçÆÁÇπÔºåÂèØ‰ª•ÊòØÂÆöÊúüÊàñ‰∏çÂÆöÊúüÁöÑÊó∂Èó¥Èó¥Èöî„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÁª≠-2",
    "href": "qmd/pandas3ed1cn.html#Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÁª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü(Áª≠)",
    "text": "Âì™‰∫õÁ±ªÂûãÁöÑÊï∞ÊçÆÔºü(Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nÂç≥‰ΩøÊòØÈùûÁªìÊûÑÂåñÊï∞ÊçÆÔºàÂ¶ÇÊñ∞ÈóªÊñáÁ´†ÁöÑÈõÜÂêàÔºâÈÄöÂ∏∏‰πüÂèØ‰ª•ËΩ¨Êç¢‰∏∫ÁªìÊûÑÂåñÂΩ¢ÂºèÔºàÂ¶ÇËØçÈ¢ëË°®ÔºâËøõË°åÂàÜÊûê„ÄÇÂèØ‰ª•ÊääÂÆÉÊÉ≥Ë±°ÊàêÊää‰∏ÄÂ†ÜÈ£üÊùêÔºàÈùûÁªìÊûÑÂåñÊï∞ÊçÆÔºâÂèòÊàê‰∏Ä‰∏™Êï¥ÈΩêÁöÑÈ£üË∞±ÔºàÁªìÊûÑÂåñÊï∞ÊçÆÔºâ„ÄÇüç≤‚û°Ô∏èüìù"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Á§∫‰æãÁªìÊûÑÂåñÊï∞ÊçÆ-Ë°®Ê†º",
    "href": "qmd/pandas3ed1cn.html#Á§∫‰æãÁªìÊûÑÂåñÊï∞ÊçÆ-Ë°®Ê†º",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÁªìÊûÑÂåñÊï∞ÊçÆ (Ë°®Ê†º)",
    "text": "Á§∫‰æãÔºöÁªìÊûÑÂåñÊï∞ÊçÆ (Ë°®Ê†º)\n\n\n\nÂÆ¢Êà∑ID\nÂßìÂêç\nÂüéÂ∏Ç\nËÆ¢ÂçïÊó•Êúü\nÊÄªÈáëÈ¢ù\n\n\n\n\n1\nAlice\nÁ∫ΩÁ∫¶\n2023-10-26\n120.00\n\n\n2\nBob\n‰º¶Êï¶\n2023-10-27\n250.50\n\n\n3\nCharlie\nÂ∑¥Èªé\n2023-10-27\n75.25\n\n\n4\nAlice\nÁ∫ΩÁ∫¶\n2023-10-28\n180.00"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Á§∫‰æãÁªìÊûÑÂåñÊï∞ÊçÆ-Ë°®Ê†º-Áª≠",
    "href": "qmd/pandas3ed1cn.html#Á§∫‰æãÁªìÊûÑÂåñÊï∞ÊçÆ-Ë°®Ê†º-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÁªìÊûÑÂåñÊï∞ÊçÆ (Ë°®Ê†º) (Áª≠)",
    "text": "Á§∫‰æãÔºöÁªìÊûÑÂåñÊï∞ÊçÆ (Ë°®Ê†º) (Áª≠)\n\nÂàóÔºö Ë°®Á§∫‰∏çÂêåÁöÑÂ±ûÊÄßÔºàÂÆ¢Êà∑ ID„ÄÅÂßìÂêç„ÄÅÂüéÂ∏ÇÁ≠âÔºâ„ÄÇ\nË°åÔºö Ë°®Á§∫Âçï‰∏™ËÆ∞ÂΩïÊàñËßÇÂØüÁªìÊûúÔºàÊØè‰∏™ÂÆ¢Êà∑ÁöÑËÆ¢ÂçïÔºâ„ÄÇ\nÊï∞ÊçÆÁ±ªÂûãÔºö ÊØèÂàóÂèØ‰ª•‰øùÂ≠ò‰∏çÂêåÁ±ªÂûãÁöÑÊï∞ÊçÆÔºàÊï¥Êï∞„ÄÅÊñáÊú¨„ÄÅÊó•Êúü„ÄÅÊï∞Â≠óÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûê",
    "href": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûê",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü üêç",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü üêç\nÁî±‰∫é‰ª•‰∏ãÂá†‰∏™ÂÖ≥ÈîÆ‰ºòÂäøÔºåPython Â∑≤Êàê‰∏∫Êï∞ÊçÆÂàÜÊûê‰∏≠ÈùûÂ∏∏ÊµÅË°åÁöÑÂ∑•ÂÖ∑Ôºö\n\nËß£ÈáäÂûãËØ≠Ë®ÄÔºö Êõ¥Êòì‰∫éÂ≠¶‰π†Âíå‰ΩøÁî®Ôºå‰øÉËøõÂø´ÈÄüÂºÄÂèëÂíåÂÆûÈ™å„ÄÇ\nÂ∫ûÂ§ßËÄåÊ¥ªË∑ÉÁöÑÁ§æÂå∫Ôºö Â∫ûÂ§ßÁöÑÁî®Êà∑ÂíåÂºÄÂèëËÄÖÁΩëÁªúÊèê‰æõÊîØÊåÅ„ÄÅÂ∫ìÂíåÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÁª≠",
    "href": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü(Áª≠)",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü(Áª≠)\n\n‰∏∞ÂØåÁöÑÂ∫ìÁîüÊÄÅÁ≥ªÁªüÔºö NumPy„ÄÅpandas Âíå scikit-learn Á≠âÂº∫Â§ßÁöÑÂ∫ìÁÆÄÂåñ‰∫ÜÂ§çÊùÇÁöÑÊï∞ÊçÆÂàÜÊûê‰ªªÂä°„ÄÇ\nÈÄöÁî®ËØ≠Ë®ÄÔºö Êó¢ÈÄÇÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÔºå‰πüÈÄÇÁî®‰∫éÊûÑÂª∫ÂÆåÊï¥ÁöÑÊï∞ÊçÆÈ©±Âä®Â∫îÁî®Á®ãÂ∫è„ÄÇ\nËÉ∂Ê∞¥ËØ≠Ë®ÄÔºö ÈùûÂ∏∏ÈÄÇÂêà‰∏éÁé∞Êúâ‰ª£Á†ÅÂíåÁ≥ªÁªüÔºàÈÄöÂ∏∏Áî® C„ÄÅC++ Êàñ FORTRAN ÁºñÂÜôÔºâÈõÜÊàê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÁª≠-1",
    "href": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü(Áª≠)",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü(Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nPython Â∞±ÂÉèÊï∞ÊçÆÂàÜÊûêÁöÑÁëûÂ£´ÂÜõÂàÄÔºöÁî®ÈÄîÂπøÊ≥õÔºåÂÖ∑ÊúâËÆ∏Â§öÁî®‰∫é‰∏çÂêå‰ªªÂä°ÁöÑÂ∑•ÂÖ∑ÔºåÂπ∂‰∏îÊòì‰∫é‰ΩøÁî®„ÄÇüî™üõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#python-‰Ωú‰∏∫ËÉ∂Ê∞¥",
    "href": "qmd/pandas3ed1cn.html#python-‰Ωú‰∏∫ËÉ∂Ê∞¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Python ‰Ωú‰∏∫‚ÄúËÉ∂Ê∞¥‚Äùüîó",
    "text": "Python ‰Ωú‰∏∫‚ÄúËÉ∂Ê∞¥‚Äùüîó\nPython ÁöÑ‰∏Ä‰∏™ÊòæËëó‰ºòÂäøÊòØÂÆÉËÉΩÂ§üÂÖÖÂΩì‚ÄúËÉ∂Ê∞¥‰ª£Á†Å‚ÄùÔºåËøûÊé•‰∏çÂêåÁöÑËΩØ‰ª∂ÁªÑ‰ª∂ÂíåÁ≥ªÁªüÔºåÂ∞§ÂÖ∂ÊòØÁî® C„ÄÅC++ Âíå FORTRAN Á≠âËØ≠Ë®ÄÁºñÂÜôÁöÑÈÅóÁïô‰ª£Á†Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#python-‰Ωú‰∏∫ËÉ∂Ê∞¥-Áª≠",
    "href": "qmd/pandas3ed1cn.html#python-‰Ωú‰∏∫ËÉ∂Ê∞¥-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Python ‰Ωú‰∏∫‚ÄúËÉ∂Ê∞¥‚Äù (Áª≠)",
    "text": "Python ‰Ωú‰∏∫‚ÄúËÉ∂Ê∞¥‚Äù (Áª≠)\n\nÈõÜÊàêÔºö ËΩªÊùæ‰∏éÁé∞Êúâ‰ª£Á†ÅÂ∫ìÈõÜÊàêÔºåÁâπÂà´ÊòØÈÇ£‰∫õÁî®‰∫éÁßëÂ≠¶ËÆ°ÁÆóÁöÑ‰ª£Á†ÅÂ∫ì„ÄÇ\nÈÅóÁïôÁ≥ªÁªüÔºö ÂÖÅËÆ∏ÁªÑÁªáÂà©Áî®ÂØπÊóßËΩØ‰ª∂ÁöÑÁé∞ÊúâÊäïËµÑÔºåÂêåÊó∂ÂèóÁõä‰∫é Python ÁöÑÊï∞ÊçÆÂàÜÊûêÂäüËÉΩ„ÄÇ\n‰ºòÂåñÔºö Python ‰∏≠ÁöÑ‚ÄúËÉ∂Ê∞¥‰ª£Á†Å‚ÄùÂèØ‰ª•ËøûÊé•Âà∞‰ºòÂåñÁöÑ‰ΩéÁ∫ß‰ª£Á†ÅÔºà‰æãÂ¶Ç C Â∫ìÔºâ‰ª•ËøõË°åÊÄßËÉΩÂÖ≥ÈîÆÂûãËÆ°ÁÆó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#python-‰Ωú‰∏∫ËÉ∂Ê∞¥-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#python-‰Ωú‰∏∫ËÉ∂Ê∞¥-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Python ‰Ωú‰∏∫‚ÄúËÉ∂Ê∞¥‚Äù (Áª≠)",
    "text": "Python ‰Ωú‰∏∫‚ÄúËÉ∂Ê∞¥‚Äù (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nÂèØ‰ª•Â∞Ü Python ËßÜ‰∏∫ÈÄöÁî®ÈÄÇÈÖçÂô®ÔºåÂÆÉÂÖÅËÆ∏‰Ω†Â∞Ü‰∏çÂêåÁ±ªÂûãÁöÑÊèíÂ§¥ÔºàËΩØ‰ª∂ÁªÑ‰ª∂ÔºâËøûÊé•Âà∞Âêå‰∏Ä‰∏™ÊèíÂ∫ßÔºà‰Ω†ÁöÑÊï∞ÊçÆÂàÜÊûêÂ∑•‰ΩúÊµÅÁ®ãÔºâ‰∏≠„ÄÇüîå"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òÂíå-python-ÁöÑËß£ÂÜ≥ÊñπÊ°à",
    "href": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òÂíå-python-ÁöÑËß£ÂÜ≥ÊñπÊ°à",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÂíå Python ÁöÑËß£ÂÜ≥ÊñπÊ°à ‚úåÔ∏è",
    "text": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÂíå Python ÁöÑËß£ÂÜ≥ÊñπÊ°à ‚úåÔ∏è\n‰º†Áªü‰∏äÔºåÊï∞ÊçÆÂàÜÊûêÈÄöÂ∏∏Ê∂âÂèä‚ÄúÂèåËØ≠Ë®ÄÈóÆÈ¢ò‚ÄùÔºö\n\nÁ†îÁ©∂/ÂéüÂûãËÆæËÆ°Ôºö ‰ΩøÁî® R Êàñ MATLAB Á≠â‰∏ìÁî®ËØ≠Ë®ÄËøõË°åÂàùÂßãÊé¢Á¥¢ÂíåÊ®°ÂûãÂºÄÂèë„ÄÇ\nÁîü‰∫ßÔºö Áî®‰∏çÂêåÁöÑËØ≠Ë®ÄÔºà‰æãÂ¶Ç Java„ÄÅC++ÔºâÈáçÂÜô‰ª£Á†ÅÔºå‰ª•‰æøÂú®Êõ¥Â§ßÁöÑÁ≥ªÁªü‰∏≠ÈÉ®ÁΩ≤„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òpython-ÁöÑËß£ÂÜ≥ÊñπÊ°à",
    "href": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òpython-ÁöÑËß£ÂÜ≥ÊñπÊ°à",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÔºöPython ÁöÑËß£ÂÜ≥ÊñπÊ°à",
    "text": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÔºöPython ÁöÑËß£ÂÜ≥ÊñπÊ°à\nPython ÈÄöËøáÂêåÊó∂ÈÄÇÁî®‰∫éÁ†îÁ©∂/ÂéüÂûãËÆæËÆ°ÂíåÁîü‰∫ßÊù•Ëß£ÂÜ≥Ê≠§ÈóÆÈ¢òÔºö\n\nÂçï‰∏ÄÁéØÂ¢ÉÔºö ÂáèÂ∞ë‰∫ÜÁª¥Êä§ÂçïÁã¨ÂºÄÂèëÁéØÂ¢ÉÁöÑÈúÄË¶Å„ÄÇ\nÊïàÁéáÔºö ÈÄöËøáÂú®Êï¥‰∏™ËøáÁ®ã‰∏≠‰ΩøÁî®Áõ∏ÂêåÁöÑËØ≠Ë®ÄÊù•ËäÇÁúÅÊó∂Èó¥ÂíåËµÑÊ∫ê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òpython-ÁöÑËß£ÂÜ≥ÊñπÊ°à-Áª≠",
    "href": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òpython-ÁöÑËß£ÂÜ≥ÊñπÊ°à-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÔºöPython ÁöÑËß£ÂÜ≥ÊñπÊ°à (Áª≠)",
    "text": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÔºöPython ÁöÑËß£ÂÜ≥ÊñπÊ°à (Áª≠)\n\nÂçè‰ΩúÔºö ‰øÉËøõÁ†îÁ©∂‰∫∫ÂëòÂíåËΩØ‰ª∂Â∑•Á®ãÂ∏à‰πãÈó¥ÁöÑÂçè‰ΩúÔºå‰ªñ‰ª¨Áé∞Âú®ÂèØ‰ª•‰ΩøÁî®Áõ∏ÂêåÁöÑÂ∑•ÂÖ∑„ÄÇ\nJIT ÁºñËØëÂô®Ôºö ÂÉè Numba ËøôÊ†∑ÁöÑÂ∫ìÊèê‰æõ‰∫Ü‚ÄúÂç≥Êó∂‚ÄùÁºñËØëÔºåÂú®‰∏çÁ¶ªÂºÄ Python ÁéØÂ¢ÉÁöÑÊÉÖÂÜµ‰∏ãÊòæËëóÊèêÈ´ò‰∫ÜÊÄßËÉΩ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òpython-ÁöÑËß£ÂÜ≥ÊñπÊ°à-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#ÂèåËØ≠Ë®ÄÈóÆÈ¢òpython-ÁöÑËß£ÂÜ≥ÊñπÊ°à-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÔºöPython ÁöÑËß£ÂÜ≥ÊñπÊ°à (Áª≠)",
    "text": "‚ÄúÂèåËØ≠Ë®Ä‚ÄùÈóÆÈ¢òÔºöPython ÁöÑËß£ÂÜ≥ÊñπÊ°à (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nPython Âº•Âêà‰∫ÜÁ†îÁ©∂ÂíåÁîü‰∫ß‰πãÈó¥ÁöÑÂ∑ÆË∑ùÔºå‰ªéËÄåÂÆûÁé∞‰∫ÜÊõ¥È°∫ÁïÖ„ÄÅÊõ¥È´òÊïàÁöÑÂ∑•‰ΩúÊµÅÁ®ã„ÄÇËøôÂ∞±ÂÉèÊã•Êúâ‰∏ÄÁßçÂõ¢Èòü‰∏≠ÁöÑÊØè‰∏™‰∫∫Ôºå‰ªéÊï∞ÊçÆÁßëÂ≠¶ÂÆ∂Âà∞ËΩØ‰ª∂Â∑•Á®ãÂ∏àÔºåÈÉΩÂèØ‰ª•ÁêÜËß£Âíå‰ΩøÁî®ÁöÑÂçï‰∏ÄËØ≠Ë®Ä„ÄÇüåâ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πà-‰∏ç-ÈÄâÊã©-python",
    "href": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πà-‰∏ç-ÈÄâÊã©-python",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πà ‰∏ç ÈÄâÊã© PythonÔºü üö´",
    "text": "‰∏∫‰ªÄ‰πà ‰∏ç ÈÄâÊã© PythonÔºü üö´\nËôΩÁÑ∂ Python Âú®ËÆ∏Â§öÈ¢ÜÂüüÈÉΩÂæàÂá∫Ëâ≤Ôºå‰ΩÜÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÂÆÉÂèØËÉΩ‰∏çÊòØÁêÜÊÉ≥ÁöÑÈÄâÊã©Ôºö\n\nÊÄßËÉΩÂÖ≥ÈîÆÂûãÂ∫îÁî®Á®ãÂ∫èÔºö ÂØπ‰∫éÈúÄË¶ÅÊûÅ‰ΩéÂª∂ËøüÊàñÈ´òËµÑÊ∫êÂà©Áî®ÁéáÁöÑÂ∫îÁî®Á®ãÂ∫èÔºà‰æãÂ¶ÇÈ´òÈ¢ë‰∫§ÊòìÔºâÔºåC++ Á≠âÁºñËØëËØ≠Ë®ÄÂèØËÉΩÊõ¥ÂêàÈÄÇ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πà-‰∏ç-ÈÄâÊã©-python-Áª≠",
    "href": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πà-‰∏ç-ÈÄâÊã©-python-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πà ‰∏ç ÈÄâÊã© PythonÔºü (Áª≠)",
    "text": "‰∏∫‰ªÄ‰πà ‰∏ç ÈÄâÊã© PythonÔºü (Áª≠)\n\nÂπ∂ÂèëÊÄßÂíå GILÔºö Python ÁöÑÂÖ®Â±ÄËß£ÈáäÂô®ÈîÅ (GIL) ÂèØËÉΩ‰ºöÈôêÂà∂ CPU ÂØÜÈõÜÂûãÂ∫îÁî®Á®ãÂ∫è‰∏≠ÁöÑÁúüÊ≠£Â§öÁ∫øÁ®ã„ÄÇ‰ΩÜÊòØÔºåÂ≠òÂú®Ëß£ÂÜ≥ÊñπÊ≥ïÔºà‰æãÂ¶ÇÔºå‰ΩøÁî® C Êâ©Â±ïÊàñÂ§öÂ§ÑÁêÜÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πà-‰∏ç-ÈÄâÊã©-python-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#‰∏∫‰ªÄ‰πà-‰∏ç-ÈÄâÊã©-python-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πà ‰∏ç ÈÄâÊã© PythonÔºü (Áª≠)",
    "text": "‰∏∫‰ªÄ‰πà ‰∏ç ÈÄâÊã© PythonÔºü (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nPython ‰∏≠ÁöÑ GIL Â∞±ÂÉè‰∏ÄÊù°ÂçïËΩ¶ÈÅìÔºåÂç≥‰Ωø‰Ω†ÊúâÂ§ö‰∏™ËΩ¶ÈÅìÔºàÊ†∏ÂøÉÔºâÂèØÁî®Ôºå‰πüÂè™ÂÖÅËÆ∏‰∏ÄËæÜËΩ¶ÔºàÁ∫øÁ®ãÔºâ‰∏ÄÊ¨°ÈÄöËøá„ÄÇËøôÂØπ‰∫éÊüê‰∫õ CPU ÂØÜÈõÜÂûã‰ªªÂä°Êù•ËØ¥ÂèØËÉΩÊòØ‰∏Ä‰∏™Áì∂È¢à„ÄÇ‰ΩÜÊòØÔºå‰Ω†ÂèØ‰ª•‰ΩøÁî®ÂÉè C Êâ©Â±ïËøôÊ†∑ÁöÑÁªïË°åÊñπÂºè„ÄÇüõ£Ô∏èüöó"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÈáçË¶ÅÁöÑ-python-Â∫ì",
    "href": "qmd/pandas3ed1cn.html#ÈáçË¶ÅÁöÑ-python-Â∫ì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçË¶ÅÁöÑ Python Â∫ì üìö",
    "text": "ÈáçË¶ÅÁöÑ Python Â∫ì üìö\nÊú¨ËäÇ‰ªãÁªç‰∏Ä‰∫õÂØπÊï∞ÊçÆÂàÜÊûêËá≥ÂÖ≥ÈáçË¶ÅÁöÑÊ†∏ÂøÉ Python Â∫ì„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#numpyÊï∞ÂÄº-python",
    "href": "qmd/pandas3ed1cn.html#numpyÊï∞ÂÄº-python",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPyÔºöÊï∞ÂÄº Python",
    "text": "NumPyÔºöÊï∞ÂÄº Python\nNumPy ÊòØ Python ‰∏≠Êï∞ÂÄºËÆ°ÁÆóÁöÑÂü∫Á°Ä„ÄÇÂÆÉÊèê‰æõÔºö\n\nndarrayÔºö ‰∏ÄÁßçÂø´ÈÄüÈ´òÊïàÁöÑÂ§öÁª¥Êï∞ÁªÑÂØπË±°ÔºåÁî®‰∫éÂ≠òÂÇ®ÂíåÊìç‰ΩúÊï∞ÂÄºÊï∞ÊçÆ„ÄÇ\nÊï∞Â≠¶ÂáΩÊï∞Ôºö Áî®‰∫éÂú®Êï∞ÁªÑ‰∏äÊâßË°åÈÄêÂÖÉÁ¥†ËøêÁÆóÂíåÊï∞ÁªÑ‰πãÈó¥ÁöÑÊï∞Â≠¶ËÆ°ÁÆóÁöÑÂêÑÁßçÂáΩÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#numpyÊï∞ÂÄº-python-Áª≠",
    "href": "qmd/pandas3ed1cn.html#numpyÊï∞ÂÄº-python-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPyÔºöÊï∞ÂÄº Python (Áª≠)",
    "text": "NumPyÔºöÊï∞ÂÄº Python (Áª≠)\n\nÁ∫øÊÄß‰ª£Êï∞„ÄÅÂÇÖÈáåÂè∂ÂèòÊç¢„ÄÅÈöèÊú∫Êï∞ÁîüÊàêÔºö ÁßëÂ≠¶ËÆ°ÁÆóÂíåÊï∞ÊçÆÂàÜÊûêÁöÑÂü∫Êú¨Â∑•ÂÖ∑„ÄÇ\nÊï∞ÊçÆÂÆπÂô®Ôºö ‰Ωú‰∏∫Âú®ÁÆóÊ≥ïÂíåÂ∫ì‰πãÈó¥‰º†ÈÄíÊï∞ÊçÆÁöÑÊúâÊïàÂÆπÂô®„ÄÇ\nC API: ÂÖÅËÆ∏‰∏é C„ÄÅC++ Âíå FORTRAN ËøûÊé•„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#numpyÊï∞ÂÄº-python-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#numpyÊï∞ÂÄº-python-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPyÔºöÊï∞ÂÄº Python (Áª≠)",
    "text": "NumPyÔºöÊï∞ÂÄº Python (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nÂèØ‰ª•Â∞Ü NumPy ÁöÑ ndarray ËßÜ‰∏∫‰∏Ä‰∏™È´òÂ∫¶‰ºòÂåñÁöÑÊï∞Â≠óÂÆπÂô®ÔºåÂ∞±ÂÉè‰∏Ä‰∏™‰∏ì‰∏∫Âø´ÈÄüËÆ°ÁÆóËÄåËÆæËÆ°ÁöÑÈ´òÊïàÁîµÂ≠êË°®Ê†º„ÄÇüî¢üöÄ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê",
    "href": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê",
    "text": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê\npandas Âª∫Á´ãÂú® NumPy ‰πã‰∏äÔºåÊèê‰æõÁî®‰∫éÂ§ÑÁêÜÁªìÊûÑÂåñÊàñË°®Ê†ºÊï∞ÊçÆÁöÑÈ´òÁ∫ßÊï∞ÊçÆÁªìÊûÑÂíåÂáΩÊï∞„ÄÇ‰∏ªË¶ÅÂäüËÉΩÂåÖÊã¨Ôºö\n\nDataFrameÔºö ‰∏ÄÁßçË°®Ê†ºÂåñÁöÑ„ÄÅÈù¢ÂêëÂàóÁöÑÊï∞ÊçÆÁªìÊûÑÔºåÂÖ∑ÊúâË°åÂíåÂàóÊ†áÁ≠æÔºàÁ±ª‰ºº‰∫éÁîµÂ≠êË°®Ê†ºÊàñ SQL Ë°®Ôºâ„ÄÇ\nSeriesÔºö ‰∏ÄÁª¥Ê†áËÆ∞Êï∞ÁªÑÂØπË±°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê-Áª≠",
    "href": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê (Áª≠)",
    "text": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê (Áª≠)\n\nÊï∞ÊçÆÂØπÈΩêÔºö Âü∫‰∫éÊ†áÁ≠æÁöÑËá™Âä®ÊàñÊòæÂºèÊï∞ÊçÆÂØπÈΩêÔºåÈò≤Ê≠¢Áî±Êú™ÂØπÈΩêÊï∞ÊçÆÂºïËµ∑ÁöÑÂ∏∏ËßÅÈîôËØØ„ÄÇ\nÊï∞ÊçÆÊìç‰ΩúÔºö Áî®‰∫éÈáçÂ°ë„ÄÅÂàáÁâá„ÄÅÂàáÂùó„ÄÅËÅöÂêàÂíåÈÄâÊã©Êï∞ÊçÆÂ≠êÈõÜÁöÑÂ∑•ÂÖ∑„ÄÇ\nÁº∫Â§±Êï∞ÊçÆÂ§ÑÁêÜÔºö ÁÅµÊ¥ªÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê (Áª≠)",
    "text": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê (Áª≠)\n\nÊó∂Èó¥Â∫èÂàóÂäüËÉΩÔºö Áî®‰∫éÂ§ÑÁêÜÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁöÑ‰∏ìÁî®Â∑•ÂÖ∑„ÄÇ\n‰∏éÊï∞ÊçÆÂ∫ìÈõÜÊàêÔºö ÊîØÊåÅÂêàÂπ∂ÂíåËøûÊé•Êù•Ëá™‰∏çÂêåÊù•Ê∫êÁöÑÊï∞ÊçÆÔºåÂåÖÊã¨ SQL Êï∞ÊçÆÂ∫ì„ÄÇ\nÊ∫êËá™Èù¢ÊùøÊï∞ÊçÆ: ‚Äúpandas‚Äù Êù•Ëá™ ‚Äúpanel data‚ÄùÔºå‰∏Ä‰∏™ËÆ°ÈáèÁªèÊµéÂ≠¶ÊúØËØ≠Ôºå‰ª•Âèä ‚ÄúPython data analysis‚Äù„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê-Áª≠-2",
    "href": "qmd/pandas3ed1cn.html#pandasÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê-Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê (Áª≠)",
    "text": "pandasÔºöÊï∞ÊçÆÊìç‰ΩúÂíåÂàÜÊûê (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\npandas Â∞±ÂÉè Python ‰∏≠ÁöÑ‰∏Ä‰∏™Ë∂ÖÁ∫ßÁîµÂ≠êË°®Ê†ºÁ®ãÂ∫èÔºåÂèØ‰ª•ËÆ©‰Ω†ËΩªÊùæÂú∞Êìç‰Ωú„ÄÅÊ∏ÖÁêÜÂíåÂàÜÊûêÊï∞ÊçÆ„ÄÇüìäüìà"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#matplotlibÊï∞ÊçÆÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed1cn.html#matplotlibÊï∞ÊçÆÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "matplotlibÔºöÊï∞ÊçÆÂèØËßÜÂåñ üìä",
    "text": "matplotlibÔºöÊï∞ÊçÆÂèØËßÜÂåñ üìä\nmatplotlib ÊòØÊúÄÂπøÊ≥õ‰ΩøÁî®ÁöÑ Python Â∫ìÔºåÁî®‰∫éÂàõÂª∫ÈùôÊÄÅÁªòÂõæÂíåÂÖ∂‰ªñ‰∫åÁª¥Êï∞ÊçÆÂèØËßÜÂåñ„ÄÇ\n\nÂá∫ÁâàË¥®ÈáèÁöÑÁªòÂõæÔºö ‰∏ì‰∏∫ÁîüÊàêÈÄÇÂêàÂá∫ÁâàÁâ©ÁöÑÈ´òË¥®ÈáèÁªòÂõæËÄåËÆæËÆ°„ÄÇ\nÈõÜÊàêÔºö ‰∏é Python Êï∞ÊçÆÁîüÊÄÅÁ≥ªÁªü‰∏≠ÁöÑÂÖ∂‰ªñÂ∫ìÂæàÂ•ΩÂú∞ÈõÜÊàê„ÄÇ\nÈªòËÆ§ÈÄâÊã©Ôºö Âü∫Êú¨Êï∞ÊçÆÂèØËßÜÂåñÁöÑÂèØÈù†‰∏îÂπøÊ≥õÈááÁî®ÁöÑÈÄâÊã©„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#matplotlibÊï∞ÊçÆÂèØËßÜÂåñ-Áª≠",
    "href": "qmd/pandas3ed1cn.html#matplotlibÊï∞ÊçÆÂèØËßÜÂåñ-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "matplotlibÔºöÊï∞ÊçÆÂèØËßÜÂåñ (Áª≠)",
    "text": "matplotlibÔºöÊï∞ÊçÆÂèØËßÜÂåñ (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nmatplotlib ÊòØ‰Ω†ÂàõÂª∫Êï∞ÊçÆÂèØËßÜÂåñË°®Á§∫ÁöÑÈ¶ñÈÄâÂ∑•ÂÖ∑ÔºåÂ∞±ÂÉèÂ∞ÜÊï∞ÊçÆËΩ¨Êç¢‰∏∫ÂõæË°®ÂíåÂõæÂΩ¢‰∏ÄÊ†∑„ÄÇüìâüìä"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ipython-Âíå-jupyter‰∫§‰∫íÂºèËÆ°ÁÆó",
    "href": "qmd/pandas3ed1cn.html#ipython-Âíå-jupyter‰∫§‰∫íÂºèËÆ°ÁÆó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPython Âíå JupyterÔºö‰∫§‰∫íÂºèËÆ°ÁÆó üíª",
    "text": "IPython Âíå JupyterÔºö‰∫§‰∫íÂºèËÆ°ÁÆó üíª\nIPython Âíå Jupyter ‰∏∫ Python ÂºÄÂèëÂíåÊï∞ÊçÆÂàÜÊûêÊèê‰æõ‰∫Ü‰∏Ä‰∏™‰∫§‰∫íÂºèÁéØÂ¢É„ÄÇ\n\nIPythonÔºö ‰∏ÄÁßçÂ¢ûÂº∫ÁöÑ‰∫§‰∫íÂºè Python shellÔºåÂèØ‰øÉËøõ‚ÄúÊâßË°å-Êé¢Á¥¢‚ÄùÂ∑•‰ΩúÊµÅÁ®ã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ipython-Âíå-jupyter‰∫§‰∫íÂºèËÆ°ÁÆó-Áª≠",
    "href": "qmd/pandas3ed1cn.html#ipython-Âíå-jupyter‰∫§‰∫íÂºèËÆ°ÁÆó-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPython Âíå JupyterÔºö‰∫§‰∫íÂºèËÆ°ÁÆó (Áª≠)",
    "text": "IPython Âíå JupyterÔºö‰∫§‰∫íÂºèËÆ°ÁÆó (Áª≠)\n\nJupyter NotebookÔºö ‰∏ÄÁßçÂü∫‰∫é Web ÁöÑÁ¨îËÆ∞Êú¨ÁéØÂ¢ÉÔºåÊîØÊåÅÂ§öÁßçÁºñÁ®ãËØ≠Ë®ÄÔºàÂåÖÊã¨ÈÄöËøá IPython ÁöÑ PythonÔºâÔºåÂπ∂ÂÖÅËÆ∏‰Ω†Âú®Âçï‰∏™ÊñáÊ°£‰∏≠ÁªÑÂêà‰ª£Á†Å„ÄÅÊñáÊú¨ÂíåÂèØËßÜÂåñ„ÄÇ\nÊé¢Á¥¢ÂíåËø≠‰ª£Ôºö ÈùûÂ∏∏ÈÄÇÂêàÊé¢Á¥¢Êï∞ÊçÆ„ÄÅÂ∞ùËØï‰∏çÂêåÁöÑ‰ª£Á†ÅÁâáÊÆµ‰ª•ÂèäËø≠‰ª£ÂàÜÊûê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ipython-Âíå-jupyter‰∫§‰∫íÂºèËÆ°ÁÆó-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#ipython-Âíå-jupyter‰∫§‰∫íÂºèËÆ°ÁÆó-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPython Âíå JupyterÔºö‰∫§‰∫íÂºèËÆ°ÁÆó (Áª≠)",
    "text": "IPython Âíå JupyterÔºö‰∫§‰∫íÂºèËÆ°ÁÆó (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nIPython Âíå Jupyter Â∞±ÂÉèÊï∞ÊçÆÁßëÂ≠¶ÂÆ∂ÁöÑÊï∞Â≠óÂÆûÈ™åÂÆ§Á¨îËÆ∞Êú¨ÔºåÂèØ‰ª•ËÆ©‰Ω†ËøõË°åÂÆûÈ™å„ÄÅËÆ∞ÂΩï‰Ω†ÁöÑÂ∑•‰ΩúÂπ∂ÂàÜ‰∫´‰Ω†ÁöÑÂèëÁé∞„ÄÇüß™üìì"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#scipyÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑",
    "href": "qmd/pandas3ed1cn.html#scipyÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "SciPyÔºöÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑",
    "text": "SciPyÔºöÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑\nSciPy ÊòØ‰∏Ä‰∏™ËΩØ‰ª∂ÂåÖÁöÑÈõÜÂêàÔºåÊèê‰æõÁî®‰∫éÂêÑÁßçÁßëÂ≠¶ËÆ°ÁÆó‰ªªÂä°ÁöÑÂ∑•ÂÖ∑ÔºåÂåÖÊã¨Ôºö\n\nscipy.integrateÔºö Êï∞ÂÄºÁßØÂàÜÂíåÂæÆÂàÜÊñπÁ®ãÊ±ÇËß£Âô®„ÄÇ\nscipy.linalgÔºö Á∫øÊÄß‰ª£Êï∞‰æãÁ®ã„ÄÇ\nscipy.optimizeÔºö ÂáΩÊï∞‰ºòÂåñÂíåÊ±ÇÊ†πÁÆóÊ≥ï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#scipyÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑-Áª≠",
    "href": "qmd/pandas3ed1cn.html#scipyÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "SciPyÔºöÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑ (Áª≠)",
    "text": "SciPyÔºöÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑ (Áª≠)\n\nscipy.signalÔºö ‰ø°Âè∑Â§ÑÁêÜÂ∑•ÂÖ∑„ÄÇ\nscipy.sparseÔºö Á®ÄÁñèÁü©ÈòµÂíåÊ±ÇËß£Âô®„ÄÇ\nscipy.specialÔºö ÁâπÊÆäÊï∞Â≠¶ÂáΩÊï∞„ÄÇ\nscipy.statsÔºö ÁªüËÆ°ÂàÜÂ∏É„ÄÅÊ£ÄÈ™åÂíåÊèèËø∞ÊÄßÁªüËÆ°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#scipyÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#scipyÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "SciPyÔºöÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑ (Áª≠)",
    "text": "SciPyÔºöÁßëÂ≠¶ËÆ°ÁÆóÂ∑•ÂÖ∑ (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nSciPy Â∞±ÂÉè‰∏Ä‰∏™Ë£ÖÊª°‰∫ÜÁî®‰∫éÁßëÂ≠¶ËÆ°ÁÆóÁöÑ‰∏ìÁî®‰ª™Âô®ÁöÑÂ∑•ÂÖ∑ÁÆ±ÔºåÊâ©Â±ï‰∫Ü NumPy ÁöÑÂäüËÉΩ„ÄÇüß∞üî¨"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†",
    "href": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† ü§ñ",
    "text": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† ü§ñ\nscikit-learn ÊòØ Python ÁöÑ‰∏ªË¶ÅÈÄöÁî®Êú∫Âô®Â≠¶‰π†Â∑•ÂÖ∑ÂåÖ„ÄÇÂÆÉÂåÖÊã¨‰ª•‰∏ãÂ≠êÊ®°ÂùóÔºö\n\nÂàÜÁ±ªÔºö Áî®‰∫éËØÜÂà´ÂØπË±°Â±û‰∫éÂì™‰∏™Á±ªÂà´ÁöÑÁÆóÊ≥ïÔºà‰æãÂ¶ÇÔºåÂûÉÂúæÈÇÆ‰ª∂Ê£ÄÊµãÔºâ„ÄÇ\nÂõûÂΩíÔºö Áî®‰∫éÈ¢ÑÊµãËøûÁª≠ÂÄºÂ±ûÊÄßÁöÑÁÆóÊ≥ïÔºà‰æãÂ¶ÇÔºåÈ¢ÑÊµãÊàø‰ª∑Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†-Áª≠",
    "href": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† (Áª≠)",
    "text": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† (Áª≠)\n\nËÅöÁ±ªÔºö Áî®‰∫éÂØπÁõ∏‰ººÂØπË±°ËøõË°åÂàÜÁªÑÁöÑÁÆóÊ≥ïÔºà‰æãÂ¶ÇÔºåÂÆ¢Êà∑ÁªÜÂàÜÔºâ„ÄÇ\nÈôçÁª¥Ôºö ÂáèÂ∞ëÊï∞ÊçÆÈõÜ‰∏≠ÂèòÈáèÊï∞ÈáèÁöÑÊäÄÊúØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† (Áª≠)",
    "text": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† (Áª≠)\n\nÊ®°ÂûãÈÄâÊã©Ôºö Áî®‰∫éÈÄâÊã©ÊúÄ‰Ω≥Ê®°ÂûãÂíåÂèÇÊï∞ÁöÑÂ∑•ÂÖ∑„ÄÇ\nÈ¢ÑÂ§ÑÁêÜÔºö ÁâπÂæÅÊèêÂèñÂíåÂΩí‰∏ÄÂåñ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†-Áª≠-2",
    "href": "qmd/pandas3ed1cn.html#scikit-learnÊú∫Âô®Â≠¶‰π†-Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† (Áª≠)",
    "text": "scikit-learnÔºöÊú∫Âô®Â≠¶‰π† (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nscikit-learn ÊòØ‰Ω†ÁöÑÊú∫Âô®Â≠¶‰π†Â∑•‰ΩúÂÆ§ÔºåÊèê‰æõÁî®‰∫éÊûÑÂª∫ÂíåËØÑ‰º∞È¢ÑÊµãÊ®°ÂûãÁöÑÂêÑÁßçÂ∑•ÂÖ∑„ÄÇü§ñüõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#statsmodelsÁªüËÆ°Âª∫Ê®°",
    "href": "qmd/pandas3ed1cn.html#statsmodelsÁªüËÆ°Âª∫Ê®°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "statsmodelsÔºöÁªüËÆ°Âª∫Ê®°",
    "text": "statsmodelsÔºöÁªüËÆ°Âª∫Ê®°\nstatsmodels ÊòØ‰∏Ä‰∏™ÁªüËÆ°ÂàÜÊûêÂåÖÔºå‰∏ìÊ≥®‰∫éÁªüËÆ°Êé®Êñ≠ÔºåÊèê‰æõ‰∏çÁ°ÆÂÆöÊÄß‰º∞ËÆ°Âíå p ÂÄº„ÄÇÂÆÉÂåÖÊã¨Ôºö\n\nÂõûÂΩíÊ®°ÂûãÔºö Á∫øÊÄßÂõûÂΩí„ÄÅÂπø‰πâÁ∫øÊÄßÊ®°ÂûãÁ≠â„ÄÇ\nÊñπÂ∑ÆÂàÜÊûê (ANOVA)"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#statsmodelsÁªüËÆ°Âª∫Ê®°-Áª≠",
    "href": "qmd/pandas3ed1cn.html#statsmodelsÁªüËÆ°Âª∫Ê®°-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "statsmodelsÔºöÁªüËÆ°Âª∫Ê®° (Áª≠)",
    "text": "statsmodelsÔºöÁªüËÆ°Âª∫Ê®° (Áª≠)\n\nÊó∂Èó¥Â∫èÂàóÂàÜÊûêÔºö AR„ÄÅARMA„ÄÅARIMA„ÄÅVAR Ê®°Âûã„ÄÇ\nÈùûÂèÇÊï∞ÊñπÊ≥ïÔºö Ê†∏ÂØÜÂ∫¶‰º∞ËÆ°Á≠â„ÄÇ\nÂèØËßÜÂåñÔºö Áî®‰∫éÂèØËßÜÂåñÁªüËÆ°Ê®°ÂûãÁªìÊûúÁöÑÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#statsmodels-ÁªüËÆ°Âª∫Ê®°-Áª≠",
    "href": "qmd/pandas3ed1cn.html#statsmodels-ÁªüËÆ°Âª∫Ê®°-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "statsmodels: ÁªüËÆ°Âª∫Ê®° (Áª≠)",
    "text": "statsmodels: ÁªüËÆ°Âª∫Ê®° (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nstatsmodels ÊòØ‰Ω†ÁöÑÁªüËÆ°ÂÆûÈ™åÂÆ§ÔºåÊèê‰æõÁî®‰∫éËøõË°å‰∏•Ê†ºÁöÑÁªüËÆ°ÂàÜÊûêÂíå‰ªéÊï∞ÊçÆ‰∏≠ÂæóÂá∫Êé®ËÆ∫ÁöÑÂ∑•ÂÖ∑„ÄÇÂÆÉË°•ÂÖÖ‰∫Ü scikit-learnÔºåÂêéËÄÖÊõ¥‰æßÈáç‰∫éÈ¢ÑÊµã„ÄÇüß™üìä"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÖ∂‰ªñÂåÖ",
    "href": "qmd/pandas3ed1cn.html#ÂÖ∂‰ªñÂåÖ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ∂‰ªñÂåÖ üì¶",
    "text": "ÂÖ∂‰ªñÂåÖ üì¶\n\nËøòÊúâËÆ∏Â§öÂÖ∂‰ªñÈáçË¶ÅÁöÑ Python Â∫ì„ÄÇ\nTensorFlow Âíå PyTorchÔºöÂ∏∏Áî®‰∫éÊú∫Âô®Â≠¶‰π†Êàñ‰∫∫Â∑•Êô∫ËÉΩÂ∑•‰Ωú„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂíåËÆæÁΩÆ",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂíåËÆæÁΩÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÂíåËÆæÁΩÆ ‚öôÔ∏è",
    "text": "ÂÆâË£ÖÂíåËÆæÁΩÆ ‚öôÔ∏è\nÊú¨ËäÇÊèê‰æõ‰ΩøÁî® Miniconda Âíå conda-forge ËÆæÁΩÆÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÁöÑ Python ÁéØÂ¢ÉÁöÑËØ¥Êòé„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#miniconda",
    "href": "qmd/pandas3ed1cn.html#miniconda",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Miniconda",
    "text": "Miniconda\nMiniconda ÊòØ conda ÁöÑÊúÄÂ∞èÂÆâË£ÖÁ®ãÂ∫èÔºåconda ÊòØ‰∏Ä‰∏™ÂåÖ„ÄÅ‰æùËµñÈ°πÂíåÁéØÂ¢ÉÁÆ°ÁêÜÁ≥ªÁªü„ÄÇconda-forge ÊòØ‰∏Ä‰∏™Âü∫‰∫é conda ÁöÑÁ§æÂå∫Áª¥Êä§ÁöÑËΩØ‰ª∂ÂèëË°åÁâà„ÄÇ\n\n‰∏∫‰ªÄ‰πàÈÄâÊã© MinicondaÔºü Êèê‰æõ‰∫Ü‰∏ÄÁßçËΩªÈáèÁ∫ß‰∏îÁÅµÊ¥ªÁöÑÊñπÂºèÊù•ÁÆ°ÁêÜ Python ÁéØÂ¢ÉÂíåÂåÖ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#miniconda-Áª≠",
    "href": "qmd/pandas3ed1cn.html#miniconda-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Miniconda (Áª≠)",
    "text": "Miniconda (Áª≠)\n\nconda-forgeÔºö Êèê‰æõÂêÑÁßçËΩØ‰ª∂ÂåÖÔºåÂåÖÊã¨Êï∞ÊçÆÁßëÂ≠¶‰∏≠Â∏∏Áî®ÁöÑËΩØ‰ª∂ÂåÖ„ÄÇ\nPython 3.10Ôºö Êú¨‰π¶‰ΩøÁî® Python 3.10Ôºå‰ΩÜ‰πüÂèØ‰ª•‰ΩøÁî®Êõ¥Êñ∞ÁöÑÁâàÊú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#miniconda-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#miniconda-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Miniconda (Áª≠)",
    "text": "Miniconda (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nÂèØ‰ª•Â∞Ü conda ËßÜ‰∏∫ Python È°πÁõÆÁöÑËôöÊãüÂÆπÂô®„ÄÇÂÆÉÂèØ‰ª•‰Ωø‰Ω†ÁöÑÈ°πÁõÆ‰øùÊåÅÈöîÁ¶ªÔºåÂπ∂Èò≤Ê≠¢‰∏çÂêåËΩØ‰ª∂ÂåÖÁâàÊú¨‰πãÈó¥ÁöÑÂÜ≤Á™Å„ÄÇMiniconda ÊòØ Anaconda ÁöÑÁ≤æÁÆÄÁâàÊú¨„ÄÇüì¶"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-windowsmacoslinux",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-windowsmacoslinux",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÊ≠•È™§ (Windows„ÄÅmacOS„ÄÅLinux) üíª",
    "text": "ÂÆâË£ÖÊ≠•È™§ (Windows„ÄÅmacOS„ÄÅLinux) üíª\nÊú¨‰π¶Êèê‰æõ‰∫ÜÂú® Windows„ÄÅmacOS Âíå Linux ‰∏äÂÆâË£Ö Miniconda ÁöÑËØ¶ÁªÜËØ¥Êòé„ÄÇ‰∏ÄËà¨Ê≠•È™§ÊòØÔºö\n\n‰∏ãËΩΩÔºö ‰ªé https://conda.io ‰∏ãËΩΩÈÄÇÂΩìÁöÑ Miniconda ÂÆâË£ÖÁ®ãÂ∫è„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-Áª≠",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÊ≠•È™§ (Áª≠)",
    "text": "ÂÆâË£ÖÊ≠•È™§ (Áª≠)\n\nÂÆâË£ÖÔºö ËøêË°åÂÆâË£ÖÁ®ãÂ∫èÔºåÊåâÁÖßÂ±èÂπï‰∏äÁöÑÊèêÁ§∫ËøõË°åÊìç‰Ωú„ÄÇ\nÈ™åËØÅÔºö ÊâìÂºÄÁªàÁ´ØÔºàÊàñ Windows ‰∏äÁöÑ Anaconda PromptÔºâÂπ∂ÈîÆÂÖ• python„ÄÇ‰Ω†Â∫îËØ•‰ºöÁúãÂà∞ Python Ëß£ÈáäÂô®ÂêØÂä®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÊ≠•È™§ (Áª≠)",
    "text": "ÂÆâË£ÖÊ≠•È™§ (Áª≠)\n\nÈÄÄÂá∫Ôºö ÈîÆÂÖ• exit() ÊàñÊåâ Ctrl-DÔºàÂú® Windows ‰∏äÊåâ Ctrl-Z ÁÑ∂ÂêéÊåâ EnterÔºâÈÄÄÂá∫Ëß£ÈáäÂô®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-Áª≠-2",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÊ≠•È™§-Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÊ≠•È™§ (Áª≠)",
    "text": "ÂÆâË£ÖÊ≠•È™§ (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nËøô‰∫õÊ≠•È™§Â∞±ÂÉèÂú®ÂºÄÂßãÊú®Â∑•È°πÁõÆ‰πãÂâçËÆæÁΩÆ‰Ω†ÁöÑÂ∑•‰ΩúÂè∞„ÄÇ‰Ω†Ê≠£Âú®ÂáÜÂ§áÂ•Ω‰Ω†ÁöÑÂ∑•ÂÖ∑ÔºàPython ÂèäÂÖ∂Â∫ìÔºâ‰ª•‰æõ‰ΩøÁî®„ÄÇüõ†Ô∏èü™ö"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ üì¶",
    "text": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ üì¶\nÂÆâË£Ö Miniconda ÂêéÔºå‰Ω†ÂèØ‰ª•ÂàõÂª∫‰∏Ä‰∏™ conda ÁéØÂ¢ÉÂπ∂ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖÔºö\n\nÈÖçÁΩÆ conda-forgeÔºö bash     conda config --add channels conda-forge     conda config --set channel_priority strict"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)",
    "text": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)\n\nÂàõÂª∫ÁéØÂ¢ÉÔºö bash     conda create -y -n pydata-book python=3.10\nÊøÄÊ¥ªÁéØÂ¢ÉÔºö bash     conda activate pydata-book"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)",
    "text": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)\n\nÂÆâË£ÖÂåÖÔºö bash     conda install -y pandas jupyter matplotlib ÔºàÊàñÂÆâË£Ö‰π¶‰∏≠ÂàóÂá∫ÁöÑÊâÄÊúâÂåÖÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠-2",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)",
    "text": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)\n\nconda install ‰∏é pip installÔºö ‰ΩøÁî® Miniconda Êó∂È¶ñÈÄâ conda install„ÄÇÂ¶ÇÊûúÊüê‰∏™ÂåÖÊó†Ê≥ïÈÄöËøá conda Ëé∑ÂæóÔºåËØ∑‰ΩøÁî® pip install„ÄÇ\nÊõ¥Êñ∞ÂåÖÔºö ‰ΩøÁî® conda update package_name Êàñ pip install --upgrade package_name„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠-3",
    "href": "qmd/pandas3ed1cn.html#ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ-Áª≠-3",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)",
    "text": "ÂÆâË£ÖÂøÖË¶ÅÁöÑÂåÖ (Áª≠)\n\n\n\n\n\n\nNote\n\n\n\nÂàõÂª∫ conda ÁéØÂ¢ÉÂ∞±ÂÉè‰∏∫ÊØè‰∏™È°πÁõÆËÆæÁΩÆ‰∏Ä‰∏™ÂçïÁã¨ÁöÑÂ∑•‰ΩúÂå∫„ÄÇÂÆÉÊúâÂä©‰∫éÈÅøÂÖçÂèØËÉΩÈúÄË¶ÅÁõ∏ÂêåÂåÖÁöÑ‰∏çÂêåÁâàÊú¨ÁöÑ‰∏çÂêåÈ°πÁõÆ‰πãÈó¥ÁöÑÂÜ≤Á™Å„ÄÇüè¢"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÈõÜÊàêÂºÄÂèëÁéØÂ¢É-ide-ÂíåÊñáÊú¨ÁºñËæëÂô®",
    "href": "qmd/pandas3ed1cn.html#ÈõÜÊàêÂºÄÂèëÁéØÂ¢É-ide-ÂíåÊñáÊú¨ÁºñËæëÂô®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÊàêÂºÄÂèëÁéØÂ¢É (IDE) ÂíåÊñáÊú¨ÁºñËæëÂô®",
    "text": "ÈõÜÊàêÂºÄÂèëÁéØÂ¢É (IDE) ÂíåÊñáÊú¨ÁºñËæëÂô®\n\n‰ΩúËÄÖÂª∫ËÆÆ‰ΩøÁî® ‚ÄúIPython Âä†‰∏Ä‰∏™ÊñáÊú¨ÁºñËæëÂô®‚Äù„ÄÇ\n‰æõ‰Ω†ÂèÇËÄÉÁöÑ‰∏Ä‰∫õ IDEÔºö\n\nPyDevÔºàÂÖçË¥πÔºâ\nJetBrains ÁöÑ PyCharm\nÁî®‰∫é Visual Studio ÁöÑ Python Â∑•ÂÖ∑\nSpyderÔºàÂÖçË¥πÔºâ\nKomodo IDEÔºàÂïÜ‰∏öÔºâ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Á§æÂå∫Âíå‰ºöËÆÆ",
    "href": "qmd/pandas3ed1cn.html#Á§æÂå∫Âíå‰ºöËÆÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§æÂå∫Âíå‰ºöËÆÆ ü§ù",
    "text": "Á§æÂå∫Âíå‰ºöËÆÆ ü§ù\nÂèÇ‰∏é Python Á§æÂå∫ÊòØÂ≠¶‰π†ÂíåËé∑ÂæóÂ∏ÆÂä©ÁöÑÂ•ΩÊñπÊ≥ï„ÄÇÊúâÁî®ÁöÑËµÑÊ∫êÂåÖÊã¨Ôºö\n\nÈÇÆ‰ª∂ÂàóË°®Ôºö\n\npydataÔºàÈÄöÁî®ÁöÑ Python Êï∞ÊçÆÂàÜÊûêÔºâ\npystatsmodelsÔºàstatsmodels Âíå pandasÔºâ\nscikit-learnÔºàÊú∫Âô®Â≠¶‰π†Ôºâ\nnumpy-discussion\nscipy-user"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#Á§æÂå∫Âíå‰ºöËÆÆ-Áª≠",
    "href": "qmd/pandas3ed1cn.html#Á§æÂå∫Âíå‰ºöËÆÆ-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§æÂå∫Âíå‰ºöËÆÆ (Áª≠)",
    "text": "Á§æÂå∫Âíå‰ºöËÆÆ (Áª≠)\n\n‰ºöËÆÆÔºö\n\nPyCon Âíå EuroPythonÔºàÈÄöÁî®ÁöÑ PythonÔºâ\nSciPy Âíå EuroSciPyÔºàÁßëÂ≠¶ËÆ°ÁÆóÔºâ\nPyDataÔºàÊï∞ÊçÆÁßëÂ≠¶ÂíåÊï∞ÊçÆÂàÜÊûêÔºâ\n\n\n\n\n\n\n\n\nNote\n\n\n\nPython Á§æÂå∫‰ª•ÂÖ∂ÁÉ≠ÊÉÖÂíå‰πê‰∫éÂä©‰∫∫ËÄåÈóªÂêç„ÄÇ‰∏çË¶ÅÁäπË±´ÔºåÊèêÂá∫ÈóÆÈ¢òÂπ∂‰∏éÂÖ∂‰ªñÁî®Êà∑ËÅîÁ≥ªÔºÅü§ó"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶",
    "href": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºËà™Êú¨‰π¶ üó∫Ô∏è",
    "text": "ÂØºËà™Êú¨‰π¶ üó∫Ô∏è\n\nÁ¨¨ 2 Á´†ÂíåÁ¨¨ 3 Á´†Ôºö Python ËØ≠Ë®ÄÁâπÊÄß„ÄÅIPython Âíå Jupyter Notebook ÁöÑÁÆÄÊòéÊïôÁ®ãÔºàÂØπÂàùÂ≠¶ËÄÖËá≥ÂÖ≥ÈáçË¶ÅÔºâ„ÄÇ\nNumPy ÁÆÄ‰ªãÔºö NumPy ÁöÑÁÆÄË¶ÅÊ¶ÇËø∞ÔºåÊõ¥È´òÁ∫ßÁöÑ‰∏ªÈ¢òÂú®ÈôÑÂΩï A ‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶-Áª≠",
    "href": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºËà™Êú¨‰π¶ (Áª≠)",
    "text": "ÂØºËà™Êú¨‰π¶ (Áª≠)\n\npandas ÈáçÁÇπÔºö Êú¨‰π¶ÁöÑÂÖ∂‰ΩôÈÉ®ÂàÜÈáçÁÇπ‰ªãÁªç‰ΩøÁî® pandas„ÄÅNumPy Âíå matplotlib ËøõË°åÊï∞ÊçÆÂàÜÊûê„ÄÇ\nÈÄíÂ¢ûÁªìÊûÑÔºö ÊùêÊñô‰ª•Âæ™Â∫èÊ∏êËøõÁöÑÊñπÂºèÂëàÁé∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºËà™Êú¨‰π¶ (Áª≠)",
    "text": "ÂØºËà™Êú¨‰π¶ (Áª≠)\nÊú¨‰π¶Ê∂µÁõñ‰ª•‰∏ãÂÖ≥ÈîÆÈ¢ÜÂüüÔºö\n\n‰∏éÂ§ñÈÉ®‰∏ñÁïå‰∫§‰∫íÔºö ËØªÂèñÂíåÂÜôÂÖ•Êï∞ÊçÆ„ÄÇ\nÂáÜÂ§áÔºö Ê∏ÖÁêÜ„ÄÅËΩ¨Êç¢ÂíåÈáçÂ°ëÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶-Áª≠-2",
    "href": "qmd/pandas3ed1cn.html#ÂØºËà™Êú¨‰π¶-Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºËà™Êú¨‰π¶ (Áª≠)",
    "text": "ÂØºËà™Êú¨‰π¶ (Áª≠)\n\nËΩ¨Êç¢Ôºö Â∫îÁî®Êï∞Â≠¶ÂíåÁªüËÆ°ËøêÁÆó„ÄÇ\nÂª∫Ê®°ÂíåËÆ°ÁÆóÔºö Â∞ÜÊï∞ÊçÆËøûÊé•Âà∞Ê®°ÂûãÂíåÁÆóÊ≥ï„ÄÇ\nÂ±ïÁ§∫Ôºö ÂàõÂª∫ÂèØËßÜÂåñÂíåÊëòË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰ª£Á†ÅÁ§∫‰æã",
    "href": "qmd/pandas3ed1cn.html#‰ª£Á†ÅÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ª£Á†ÅÁ§∫‰æã",
    "text": "‰ª£Á†ÅÁ§∫‰æã\n\n‰ª£Á†ÅÁ§∫‰æãÂü∫‰∫é IPython shell Êàñ Jupyter notebook„ÄÇ\n‰æãÂ¶ÇÔºö\n\nIn [5]: ‰ª£Á†ÅÁ§∫‰æã\nOut[5]: ËæìÂá∫"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#‰ª£Á†ÅÁ§∫‰æã-Áª≠",
    "href": "qmd/pandas3ed1cn.html#‰ª£Á†ÅÁ§∫‰æã-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ª£Á†ÅÁ§∫‰æã (Áª≠)",
    "text": "‰ª£Á†ÅÁ§∫‰æã (Áª≠)\n\nÂèØÈáçÂ§çÊÄßÔºö Êú¨‰π¶Êèê‰æõ‰∫ÜËÆæÁΩÆÁéØÂ¢É‰ª•ÂåπÈÖçÁ§∫‰æã‰∏≠ÊòæÁ§∫ÁöÑËæìÂá∫ÁöÑËØ¥Êòé„ÄÇ\nÊï∞ÊçÆ: Á§∫‰æãÁöÑÊï∞ÊçÆÈõÜÊâòÁÆ°Âú® GitHubÔºàÊàñÁ†Å‰∫ë GiteeÔºâ‰∏ä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÂØºÂÖ•Á∫¶ÂÆö",
    "href": "qmd/pandas3ed1cn.html#ÂØºÂÖ•Á∫¶ÂÆö",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºÂÖ•Á∫¶ÂÆö",
    "text": "ÂØºÂÖ•Á∫¶ÂÆö\n\nÂ∏∏ËßÅÁöÑÂØºÂÖ•ËØ≠Âè•Ôºö\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statsmodels as sm"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed1cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì üìù",
    "text": "ÊÄªÁªì üìù\n\nÊú¨Á´†‰ªãÁªç‰∫ÜÂ∞ÜÂú®Êï¥Êú¨‰π¶‰∏≠‰ΩøÁî®ÁöÑÊ†∏ÂøÉÊ¶ÇÂøµÂíåÂ∑•ÂÖ∑„ÄÇ\nÊàë‰ª¨‰∫ÜËß£‰∫ÜÊú¨‰π¶ÁöÑËåÉÂõ¥ÔºàÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÁöÑ PythonÔºâ„ÄÅÊï∞ÊçÆÁßëÂ≠¶ÁöÑÂê´‰πâ‰ª•ÂèäÊï∞ÊçÆÊï¥ÁêÜÁöÑÈáçË¶ÅÊÄß„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÊÄªÁªì-Áª≠",
    "href": "qmd/pandas3ed1cn.html#ÊÄªÁªì-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì (Áª≠)",
    "text": "ÊÄªÁªì (Áª≠)\n\nÊàë‰ª¨Êé¢ËÆ®‰∫Ü‰ΩøÁî® Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÁöÑ‰ºòÂäøÔºå‰ª•Âèä‰∏Ä‰∫õÊΩúÂú®ÁöÑÂ±ÄÈôêÊÄß„ÄÇ\nÊàë‰ª¨‰ªãÁªç‰∫ÜÂÖ≥ÈîÆÁöÑ Python Â∫ìÔºöNumPy„ÄÅpandas„ÄÅmatplotlib„ÄÅIPython/Jupyter„ÄÅSciPy„ÄÅscikit-learn Âíå statsmodels„ÄÇ\nÊàë‰ª¨‰ªãÁªç‰∫Ü‰ΩøÁî® Miniconda ÂÆâË£ÖÂíåËÆæÁΩÆ Python ÁéØÂ¢É„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "href": "qmd/pandas3ed1cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ üí≠",
    "text": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ üí≠\n\n‰Ω†ÂØπ Python ‰Ωú‰∏∫Êï∞ÊçÆÂàÜÊûêÂ∑•ÂÖ∑ÁöÑÊúÄÂàùÂç∞Ë±°ÊòØ‰ªÄ‰πàÔºü\n‰Ω†ÊúÄÊÉ≥‰∫ÜËß£Êú¨Á´†‰ªãÁªçÁöÑÂì™‰∫õÂ∫ìÔºü"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫-Áª≠",
    "href": "qmd/pandas3ed1cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ (Áª≠)",
    "text": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ (Áª≠)\n\n‰Ω†ËÉΩÊÉ≥Âà∞‰ªª‰ΩïÊï∞ÊçÆÊï¥ÁêÜÂ∞ÜÊòØÂàÜÊûêËøáÁ®ã‰∏≠ÂÖ≥ÈîÆÊ≠•È™§ÁöÑÁúüÂÆûÁ§∫‰æãÂêóÔºü\n‚ÄúÂèåËØ≠Ë®ÄÈóÆÈ¢ò‚ÄùÁöÑÊ¶ÇÂøµ‰∏é‰Ω†Ëá™Â∑±‰ΩøÁî®Êï∞ÊçÆÂàÜÊûêÊàñËΩØ‰ª∂ÂºÄÂèëÁöÑÁªèÈ™åÔºàÂ¶ÇÊûúÊúâÔºâÊúâ‰ΩïÂÖ≥ËÅîÔºü"
  },
  {
    "objectID": "qmd/pandas3ed1cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫-Áª≠-1",
    "href": "qmd/pandas3ed1cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ (Áª≠)",
    "text": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ (Áª≠)\n\n‰∏∫‰ªÄ‰πà‰∏∫‰∏çÂêåÁöÑ Python È°πÁõÆÂàõÂª∫ÂçïÁã¨ÁöÑÁéØÂ¢ÉÂæàÈáçË¶ÅÔºü\n‰Ω†Êõ¥ÂñúÊ¨¢‰ΩøÁî® IDEÔºåËøòÊòØÊñáÊú¨ÁºñËæëÂô®Âä† IPythonÔºü"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html",
    "href": "qmd/pandas3ed8cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Âú®ËÆ∏Â§öÂ∫îÁî®‰∏≠ÔºåÊï∞ÊçÆÂàÜÊï£Âú®Â§ö‰∏™Êñá‰ª∂ÊàñÊï∞ÊçÆÂ∫ì‰∏≠„ÄÇ\nÊï∞ÊçÆÁöÑÁªÑÁªáÂΩ¢Âºè‰πüÂèØËÉΩ‰∏çÂà©‰∫éÂàÜÊûê„ÄÇ\nÊú¨Á´†ÈáçÁÇπ‰ªãÁªçÁî®‰∫éÊúâÊïàÁªÑÂêà„ÄÅËøûÊé•ÂíåÈáçÊñ∞ÊéíÂàóÊï∞ÊçÆÁöÑÂ∑•ÂÖ∑„ÄÇ\nÂÖ≥ÈîÆÊ¶ÇÂøµÔºöpandas ‰∏≠ÁöÑÂàÜÂ±ÇÁ¥¢Âºï (Hierarchical Indexing)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÂºïË®ÄÊï∞ÊçÆÊï¥ÁêÜ---ËøûÊé•ÂêàÂπ∂ÂíåÈáçÂ°ë",
    "href": "qmd/pandas3ed8cn.html#ÂºïË®ÄÊï∞ÊçÆÊï¥ÁêÜ---ËøûÊé•ÂêàÂπ∂ÂíåÈáçÂ°ë",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Âú®ËÆ∏Â§öÂ∫îÁî®‰∏≠ÔºåÊï∞ÊçÆÂàÜÊï£Âú®Â§ö‰∏™Êñá‰ª∂ÊàñÊï∞ÊçÆÂ∫ì‰∏≠„ÄÇ\nÊï∞ÊçÆÁöÑÁªÑÁªáÂΩ¢Âºè‰πüÂèØËÉΩ‰∏çÂà©‰∫éÂàÜÊûê„ÄÇ\nÊú¨Á´†ÈáçÁÇπ‰ªãÁªçÁî®‰∫éÊúâÊïàÁªÑÂêà„ÄÅËøûÊé•ÂíåÈáçÊñ∞ÊéíÂàóÊï∞ÊçÆÁöÑÂ∑•ÂÖ∑„ÄÇ\nÂÖ≥ÈîÆÊ¶ÇÂøµÔºöpandas ‰∏≠ÁöÑÂàÜÂ±ÇÁ¥¢Âºï (Hierarchical Indexing)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÂºïË®ÄÊï∞ÊçÆÊï¥ÁêÜÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed8cn.html#ÂºïË®ÄÊï∞ÊçÆÊï¥ÁêÜÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂºïË®ÄÔºöÊï∞ÊçÆÊï¥ÁêÜÂèØËßÜÂåñ",
    "text": "ÂºïË®ÄÔºöÊï∞ÊçÆÊï¥ÁêÜÂèØËßÜÂåñ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†",
    "href": "qmd/pandas3ed8cn.html#Êï∞ÊçÆÊï¥ÁêÜÊï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÊï¥ÁêÜ„ÄÅÊï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†",
    "text": "Êï∞ÊçÆÊï¥ÁêÜ„ÄÅÊï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†\n‰ªÄ‰πàÊòØÊï∞ÊçÆÊï¥ÁêÜÔºü\n\nÊï∞ÊçÆÊï¥ÁêÜÔºàÊàñÊï∞ÊçÆÈáçÊï¥ÔºâÊòØÂ∞ÜÊï∞ÊçÆ‰ªé‰∏ÄÁßç‚ÄúÂéüÂßã‚ÄùÊï∞ÊçÆÂΩ¢ÂºèËΩ¨Êç¢ÂíåÊò†Â∞Ñ‰∏∫Âè¶‰∏ÄÁßçÊ†ºÂºèÁöÑËøáÁ®ã„ÄÇ\nÁõÆÁöÑÊòØ‰ΩøÂÖ∂Êõ¥ÈÄÇÂêàÂíåÊúâ‰ª∑ÂÄºÂú∞Áî®‰∫éÂêÑÁßç‰∏ãÊ∏∏ÁõÆÁöÑÔºå‰æãÂ¶ÇÂàÜÊûê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Êï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†",
    "href": "qmd/pandas3ed8cn.html#Êï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†",
    "text": "Êï∞ÊçÆÊåñÊéòÂíåÊú∫Âô®Â≠¶‰π†\n‰ªÄ‰πàÊòØÊï∞ÊçÆÊåñÊéòÔºü\n\nÊï∞ÊçÆÊåñÊéò ÊòØÂú®Â§ßÂûãÊï∞ÊçÆÈõÜ‰∏≠ÂèëÁé∞Ê®°Âºè„ÄÅÂºÇÂ∏∏ÂíåÁõ∏ÂÖ≥ÊÄß‰ª•È¢ÑÊµãÁªìÊûúÁöÑËøáÁ®ã„ÄÇ\n\n‰ªÄ‰πàÊòØÊú∫Âô®Â≠¶‰π†Ôºü\n\nÊú∫Âô®Â≠¶‰π† ÊòØ‰∫∫Â∑•Êô∫ËÉΩÁöÑ‰∏Ä‰∏™Â≠êÈ¢ÜÂüü„ÄÇ\nÂÆÉ‰∏ìÊ≥®‰∫éÂºÄÂèëÂèØ‰ª•‰ªéÊï∞ÊçÆ‰∏≠Â≠¶‰π†Âπ∂Ê†πÊçÆÊï∞ÊçÆÂÅöÂá∫ÂÜ≥Á≠ñ/È¢ÑÊµãÁöÑÁ≥ªÁªü„ÄÇ\nÁõëÁù£Â≠¶‰π†Ôºö‰ΩøÁî®Ê†áËÆ∞Êï∞ÊçÆÈõÜÊù•ËÆ≠ÁªÉÁÆóÊ≥ï„ÄÇ\nÊó†ÁõëÁù£Â≠¶‰π†ÔºöÂú®Êú™Ê†áËÆ∞Êï∞ÊçÆ‰∏≠ÂèëÁé∞ÈöêËóèÊ®°Âºè„ÄÇ\nÂº∫ÂåñÂ≠¶‰π†ÔºöÊô∫ËÉΩ‰ΩìÈÄöËøá‰∏éÁéØÂ¢É‰∫§‰∫íÊù•Â≠¶‰π†„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas-‰∏≠ÁöÑÂàÜÂ±ÇÁ¥¢Âºï",
    "href": "qmd/pandas3ed8cn.html#pandas-‰∏≠ÁöÑÂàÜÂ±ÇÁ¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Pandas ‰∏≠ÁöÑÂàÜÂ±ÇÁ¥¢Âºï",
    "text": "Pandas ‰∏≠ÁöÑÂàÜÂ±ÇÁ¥¢Âºï\n\npandas ÁöÑ‰∏ÄÈ°πÂü∫Êú¨ÂäüËÉΩ„ÄÇ\nÂÖÅËÆ∏Âú®‰∏Ä‰∏™ËΩ¥‰∏äÊã•ÊúâÂ§ö‰∏™Ôºà‰∏§‰∏™ÊàñÊõ¥Â§öÔºâÁ¥¢ÂºïÁ∫ßÂà´„ÄÇ\nÂÖÅËÆ∏‰ª•ËæÉ‰ΩéÁª¥Â∫¶ÁöÑÂΩ¢ÂºèÂ§ÑÁêÜËæÉÈ´òÁª¥Â∫¶ÁöÑÊï∞ÊçÆ„ÄÇ\nÁ±ªÊØîÔºö ÂèØ‰ª•ÊääÂÆÉÊÉ≥Ë±°ÊàêÂú®Êñá‰ª∂Êüú‰∏≠ÔºåÁ±ªÂà´‰∏ãÊúâÂ≠êÁ±ªÂà´„ÄÇüóÑÔ∏è\n‰ºòÁÇπÔºö Êèê‰æõ‰∫Ü‰∏ÄÁßçÁªìÊûÑÂåñÁöÑÊñπÂºèÊù•Ë°®Á§∫ÂíåÊìç‰ΩúÂ§çÊùÇÊï∞ÊçÆÈõÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÂàÜÂ±ÇÁ¥¢ÂºïÁ§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#ÂàÜÂ±ÇÁ¥¢ÂºïÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÂ±ÇÁ¥¢ÂºïÔºöÁ§∫‰æã",
    "text": "ÂàÜÂ±ÇÁ¥¢ÂºïÔºöÁ§∫‰æã\n\nimport pandas as pd  # ÂØºÂÖ• pandas Â∫ìÔºåÂπ∂Â∞ÜÂÖ∂ÁÆÄÁß∞‰∏∫ pd\nimport numpy as np   # ÂØºÂÖ• numpy Â∫ìÔºåÂπ∂Â∞ÜÂÖ∂ÁÆÄÁß∞‰∏∫ np\n\n#| echo: true\ndata = pd.Series(np.random.uniform(size=9),  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 9 ‰∏™ÂùáÂåÄÂàÜÂ∏ÉÈöèÊú∫Êï∞ÁöÑ Series\n                 index=[[\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\"],  # Â§ñÂ±ÇÁ¥¢Âºï\n                        [1, 2, 3, 1, 3, 1, 2, 2, 3]])  # ÂÜÖÂ±ÇÁ¥¢Âºï\ndata  # ÊòæÁ§∫ Series\n\na  1    0.795932\n   2    0.150620\n   3    0.032692\nb  1    0.007630\n   3    0.120960\nc  1    0.986862\n   2    0.368498\nd  2    0.695643\n   3    0.740534\ndtype: float64\n\n\n\nÊàë‰ª¨ÂàõÂª∫‰∫Ü‰∏Ä‰∏™ SeriesÔºåÂÖ∂Á¥¢Âºï‰∏∫ÂàóË°®ÁöÑÂàóË°®„ÄÇ\nËøôÂ∞ÜÂàõÂª∫‰∏Ä‰∏™ MultiIndex ÂØπË±°„ÄÇ\nÁ¥¢ÂºïÊòæÁ§∫‰∏≠ÁöÑ‚ÄúÈó¥Èöô‚ÄùË°®Á§∫‚Äú‰ΩøÁî®Ê≠£‰∏äÊñπÁöÑÊ†áÁ≠æ‚Äù„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÁêÜËß£-multiindex",
    "href": "qmd/pandas3ed8cn.html#ÁêÜËß£-multiindex",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁêÜËß£ MultiIndex",
    "text": "ÁêÜËß£ MultiIndex\n\ndata.index  # ÊòæÁ§∫ Series ÁöÑÁ¥¢Âºï\n\nMultiIndex([('a', 1),\n            ('a', 2),\n            ('a', 3),\n            ('b', 1),\n            ('b', 3),\n            ('c', 1),\n            ('c', 2),\n            ('d', 2),\n            ('d', 3)],\n           )\n\n\n\nMultiIndex ÂØπË±°Ë°®Á§∫ÂàÜÂ±ÇÁ¥¢Âºï„ÄÇ\nÂÆÉÂåÖÂê´ (Â§ñÂ±Ç, ÂÜÖÂ±Ç) ÁöÑÂÖÉÁªÑ„ÄÇ\nËøôÈáåÔºö(‚Äòa‚Äô, 1), (‚Äòa‚Äô, 2), (‚Äòa‚Äô, 3), (‚Äòb‚Äô, 1) ‚Ä¶ Ë°®Á§∫Á¥¢ÂºïÂØπ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÁ¥¢Âºï",
    "href": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÁ¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÉ®ÂàÜÁ¥¢Âºï",
    "text": "ÈÉ®ÂàÜÁ¥¢Âºï\nÊúâ‰∫ÜÂàÜÂ±ÇÁ¥¢ÂºïÔºåÂ∞±ÂèØ‰ª•ËøõË°åÈÉ®ÂàÜÁ¥¢Âºï„ÄÇ ËøôÂÖÅËÆ∏ÁÆÄÊ¥ÅÂú∞ÈÄâÊã©Êï∞ÊçÆÂ≠êÈõÜ„ÄÇ\n\ndata[\"b\"]  # ÈÄâÊã©Á¥¢Âºï‰∏∫ \"b\" ÁöÑÁªÑ\n\n1    0.00763\n3    0.12096\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÁ¥¢ÂºïÁª≠",
    "href": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÁ¥¢ÂºïÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÉ®ÂàÜÁ¥¢ÂºïÔºàÁª≠Ôºâ",
    "text": "ÈÉ®ÂàÜÁ¥¢ÂºïÔºàÁª≠Ôºâ\n\ndata[\"b\":\"c\"]  # ÈÄâÊã©‰ªé \"b\" Âà∞ \"c\" ÁöÑÁªÑÔºàÂåÖÊã¨ \"b\" Âíå \"c\"Ôºâ\n\nb  1    0.007630\n   3    0.120960\nc  1    0.986862\n   2    0.368498\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÁ¥¢ÂºïÁª≠-1",
    "href": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÁ¥¢ÂºïÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÉ®ÂàÜÁ¥¢ÂºïÔºàÁª≠Ôºâ",
    "text": "ÈÉ®ÂàÜÁ¥¢ÂºïÔºàÁª≠Ôºâ\n\ndata.loc[[\"b\", \"d\"]]  # ÈÄâÊã©Á¥¢Âºï‰∏∫ \"b\" Âíå \"d\" ÁöÑÁªÑ\n\nb  1    0.007630\n   3    0.120960\nd  2    0.695643\n   3    0.740534\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#‰ªéÂÜÖÂ±ÇÈÄâÊã©",
    "href": "qmd/pandas3ed8cn.html#‰ªéÂÜÖÂ±ÇÈÄâÊã©",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ªéÂÜÖÂ±ÇÈÄâÊã©",
    "text": "‰ªéÂÜÖÂ±ÇÈÄâÊã©\n\ndata.loc[:, 2]  # ÈÄâÊã©ÂÜÖÂ±ÇÁ¥¢Âºï‰∏∫ 2 ÁöÑÊâÄÊúâÊï∞ÊçÆ\n\na    0.150620\nc    0.368498\nd    0.695643\ndtype: float64\n\n\n\nÊàë‰ª¨‰ΩøÁî® .loc ËøõË°åÂü∫‰∫éÊ†áÁ≠æÁöÑÁ¥¢Âºï„ÄÇ\n: ÈÄâÊã©ÊâÄÊúâÂ§ñÂ±Ç„ÄÇ\n2 ÈÄâÊã©ÂÜÖÂ±ÇÁ¥¢ÂºïÁ≠â‰∫é 2 ÁöÑÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#unstack-Âíå-stack",
    "href": "qmd/pandas3ed8cn.html#unstack-Âíå-stack",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "unstack() Âíå stack()",
    "text": "unstack() Âíå stack()\n\nunstack(): Â∞ÜÊï∞ÊçÆÈáçÂ°ë‰∏∫ DataFrame„ÄÇÂÆÉÂ∞ÜÔºàË°åÔºâÁ¥¢ÂºïÁöÑ‰∏Ä‰∏™Á∫ßÂà´‚ÄúÈÄèËßÜ‚Äù‰∏∫ÂàóÊ†áÁ≠æ„ÄÇ\nstack(): unstack() ÁöÑÈÄÜÊìç‰Ωú„ÄÇÂÆÉÂ∞ÜÂàóÊ†áÁ≠æÈÄèËßÜ‰∏∫ÔºàË°åÔºâMultiIndex ‰∏≠ÁöÑ‰∏Ä‰∏™Á∫ßÂà´„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#unstack-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#unstack-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "unstack() Á§∫‰æã",
    "text": "unstack() Á§∫‰æã\n\ndata.unstack()  # Â∞Ü Series ËΩ¨Êç¢‰∏∫ DataFrameÔºåÂÜÖÂ±ÇÁ¥¢ÂºïÂèò‰∏∫Âàó\n\n\n\n\n\n\n\n\n1\n2\n3\n\n\n\n\na\n0.795932\n0.150620\n0.032692\n\n\nb\n0.007630\nNaN\n0.120960\n\n\nc\n0.986862\n0.368498\nNaN\n\n\nd\nNaN\n0.695643\n0.740534"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#stack-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#stack-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "stack() Á§∫‰æã",
    "text": "stack() Á§∫‰æã\n\ndata.unstack().stack()  # Â∞Ü DataFrame ËΩ¨Êç¢Âõû SeriesÔºåÂàóÂèòÂõûÂÜÖÂ±ÇÁ¥¢Âºï\n\na  1    0.795932\n   2    0.150620\n   3    0.032692\nb  1    0.007630\n   3    0.120960\nc  1    0.986862\n   2    0.368498\nd  2    0.695643\n   3    0.740534\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#dataframe-ÁöÑÂàÜÂ±ÇÁ¥¢Âºï",
    "href": "qmd/pandas3ed8cn.html#dataframe-ÁöÑÂàÜÂ±ÇÁ¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame ÁöÑÂàÜÂ±ÇÁ¥¢Âºï",
    "text": "DataFrame ÁöÑÂàÜÂ±ÇÁ¥¢Âºï\n\nË°åÂíåÂàóÈÉΩÂèØ‰ª•ÊúâÂàÜÂ±ÇÁ¥¢Âºï„ÄÇ\n\n\nframe = pd.DataFrame(np.arange(12).reshape((4, 3)),  # ÂàõÂª∫‰∏Ä‰∏™ 4x3 ÁöÑ DataFrameÔºåÂÄº‰∏∫ 0-11\n                     index=[[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]],  # Ë°åÁ¥¢ÂºïÔºö‰∏§Â±Ç\n                     columns=[[\"Ohio\", \"Ohio\", \"Colorado\"],  # ÂàóÁ¥¢ÂºïÔºö‰∏§Â±Ç\n                              [\"Green\", \"Red\", \"Green\"]])\nframe  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\n\nOhio\nColorado\n\n\n\n\nGreen\nRed\nGreen\n\n\n\n\na\n1\n0\n1\n2\n\n\n2\n3\n4\n5\n\n\nb\n1\n6\n7\n8\n\n\n2\n9\n10\n11\n\n\n\n\n\n\n\n\nËøôÈáåÔºåË°åÂíåÂàóÈÉΩÊúâ‰∏§‰∏™Á∫ßÂà´„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÂëΩÂêçÁ¥¢ÂºïÁ∫ßÂà´",
    "href": "qmd/pandas3ed8cn.html#ÂëΩÂêçÁ¥¢ÂºïÁ∫ßÂà´",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂëΩÂêçÁ¥¢ÂºïÁ∫ßÂà´",
    "text": "ÂëΩÂêçÁ¥¢ÂºïÁ∫ßÂà´\n\nframe.index.names = [\"key1\", \"key2\"]  # ËÆæÁΩÆË°åÁ¥¢ÂºïÁöÑÂêçÁß∞\nframe.columns.names = [\"state\", \"color\"]  # ËÆæÁΩÆÂàóÁ¥¢ÂºïÁöÑÂêçÁß∞\nframe  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey1\nkey2\n\n\n\n\n\n\n\na\n1\n0\n1\n2\n\n\n2\n3\n4\n5\n\n\nb\n1\n6\n7\n8\n\n\n2\n9\n10\n11\n\n\n\n\n\n\n\n\n‰∏∫Á¥¢ÂºïÁ∫ßÂà´ÂëΩÂêçÂèØ‰ª•ÊèêÈ´òÂèØËØªÊÄß„ÄÇ\nframe.index.names Âíå frame.columns.names ËÆæÁΩÆÂêçÁß∞„ÄÇ\n\n\n\n\n\n\n\nNote\n\n\n\nËØ∑Ê≥®ÊÑèÔºåÁ¥¢ÂºïÂêçÁß∞ ‚Äústate‚Äù Âíå ‚Äúcolor‚Äù ‰∏çÊòØË°åÊ†áÁ≠æÔºàframe.index ÂÄºÔºâÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ËÆøÈóÆ-nlevels-Â±ûÊÄß",
    "href": "qmd/pandas3ed8cn.html#ËÆøÈóÆ-nlevels-Â±ûÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËÆøÈóÆ nlevels Â±ûÊÄß",
    "text": "ËÆøÈóÆ nlevels Â±ûÊÄß\n\nframe.index.nlevels #Êü•ÁúãË°åÁ¥¢ÂºïÁöÑÂ±ÇÊï∞\n\n2\n\n\n\nÊÇ®ÂèØ‰ª•ÈÄöËøáËÆøÈóÆÁ¥¢ÂºïÁöÑ nlevels Â±ûÊÄßÊù•Êü•ÁúãÁ¥¢ÂºïÁöÑÂ±ÇÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÂàóÁ¥¢Âºï",
    "href": "qmd/pandas3ed8cn.html#ÈÉ®ÂàÜÂàóÁ¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÉ®ÂàÜÂàóÁ¥¢Âºï",
    "text": "ÈÉ®ÂàÜÂàóÁ¥¢Âºï\nÁ±ª‰ºº‰∫éË°åÁ¥¢ÂºïÔºåÊàë‰ª¨‰πüÂèØ‰ª•ÈÄâÊã©ÂàóÁªÑÔºö\n\nframe[\"Ohio\"]  # ÈÄâÊã©ÂàóÁ¥¢Âºï‰∏∫ \"Ohio\" ÁöÑÁªÑ\n\n\n\n\n\n\n\n\ncolor\nGreen\nRed\n\n\nkey1\nkey2\n\n\n\n\n\n\na\n1\n0\n1\n\n\n2\n3\n4\n\n\nb\n1\n6\n7\n\n\n2\n9\n10"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈáçÊñ∞ÊéíÂ∫èÂíåÊéíÂ∫èÁ∫ßÂà´",
    "href": "qmd/pandas3ed8cn.html#ÈáçÊñ∞ÊéíÂ∫èÂíåÊéíÂ∫èÁ∫ßÂà´",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÊñ∞ÊéíÂ∫èÂíåÊéíÂ∫èÁ∫ßÂà´",
    "text": "ÈáçÊñ∞ÊéíÂ∫èÂíåÊéíÂ∫èÁ∫ßÂà´\n\nswaplevel(): ‰∫§Êç¢‰∏§‰∏™Á∫ßÂà´„ÄÇ\nsort_index(): ‰ΩøÁî®Á¥¢ÂºïÁ∫ßÂà´ÂØπÊï∞ÊçÆËøõË°åÊéíÂ∫è„ÄÇÂèØ‰ª•ÊåâÁâπÂÆöÁ∫ßÂà´ÊéíÂ∫è„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#swaplevel-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#swaplevel-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "swaplevel() Á§∫‰æã",
    "text": "swaplevel() Á§∫‰æã\n\nframe.swaplevel(\"key1\", \"key2\")  # ‰∫§Êç¢Ë°åÁ¥¢ÂºïÁöÑ \"key1\" Âíå \"key2\" Á∫ßÂà´\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey2\nkey1\n\n\n\n\n\n\n\n1\na\n0\n1\n2\n\n\n2\na\n3\n4\n5\n\n\n1\nb\n6\n7\n8\n\n\n2\nb\n9\n10\n11"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#sort_index-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#sort_index-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "sort_index() Á§∫‰æã",
    "text": "sort_index() Á§∫‰æã\n\nframe.sort_index(level=1)  # ÊåâË°åÁ¥¢ÂºïÁöÑÁ¨¨ 1 Á∫ßÔºàkey2ÔºâÊéíÂ∫è\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey1\nkey2\n\n\n\n\n\n\n\na\n1\n0\n1\n2\n\n\nb\n1\n6\n7\n8\n\n\na\n2\n3\n4\n5\n\n\nb\n2\n9\n10\n11"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#swaplevel-Âíå-sort_index-ÁªÑÂêà",
    "href": "qmd/pandas3ed8cn.html#swaplevel-Âíå-sort_index-ÁªÑÂêà",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "swaplevel() Âíå sort_index() ÁªÑÂêà",
    "text": "swaplevel() Âíå sort_index() ÁªÑÂêà\n\nframe.swaplevel(0, 1).sort_index(level=0)  # ÂÖà‰∫§Êç¢Ë°åÁ¥¢ÂºïÁöÑ 0 Âíå 1 Á∫ßÔºåÁÑ∂ÂêéÊåâÁ¨¨ 0 Á∫ßÊéíÂ∫è\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey2\nkey1\n\n\n\n\n\n\n\n1\na\n0\n1\n2\n\n\nb\n6\n7\n8\n\n\n2\na\n3\n4\n5\n\n\nb\n9\n10\n11\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂ¶ÇÊûúÁ¥¢Âºï‰ªéÊúÄÂ§ñÂ±ÇÂºÄÂßãÊåâÂ≠óÂÖ∏È°∫Â∫èÊéíÂ∫èÔºåÂàôÂØπÂàÜÂ±ÇÁ¥¢ÂºïÂØπË±°ËøõË°åÊï∞ÊçÆÈÄâÊã©ÁöÑÊÄßËÉΩ‰ºöÊõ¥Â•Ω„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°",
    "href": "qmd/pandas3ed8cn.html#ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°",
    "text": "ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°\nËÆ∏Â§öÊèèËø∞ÊÄßÂíåÊ±áÊÄªÁªüËÆ°ÈÉΩÊúâ‰∏Ä‰∏™ level ÈÄâÈ°πÔºö\n\nframe.groupby(level=\"key2\").sum()  # ÊåâË°åÁ¥¢ÂºïÁöÑ \"key2\" Á∫ßÂà´ÂàÜÁªÑÔºåÂπ∂ËÆ°ÁÆóÊØèÁªÑÁöÑÂíå\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\ncolor\nGreen\nRed\nGreen\n\n\nkey2\n\n\n\n\n\n\n\n1\n6\n8\n10\n\n\n2\n12\n14\n16"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°ÂàóÁ§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°ÂàóÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°ÔºàÂàóÁ§∫‰æãÔºâ",
    "text": "ÊåâÁ∫ßÂà´ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°ÔºàÂàóÁ§∫‰æãÔºâ\n\nframe.groupby(level=\"color\", axis=\"columns\").sum()  # ÊåâÂàóÁ¥¢ÂºïÁöÑ \"color\" Á∫ßÂà´ÂàÜÁªÑÔºåÂπ∂ËÆ°ÁÆóÊØèÁªÑÁöÑÂíå\n\n/tmp/ipykernel_3081/3495114636.py:1: FutureWarning: DataFrame.groupby with axis=1 is deprecated. Do `frame.T.groupby(...)` without axis instead.\n  frame.groupby(level=\"color\", axis=\"columns\").sum()  # ÊåâÂàóÁ¥¢ÂºïÁöÑ \"color\" Á∫ßÂà´ÂàÜÁªÑÔºåÂπ∂ËÆ°ÁÆóÊØèÁªÑÁöÑÂíå\n\n\n\n\n\n\n\n\n\ncolor\nGreen\nRed\n\n\nkey1\nkey2\n\n\n\n\n\n\na\n1\n2\n1\n\n\n2\n8\n4\n\n\nb\n1\n14\n7\n\n\n2\n20\n10"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#‰ΩøÁî®-dataframe-ÁöÑÂàóËøõË°åÁ¥¢Âºï",
    "href": "qmd/pandas3ed8cn.html#‰ΩøÁî®-dataframe-ÁöÑÂàóËøõË°åÁ¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® DataFrame ÁöÑÂàóËøõË°åÁ¥¢Âºï",
    "text": "‰ΩøÁî® DataFrame ÁöÑÂàóËøõË°åÁ¥¢Âºï\n\nset_index(): ‰ΩøÁî®‰∏Ä‰∏™ÊàñÂ§ö‰∏™Âàó‰Ωú‰∏∫Á¥¢ÂºïÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ DataFrame„ÄÇ\nreset_index(): Â∞ÜÂàÜÂ±ÇÁ¥¢ÂºïÁ∫ßÂà´ÁßªÂä®Âà∞Âàó‰∏≠Ôºà‰∏é set_index() Áõ∏ÂèçÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Á§∫‰æã-dataframe",
    "href": "qmd/pandas3ed8cn.html#Á§∫‰æã-dataframe",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æã DataFrame",
    "text": "Á§∫‰æã DataFrame\n\nframe = pd.DataFrame({\"a\": range(7),  # ÂàõÂª∫‰∏Ä‰∏™ DataFrameÔºåÂàó \"a\" ÁöÑÂÄº‰∏∫ 0-6\n                      \"b\": range(7, 0, -1),  # Âàó \"b\" ÁöÑÂÄº‰∏∫ 7-1\n                      \"c\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n                            \"two\", \"two\"],  # Âàó \"c\" ÁöÑÂÄº‰∏∫Â≠óÁ¨¶‰∏≤\n                      \"d\": [0, 1, 2, 0, 1, 2, 3]})  # Âàó \"d\" ÁöÑÂÄº‰∏∫ 0-3\nframe  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\n\n\n0\n0\n7\none\n0\n\n\n1\n1\n6\none\n1\n\n\n2\n2\n5\none\n2\n\n\n3\n3\n4\ntwo\n0\n\n\n4\n4\n3\ntwo\n1\n\n\n5\n5\n2\ntwo\n2\n\n\n6\n6\n1\ntwo\n3"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#set_index-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#set_index-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "set_index() Á§∫‰æã",
    "text": "set_index() Á§∫‰æã\n\nframe2 = frame.set_index([\"c\", \"d\"])  # ‰ΩøÁî® \"c\" Âíå \"d\" Âàó‰Ωú‰∏∫Á¥¢Âºï\nframe2  # ÊòæÁ§∫Êñ∞ÁöÑ DataFrame\n\n\n\n\n\n\n\n\n\na\nb\n\n\nc\nd\n\n\n\n\n\n\none\n0\n0\n7\n\n\n1\n1\n6\n\n\n2\n2\n5\n\n\ntwo\n0\n3\n4\n\n\n1\n4\n3\n\n\n2\n5\n2\n\n\n3\n6\n1\n\n\n\n\n\n\n\n\nÊàë‰ª¨‰ΩøÁî® ‚Äúc‚Äù Âíå ‚Äúd‚Äù ÂàóÂàõÂª∫‰∏Ä‰∏™ MultiIndex„ÄÇ\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÁî®‰∫éÁ¥¢ÂºïÁöÑÂàó‰ºöË¢´Âà†Èô§„ÄÇ‰ΩøÁî® drop=False Êù•‰øùÁïôÂÆÉ‰ª¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#set_index-‰∏é-dropfalse",
    "href": "qmd/pandas3ed8cn.html#set_index-‰∏é-dropfalse",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "set_index() ‰∏é drop=False",
    "text": "set_index() ‰∏é drop=False\n\nframe.set_index([\"c\", \"d\"], drop=False)  # ‰ΩøÁî® \"c\" Âíå \"d\" Âàó‰Ωú‰∏∫Á¥¢ÂºïÔºåÂπ∂‰øùÁïôËøô‰∫õÂàó\n\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\nc\nd\n\n\n\n\n\n\n\n\none\n0\n0\n7\none\n0\n\n\n1\n1\n6\none\n1\n\n\n2\n2\n5\none\n2\n\n\ntwo\n0\n3\n4\ntwo\n0\n\n\n1\n4\n3\ntwo\n1\n\n\n2\n5\n2\ntwo\n2\n\n\n3\n6\n1\ntwo\n3"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#reset_index-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#reset_index-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "reset_index() Á§∫‰æã",
    "text": "reset_index() Á§∫‰æã\n\nframe2.reset_index()  # Â∞ÜÂàÜÂ±ÇÁ¥¢ÂºïÁßªÂä®Âà∞Âàó‰∏≠ÔºåÂπ∂ÂàõÂª∫‰∏Ä‰∏™ÈªòËÆ§ÁöÑÊï¥Êï∞Á¥¢Âºï\n\n\n\n\n\n\n\n\nc\nd\na\nb\n\n\n\n\n0\none\n0\n0\n7\n\n\n1\none\n1\n1\n6\n\n\n2\none\n2\n2\n5\n\n\n3\ntwo\n0\n3\n4\n\n\n4\ntwo\n1\n4\n3\n\n\n5\ntwo\n2\n5\n2\n\n\n6\ntwo\n3\n6\n1\n\n\n\n\n\n\n\n\nreset_index() Â∞ÜÂàÜÂ±ÇÁ¥¢ÂºïÁßªÂä®Âà∞Âàó‰∏≠„ÄÇ\nÂÆÉÂàõÂª∫‰∏Ä‰∏™ÈªòËÆ§ÁöÑÊï¥Êï∞Á¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÂêàÂπ∂ÂíåÊãºÊé•Êï∞ÊçÆÈõÜ",
    "href": "qmd/pandas3ed8cn.html#ÂêàÂπ∂ÂíåÊãºÊé•Êï∞ÊçÆÈõÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂêàÂπ∂ÂíåÊãºÊé•Êï∞ÊçÆÈõÜ",
    "text": "ÂêàÂπ∂ÂíåÊãºÊé•Êï∞ÊçÆÈõÜ\nÂú® pandas ‰∏≠ÂêàÂπ∂Êï∞ÊçÆÁöÑ‰∏ªË¶Å‰∏âÁßçÊñπÊ≥ïÔºö\n\npandas.merge: Âü∫‰∫éÈîÆÔºàÁ±ª‰ºº‰∫é SQL ËøûÊé•ÔºâËøûÊé• DataFrame ‰∏≠ÁöÑË°å„ÄÇ\npandas.concat: Ê≤øÁùÄËΩ¥ËøûÊé•Êàñ‚ÄúÂ†ÜÂè†‚ÄùÂØπË±°„ÄÇ\ncombine_first: ÊãºÊé•ÈáçÂè†Êï∞ÊçÆÔºàÂ°´ÂÖÖÁº∫Â§±ÂÄºÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Êï∞ÊçÆÂ∫ìÈ£éÊ†ºÁöÑ-dataframe-ËøûÊé•",
    "href": "qmd/pandas3ed8cn.html#Êï∞ÊçÆÂ∫ìÈ£éÊ†ºÁöÑ-dataframe-ËøûÊé•",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÂ∫ìÈ£éÊ†ºÁöÑ DataFrame ËøûÊé•",
    "text": "Êï∞ÊçÆÂ∫ìÈ£éÊ†ºÁöÑ DataFrame ËøûÊé•\n\npandas.merge ÊòØËøûÊé•Êìç‰ΩúÁöÑ‰∏ªË¶ÅÂáΩÊï∞„ÄÇ\nÁ±ª‰ºº‰∫é SQL ËøûÊé•„ÄÇ\nÂÖ≥ÈîÆÊ¶ÇÂøµÔºöÈîÆÔºàÁî®‰∫éÈìæÊé•Ë°åÁöÑÂàóÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.merge-Â§öÂØπ‰∏ÄËøûÊé•ËÆæÁΩÆ",
    "href": "qmd/pandas3ed8cn.html#pandas.merge-Â§öÂØπ‰∏ÄËøûÊé•ËÆæÁΩÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.merge: Â§öÂØπ‰∏ÄËøûÊé•ÔºàËÆæÁΩÆÔºâ",
    "text": "pandas.merge: Â§öÂØπ‰∏ÄËøûÊé•ÔºàËÆæÁΩÆÔºâ\n\ndf1 = pd.DataFrame({\"key\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\"],  # DataFrame 1ÔºåÂåÖÂê´ \"key\" Âàó\n                    \"data1\": pd.Series(range(7), dtype=\"Int64\")})  # Âíå \"data1\" Âàó\ndf2 = pd.DataFrame({\"key\": [\"a\", \"b\", \"d\"],  # DataFrame 2ÔºåÂåÖÂê´ \"key\" Âàó\n                    \"data2\": pd.Series(range(3), dtype=\"Int64\")})  # Âíå \"data2\" Âàó\n\n\ndf1  # ÊòæÁ§∫ df1\n\n\n\n\n\n\n\n\nkey\ndata1\n\n\n\n\n0\nb\n0\n\n\n1\nb\n1\n\n\n2\na\n2\n\n\n3\nc\n3\n\n\n4\na\n4\n\n\n5\na\n5\n\n\n6\nb\n6\n\n\n\n\n\n\n\n\ndf2  # ÊòæÁ§∫ df2\n\n\n\n\n\n\n\n\nkey\ndata2\n\n\n\n\n0\na\n0\n\n\n1\nb\n1\n\n\n2\nd\n2"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.merge-Â§öÂØπ‰∏ÄËøûÊé•Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#pandas.merge-Â§öÂØπ‰∏ÄËøûÊé•Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.merge: Â§öÂØπ‰∏ÄËøûÊé•ÔºàÁ§∫‰æãÔºâ",
    "text": "pandas.merge: Â§öÂØπ‰∏ÄËøûÊé•ÔºàÁ§∫‰æãÔºâ\n\npd.merge(df1, df2)  # ÂêàÂπ∂ df1 Âíå df2ÔºåËá™Âä®‰ΩøÁî® \"key\" Âàó‰Ωú‰∏∫ËøûÊé•ÈîÆ\n# ÊàñËÄÖ pd.merge(df1, df2, on=\"key\")  # ÊòæÂºèÊåáÂÆöËøûÊé•ÈîÆ‰∏∫ \"key\"\n\n\n\n\n\n\n\n\nkey\ndata1\ndata2\n\n\n\n\n0\nb\n0\n1\n\n\n1\nb\n1\n1\n\n\n2\na\n2\n0\n\n\n3\na\n4\n0\n\n\n4\na\n5\n0\n\n\n5\nb\n6\n1\n\n\n\n\n\n\n\n\ndf1 ÊúâÂ§öË°åÊ†áËÆ∞‰∏∫ ‚Äòa‚Äô Âíå ‚Äòb‚Äô„ÄÇ\ndf2 Âú® ‚Äòkey‚Äô Âàó‰∏≠ÊØè‰∏™ÂÄºÂè™Êúâ‰∏ÄË°å„ÄÇ\nÂ¶ÇÊûúÊú™ÊåáÂÆöËøûÊé•ÂàóÔºåmerge Â∞Ü‰ΩøÁî®ÈáçÂè†ÁöÑÂàóÂêç„ÄÇÊúÄ‰Ω≥ÂÅöÊ≥ïÊòØÊòæÂºèÊåáÂÆö„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.merge-‰∏çÂêåÁöÑÂàóÂêç",
    "href": "qmd/pandas3ed8cn.html#pandas.merge-‰∏çÂêåÁöÑÂàóÂêç",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.merge: ‰∏çÂêåÁöÑÂàóÂêç",
    "text": "pandas.merge: ‰∏çÂêåÁöÑÂàóÂêç\nÂ¶ÇÊûúÂàóÂêç‰∏çÂêåÔºåËØ∑ÂàÜÂà´ÊåáÂÆöÂÆÉ‰ª¨Ôºö\n\ndf3 = pd.DataFrame({\"lkey\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\"],  # DataFrame 3ÔºåÂåÖÂê´ \"lkey\" Âàó\n                    \"data1\": pd.Series(range(7), dtype=\"Int64\")})  # Âíå \"data1\" Âàó\ndf4 = pd.DataFrame({\"rkey\": [\"a\", \"b\", \"d\"],  # DataFrame 4ÔºåÂåÖÂê´ \"rkey\" Âàó\n                    \"data2\": pd.Series(range(3), dtype=\"Int64\")})  # Âíå \"data2\" Âàó\npd.merge(df3, df4, left_on=\"lkey\", right_on=\"rkey\")  # ‰ΩøÁî® \"lkey\" Âíå \"rkey\" ‰Ωú‰∏∫ËøûÊé•ÈîÆ\n\n\n\n\n\n\n\n\nlkey\ndata1\nrkey\ndata2\n\n\n\n\n0\nb\n0\nb\n1\n\n\n1\nb\n1\nb\n1\n\n\n2\na\n2\na\n0\n\n\n3\na\n4\na\n0\n\n\n4\na\n5\na\n0\n\n\n5\nb\n6\nb\n1\n\n\n\n\n\n\n\n\nleft_on: Â∑¶‰æß DataFrame ‰∏≠ÁöÑÂàó„ÄÇ\nright_on: Âè≥‰æß DataFrame ‰∏≠ÁöÑÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.merge-ËøûÊé•Á±ªÂûã",
    "href": "qmd/pandas3ed8cn.html#pandas.merge-ËøûÊé•Á±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.merge: ËøûÊé•Á±ªÂûã",
    "text": "pandas.merge: ËøûÊé•Á±ªÂûã\n\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåmerge ÊâßË°å ‚Äúinner‚Äù ËøûÊé•ÔºàÈîÆÁöÑ‰∫§ÈõÜÔºâ„ÄÇ\nÂÖ∂‰ªñËøûÊé•Á±ªÂûãÔºö‚Äúleft‚Äù, ‚Äúright‚Äù, ‚Äúouter‚Äù„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.merge-Â§ñËøûÊé•Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#pandas.merge-Â§ñËøûÊé•Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.merge: Â§ñËøûÊé•Á§∫‰æã",
    "text": "pandas.merge: Â§ñËøûÊé•Á§∫‰æã\n\npd.merge(df1, df2, how=\"outer\")  # ÊâßË°åÂ§ñËøûÊé•ÔºåÂåÖÂê´ÊâÄÊúâÈîÆ\n\n\n\n\n\n\n\n\nkey\ndata1\ndata2\n\n\n\n\n0\na\n2\n0\n\n\n1\na\n4\n0\n\n\n2\na\n5\n0\n\n\n3\nb\n0\n1\n\n\n4\nb\n1\n1\n\n\n5\nb\n6\n1\n\n\n6\nc\n3\n&lt;NA&gt;\n\n\n7\nd\n&lt;NA&gt;\n2\n\n\n\n\n\n\n\n\nÂ§ñËøûÊé•Ôºö ÈîÆÁöÑÂπ∂ÈõÜ„ÄÇ\nÂ∑¶ËøûÊé•Ôºö Â∑¶‰æß DataFrame ‰∏≠ÁöÑÊâÄÊúâÈîÆ„ÄÇ\nÂè≥ËøûÊé•Ôºö Âè≥‰æß DataFrame ‰∏≠ÁöÑÊâÄÊúâÈîÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#‰ΩøÁî®-how-ÂèÇÊï∞ÁöÑËøûÊé•Á±ªÂûã",
    "href": "qmd/pandas3ed8cn.html#‰ΩøÁî®-how-ÂèÇÊï∞ÁöÑËøûÊé•Á±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® how ÂèÇÊï∞ÁöÑËøûÊé•Á±ªÂûã",
    "text": "‰ΩøÁî® how ÂèÇÊï∞ÁöÑËøûÊé•Á±ªÂûã\n\n\n\n\n\n\n\nÈÄâÈ°π\nË°å‰∏∫\n\n\n\n\nhow=\"inner\"\n‰ªÖ‰ΩøÁî®‰∏§‰∏™Ë°®‰∏≠ÈÉΩÂ≠òÂú®ÁöÑÈîÆÁªÑÂêà\n\n\nhow=\"left\"\n‰ΩøÁî®Â∑¶‰æßË°®‰∏≠ÁöÑÊâÄÊúâÈîÆÁªÑÂêà\n\n\nhow=\"right\"\n‰ΩøÁî®Âè≥‰æßË°®‰∏≠ÁöÑÊâÄÊúâÈîÆÁªÑÂêà\n\n\nhow=\"outer\"\n‰ΩøÁî®‰∏§‰∏™Ë°®‰∏≠‰∏ÄËµ∑Â≠òÂú®ÁöÑÊâÄÊúâÈîÆÁªÑÂêà"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.merge-Â§öÂØπÂ§öËøûÊé•",
    "href": "qmd/pandas3ed8cn.html#pandas.merge-Â§öÂØπÂ§öËøûÊé•",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.merge: Â§öÂØπÂ§öËøûÊé•",
    "text": "pandas.merge: Â§öÂØπÂ§öËøûÊé•\n\nÂ§öÂØπÂ§öËøûÊé•ÂΩ¢ÊàêÂåπÈÖçÈîÆÁöÑÁ¨õÂç°Â∞îÁßØ„ÄÇ\n\n\ndf1 = pd.DataFrame({\"key\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"b\"],  # DataFrame 1\n                    \"data1\": pd.Series(range(6), dtype=\"Int64\")})\ndf2 = pd.DataFrame({\"key\": [\"a\", \"b\", \"a\", \"b\", \"d\"],  # DataFrame 2\n                    \"data2\": pd.Series(range(5), dtype=\"Int64\")})\n\npd.merge(df1, df2, on=\"key\", how=\"left\")  # Â∑¶ËøûÊé•\n\n\n\n\n\n\n\n\nkey\ndata1\ndata2\n\n\n\n\n0\nb\n0\n1\n\n\n1\nb\n0\n3\n\n\n2\nb\n1\n1\n\n\n3\nb\n1\n3\n\n\n4\na\n2\n0\n\n\n5\na\n2\n2\n\n\n6\nc\n3\n&lt;NA&gt;\n\n\n7\na\n4\n0\n\n\n8\na\n4\n2\n\n\n9\nb\n5\n1\n\n\n10\nb\n5\n3\n\n\n\n\n\n\n\n\ndf1 ‰∏≠Êúâ‰∏â‰∏™ ‚Äúb‚Äù Ë°åÔºådf2 ‰∏≠Êúâ‰∏§‰∏™ÔºåÂõ†Ê≠§ÁªìÊûú‰∏≠ÊúâÂÖ≠‰∏™ ‚Äúb‚Äù Ë°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#‰ΩøÁî®Â§ö‰∏™ÈîÆÂêàÂπ∂",
    "href": "qmd/pandas3ed8cn.html#‰ΩøÁî®Â§ö‰∏™ÈîÆÂêàÂπ∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®Â§ö‰∏™ÈîÆÂêàÂπ∂",
    "text": "‰ΩøÁî®Â§ö‰∏™ÈîÆÂêàÂπ∂\n‰º†ÈÄí‰∏Ä‰∏™ÂàóÂêçÂàóË°®Ôºö\n\nleft = pd.DataFrame({\"key1\": [\"foo\", \"foo\", \"bar\"],  # Â∑¶‰æß DataFrame\n                     \"key2\": [\"one\", \"two\", \"one\"],\n                     \"lval\": pd.Series([1, 2, 3], dtype='Int64')})\nright = pd.DataFrame({\"key1\": [\"foo\", \"foo\", \"bar\", \"bar\"],  # Âè≥‰æß DataFrame\n                      \"key2\": [\"one\", \"one\", \"one\", \"two\"],\n                      \"rval\": pd.Series([4, 5, 6, 7], dtype='Int64')})\npd.merge(left, right, on=[\"key1\", \"key2\"], how=\"outer\")  # ‰ΩøÁî® \"key1\" Âíå \"key2\" ‰Ωú‰∏∫ËøûÊé•ÈîÆÔºåÊâßË°åÂ§ñËøûÊé•\n\n\n\n\n\n\n\n\nkey1\nkey2\nlval\nrval\n\n\n\n\n0\nbar\none\n3\n6\n\n\n1\nbar\ntwo\n&lt;NA&gt;\n7\n\n\n2\nfoo\none\n1\n4\n\n\n3\nfoo\none\n1\n5\n\n\n4\nfoo\ntwo\n2\n&lt;NA&gt;\n\n\n\n\n\n\n\n\nÂèØ‰ª•Â∞ÜÂ§ö‰∏™ÈîÆËßÜ‰∏∫ÂΩ¢ÊàêÁî®‰ΩúÂçï‰∏™ËøûÊé•ÈîÆÁöÑÂÖÉÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈáçÂè†ÁöÑÂàóÂêç",
    "href": "qmd/pandas3ed8cn.html#ÈáçÂè†ÁöÑÂàóÂêç",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÂè†ÁöÑÂàóÂêç",
    "text": "ÈáçÂè†ÁöÑÂàóÂêç\n\nmerge Êúâ‰∏Ä‰∏™ suffixes ÈÄâÈ°πÊù•Â§ÑÁêÜÈáçÂè†ÁöÑÂàóÂêç„ÄÇ\n\n\npd.merge(left, right, on=\"key1\")  # Ëá™Âä®Ê∑ªÂä†ÂêéÁºÄ \"_x\" Âíå \"_y\"\n\n\n\n\n\n\n\n\nkey1\nkey2_x\nlval\nkey2_y\nrval\n\n\n\n\n0\nfoo\none\n1\none\n4\n\n\n1\nfoo\none\n1\none\n5\n\n\n2\nfoo\ntwo\n2\none\n4\n\n\n3\nfoo\ntwo\n2\none\n5\n\n\n4\nbar\none\n3\none\n6\n\n\n5\nbar\none\n3\ntwo\n7"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈáçÂè†ÁöÑÂàóÂêçsuffixes",
    "href": "qmd/pandas3ed8cn.html#ÈáçÂè†ÁöÑÂàóÂêçsuffixes",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÂè†ÁöÑÂàóÂêçÔºösuffixes",
    "text": "ÈáçÂè†ÁöÑÂàóÂêçÔºösuffixes\n\npd.merge(left, right, on=\"key1\", suffixes=(\"_left\", \"_right\"))  # Ëá™ÂÆö‰πâÂêéÁºÄ\n\n\n\n\n\n\n\n\nkey1\nkey2_left\nlval\nkey2_right\nrval\n\n\n\n\n0\nfoo\none\n1\none\n4\n\n\n1\nfoo\none\n1\none\n5\n\n\n2\nfoo\ntwo\n2\none\n4\n\n\n3\nfoo\ntwo\n2\none\n5\n\n\n4\nbar\none\n3\none\n6\n\n\n5\nbar\none\n3\ntwo\n7"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.merge-ÂáΩÊï∞ÂèÇÊï∞",
    "href": "qmd/pandas3ed8cn.html#pandas.merge-ÂáΩÊï∞ÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.merge ÂáΩÊï∞ÂèÇÊï∞",
    "text": "pandas.merge ÂáΩÊï∞ÂèÇÊï∞\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\nleft\nÂ∑¶‰æßË¶ÅÂêàÂπ∂ÁöÑ DataFrame„ÄÇ\n\n\nright\nÂè≥‰æßË¶ÅÂêàÂπ∂ÁöÑ DataFrame„ÄÇ\n\n\nhow\nËøûÊé•Á±ªÂûãÔºö‚Äúinner‚Äù, ‚Äúouter‚Äù, ‚Äúleft‚Äù, Êàñ ‚Äúright‚ÄùÔºàÈªòËÆ§‰∏∫ ‚Äúinner‚ÄùÔºâ„ÄÇ\n\n\non\nË¶ÅËøûÊé•ÁöÑÂàóÂêçÔºàÂøÖÈ°ªÂú®‰∏§‰∏™ DataFrame ‰∏≠ÈÉΩÂ≠òÂú®Ôºâ„ÄÇ\n\n\nleft_on\nÂ∑¶‰æß DataFrame ‰∏≠Áî®‰ΩúËøûÊé•ÈîÆÁöÑÂàó„ÄÇ\n\n\nright_on\nÁ±ª‰ºº‰∫é left_onÔºåÁî®‰∫éÂè≥‰æß DataFrame„ÄÇ\n\n\nleft_index\n‰ΩøÁî®Â∑¶‰æß DataFrame ÁöÑË°åÁ¥¢Âºï‰Ωú‰∏∫ÂÖ∂ËøûÊé•ÈîÆ„ÄÇ\n\n\nright_index\nÁ±ª‰ºº‰∫é left_index„ÄÇ\n\n\nsort\nÊåâËøûÊé•ÈîÆÂØπÂêàÂπ∂ÂêéÁöÑÊï∞ÊçÆËøõË°åÂ≠óÂÖ∏ÊéíÂ∫èÔºàÈªòËÆ§‰∏∫ FalseÔºâ„ÄÇ\n\n\nsuffixes\nË¶ÅÈôÑÂä†Âà∞ÈáçÂè†ÂàóÂêçÁöÑÂ≠óÁ¨¶‰∏≤ÂÖÉÁªÑÔºàÈªòËÆ§‰∏∫ (‚Äú_x‚Äù, ‚Äú_y‚Äù)Ôºâ„ÄÇ\n\n\ncopy\nÂ¶ÇÊûú‰∏∫ FalseÔºåÂàôÂú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÈÅøÂÖçÂ§çÂà∂Êï∞ÊçÆÔºàÈªòËÆ§‰∏∫Â§çÂà∂Ôºâ„ÄÇ\n\n\nvalidate\nÊ£ÄÊü•ÂêàÂπ∂ÁöÑÁ±ªÂûãÔºà‰∏ÄÂØπ‰∏ÄÔºå‰∏ÄÂØπÂ§öÔºåÂ§öÂØπÂ§öÔºâ\n\n\nindicator\nÊ∑ªÂä†Âêç‰∏∫ _merge ÁöÑÂàóÔºåÊåáÁ§∫ÊØèË°åÁöÑÊù•Ê∫êÔºà‚Äúleft_only‚Äù, ‚Äúright_only‚Äù, ‚Äúboth‚ÄùÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Âü∫‰∫éÁ¥¢ÂºïÂêàÂπ∂",
    "href": "qmd/pandas3ed8cn.html#Âü∫‰∫éÁ¥¢ÂºïÂêàÂπ∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫‰∫éÁ¥¢ÂºïÂêàÂπ∂",
    "text": "Âü∫‰∫éÁ¥¢ÂºïÂêàÂπ∂\n\n‰ΩøÁî® left_index=True Êàñ right_index=TrueÔºàÊàñ‰∏§ËÄÖÔºâÊù•Âü∫‰∫éÁ¥¢ÂºïÂêàÂπ∂„ÄÇ\n\n\nleft1 = pd.DataFrame({\"key\": [\"a\", \"b\", \"a\", \"a\", \"b\", \"c\"],  # Â∑¶‰æß DataFrame\n                      \"value\": pd.Series(range(6), dtype=\"Int64\")})\nright1 = pd.DataFrame({\"group_val\": [3.5, 7]}, index=[\"a\", \"b\"])  # Âè≥‰æß DataFrameÔºå‰ΩøÁî®Á¥¢Âºï\n\npd.merge(left1, right1, left_on=\"key\", right_index=True)  # Â∞Ü left1 ÁöÑ \"key\" Âàó‰∏é right1 ÁöÑÁ¥¢ÂºïÂêàÂπ∂\n\n\n\n\n\n\n\n\nkey\nvalue\ngroup_val\n\n\n\n\n0\na\n0\n3.5\n\n\n1\nb\n1\n7.0\n\n\n2\na\n2\n3.5\n\n\n3\na\n3\n3.5\n\n\n4\nb\n4\n7.0\n\n\n\n\n\n\n\n\nÊàë‰ª¨Â∞Ü left1 ÁöÑ ‚Äúkey‚Äù Âàó‰∏é right1 ÁöÑÁ¥¢ÂºïÂêàÂπ∂„ÄÇ\nleft1ÁöÑÁ¥¢Âºï‰ºöË¢´‰øùÁïô„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÂàÜÂ±ÇÁ¥¢ÂºïÂ§öÈîÆÂêàÂπ∂",
    "href": "qmd/pandas3ed8cn.html#ÂàÜÂ±ÇÁ¥¢ÂºïÂ§öÈîÆÂêàÂπ∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÂ±ÇÁ¥¢ÂºïÔºöÂ§öÈîÆÂêàÂπ∂",
    "text": "ÂàÜÂ±ÇÁ¥¢ÂºïÔºöÂ§öÈîÆÂêàÂπ∂\nÂØπ‰∫éÂàÜÂ±ÇÁ¥¢ÂºïÔºåÂü∫‰∫éÁ¥¢ÂºïËøûÊé•Á±ª‰ºº‰∫éÂ§öÈîÆÂêàÂπ∂Ôºö\n\nlefth = pd.DataFrame({\"key1\": [\"Ohio\", \"Ohio\", \"Ohio\",\n                            \"Nevada\", \"Nevada\"],  # Â∑¶‰æß DataFrame\n                    \"key2\": [2000, 2001, 2002, 2001, 2002],\n                    \"data\": pd.Series(range(5), dtype=\"Int64\")})\nrighth_index = pd.MultiIndex.from_arrays([  # Âè≥‰æß DataFrame ÁöÑ MultiIndex\n    [\"Nevada\", \"Nevada\", \"Ohio\", \"Ohio\", \"Ohio\", \"Ohio\"],\n    [2001, 2000, 2000, 2000, 2001, 2002]\n    ])\nrighth = pd.DataFrame({\"event1\": pd.Series([0, 2, 4, 6, 8, 10], dtype=\"Int64\",\n                                        index=righth_index),  # ‰ΩøÁî® MultiIndex\n                    \"event2\": pd.Series([1, 3, 5, 7, 9, 11], dtype=\"Int64\",\n                                        index=righth_index)})\n\npd.merge(lefth, righth, left_on=[\"key1\", \"key2\"], right_index=True, how=\"outer\")  # Âü∫‰∫éÂ§ö‰∏™ÂàóÂíåÁ¥¢ÂºïÂêàÂπ∂\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata\nevent1\nevent2\n\n\n\n\n4\nNevada\n2000\n&lt;NA&gt;\n2\n3\n\n\n3\nNevada\n2001\n3\n0\n1\n\n\n4\nNevada\n2002\n4\n&lt;NA&gt;\n&lt;NA&gt;\n\n\n0\nOhio\n2000\n0\n4\n5\n\n\n0\nOhio\n2000\n0\n6\n7\n\n\n1\nOhio\n2001\n1\n8\n9\n\n\n2\nOhio\n2002\n2\n10\n11"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#dataframe-ÁöÑ-join-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed8cn.html#dataframe-ÁöÑ-join-ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame ÁöÑ join ÊñπÊ≥ï",
    "text": "DataFrame ÁöÑ join ÊñπÊ≥ï\n\nÁÆÄÂåñ‰∫ÜÂü∫‰∫éÁ¥¢ÂºïÁöÑÂêàÂπ∂„ÄÇ\nÈªòËÆ§ÊâßË°åÂ∑¶ËøûÊé•„ÄÇ\n\n\nleft2 = pd.DataFrame([[1., 2.], [3., 4.], [5., 6.]],\n                     index=[\"a\", \"c\", \"e\"],  # Â∑¶‰æß DataFrame\n                     columns=[\"Ohio\", \"Nevada\"]).astype(\"Int64\")\nright2 = pd.DataFrame([[7., 8.], [9., 10.], [11., 12.], [13, 14]],\n                      index=[\"b\", \"c\", \"d\", \"e\"],  # Âè≥‰æß DataFrame\n                      columns=[\"Missouri\", \"Alabama\"]).astype(\"Int64\")\nleft2.join(right2, how=\"outer\")  # Âü∫‰∫éÁ¥¢ÂºïËøûÊé•\n\n\n\n\n\n\n\n\nOhio\nNevada\nMissouri\nAlabama\n\n\n\n\na\n1\n2\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nb\n&lt;NA&gt;\n&lt;NA&gt;\n7\n8\n\n\nc\n3\n4\n9\n10\n\n\nd\n&lt;NA&gt;\n&lt;NA&gt;\n11\n12\n\n\ne\n5\n6\n13\n14\n\n\n\n\n\n\n\n\nÂèØ‰ª•Âü∫‰∫éË∞ÉÁî® DataFrame ÁöÑÂÖ∂‰∏≠‰∏ÄÂàóËøõË°åËøûÊé•„ÄÇ\nÊîØÊåÅËøûÊé•ÂÖ∑ÊúâÁõ∏‰ººÁ¥¢Âºï‰ΩÜÂàó‰∏çÈáçÂè†ÁöÑÂ§ö‰∏™ DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#join-Âü∫‰∫éÂàó",
    "href": "qmd/pandas3ed8cn.html#join-Âü∫‰∫éÂàó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "join Âü∫‰∫éÂàó",
    "text": "join Âü∫‰∫éÂàó\n\nleft1.join(right1, on=\"key\")  # Â∞Ü left1 ‰∏é right1 Âü∫‰∫é left1 ÁöÑ \"key\" ÂàóËøûÊé•\n\n\n\n\n\n\n\n\nkey\nvalue\ngroup_val\n\n\n\n\n0\na\n0\n3.5\n\n\n1\nb\n1\n7.0\n\n\n2\na\n2\n3.5\n\n\n3\na\n3\n3.5\n\n\n4\nb\n4\n7.0\n\n\n5\nc\n5\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Ê≤øËΩ¥ËøûÊé•",
    "href": "qmd/pandas3ed8cn.html#Ê≤øËΩ¥ËøûÊé•",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≤øËΩ¥ËøûÊé•",
    "text": "Ê≤øËΩ¥ËøûÊé•\n\nnumpy.concatenate: ÈÄÇÁî®‰∫é NumPy Êï∞ÁªÑ„ÄÇ\n\n\narr = np.arange(12).reshape((3, 4))  # ÂàõÂª∫‰∏Ä‰∏™ 3x4 ÁöÑÊï∞ÁªÑ\nnp.concatenate([arr, arr], axis=1)  # Ê≤øÁùÄÂàóËøûÊé•\n\narray([[ 0,  1,  2,  3,  0,  1,  2,  3],\n       [ 4,  5,  6,  7,  4,  5,  6,  7],\n       [ 8,  9, 10, 11,  8,  9, 10, 11]])\n\n\n\npandas.concat: Ëß£ÂÜ≥‰ª•‰∏ãÈóÆÈ¢òÔºö\n\nÂ§ÑÁêÜ‰∏çÂêåÁöÑÁ¥¢Âºï„ÄÇ\nËØÜÂà´ËøûÊé•ÁöÑÂùó„ÄÇ\n‰øùÁïôÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.concat-‰∏é-series",
    "href": "qmd/pandas3ed8cn.html#pandas.concat-‰∏é-series",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.concat ‰∏é Series",
    "text": "pandas.concat ‰∏é Series\n\ns1 = pd.Series([0, 1], index=[\"a\", \"b\"], dtype=\"Int64\")  # Series 1\ns2 = pd.Series([2, 3, 4], index=[\"c\", \"d\", \"e\"], dtype=\"Int64\")  # Series 2\ns3 = pd.Series([5, 6], index=[\"f\", \"g\"], dtype=\"Int64\")  # Series 3\npd.concat([s1, s2, s3])  # Ê≤øÁùÄË°åËøûÊé• Series\n\na    0\nb    1\nc    2\nd    3\ne    4\nf    5\ng    6\ndtype: Int64\n\n\n\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåconcat Ê≤øÁùÄ axis=\"index\"ÔºàË°åÔºâÂ∑•‰ΩúÔºåÁîüÊàêÂè¶‰∏Ä‰∏™ Series„ÄÇ\nÂ∞ÜÂÄºÂíåÁ¥¢ÂºïÁ≤òÂêàÂú®‰∏ÄËµ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.concat-axiscolumns",
    "href": "qmd/pandas3ed8cn.html#pandas.concat-axiscolumns",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.concat: axis=\"columns\"",
    "text": "pandas.concat: axis=\"columns\"\n\npd.concat([s1, s2, s3], axis=\"columns\")  # Ê≤øÁùÄÂàóËøûÊé• SeriesÔºåÁîüÊàê DataFrame\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\na\n0\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nb\n1\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nc\n&lt;NA&gt;\n2\n&lt;NA&gt;\n\n\nd\n&lt;NA&gt;\n3\n&lt;NA&gt;\n\n\ne\n&lt;NA&gt;\n4\n&lt;NA&gt;\n\n\nf\n&lt;NA&gt;\n&lt;NA&gt;\n5\n\n\ng\n&lt;NA&gt;\n&lt;NA&gt;\n6\n\n\n\n\n\n\n\n\naxis=\"columns\" ÁîüÊàê‰∏Ä‰∏™ DataFrame„ÄÇ\nÁªìÊûúÊòØÁ¥¢ÂºïÁöÑÂπ∂ÈõÜÔºàÂ§ñËøûÊé•Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.concat-joininner",
    "href": "qmd/pandas3ed8cn.html#pandas.concat-joininner",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.concat: join=\"inner\"",
    "text": "pandas.concat: join=\"inner\"\n\ns4 = pd.concat([s1, s3])  # ËøûÊé• s1 Âíå s3\npd.concat([s1, s4], axis=\"columns\", join=\"inner\")  # Ê≤øÁùÄÂàóËøûÊé• s1 Âíå s4ÔºåÊâßË°åÂÜÖËøûÊé•\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\na\n0\n0\n\n\nb\n1\n1\n\n\n\n\n\n\n\n\njoin=\"inner\" ÂØπÁ¥¢ÂºïÊâßË°å‰∫§ÈõÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.concat-keys-ÂèÇÊï∞",
    "href": "qmd/pandas3ed8cn.html#pandas.concat-keys-ÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.concat: keys ÂèÇÊï∞",
    "text": "pandas.concat: keys ÂèÇÊï∞\n\nresult = pd.concat([s1, s1, s3], keys=[\"one\", \"two\", \"three\"])  # ËøûÊé•Âπ∂ÂàõÂª∫ÂàÜÂ±ÇÁ¥¢Âºï\nresult  # ÊòæÁ§∫ÁªìÊûú\n\none    a    0\n       b    1\ntwo    a    0\n       b    1\nthree  f    5\n       g    6\ndtype: Int64"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#unstack-ÁªìÊûú",
    "href": "qmd/pandas3ed8cn.html#unstack-ÁªìÊûú",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "unstack() ÁªìÊûú",
    "text": "unstack() ÁªìÊûú\n\nresult.unstack()  # Â∞ÜÁªìÊûúËΩ¨Êç¢‰∏∫ DataFrame\n\n\n\n\n\n\n\n\na\nb\nf\ng\n\n\n\n\none\n0\n1\n&lt;NA&gt;\n&lt;NA&gt;\n\n\ntwo\n0\n1\n&lt;NA&gt;\n&lt;NA&gt;\n\n\nthree\n&lt;NA&gt;\n&lt;NA&gt;\n5\n6\n\n\n\n\n\n\n\n\nkeys ÂàõÂª∫‰∏Ä‰∏™ÂàÜÂ±ÇÁ¥¢Âºï„ÄÇÊ†áËØÜËøûÊé•ÁöÑÂùó„ÄÇ\nÂΩìÊ≤øÁùÄ axis=\"columns\" ËøûÊé•Êó∂Ôºåkeys Êàê‰∏∫ DataFrame ÂàóÊ†áÈ¢ò„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.concat-‰∏é-dataframe",
    "href": "qmd/pandas3ed8cn.html#pandas.concat-‰∏é-dataframe",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.concat ‰∏é DataFrame",
    "text": "pandas.concat ‰∏é DataFrame\nÈÄªËæë‰∏é Series Áõ∏ÂêåÔºö\n\ndf1 = pd.DataFrame(np.arange(6).reshape(3, 2), index=[\"a\", \"b\", \"c\"],  # DataFrame 1\n                   columns=[\"one\", \"two\"])\ndf2 = pd.DataFrame(5 + np.arange(4).reshape(2, 2), index=[\"a\", \"c\"],  # DataFrame 2\n                   columns=[\"three\", \"four\"])\npd.concat([df1, df2], axis=\"columns\", keys=[\"level1\", \"level2\"])  # Ê≤øÁùÄÂàóËøûÊé•ÔºåÂπ∂‰ΩøÁî® keys ‰Ωú‰∏∫ÂàóÊ†áÈ¢ò\n\n\n\n\n\n\n\n\nlevel1\nlevel2\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\na\n0\n1\n5.0\n6.0\n\n\nb\n2\n3\nNaN\nNaN\n\n\nc\n4\n5\n7.0\n8.0\n\n\n\n\n\n\n\n\nÊÇ®ÂèØ‰ª•‰ΩøÁî® names ÂèÇÊï∞ÂëΩÂêçÂàõÂª∫ÁöÑËΩ¥Á∫ßÂà´„ÄÇ\nÂ¶ÇÊûúË°åÁ¥¢Âºï‰∏çÂåÖÂê´Áõ∏ÂÖ≥Êï∞ÊçÆÔºåËØ∑‰ΩøÁî® ignore_index=True„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.concat-ÂáΩÊï∞ÂèÇÊï∞",
    "href": "qmd/pandas3ed8cn.html#pandas.concat-ÂáΩÊï∞ÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.concat ÂáΩÊï∞ÂèÇÊï∞",
    "text": "pandas.concat ÂáΩÊï∞ÂèÇÊï∞\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\nobjs\nË¶ÅËøûÊé•ÁöÑ pandas ÂØπË±°ÂàóË°®ÊàñÂ≠óÂÖ∏ÔºàÂøÖÈúÄÔºâ„ÄÇ\n\n\naxis\nË¶ÅËøûÊé•ÁöÑËΩ¥ÔºàÈªòËÆ§‰∏∫ ‚Äúindex‚ÄùÔºâ„ÄÇ\n\n\njoin\n‚Äúinner‚Äù Êàñ ‚Äúouter‚ÄùÔºàÈªòËÆ§‰∏∫ ‚Äúouter‚ÄùÔºâ„ÄÇ\n\n\nkeys\n‰∏éË¶ÅËøûÊé•ÁöÑÂØπË±°ÂÖ≥ËÅîÁöÑÂÄºÔºåÂΩ¢Êàê‰∏Ä‰∏™ÂàÜÂ±ÇÁ¥¢Âºï„ÄÇ\n\n\nlevels\nÁî®‰ΩúÂàÜÂ±ÇÁ¥¢ÂºïÁ∫ßÂà´ÁöÑÁâπÂÆöÁ¥¢Âºï„ÄÇ\n\n\nnames\nÂàõÂª∫ÁöÑÂàÜÂ±ÇÁ∫ßÂà´ÁöÑÂêçÁß∞„ÄÇ\n\n\nverify_integrity\nÊ£ÄÊü•Êñ∞ËΩ¥ÊòØÂê¶ÊúâÈáçÂ§çÈ°πÔºåÂ¶ÇÊûúÊúâÂàôÂºïÂèëÂºÇÂ∏∏ÔºàÈªòËÆ§‰∏∫ FalseÔºâ„ÄÇ\n\n\nignore_index\n‰∏ç‰øùÁïôÁ¥¢ÂºïÔºõÁîüÊàê‰∏Ä‰∏™Êñ∞ÁöÑ range(total_length) Á¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÂêàÂπ∂ÈáçÂè†Êï∞ÊçÆ",
    "href": "qmd/pandas3ed8cn.html#ÂêàÂπ∂ÈáçÂè†Êï∞ÊçÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂêàÂπ∂ÈáçÂè†Êï∞ÊçÆ",
    "text": "ÂêàÂπ∂ÈáçÂè†Êï∞ÊçÆ\n\nnumpy.where: ÊâßË°åÈù¢ÂêëÊï∞ÁªÑÁöÑ if-else Êìç‰Ωú„ÄÇ\n\n\na = pd.Series([np.nan, 2.5, 0.0, 3.5, 4.5, np.nan],  # Series aÔºåÂåÖÂê´ NaN ÂÄº\n              index=[\"f\", \"e\", \"d\", \"c\", \"b\", \"a\"])\nb = pd.Series([0., np.nan, 2., np.nan, np.nan, 5.],  # Series bÔºåÂåÖÂê´ NaN ÂÄº\n              index=[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\nnp.where(pd.isna(a), b, a)  # Â¶ÇÊûú a ‰∏≠Êúâ NaNÔºåÂàô‰ΩøÁî® b ‰∏≠ÁöÑÂÄºÔºåÂê¶Âàô‰ΩøÁî® a ‰∏≠ÁöÑÂÄº\n\narray([0. , 2.5, 0. , 3.5, 4.5, 5. ])"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#series.combine_first",
    "href": "qmd/pandas3ed8cn.html#series.combine_first",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Series.combine_first",
    "text": "Series.combine_first\n\nSeries.combine_first: ÊåâÁ¥¢ÂºïÂØπÈΩêÂÄºÂπ∂‚Äú‰øÆË°•‚ÄùÁº∫Â§±Êï∞ÊçÆ„ÄÇ\n\n\na.combine_first(b)  # ‰ΩøÁî® b ‰∏≠ÁöÑÂÄºÂ°´ÂÖÖ a ‰∏≠ÁöÑ NaN ÂÄºÔºåÊåâÁ¥¢ÂºïÂØπÈΩê\n\na    0.0\nb    4.5\nc    3.5\nd    0.0\ne    2.5\nf    5.0\ndtype: float64\n\n\n\ncombine_first ÊåâÁ¥¢ÂºïÂØπÈΩêÔºà‰∏é np.where ‰∏çÂêåÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#combine_first-‰∏é-dataframe",
    "href": "qmd/pandas3ed8cn.html#combine_first-‰∏é-dataframe",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "combine_first ‰∏é DataFrame",
    "text": "combine_first ‰∏é DataFrame\n\ncombine_first ÈÄêÂàóÂ∑•‰Ωú„ÄÇ\nÂÆÉ‰ΩøÁî®‰º†ÈÄíÂØπË±°‰∏≠ÁöÑÊï∞ÊçÆ‚Äú‰øÆË°•‚ÄùË∞ÉÁî®ÂØπË±°‰∏≠ÁöÑÁº∫Â§±Êï∞ÊçÆ„ÄÇ\n\n\ndf1 = pd.DataFrame({\"a\": [1., np.nan, 5., np.nan],  # DataFrame 1ÔºåÂåÖÂê´ NaN ÂÄº\n                    \"b\": [np.nan, 2., np.nan, 6.],\n                    \"c\": range(2, 18, 4)})\ndf2 = pd.DataFrame({\"a\": [5., 4., np.nan, 3., 7.],  # DataFrame 2ÔºåÂåÖÂê´ NaN ÂÄº\n                    \"b\": [np.nan, 3., 4., 6., 8.]})\ndf1.combine_first(df2)  # ‰ΩøÁî® df2 ‰∏≠ÁöÑÂÄºÂ°´ÂÖÖ df1 ‰∏≠ÁöÑ NaN ÂÄºÔºåÈÄêÂàóËøõË°å\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\n1.0\nNaN\n2.0\n\n\n1\n4.0\n2.0\n6.0\n\n\n2\n5.0\n4.0\n10.0\n\n\n3\n3.0\n6.0\n14.0\n\n\n4\n7.0\n8.0\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÈáçÂ°ëÂíåÈÄèËßÜ",
    "href": "qmd/pandas3ed8cn.html#ÈáçÂ°ëÂíåÈÄèËßÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÂ°ëÂíåÈÄèËßÜ",
    "text": "ÈáçÂ°ëÂíåÈÄèËßÜ\n\nÈáçÂ°ë/ÈÄèËßÜÊìç‰ΩúÔºö ÈáçÊñ∞ÊéíÂàóË°®Ê†ºÊï∞ÊçÆ„ÄÇ\nÂàÜÂ±ÇÁ¥¢Âºï Êèê‰æõ‰∫Ü‰∏ÄÁßç‰∏ÄËá¥ÁöÑÊñπÂºèÊù•ÈáçÂ°ë„ÄÇ\n‰∏§‰∏™‰∏ªË¶ÅÊìç‰ΩúÔºö\n\nstack: Â∞ÜÂàó‚ÄúÊóãËΩ¨‚ÄùÊàñÈÄèËßÜÂà∞Ë°å„ÄÇ\nunstack: Â∞ÜË°åÈÄèËßÜÂà∞Âàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#stack-Âíå-unstack-Á§∫‰æã-dataframe",
    "href": "qmd/pandas3ed8cn.html#stack-Âíå-unstack-Á§∫‰æã-dataframe",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "stack Âíå unstack: Á§∫‰æã DataFrame",
    "text": "stack Âíå unstack: Á§∫‰æã DataFrame\n\ndata = pd.DataFrame(np.arange(6).reshape((2, 3)),  # ÂàõÂª∫‰∏Ä‰∏™ 2x3 ÁöÑ DataFrame\n                    index=pd.Index([\"Ohio\", \"Colorado\"], name=\"state\"),  # Ë°åÁ¥¢ÂºïÔºåÂêç‰∏∫ \"state\"\n                    columns=pd.Index([\"one\", \"two\", \"three\"],\n                    name=\"number\"))  # ÂàóÁ¥¢ÂºïÔºåÂêç‰∏∫ \"number\"\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\nnumber\none\ntwo\nthree\n\n\nstate\n\n\n\n\n\n\n\nOhio\n0\n1\n2\n\n\nColorado\n3\n4\n5"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#stack-Á§∫‰æã-1",
    "href": "qmd/pandas3ed8cn.html#stack-Á§∫‰æã-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "stack Á§∫‰æã",
    "text": "stack Á§∫‰æã\n\nresult = data.stack()  # Â∞Ü DataFrame ËΩ¨Êç¢‰∏∫ SeriesÔºåÂàóÁ¥¢ÂºïÂèò‰∏∫ÂÜÖÂ±ÇË°åÁ¥¢Âºï\nresult  # ÊòæÁ§∫ Series\n\nstate     number\nOhio      one       0\n          two       1\n          three     2\nColorado  one       3\n          two       4\n          three     5\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#unstack-Á§∫‰æã-1",
    "href": "qmd/pandas3ed8cn.html#unstack-Á§∫‰æã-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "unstack Á§∫‰æã",
    "text": "unstack Á§∫‰æã\n\nresult.unstack()  # Â∞Ü Series ËΩ¨Êç¢Âõû DataFrameÔºåÂÜÖÂ±ÇË°åÁ¥¢ÂºïÂèò‰∏∫ÂàóÁ¥¢Âºï\n\n\n\n\n\n\n\nnumber\none\ntwo\nthree\n\n\nstate\n\n\n\n\n\n\n\nOhio\n0\n1\n2\n\n\nColorado\n3\n4\n5"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#unstack-‰∏é‰∏çÂêåÁöÑÁ∫ßÂà´",
    "href": "qmd/pandas3ed8cn.html#unstack-‰∏é‰∏çÂêåÁöÑÁ∫ßÂà´",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "unstack ‰∏é‰∏çÂêåÁöÑÁ∫ßÂà´",
    "text": "unstack ‰∏é‰∏çÂêåÁöÑÁ∫ßÂà´\n\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÊúÄÂÜÖÂ±ÇË¢´ unstacked„ÄÇ\nÈÄöËøáÊï∞Â≠óÊàñÂêçÁß∞ÊåáÂÆö‰∏çÂêåÁöÑÁ∫ßÂà´„ÄÇ\n\n\nresult.unstack(level=0)  # Â∞ÜÂ§ñÂ±ÇË°åÁ¥¢ÂºïÔºà\"state\"Ôºâunstack Âà∞Âàó\n# Êàñ result.unstack(\"state\")  # ‰ΩøÁî®ÂêçÁß∞ÊåáÂÆöË¶Å unstack ÁöÑÁ∫ßÂà´\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\nnumber\n\n\n\n\n\n\none\n0\n3\n\n\ntwo\n1\n4\n\n\nthree\n2\n5\n\n\n\n\n\n\n\n\nUnstacking ÂèØËÉΩ‰ºöÂºïÂÖ•Áº∫Â§±Êï∞ÊçÆ„ÄÇ\nStacking ÈªòËÆ§‰ºöËøáÊª§ÊéâÁº∫Â§±Êï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#stacking-‰∏é-dropnafalse",
    "href": "qmd/pandas3ed8cn.html#stacking-‰∏é-dropnafalse",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Stacking ‰∏é dropna=False",
    "text": "Stacking ‰∏é dropna=False\n\ns1 = pd.Series([0, 1, 2, 3], index=[\"a\", \"b\", \"c\", \"d\"], dtype=\"Int64\")  # Series 1\ns2 = pd.Series([4, 5, 6], index=[\"c\", \"d\", \"e\"], dtype=\"Int64\")  # Series 2\ndata2 = pd.concat([s1, s2], keys=[\"one\", \"two\"])  # ËøûÊé• s1 Âíå s2ÔºåÂπ∂ÂàõÂª∫ÂàÜÂ±ÇÁ¥¢Âºï\ndata2.unstack().stack(dropna=False)  # ÂÖà unstackÔºåÂÜç stackÔºåÂπ∂‰øùÁïô NaN ÂÄº\n\n/tmp/ipykernel_3081/2880782399.py:4: FutureWarning: The previous implementation of stack is deprecated and will be removed in a future version of pandas. See the What's New notes for pandas 2.1.0 for details. Specify future_stack=True to adopt the new implementation and silence this warning.\n  data2.unstack().stack(dropna=False)  # ÂÖà unstackÔºåÂÜç stackÔºåÂπ∂‰øùÁïô NaN ÂÄº\n\n\none  a       0\n     b       1\n     c       2\n     d       3\n     e    &lt;NA&gt;\ntwo  a    &lt;NA&gt;\n     b    &lt;NA&gt;\n     c       4\n     d       5\n     e       6\ndtype: Int64"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#dataframe-‰∏≠ÁöÑ-unstack",
    "href": "qmd/pandas3ed8cn.html#dataframe-‰∏≠ÁöÑ-unstack",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame ‰∏≠ÁöÑ unstack",
    "text": "DataFrame ‰∏≠ÁöÑ unstack\nÂú® DataFrame ‰∏≠ unstacking Êó∂Ôºåunstacked ÁöÑÁ∫ßÂà´Â∞ÜÊàê‰∏∫ÊúÄ‰ΩéÁ∫ßÂà´„ÄÇ\n\ndf = pd.DataFrame({\"left\": result, \"right\": result + 5},  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\n                  columns=pd.Index([\"left\", \"right\"], name=\"side\"))  # ÂàóÁ¥¢ÂºïÔºåÂêç‰∏∫ \"side\"\ndf  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nside\nleft\nright\n\n\nstate\nnumber\n\n\n\n\n\n\nOhio\none\n0\n5\n\n\ntwo\n1\n6\n\n\nthree\n2\n7\n\n\nColorado\none\n3\n8\n\n\ntwo\n4\n9\n\n\nthree\n5\n10"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#unstack-Âíå-stack-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#unstack-Âíå-stack-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "unstack Âíå stack Á§∫‰æã",
    "text": "unstack Âíå stack Á§∫‰æã\n\ndf.unstack(level=\"state\").stack(level=\"side\")  # ÂÖàÊåâ \"state\" Á∫ßÂà´ unstackÔºåÂÜçÊåâ \"side\" Á∫ßÂà´ stack\n\n/tmp/ipykernel_3081/502097185.py:1: FutureWarning: The previous implementation of stack is deprecated and will be removed in a future version of pandas. See the What's New notes for pandas 2.1.0 for details. Specify future_stack=True to adopt the new implementation and silence this warning.\n  df.unstack(level=\"state\").stack(level=\"side\")  # ÂÖàÊåâ \"state\" Á∫ßÂà´ unstackÔºåÂÜçÊåâ \"side\" Á∫ßÂà´ stack\n\n\n\n\n\n\n\n\n\nstate\nOhio\nColorado\n\n\nnumber\nside\n\n\n\n\n\n\none\nleft\n0\n3\n\n\nright\n5\n8\n\n\ntwo\nleft\n1\n4\n\n\nright\n6\n9\n\n\nthree\nleft\n2\n5\n\n\nright\n7\n10"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Â∞ÜÈïøÊ†ºÂºèÈÄèËßÜ‰∏∫ÂÆΩÊ†ºÂºè",
    "href": "qmd/pandas3ed8cn.html#Â∞ÜÈïøÊ†ºÂºèÈÄèËßÜ‰∏∫ÂÆΩÊ†ºÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞Ü‚ÄúÈïø‚ÄùÊ†ºÂºèÈÄèËßÜ‰∏∫‚ÄúÂÆΩ‚ÄùÊ†ºÂºè",
    "text": "Â∞Ü‚ÄúÈïø‚ÄùÊ†ºÂºèÈÄèËßÜ‰∏∫‚ÄúÂÆΩ‚ÄùÊ†ºÂºè\n\nÈïø/Â†ÜÂè†Ê†ºÂºèÔºö Â∏∏Áî®‰∫éÂ≠òÂÇ®Â§ö‰∏™Êó∂Èó¥Â∫èÂàó„ÄÇÊØèË°åÊòØ‰∏Ä‰∏™ËßÇÂØüÂÄº„ÄÇ\nÂÆΩÊ†ºÂºèÔºö ÊØè‰∏™ÂèòÈáèÈÉΩÊúâËá™Â∑±ÁöÑÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Á§∫‰æãÈïøÊ†ºÂºèÊï∞ÊçÆ",
    "href": "qmd/pandas3ed8cn.html#Á§∫‰æãÈïøÊ†ºÂºèÊï∞ÊçÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÈïøÊ†ºÂºèÊï∞ÊçÆ",
    "text": "Á§∫‰æãÔºöÈïøÊ†ºÂºèÊï∞ÊçÆ\n\ndata = pd.read_csv(\"examples/macrodata.csv\")  # ‰ªé CSV Êñá‰ª∂ËØªÂèñÊï∞ÊçÆ\ndata = data.loc[:, [\"year\", \"quarter\", \"realgdp\", \"infl\", \"unemp\"]]  # ÈÄâÊã©ÁâπÂÆöÁöÑÂàó\nperiods = pd.PeriodIndex(year=data.pop(\"year\"),  # ÂàõÂª∫‰∏Ä‰∏™ PeriodIndex\n                        quarter=data.pop(\"quarter\"),\n                        name=\"date\")\ndata.index = periods.to_timestamp(\"D\")  # Â∞Ü PeriodIndex ËΩ¨Êç¢‰∏∫ TimestampÔºåÂπ∂ËÆæÁΩÆ‰∏∫Á¥¢Âºï\ndata = data.reindex(columns=[\"realgdp\", \"infl\", \"unemp\"])  # ÈáçÊñ∞ËÆæÁΩÆÂàóÁöÑÈ°∫Â∫è\ndata.columns.name = \"item\"  # ËÆæÁΩÆÂàóÁ¥¢ÂºïÁöÑÂêçÁß∞\nlong_data = (data.stack()  # Â∞Ü DataFrame ËΩ¨Êç¢‰∏∫ Series\n                .reset_index()  # ÈáçÁΩÆÁ¥¢Âºï\n                .rename(columns={0: \"value\"}))  # ÈáçÂëΩÂêçÂàó\nlong_data[:10]  # ÊòæÁ§∫Ââç 10 Ë°å\n\n/tmp/ipykernel_3081/3021466504.py:3: FutureWarning: Constructing PeriodIndex from fields is deprecated. Use PeriodIndex.from_fields instead.\n  periods = pd.PeriodIndex(year=data.pop(\"year\"),  # ÂàõÂª∫‰∏Ä‰∏™ PeriodIndex\n\n\n\n\n\n\n\n\n\ndate\nitem\nvalue\n\n\n\n\n0\n1959-01-01\nrealgdp\n2710.349\n\n\n1\n1959-01-01\ninfl\n0.000\n\n\n2\n1959-01-01\nunemp\n5.800\n\n\n3\n1959-04-01\nrealgdp\n2778.801\n\n\n4\n1959-04-01\ninfl\n2.340\n\n\n5\n1959-04-01\nunemp\n5.100\n\n\n6\n1959-07-01\nrealgdp\n2775.488\n\n\n7\n1959-07-01\ninfl\n2.740\n\n\n8\n1959-07-01\nunemp\n5.300\n\n\n9\n1959-10-01\nrealgdp\n2785.204"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pivot-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed8cn.html#pivot-ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pivot ÊñπÊ≥ï",
    "text": "pivot ÊñπÊ≥ï\npivot ÊñπÊ≥ïÂ∞ÜÈïøÊ†ºÂºèËΩ¨Êç¢‰∏∫ÂÆΩÊ†ºÂºè„ÄÇ\n\npivoted = long_data.pivot(index=\"date\", columns=\"item\",\n                          values=\"value\")  # Â∞ÜÈïøÊ†ºÂºèÊï∞ÊçÆÈÄèËßÜ‰∏∫ÂÆΩÊ†ºÂºè\npivoted.head()  # ÊòæÁ§∫ÂâçÂá†Ë°å\n\n\n\n\n\n\n\nitem\ninfl\nrealgdp\nunemp\n\n\ndate\n\n\n\n\n\n\n\n1959-01-01\n0.00\n2710.349\n5.8\n\n\n1959-04-01\n2.34\n2778.801\n5.1\n\n\n1959-07-01\n2.74\n2775.488\n5.3\n\n\n1959-10-01\n0.27\n2785.204\n5.6\n\n\n1960-01-01\n2.31\n2847.699\n5.2\n\n\n\n\n\n\n\n\nindex: Áî®‰ΩúË°åÁ¥¢ÂºïÁöÑÂàó„ÄÇ\ncolumns: Áî®‰∫éÂàõÂª∫Êñ∞ÂàóÁöÑÂàó„ÄÇ\nvalues: Áî®‰∫éÂ°´ÂÖÖ DataFrame ÁöÑÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#‰ΩøÁî®Â§ö‰∏™ÂÄºÂàóËøõË°åÈÄèËßÜ",
    "href": "qmd/pandas3ed8cn.html#‰ΩøÁî®Â§ö‰∏™ÂÄºÂàóËøõË°åÈÄèËßÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®Â§ö‰∏™ÂÄºÂàóËøõË°åÈÄèËßÜ",
    "text": "‰ΩøÁî®Â§ö‰∏™ÂÄºÂàóËøõË°åÈÄèËßÜ\n\nlong_data[\"value2\"] = np.random.standard_normal(len(long_data))  # Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÁöÑÂÄºÂàó\npivoted = long_data.pivot(index=\"date\", columns=\"item\")  # ÈÄèËßÜÔºå‰∏çÊåáÂÆö values ÂèÇÊï∞\npivoted.head()  # ÊòæÁ§∫ÂâçÂá†Ë°åÔºåÁé∞Âú®ÊúâÂàÜÂ±ÇÂàó\n\n\n\n\n\n\n\n\nvalue\nvalue2\n\n\nitem\ninfl\nrealgdp\nunemp\ninfl\nrealgdp\nunemp\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n1959-01-01\n0.00\n2710.349\n5.8\n-0.213452\n-0.113931\n0.749713\n\n\n1959-04-01\n2.34\n2778.801\n5.1\n-0.235907\n-0.307714\n0.857997\n\n\n1959-07-01\n2.74\n2775.488\n5.3\n-0.918223\n0.102354\n0.095900\n\n\n1959-10-01\n0.27\n2785.204\n5.6\n-0.896701\n2.067199\n0.850059\n\n\n1960-01-01\n2.31\n2847.699\n5.2\n-0.574616\n1.105694\n0.516583\n\n\n\n\n\n\n\n\nÂ¶ÇÊûúÁúÅÁï• values ÂèÇÊï∞ÔºåÂàô‰ºöÂæóÂà∞ÂàÜÂ±ÇÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pivot-Á≠â‰ª∑‰∫é",
    "href": "qmd/pandas3ed8cn.html#pivot-Á≠â‰ª∑‰∫é",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pivot Á≠â‰ª∑‰∫é‚Ä¶",
    "text": "pivot Á≠â‰ª∑‰∫é‚Ä¶\npivot Á≠â‰ª∑‰∫é‰ΩøÁî® set_index ÂêéË∑ü unstackÔºö\n\nunstacked = long_data.set_index([\"date\", \"item\"]).unstack(level=\"item\")  # ÂÖàËÆæÁΩÆÁ¥¢ÂºïÔºåÂÜç unstack\nunstacked.head()  # ÊòæÁ§∫ÂâçÂá†Ë°å\n\n\n\n\n\n\n\n\nvalue\nvalue2\n\n\nitem\ninfl\nrealgdp\nunemp\ninfl\nrealgdp\nunemp\n\n\ndate\n\n\n\n\n\n\n\n\n\n\n1959-01-01\n0.00\n2710.349\n5.8\n-0.213452\n-0.113931\n0.749713\n\n\n1959-04-01\n2.34\n2778.801\n5.1\n-0.235907\n-0.307714\n0.857997\n\n\n1959-07-01\n2.74\n2775.488\n5.3\n-0.918223\n0.102354\n0.095900\n\n\n1959-10-01\n0.27\n2785.204\n5.6\n-0.896701\n2.067199\n0.850059\n\n\n1960-01-01\n2.31\n2847.699\n5.2\n-0.574616\n1.105694\n0.516583"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#Â∞ÜÂÆΩÊ†ºÂºèÈÄèËßÜ‰∏∫ÈïøÊ†ºÂºè",
    "href": "qmd/pandas3ed8cn.html#Â∞ÜÂÆΩÊ†ºÂºèÈÄèËßÜ‰∏∫ÈïøÊ†ºÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞Ü‚ÄúÂÆΩ‚ÄùÊ†ºÂºèÈÄèËßÜ‰∏∫‚ÄúÈïø‚ÄùÊ†ºÂºè",
    "text": "Â∞Ü‚ÄúÂÆΩ‚ÄùÊ†ºÂºèÈÄèËßÜ‰∏∫‚ÄúÈïø‚ÄùÊ†ºÂºè\n\npandas.melt: pivot ÁöÑÈÄÜÊìç‰Ωú„ÄÇÂ∞ÜÂ§öÂàóÂêàÂπ∂‰∏∫‰∏ÄÂàóÔºàÊõ¥ÈïøÁöÑ DataFrameÔºâ„ÄÇ\n\n\ndf = pd.DataFrame({\"key\": [\"foo\", \"bar\", \"baz\"],  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\n                   \"A\": [1, 2, 3],\n                   \"B\": [4, 5, 6],\n                   \"C\": [7, 8, 9]})\nmelted = pd.melt(df, id_vars=\"key\")  # Â∞Ü DataFrame ‰ªéÂÆΩÊ†ºÂºèËΩ¨Êç¢‰∏∫ÈïøÊ†ºÂºè\nmelted  # ÊòæÁ§∫ÁªìÊûú\n\n\n\n\n\n\n\n\nkey\nvariable\nvalue\n\n\n\n\n0\nfoo\nA\n1\n\n\n1\nbar\nA\n2\n\n\n2\nbaz\nA\n3\n\n\n3\nfoo\nB\n4\n\n\n4\nbar\nB\n5\n\n\n5\nbaz\nB\n6\n\n\n6\nfoo\nC\n7\n\n\n7\nbar\nC\n8\n\n\n8\nbaz\nC\n9\n\n\n\n\n\n\n\n\nid_vars: ÁªÑÊåáÁ§∫Âô®Âàó„ÄÇ\nvalue_vars: Ë¶Å‚ÄúÂèñÊ∂àÈÄèËßÜ‚ÄùÁöÑÂàó„ÄÇÂ¶ÇÊûúÊú™ÊåáÂÆöÔºåÂàô‰ΩøÁî®ÊâÄÊúâÂÖ∂‰ªñÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#pandas.melt-Á§∫‰æã",
    "href": "qmd/pandas3ed8cn.html#pandas.melt-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas.melt Á§∫‰æã",
    "text": "pandas.melt Á§∫‰æã\n\npd.melt(df, id_vars=\"key\", value_vars=[\"A\", \"B\"])  # ÊåáÂÆöË¶ÅÂèñÊ∂àÈÄèËßÜÁöÑÂàó\n\n\n\n\n\n\n\n\nkey\nvariable\nvalue\n\n\n\n\n0\nfoo\nA\n1\n\n\n1\nbar\nA\n2\n\n\n2\nbaz\nA\n3\n\n\n3\nfoo\nB\n4\n\n\n4\nbar\nB\n5\n\n\n5\nbaz\nB\n6\n\n\n\n\n\n\n\n\npd.melt(df, value_vars=[\"A\", \"B\", \"C\"])  # ‰∏çÊåáÂÆöÁªÑÊåáÁ§∫Âô®Âàó\n\n\n\n\n\n\n\n\nvariable\nvalue\n\n\n\n\n0\nA\n1\n\n\n1\nA\n2\n\n\n2\nA\n3\n\n\n3\nB\n4\n\n\n4\nB\n5\n\n\n5\nB\n6\n\n\n6\nC\n7\n\n\n7\nC\n8\n\n\n8\nC\n9\n\n\n\n\n\n\n\n\npd.melt(df, value_vars=[\"key\", \"A\", \"B\"])  # `value_vars` ‰πüÂèØ‰ª•ÂåÖÂê´ÁªÑÊ†áËØÜÁ¨¶\n\n\n\n\n\n\n\n\nvariable\nvalue\n\n\n\n\n0\nkey\nfoo\n\n\n1\nkey\nbar\n\n\n2\nkey\nbaz\n\n\n3\nA\n1\n\n\n4\nA\n2\n\n\n5\nA\n3\n\n\n6\nB\n4\n\n\n7\nB\n5\n\n\n8\nB\n6\n\n\n\n\n\n\n\n\nÂèØ‰ª•‰∏ç‰ΩøÁî®‰ªª‰ΩïÁªÑÊ†áËØÜÁ¨¶„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#‰ΩøÁî®-melt-Âíå-pivot-ÈáçÂ°ë",
    "href": "qmd/pandas3ed8cn.html#‰ΩøÁî®-melt-Âíå-pivot-ÈáçÂ°ë",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® melt Âíå pivot ÈáçÂ°ë",
    "text": "‰ΩøÁî® melt Âíå pivot ÈáçÂ°ë\n\nreshaped = melted.pivot(index=\"key\", columns=\"variable\",\n                        values=\"value\")  # ‰ΩøÁî® pivot Â∞ÜÊï∞ÊçÆÊÅ¢Â§çÂà∞Á±ª‰ººÂéüÂßãÂ∏ÉÂ±Ä\nreshaped  # ÊòæÁ§∫ÁªìÊûú\n\n\n\n\n\n\n\nvariable\nA\nB\nC\n\n\nkey\n\n\n\n\n\n\n\nbar\n2\n5\n8\n\n\nbaz\n3\n6\n9\n\n\nfoo\n1\n4\n7\n\n\n\n\n\n\n\n\nreshaped.reset_index()  # Â∞ÜÁ¥¢ÂºïÁßªÂõûÂàó‰∏≠\n\n\n\n\n\n\n\nvariable\nkey\nA\nB\nC\n\n\n\n\n0\nbar\n2\n5\n8\n\n\n1\nbaz\n3\n6\n9\n\n\n2\nfoo\n1\n4\n7\n\n\n\n\n\n\n\n\npivot ÂèØ‰ª•ÈáçÂ°ëÂõûÂéüÂßãÂ∏ÉÂ±Ä„ÄÇ\nÁî±‰∫é pivot ‰ºöÂàõÂª∫‰∏Ä‰∏™Á¥¢ÂºïÔºåÂõ†Ê≠§ reset_index() ÂèØËÉΩÂæàÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed8cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì üìù",
    "text": "ÊÄªÁªì üìù\n\nÊàë‰ª¨‰ªãÁªç‰∫Ü pandas ‰∏≠Êï∞ÊçÆÊï¥ÁêÜÁöÑÂÖ≥ÈîÆÊäÄÊúØÔºö\n\nÂàÜÂ±ÇÁ¥¢Âºï (MultiIndex)„ÄÇ\nmerge (Êï∞ÊçÆÂ∫ìÈ£éÊ†ºÁöÑËøûÊé•)„ÄÇ\nconcat (Ê≤øËΩ¥ËøûÊé•)„ÄÇ\ncombine_first (‰øÆË°•Áº∫Â§±Êï∞ÊçÆ)„ÄÇ\nstack Âíå unstack (ÈáçÂ°ë)„ÄÇ\npivot (ÈïøÊ†ºÂºèÂà∞ÂÆΩÊ†ºÂºè)„ÄÇ\nmelt (ÂÆΩÊ†ºÂºèÂà∞ÈïøÊ†ºÂºè)„ÄÇ\n\nËøô‰∫õÂ∑•ÂÖ∑ÂØπ‰∫é‰∏∫ÂàÜÊûêÂáÜÂ§áÊï∞ÊçÆËá≥ÂÖ≥ÈáçË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed8cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed8cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î\n\nÂ¶Ç‰ΩïÂú®ÊÇ®Ëá™Â∑±ÁöÑÊï∞ÊçÆÂàÜÊûêÈ°πÁõÆ‰∏≠Â∫îÁî®Ëøô‰∫õÊäÄÊúØÔºü\nÊÇ®ËÉΩÊÉ≥Âà∞Áé∞ÂÆû‰∏ñÁïåÁöÑ‰æãÂ≠êÂêóÔºü\nÊúâÂì™‰∫õÊåëÊàòÊàñÈôêÂà∂Ôºü\nÊÇ®ÊúÄÊúâÂÖ¥Ë∂£Â∫îÁî®Âì™ÁßçÊñπÊ≥ïÔºå‰∏∫‰ªÄ‰πàÔºü\nÂú®‰ªÄ‰πàÊÉÖÂÜµ‰∏ãÊÇ®‰ºöÊõ¥ÂñúÊ¨¢ merge ËÄå‰∏çÊòØ concatÔºåÂèç‰πã‰∫¶ÁÑ∂Ôºü\nÁêÜËß£ÂàÜÂ±ÇÁ¥¢ÂºïÂ¶Ç‰ΩïÊîπËøõÂ§çÊùÇÊï∞ÊçÆÈõÜÁöÑÁªìÊûÑÂåñÔºü"
  },
  {
    "objectID": "qmd/pandas3ed12.html",
    "href": "qmd/pandas3ed12.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This chapter bridges the gap between data wrangling with pandas and model building using specialized Python libraries. We‚Äôll focus on how to connect pandas with libraries like statsmodels and scikit-learn. This is a crucial step in the data analysis workflow."
  },
  {
    "objectID": "qmd/pandas3ed12.html#introduction",
    "href": "qmd/pandas3ed12.html#introduction",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This chapter bridges the gap between data wrangling with pandas and model building using specialized Python libraries. We‚Äôll focus on how to connect pandas with libraries like statsmodels and scikit-learn. This is a crucial step in the data analysis workflow."
  },
  {
    "objectID": "qmd/pandas3ed12.html#key-concepts",
    "href": "qmd/pandas3ed12.html#key-concepts",
    "title": "Python for Data Analysis",
    "section": "Key Concepts üîë",
    "text": "Key Concepts üîë\nLet‚Äôs define some important terms:\n\nData Mining: Discovering patterns, anomalies, and insights from large datasets. It often involves various techniques, including machine learning.\nMachine Learning (ML): A subset of AI that enables systems to learn from data without explicit programming. ML algorithms build models from ‚Äútraining data‚Äù to make predictions.\nStatistical Learning: A framework for understanding data using statistical methods. It overlaps with ML but often emphasizes inference and interpretability.\nFeature Engineering: Using domain knowledge to select, transform, and create relevant features (variables) from raw data. This improves model performance and is critical."
  },
  {
    "objectID": "qmd/pandas3ed12.html#relationships-dm-ml-and-sl",
    "href": "qmd/pandas3ed12.html#relationships-dm-ml-and-sl",
    "title": "Python for Data Analysis",
    "section": "Relationships: DM, ML, and SL ü§ù",
    "text": "Relationships: DM, ML, and SL ü§ù\nData Mining, Machine Learning, and Statistical Learning are related:\n\n\n\n\n\ngraph LR\n    A[Data Mining] --&gt; C(Common Ground)\n    B[Machine Learning] --&gt; C\n    D[Statistical Learning] --&gt; C\n    C --&gt; E[Insights & Predictions]\n\n\n\n\n\n\nThey all aim to extract insights and make predictions. ML and Statistical Learning provide tools used within the broader context of Data Mining."
  },
  {
    "objectID": "qmd/pandas3ed12.html#pythons-role-in-data-analysis",
    "href": "qmd/pandas3ed12.html#pythons-role-in-data-analysis",
    "title": "Python for Data Analysis",
    "section": "Python‚Äôs Role in Data Analysis üêç",
    "text": "Python‚Äôs Role in Data Analysis üêç\nPython is dominant in data analysis due to:\n\nRich Ecosystem: Libraries like pandas (data), NumPy (numbers), statsmodels (statistics), scikit-learn (ML), and Matplotlib/Seaborn (visualization) provide a complete toolkit.\nEase of Use: Python‚Äôs clear syntax and interactive nature (e.g., Jupyter) make it easy to learn, even without a programming background.\nCommunity Support: A large, active community develops libraries, provides support, and creates documentation."
  },
  {
    "objectID": "qmd/pandas3ed12.html#common-workflow",
    "href": "qmd/pandas3ed12.html#common-workflow",
    "title": "Python for Data Analysis",
    "section": "Common Workflow üîÑ",
    "text": "Common Workflow üîÑ\nA typical model development workflow:\n\n\n\n\n\ngraph LR\n    A[Data Loading (pandas)] --&gt; B[Data Cleaning (pandas)]\n    B --&gt; C[Feature Engineering (pandas, other tools)]\n    C --&gt; D[Model Building (statsmodels, scikit-learn)]\n    D --&gt; E[Model Evaluation (statsmodels, scikit-learn)]\n    E --&gt; F[Prediction/Inference]\n\n\n\n\n\n\n\nData Loading: pandas reads data (CSV, Excel, databases, etc.).\nData Cleaning: pandas handles missing values, errors, and transforms data.\nFeature Engineering: Create/transform features for better models.\nModel Building: statsmodels/scikit-learn train models.\nModel Evaluation: Assess performance.\nPrediction/Inference: Make predictions or draw inferences."
  },
  {
    "objectID": "qmd/pandas3ed12.html#interfacing-pandas-and-models",
    "href": "qmd/pandas3ed12.html#interfacing-pandas-and-models",
    "title": "Python for Data Analysis",
    "section": "Interfacing pandas and Models ‚ÜîÔ∏éÔ∏è",
    "text": "Interfacing pandas and Models ‚ÜîÔ∏éÔ∏è\nThe main interface is often NumPy arrays. pandas DataFrames are built on NumPy, so conversion is easy."
  },
  {
    "objectID": "qmd/pandas3ed12.html#dataframe-to-numpy-array",
    "href": "qmd/pandas3ed12.html#dataframe-to-numpy-array",
    "title": "Python for Data Analysis",
    "section": "DataFrame to NumPy Array ‚û°Ô∏è",
    "text": "DataFrame to NumPy Array ‚û°Ô∏è\nConvert a DataFrame to a NumPy array with .to_numpy():\n\nImportant: .to_numpy() is preferred over .values.\n\nExample:\n\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x0': [1, 2, 3, 4, 5],\n    'x1': [0.01, -0.01, 0.25, -4.1, 0.],\n    'y': [-1.5, 0., 3.6, 1.3, -2.]\n})\n\nprint(data)\n\n   x0    x1    y\n0   1  0.01 -1.5\n1   2 -0.01  0.0\n2   3  0.25  3.6\n3   4 -4.10  1.3\n4   5  0.00 -2.0\n\n\n\ndata_array = data.to_numpy()\nprint(\"\\nNumPy Array:\")\nprint(data_array)\n\n\nNumPy Array:\n[[ 1.    0.01 -1.5 ]\n [ 2.   -0.01  0.  ]\n [ 3.    0.25  3.6 ]\n [ 4.   -4.1   1.3 ]\n [ 5.    0.   -2.  ]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#numpy-array-to-dataframe",
    "href": "qmd/pandas3ed12.html#numpy-array-to-dataframe",
    "title": "Python for Data Analysis",
    "section": "NumPy Array to DataFrame ‚¨ÖÔ∏è",
    "text": "NumPy Array to DataFrame ‚¨ÖÔ∏è\nCreate a DataFrame from a NumPy array:\n\ndf2 = pd.DataFrame(data_array, columns=['one', 'two', 'three'])\nprint(df2)\n\n   one   two  three\n0  1.0  0.01   -1.5\n1  2.0 -0.01    0.0\n2  3.0  0.25    3.6\n3  4.0 -4.10    1.3\n4  5.0  0.00   -2.0\n\n\n\nWe provided column names when creating the DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed12.html#homogeneous-vs.-heterogeneous-data",
    "href": "qmd/pandas3ed12.html#homogeneous-vs.-heterogeneous-data",
    "title": "Python for Data Analysis",
    "section": "Homogeneous vs.¬†Heterogeneous Data ü§î",
    "text": "Homogeneous vs.¬†Heterogeneous Data ü§î\n\nHomogeneous Data: Same type (e.g., all numbers) -&gt; NumPy array with that type.\nHeterogeneous Data: Mixed types (numbers and strings) -&gt; dtype=object array (less efficient for number crunching). Example:\n\n\ndf3 = data.copy()\ndf3['strings'] = ['a', 'b', 'c', 'd', 'e']\nprint(df3)\n\nprint(\"\\nHeterogeneous array:\")\nprint(df3.to_numpy())\n\n   x0    x1    y strings\n0   1  0.01 -1.5       a\n1   2 -0.01  0.0       b\n2   3  0.25  3.6       c\n3   4 -4.10  1.3       d\n4   5  0.00 -2.0       e\n\nHeterogeneous array:\n[[1 0.01 -1.5 'a']\n [2 -0.01 0.0 'b']\n [3 0.25 3.6 'c']\n [4 -4.1 1.3 'd']\n [5 0.0 -2.0 'e']]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#selecting-column-subsets",
    "href": "qmd/pandas3ed12.html#selecting-column-subsets",
    "title": "Python for Data Analysis",
    "section": "Selecting Column Subsets ü§è",
    "text": "Selecting Column Subsets ü§è\nFor modeling, select columns with .loc before converting:\n\nmodel_cols = ['x0', 'x1']\nprint(data.loc[:, model_cols].to_numpy())\n\n[[ 1.    0.01]\n [ 2.   -0.01]\n [ 3.    0.25]\n [ 4.   -4.1 ]\n [ 5.    0.  ]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#categorical-data-dummy-variables",
    "href": "qmd/pandas3ed12.html#categorical-data-dummy-variables",
    "title": "Python for Data Analysis",
    "section": "Categorical Data & Dummy Variables üè∑Ô∏è",
    "text": "Categorical Data & Dummy Variables üè∑Ô∏è\nCategorical variables (e.g., ‚Äòmale‚Äô, ‚Äòfemale‚Äô) need numerical representation. Use dummy variables (or one-hot encoding)."
  },
  {
    "objectID": "qmd/pandas3ed12.html#pandas-get_dummies",
    "href": "qmd/pandas3ed12.html#pandas-get_dummies",
    "title": "Python for Data Analysis",
    "section": "pandas get_dummies() üêº",
    "text": "pandas get_dummies() üêº\npd.get_dummies() simplifies this:\n\ndata['category'] = pd.Categorical(['a', 'b', 'a', 'a', 'b'], categories=['a', 'b'])\nprint(data)\n\ndummies = pd.get_dummies(data.category, prefix='category')\nprint(\"\\nDummy Variables:\")\nprint(dummies)\n\n   x0    x1    y category\n0   1  0.01 -1.5        a\n1   2 -0.01  0.0        b\n2   3  0.25  3.6        a\n3   4 -4.10  1.3        a\n4   5  0.00 -2.0        b\n\nDummy Variables:\n   category_a  category_b\n0        True       False\n1       False        True\n2        True       False\n3        True       False\n4       False        True\n\n\n\ndata_with_dummies = data.drop('category', axis=1).join(dummies)\nprint(\"\\nDataFrame with Dummy Variables:\")\nprint(data_with_dummies)\n\n\nDataFrame with Dummy Variables:\n   x0    x1    y  category_a  category_b\n0   1  0.01 -1.5        True       False\n1   2 -0.01  0.0       False        True\n2   3  0.25  3.6        True       False\n3   4 -4.10  1.3        True       False\n4   5  0.00 -2.0       False        True\n\n\n\nprefix adds a prefix (e.g., category_a)."
  },
  {
    "objectID": "qmd/pandas3ed12.html#patsy-model-descriptions",
    "href": "qmd/pandas3ed12.html#patsy-model-descriptions",
    "title": "Python for Data Analysis",
    "section": "Patsy: Model Descriptions üìù",
    "text": "Patsy: Model Descriptions üìù\nPatsy uses a formula syntax (like R) to specify models, especially linear ones. It‚Äôs installed with statsmodels: conda install statsmodels"
  },
  {
    "objectID": "qmd/pandas3ed12.html#patsy-formulas",
    "href": "qmd/pandas3ed12.html#patsy-formulas",
    "title": "Python for Data Analysis",
    "section": "Patsy Formulas ‚ûï",
    "text": "Patsy Formulas ‚ûï\nExample formula:\ny ~ x0 + x1\n\ny: dependent variable (response).\nx0, x1: independent variables (predictors).\n~: separates left (response) from right (predictors).\n+: includes terms (not mathematical addition!)."
  },
  {
    "objectID": "qmd/pandas3ed12.html#patsy.dmatrices",
    "href": "qmd/pandas3ed12.html#patsy.dmatrices",
    "title": "Python for Data Analysis",
    "section": "patsy.dmatrices() üßÆ",
    "text": "patsy.dmatrices() üßÆ\ndmatrices() takes a formula and data, returning design matrices:\n\nimport patsy\n\ny, X = patsy.dmatrices('y ~ x0 + x1', data)\n\nprint(\"y (Design Matrix for Response):\")\nprint(y)\nprint(\"\\nX (Design Matrix for Predictors):\")\nprint(X)\n\ny (Design Matrix for Response):\n[[-1.5]\n [ 0. ]\n [ 3.6]\n [ 1.3]\n [-2. ]]\n\nX (Design Matrix for Predictors):\n[[ 1.    1.    0.01]\n [ 1.    2.   -0.01]\n [ 1.    3.    0.25]\n [ 1.    4.   -4.1 ]\n [ 1.    5.    0.  ]]\n\n\n\nPatsy includes an intercept (a column of 1s) by default ‚Äì the baseline response when predictors are zero."
  },
  {
    "objectID": "qmd/pandas3ed12.html#suppressing-the-intercept",
    "href": "qmd/pandas3ed12.html#suppressing-the-intercept",
    "title": "Python for Data Analysis",
    "section": "Suppressing the Intercept ‚ûñ",
    "text": "Suppressing the Intercept ‚ûñ\nRemove the intercept with + 0:\n\nX_no_intercept = patsy.dmatrices('y ~ x0 + x1 + 0', data)[1]  # [1] gets only X\nprint(X_no_intercept)\n\n[[ 1.    0.01]\n [ 2.   -0.01]\n [ 3.    0.25]\n [ 4.   -4.1 ]\n [ 5.    0.  ]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#patsy-numpy-and-statsmodels",
    "href": "qmd/pandas3ed12.html#patsy-numpy-and-statsmodels",
    "title": "Python for Data Analysis",
    "section": "Patsy, NumPy, and statsmodels ü§ù",
    "text": "Patsy, NumPy, and statsmodels ü§ù\nDesign matrices from Patsy work with NumPy (e.g., np.linalg.lstsq) or statsmodels:\n\nimport numpy as np\ncoef, resid, _, _ = np.linalg.lstsq(X, y, rcond=None) # Added rcond=None for compatibility\nprint(coef)\n\n# Convert to a pandas Series:\ncoef = pd.Series(coef.squeeze(), index=X.design_info.column_names)\nprint(coef)\n\n[[ 0.31290976]\n [-0.07910564]\n [-0.26546384]]\nIntercept    0.312910\nx0          -0.079106\nx1          -0.265464\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed12.html#patsy-data-transformations",
    "href": "qmd/pandas3ed12.html#patsy-data-transformations",
    "title": "Python for Data Analysis",
    "section": "Patsy: Data Transformations ‚ú®",
    "text": "Patsy: Data Transformations ‚ú®\nInclude Python code in formulas for transformations:\n\ny, X = patsy.dmatrices('y ~ x0 + np.log(np.abs(x1) + 1)', data)\nprint(X)\n\n[[1.         1.         0.00995033]\n [1.         2.         0.00995033]\n [1.         3.         0.22314355]\n [1.         4.         1.62924054]\n [1.         5.         0.        ]]\n\n\nPatsy finds functions like np.log in the scope."
  },
  {
    "objectID": "qmd/pandas3ed12.html#built-in-standardize-center",
    "href": "qmd/pandas3ed12.html#built-in-standardize-center",
    "title": "Python for Data Analysis",
    "section": "Built-in: standardize, center üõ†Ô∏è",
    "text": "Built-in: standardize, center üõ†Ô∏è\nPatsy has built-in functions:\n\nstandardize(x): Scales x (mean 0, std 1).\ncenter(x): Subtracts the mean.\n\n\ny, X = patsy.dmatrices('y ~ standardize(x0) + center(x1)', data)\nprint(X)\n\n[[ 1.         -1.41421356  0.78      ]\n [ 1.         -0.70710678  0.76      ]\n [ 1.          0.          1.02      ]\n [ 1.          0.70710678 -3.33      ]\n [ 1.          1.41421356  0.77      ]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#stateful-transformations-and-build_design_matrices",
    "href": "qmd/pandas3ed12.html#stateful-transformations-and-build_design_matrices",
    "title": "Python for Data Analysis",
    "section": "Stateful Transformations and build_design_matrices üíæ",
    "text": "Stateful Transformations and build_design_matrices üíæ\nWhen applying transformations like center and standardize, use the original dataset‚Äôs statistics when transforming new data. patsy.build_design_matrices helps:\n\nnew_data = pd.DataFrame({\n    'x0': [6, 7, 8, 9],\n    'x1': [3.1, -0.5, 0, 2.3],\n    'y' : [1, 2, 3, 4]\n})\n\nnew_X = patsy.build_design_matrices([X.design_info], new_data) # Use original X's design_info\nprint(new_X)\n\n[DesignMatrix with shape (4, 3)\n  Intercept  standardize(x0)  center(x1)\n          1          2.12132        3.87\n          1          2.82843        0.27\n          1          3.53553        0.77\n          1          4.24264        3.07\n  Terms:\n    'Intercept' (column 0)\n    'standardize(x0)' (column 1)\n    'center(x1)' (column 2)]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#adding-columns-by-name",
    "href": "qmd/pandas3ed12.html#adding-columns-by-name",
    "title": "Python for Data Analysis",
    "section": "Adding Columns by Name ‚ûï",
    "text": "Adding Columns by Name ‚ûï\nTo add columns, wrap them in I():\n\ny, X = patsy.dmatrices('y ~ I(x0 + x1)', data)\nprint(X)\n\n[[ 1.    1.01]\n [ 1.    1.99]\n [ 1.    3.25]\n [ 1.   -0.1 ]\n [ 1.    5.  ]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#categorical-data-and-patsy",
    "href": "qmd/pandas3ed12.html#categorical-data-and-patsy",
    "title": "Python for Data Analysis",
    "section": "Categorical Data and Patsy üè∑Ô∏è",
    "text": "Categorical Data and Patsy üè∑Ô∏è\nPatsy handles categorical variables automatically:\n\ndata = pd.DataFrame({\n    'key1': ['a', 'a', 'b', 'b', 'a', 'b', 'a', 'b'],\n    'key2': [0, 1, 0, 1, 0, 1, 0, 0],\n    'v1': [1, 2, 3, 4, 5, 6, 7, 8],\n    'v2': [-1, 0, 2.5, -0.5, 4.0, -1.2, 0.2, -1.7]\n    })\n\ny, X = patsy.dmatrices('v2 ~ key1', data)\nprint(X)\n\n[[1. 0.]\n [1. 0.]\n [1. 1.]\n [1. 1.]\n [1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 1.]]\n\n\n\nPatsy omits one level to avoid collinearity (with an intercept)."
  },
  {
    "objectID": "qmd/pandas3ed12.html#no-intercept-categorical",
    "href": "qmd/pandas3ed12.html#no-intercept-categorical",
    "title": "Python for Data Analysis",
    "section": "No Intercept, Categorical ‚ûñüè∑Ô∏è",
    "text": "No Intercept, Categorical ‚ûñüè∑Ô∏è\nWithout an intercept, all category columns are included:\n\ny, X = patsy.dmatrices('v2 ~ key1 + 0', data)\nprint(X)\n\n[[1. 0.]\n [1. 0.]\n [0. 1.]\n [0. 1.]\n [1. 0.]\n [0. 1.]\n [1. 0.]\n [0. 1.]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#numerical-as-categorical",
    "href": "qmd/pandas3ed12.html#numerical-as-categorical",
    "title": "Python for Data Analysis",
    "section": "Numerical as Categorical üî¢‚û°Ô∏èüè∑Ô∏è",
    "text": "Numerical as Categorical üî¢‚û°Ô∏èüè∑Ô∏è\nUse C() to treat numbers as categorical:\n\ny, X = patsy.dmatrices('v2 ~ C(key2)', data)\nprint(X)\n\n[[1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 0.]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#interaction-terms",
    "href": "qmd/pandas3ed12.html#interaction-terms",
    "title": "Python for Data Analysis",
    "section": "Interaction Terms ü§ù",
    "text": "Interaction Terms ü§ù\nInteraction terms model combined effects. Use ::\n\ndata['key2'] = data['key2'].map({0: 'zero', 1: 'one'})\nprint(data)\ny, X = patsy.dmatrices('v2 ~ key1 + key2 + key1:key2', data)\nprint(X)\n\n  key1  key2  v1   v2\n0    a  zero   1 -1.0\n1    a   one   2  0.0\n2    b  zero   3  2.5\n3    b   one   4 -0.5\n4    a  zero   5  4.0\n5    b   one   6 -1.2\n6    a  zero   7  0.2\n7    b  zero   8 -1.7\n[[1. 0. 1. 0.]\n [1. 0. 0. 0.]\n [1. 1. 1. 1.]\n [1. 1. 0. 0.]\n [1. 0. 1. 0.]\n [1. 1. 0. 0.]\n [1. 0. 1. 0.]\n [1. 1. 1. 1.]]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#introduction-to-statsmodels",
    "href": "qmd/pandas3ed12.html#introduction-to-statsmodels",
    "title": "Python for Data Analysis",
    "section": "Introduction to statsmodels üìà",
    "text": "Introduction to statsmodels üìà\nstatsmodels is for statistical modeling, hypothesis testing, and data exploration. It focuses on statistical inference, complementing scikit-learn."
  },
  {
    "objectID": "qmd/pandas3ed12.html#models-in-statsmodels",
    "href": "qmd/pandas3ed12.html#models-in-statsmodels",
    "title": "Python for Data Analysis",
    "section": "Models in statsmodels üßÆ",
    "text": "Models in statsmodels üßÆ\nstatsmodels includes:\n\nLinear Models: OLS, GLS, etc.\nGeneralized Linear Models (GLMs): For various response types (binary, count).\nTime Series Analysis: ARIMA, VAR, etc.\nAnd more‚Ä¶"
  },
  {
    "objectID": "qmd/pandas3ed12.html#linear-models-with-statsmodels",
    "href": "qmd/pandas3ed12.html#linear-models-with-statsmodels",
    "title": "Python for Data Analysis",
    "section": "Linear Models with statsmodels üìè",
    "text": "Linear Models with statsmodels üìè\nFit a linear model, using array and formula APIs.\nCreate sample data:\n\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\n# Reproducible example\nrng = np.random.default_rng(seed=12345)\n\ndef dnorm(mean, variance, size=1):\n    if isinstance(size, int):\n        size = size,\n    return mean + np.sqrt(variance) * rng.standard_normal(*size)\nN = 100\nX = np.c_[dnorm(0, 0.4, size=N),\n          dnorm(0, 0.6, size=N),\n          dnorm(0, 0.2, size=N)]\neps = dnorm(0, 0.1, size=N)\nbeta = [0.1, 0.3, 0.5]\ny = np.dot(X, beta) + eps"
  },
  {
    "objectID": "qmd/pandas3ed12.html#array-based-api",
    "href": "qmd/pandas3ed12.html#array-based-api",
    "title": "Python for Data Analysis",
    "section": "Array-Based API ‚ûï",
    "text": "Array-Based API ‚ûï\n\nX_model = sm.add_constant(X) # Add intercept\nmodel = sm.OLS(y, X_model)  # Ordinary Least Squares\nresults = model.fit()\nprint(results.params)      # Parameters\nprint(results.summary())    # Detailed summary\n\n[-0.02079903  0.06581276  0.26897046  0.44941894]\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      y   R-squared:                       0.470\nModel:                            OLS   Adj. R-squared:                  0.453\nMethod:                 Least Squares   F-statistic:                     28.36\nDate:                Fri, 21 Feb 2025   Prob (F-statistic):           3.23e-13\nTime:                        10:12:21   Log-Likelihood:                -25.390\nNo. Observations:                 100   AIC:                             58.78\nDf Residuals:                      96   BIC:                             69.20\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         -0.0208      0.032     -0.653      0.516      -0.084       0.042\nx1             0.0658      0.054      1.220      0.226      -0.041       0.173\nx2             0.2690      0.043      6.312      0.000       0.184       0.354\nx3             0.4494      0.068      6.567      0.000       0.314       0.585\n==============================================================================\nOmnibus:                        0.429   Durbin-Watson:                   1.878\nProb(Omnibus):                  0.807   Jarque-Bera (JB):                0.296\nSkew:                           0.133   Prob(JB):                        0.863\nKurtosis:                       2.995   Cond. No.                         2.16\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nsm.add_constant(X) adds a column of 1s for the intercept."
  },
  {
    "objectID": "qmd/pandas3ed12.html#formula-based-api-‡¶´‡¶∞‡¶Æ‡¶≤",
    "href": "qmd/pandas3ed12.html#formula-based-api-‡¶´‡¶∞‡¶Æ‡¶≤",
    "title": "Python for Data Analysis",
    "section": "Formula-Based API ‡¶´‡¶∞‡ßç‡¶Æ‡ßÅ‡¶≤‡¶æ",
    "text": "Formula-Based API ‡¶´‡¶∞‡ßç‡¶Æ‡ßÅ‡¶≤‡¶æ\n\ndata = pd.DataFrame(X, columns=['col0', 'col1', 'col2'])\ndata['y'] = y\nresults = smf.ols('y ~ col0 + col1 + col2', data=data).fit() # Formula API\nprint(results.params)\nprint(results.tvalues) # t-statistics\nprint(results.predict(data[:5]))\n\nIntercept   -0.020799\ncol0         0.065813\ncol1         0.268970\ncol2         0.449419\ndtype: float64\nIntercept   -0.652501\ncol0         1.219768\ncol1         6.312369\ncol2         6.567428\ndtype: float64\n0   -0.592959\n1   -0.531160\n2    0.058636\n3    0.283658\n4   -0.102947\ndtype: float64\n\n\n\nThe formula API handles the intercept and works with DataFrames."
  },
  {
    "objectID": "qmd/pandas3ed12.html#time-series-with-statsmodels",
    "href": "qmd/pandas3ed12.html#time-series-with-statsmodels",
    "title": "Python for Data Analysis",
    "section": "Time Series with statsmodels ‚åö",
    "text": "Time Series with statsmodels ‚åö\nstatsmodels has time series tools. Example: Autoregressive (AR) model:\n\nfrom statsmodels.tsa.ar_model import AutoReg\n\ninit_x = 4\nvalues = [init_x, init_x]\nN = 1000\nb0 = 0.8\nb1 = -0.4\nnoise = dnorm(0, 0.1, N)\nfor i in range(N):\n    new_x = values[-1] * b0 + values[-2] * b1 + noise[i]\n    values.append(new_x)\n\nMAXLAGS = 5\nmodel = AutoReg(values, MAXLAGS)\nresults = model.fit()\nprint(results.params)\n\n[ 0.02346612  0.8096828  -0.42865278 -0.03336517  0.04267874 -0.05671529]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#introduction-to-scikit-learn",
    "href": "qmd/pandas3ed12.html#introduction-to-scikit-learn",
    "title": "Python for Data Analysis",
    "section": "Introduction to scikit-learn ü§ñ",
    "text": "Introduction to scikit-learn ü§ñ\nscikit-learn is a powerful, widely-used library for machine learning. It has algorithms for classification, regression, clustering, and more."
  },
  {
    "objectID": "qmd/pandas3ed12.html#scikit-learn-features",
    "href": "qmd/pandas3ed12.html#scikit-learn-features",
    "title": "Python for Data Analysis",
    "section": "scikit-learn Features ‚ú®",
    "text": "scikit-learn Features ‚ú®\n\nSimple, Consistent API: User-friendly and consistent.\nMany Algorithms: Covers common ML tasks.\nModel Selection/Evaluation: Cross-validation, hyperparameter tuning, performance metrics.\nData Preprocessing: Scaling, feature selection, etc."
  },
  {
    "objectID": "qmd/pandas3ed12.html#titanic-example",
    "href": "qmd/pandas3ed12.html#titanic-example",
    "title": "Python for Data Analysis",
    "section": "Titanic Example üö¢",
    "text": "Titanic Example üö¢\nUse the Titanic dataset to show a scikit-learn workflow.\n\ntrain = pd.read_csv('datasets/titanic/train.csv')\ntest = pd.read_csv('datasets/titanic/test.csv')\n\n\ntrain.head(4)\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS"
  },
  {
    "objectID": "qmd/pandas3ed12.html#data-preprocessing",
    "href": "qmd/pandas3ed12.html#data-preprocessing",
    "title": "Python for Data Analysis",
    "section": "Data Preprocessing üßπ",
    "text": "Data Preprocessing üßπ\n\nprint(train.isna().sum())\nprint(test.isna().sum())\n\nPassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\nPassengerId      0\nPclass           0\nName             0\nSex              0\nAge             86\nSibSp            0\nParch            0\nTicket           0\nFare             1\nCabin          327\nEmbarked         0\ndtype: int64\n\n\nWe have missing data:\n\nimpute_value = train['Age'].median()\ntrain['Age'] = train['Age'].fillna(impute_value)\ntest['Age'] = test['Age'].fillna(impute_value)\n\ntrain['IsFemale'] = (train['Sex'] == 'female').astype(int)\ntest['IsFemale'] = (test['Sex'] == 'female').astype(int)\n\npredictors = ['Pclass', 'IsFemale', 'Age']\nX_train = train[predictors].to_numpy()\nX_test = test[predictors].to_numpy()\ny_train = train['Survived'].to_numpy()\nprint(X_train[:5])\nprint(y_train[:5])\n\n[[ 3.  0. 22.]\n [ 1.  1. 38.]\n [ 3.  1. 26.]\n [ 1.  1. 35.]\n [ 3.  0. 35.]]\n[0 1 1 1 0]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#model-training-and-prediction",
    "href": "qmd/pandas3ed12.html#model-training-and-prediction",
    "title": "Python for Data Analysis",
    "section": "Model Training and Prediction üèãÔ∏è‚Äç‚ôÄÔ∏è",
    "text": "Model Training and Prediction üèãÔ∏è‚Äç‚ôÄÔ∏è\n\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train) # Train\ny_predict = model.predict(X_test) # Predict\nprint(y_predict[:10])\n\n[0 0 0 0 1 0 1 0 1 0]"
  },
  {
    "objectID": "qmd/pandas3ed12.html#cross-validation",
    "href": "qmd/pandas3ed12.html#cross-validation",
    "title": "Python for Data Analysis",
    "section": "Cross-Validation üîÑ",
    "text": "Cross-Validation üîÑ\n\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.model_selection import cross_val_score\n\nmodel_cv = LogisticRegressionCV(Cs=10) # Logistic Regression with CV\nmodel_cv.fit(X_train, y_train)\nmodel = LogisticRegression(C=10)\nscores = cross_val_score(model, X_train, y_train, cv=4) # 4-fold CV\nprint(scores)\n\n[0.77578475 0.79820628 0.77578475 0.78828829]\n\n\nCross-validation helps avoid overfitting and gives a more robust model."
  },
  {
    "objectID": "qmd/pandas3ed12.html#summary",
    "href": "qmd/pandas3ed12.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary üìù",
    "text": "Summary üìù\n\nWe bridged pandas data wrangling and model building with statsmodels and scikit-learn.\nConvert DataFrames to NumPy arrays with .to_numpy().\nPatsy provides a formula syntax for models.\nstatsmodels excels at statistical inference.\nscikit-learn is versatile for many ML tasks."
  },
  {
    "objectID": "qmd/pandas3ed12.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed12.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion üó£Ô∏è",
    "text": "Thoughts and Discussion üó£Ô∏è\n\nHow to choose between statsmodels and scikit-learn? Consider inference vs.¬†prediction.\nHow to improve features in the Titanic example?\nOther Python modeling libraries (TensorFlow, PyTorch, XGBoost)?\nHow does this relate to your projects?\nHow will data analysis evolve?"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html",
    "href": "qmd/pandas3edA1cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Â•ΩÁöÑÔºåËøôÊòØÁøªËØëÊàê‰∏≠ÊñáÂπ∂Ê∑ªÂä†‰∫ÜËØ¶ÁªÜÊ≥®ÈáäÁöÑÂπªÁÅØÁâáÂÜÖÂÆπÔºö\nimport numpy as np  # ÂØºÂÖ• NumPy Â∫ìÔºåÂπ∂Â∞ÜÂÖ∂Âà´ÂêçËÆæÁΩÆ‰∏∫ np\nrng = np.random.default_rng(seed=12345)  # ÂàõÂª∫‰∏Ä‰∏™ÈöèÊú∫Êï∞ÁîüÊàêÂô®ÔºåÂπ∂ËÆæÁΩÆÁßçÂ≠ê‰∏∫ 12345Ôºå‰ª•Á°Æ‰øùÁªìÊûúÂèØÂ§çÁé∞"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÁÆÄ‰ªã",
    "href": "qmd/pandas3edA1cn.html#ÁÆÄ‰ªã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁÆÄ‰ªã",
    "text": "ÁÆÄ‰ªã\n\nÊàë‰ª¨Â∑≤ÁªèÂ≠¶‰π†‰∫Ü NumPy ÁöÑÂü∫Á°ÄÁü•ËØÜ„ÄÇÁé∞Âú®ÔºåËÆ©Êàë‰ª¨Êõ¥Ê∑±ÂÖ•Âú∞Êé¢Á¥¢ÔºÅü§ø Êàë‰ª¨Â∞ÜÂ≠¶‰π†Ôºö\n\nndarray ÁöÑÂÜÖÈÉ®ÁªìÊûÑ„ÄÇ\nÈ´òÁ∫ßÊï∞ÁªÑÊìç‰ΩúÊäÄÂ∑ß„ÄÇ\n‰ª•Âèä‰∏Ä‰∫õÂæàÈÖ∑ÁöÑÊäÄÂ∑ßÔºÅüòé"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#‰∏ªÈ¢òÂ§ßÁ∫≤",
    "href": "qmd/pandas3edA1cn.html#‰∏ªÈ¢òÂ§ßÁ∫≤",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏ªÈ¢òÂ§ßÁ∫≤",
    "text": "‰∏ªÈ¢òÂ§ßÁ∫≤\n\n\nndarray ÂØπË±°ÂÜÖÈÉ®ÁªìÊûÑ ü§î\nÊï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ß üå≥\nÊï∞ÁªÑÊìç‰Ωú üîÑ‚ûï‚ûóüîÅ\nÂπøÊí≠Êú∫Âà∂ üì°\nufunc È´òÁ∫ßÁî®Ê≥ï üöÄ\nÁªìÊûÑÂåñÊï∞ÁªÑ üè¢\nÊéíÂ∫è Ô∏èÔ∏èÔ∏èÔ∏èÔ∏è‚¨ÜÔ∏èüîé\n‰ΩøÁî® Numba ÁºñÂÜôÂø´ÈÄü NumPy ÂáΩÊï∞ üèéÔ∏è"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ndarray-ÂØπË±°ÂÜÖÈÉ®ÁªìÊûÑ",
    "href": "qmd/pandas3edA1cn.html#ndarray-ÂØπË±°ÂÜÖÈÉ®ÁªìÊûÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ndarray ÂØπË±°ÂÜÖÈÉ®ÁªìÊûÑ ü§î",
    "text": "ndarray ÂØπË±°ÂÜÖÈÉ®ÁªìÊûÑ ü§î\n\n\nNumPy ÁöÑ ndarray Â∞Ü‰∏ÄÂùóÂêåË¥®Á±ªÂûãÊï∞ÊçÆÔºàÊâÄÊúâÂÖÉÁ¥†ÂÖ∑ÊúâÁõ∏ÂêåÊï∞ÊçÆÁ±ªÂûãÔºâÁöÑÂÜÖÂ≠òÂùóËß£Èáä‰∏∫Â§öÁª¥Êï∞ÁªÑ„ÄÇ\nÂÆÉÂèØ‰ª•ÊòØËøûÁª≠ÁöÑÊàñË∑®Ê≠•ÁöÑ„ÄÇ\nÂÖ≥ÈîÆÁªÑÊàêÈÉ®ÂàÜÔºö\n\nÊï∞ÊçÆÁ±ªÂûã (dtype)ÔºöÊï∞ÊçÆÂ¶Ç‰ΩïË¢´Ëß£ÈáäÔºàÊµÆÁÇπÊï∞„ÄÅÊï¥Êï∞„ÄÅÂ∏ÉÂ∞îÂÄºÁ≠âÔºâ„ÄÇ\nË∑®Ê≠•ËßÜÂõæÔºöÂÖÅËÆ∏ÂÉè arr[::2, ::-1] ËøôÊ†∑ÁöÑÊìç‰ΩúÔºåËÄåÊó†ÈúÄÂ§çÂà∂Êï∞ÊçÆÔºÅ‚ö°Ô∏è"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ndarray-ÂÜÖÈÉ®ÁªìÊûÑ",
    "href": "qmd/pandas3edA1cn.html#ndarray-ÂÜÖÈÉ®ÁªìÊûÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ndarray ÂÜÖÈÉ®ÁªìÊûÑ",
    "text": "ndarray ÂÜÖÈÉ®ÁªìÊûÑ\n\n‰∏Ä‰∏™ ndarray ÂåÖÂê´Ôºö\n\nÊï∞ÊçÆÊåáÈíàÔºöRAM ÊàñÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂‰∏≠ÁöÑ‰∏ÄÂùóÊï∞ÊçÆ„ÄÇ\nÊï∞ÊçÆÁ±ªÂûã (dtype)ÔºöÊèèËø∞Âõ∫ÂÆöÂ§ßÂ∞èÁöÑÂÄºÂçïÂÖÉÊ†ºÔºà‰æãÂ¶ÇÔºåfloat64„ÄÅint32Ôºâ„ÄÇ\nÂΩ¢Áä∂ÂÖÉÁªÑÔºöÊï∞ÁªÑÁª¥Â∫¶Ôºà‰æãÂ¶ÇÔºå(10, 5) Ë°®Á§∫ 10x5 ÁöÑÊï∞ÁªÑÔºâ„ÄÇ\nË∑®Â∫¶ÂÖÉÁªÑÔºöÊ≤øÁª¥Â∫¶ÂâçËøõ‰∏Ä‰∏™ÂÖÉÁ¥†ÊâÄÈúÄÁöÑ‚ÄúÊ≠•Èïø‚ÄùÂ≠óËäÇÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ndarray-ÂèØËßÜÂåñ",
    "href": "qmd/pandas3edA1cn.html#ndarray-ÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ndarray ÂèØËßÜÂåñ üñºÔ∏è",
    "text": "ndarray ÂèØËßÜÂåñ üñºÔ∏è\n\n\nÊï∞ÊçÆÔºöÂÆûÈôÖÁöÑÊï∞ÁªÑÊï∞ÊçÆ„ÄÇ\ndtypeÔºöÊï∞ÊçÆÁ±ªÂûã‰ø°ÊÅØÔºà‰æãÂ¶ÇÔºåfloat64Ôºâ„ÄÇ\nÂΩ¢Áä∂ÔºöÊï∞ÁªÑÁª¥Â∫¶Ôºà‰æãÂ¶ÇÔºå(3, 4, 5)Ôºâ„ÄÇ\nË∑®Â∫¶ÔºöË∑≥ËΩ¨Âà∞ÊØè‰∏™Áª¥Â∫¶‰∏≠‰∏ã‰∏Ä‰∏™ÂÖÉÁ¥†ÊâÄÈúÄÁöÑÂ≠óËäÇÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂΩ¢Áä∂ÂíåË∑®Â∫¶Á§∫‰æã",
    "href": "qmd/pandas3edA1cn.html#ÂΩ¢Áä∂ÂíåË∑®Â∫¶Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂΩ¢Áä∂ÂíåË∑®Â∫¶Á§∫‰æã",
    "text": "ÂΩ¢Áä∂ÂíåË∑®Â∫¶Á§∫‰æã\n\n\n‰∏Ä‰∏™ 10 x 5 ÁöÑÊï∞ÁªÑÂÖ∑ÊúâÂΩ¢Áä∂ (10, 5)Ôºö\n\n\narr_2d = np.ones((10, 5))  # ÂàõÂª∫‰∏Ä‰∏™ 10x5 ÁöÑÂÖ® 1 Êï∞ÁªÑ\narr_2d.shape  # Êü•ÁúãÊï∞ÁªÑÁöÑÂΩ¢Áä∂\n\n(10, 5)\n\n\n\n‰∏Ä‰∏™ 3 x 4 x 5 ÁöÑ float64Ôºà8 Â≠óËäÇÔºâÊï∞ÁªÑÈÄöÂ∏∏ÂÖ∑ÊúâË∑®Â∫¶ (160, 40, 8)ÔºàC È°∫Â∫èÔºâÔºö\n\n\narr_3d = np.ones((3, 4, 5), dtype=np.float64)  # ÂàõÂª∫‰∏Ä‰∏™ 3x4x5 ÁöÑ float64 Á±ªÂûãÂÖ® 1 Êï∞ÁªÑ\narr_3d.strides  # Êü•ÁúãÊï∞ÁªÑÁöÑË∑®Â∫¶\n\n(160, 40, 8)"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÁêÜËß£Ë∑®Â∫¶",
    "href": "qmd/pandas3edA1cn.html#ÁêÜËß£Ë∑®Â∫¶",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁêÜËß£Ë∑®Â∫¶ üö∂",
    "text": "ÁêÜËß£Ë∑®Â∫¶ üö∂\n\n\nË∑®Â∫¶ÔºöÂú®ÂÜÖÂ≠ò‰∏≠ÁßªÂä®‰ª•Âà∞ËææÊ≤øÊØè‰∏™Áª¥Â∫¶ÁöÑ‰∏ã‰∏Ä‰∏™ÂÖÉÁ¥†ÊâÄÈúÄÁöÑÂ≠óËäÇÊï∞„ÄÇ\nÁ§∫‰æãÔºöarr_3d.strides = (160, 40, 8)\n\nÁ¨¨‰∏ÄÁª¥Â∫¶ÔºàË°åÔºâÔºöÁßªÂä® 160 Â≠óËäÇ„ÄÇ\nÁ¨¨‰∫åÁª¥Â∫¶ÔºàÂàóÔºâÔºöÁßªÂä® 40 Â≠óËäÇ„ÄÇ\nÁ¨¨‰∏âÁª¥Â∫¶ÔºöÁßªÂä® 8 Â≠óËäÇÔºàfloat64 Â§ßÂ∞èÔºâ„ÄÇ\n\nËΩ¥‰∏äËæÉÂ§ßÁöÑË∑®Â∫¶ÈÄöÂ∏∏ÊÑèÂë≥ÁùÄÊ≤øËØ•ËΩ¥ÁöÑËÆ°ÁÆóÊàêÊú¨Êõ¥È´ò„ÄÇ\nË∑®Â∫¶ÂèØ‰ª•ÊòØË¥üÊï∞ÔºÅ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#numpy-Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ß",
    "href": "qmd/pandas3edA1cn.html#numpy-Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ß üå≥",
    "text": "NumPy Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ß üå≥\n\n\nNumPy ÂÖ∑Êúâ‰∏∞ÂØåÁöÑÊï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ß„ÄÇ\n‰ΩøÁî®Ë∂ÖÁ±ªÔºà‰æãÂ¶ÇÔºånp.integer„ÄÅnp.floatingÔºâÂíå np.issubdtype Êù•Ê£ÄÊü•Êï∞ÁªÑÁ±ªÂûãÔºö\n\n\nints = np.ones(10, dtype=np.uint16)  # ÂàõÂª∫‰∏Ä‰∏™ uint16 Á±ªÂûãÁöÑÂÖ® 1 Êï∞ÁªÑ\nfloats = np.ones(10, dtype=np.float32)  # ÂàõÂª∫‰∏Ä‰∏™ float32 Á±ªÂûãÁöÑÂÖ® 1 Êï∞ÁªÑ\nprint(np.issubdtype(ints.dtype, np.integer))  # Ê£ÄÊü• ints.dtype ÊòØÂê¶ÊòØ np.integer ÁöÑÂ≠êÁ±ªÂûã\nprint(np.issubdtype(floats.dtype, np.floating))  # Ê£ÄÊü• floats.dtype ÊòØÂê¶ÊòØ np.floating ÁöÑÂ≠êÁ±ªÂûã\n\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÁª≠",
    "href": "qmd/pandas3edA1cn.html#Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÔºàÁª≠Ôºâ",
    "text": "Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÔºàÁª≠Ôºâ\n\n\n‰ΩøÁî® .mro()ÔºàÊñπÊ≥ïËß£ÊûêÈ°∫Â∫èÔºâÊü•ÁúãÁà∂Á±ªÔºö\n\n\nnp.float64.mro()  # Êü•Áúã np.float64 ÁöÑÊñπÊ≥ïËß£ÊûêÈ°∫Â∫èÔºàÁªßÊâøÂÖ≥Á≥ªÔºâ\n\n[numpy.float64,\n numpy.floating,\n numpy.inexact,\n numpy.number,\n numpy.generic,\n float,\n object]\n\n\n\nËøôË°®Êòé np.float64 ÁªßÊâøËá™ np.floating„ÄÅnp.inexact„ÄÅ‚Ä¶„ÄÅobject„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#numpy-Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÂèØËßÜÂåñ",
    "href": "qmd/pandas3edA1cn.html#numpy-Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÂèØËßÜÂåñ üìä",
    "text": "NumPy Êï∞ÊçÆÁ±ªÂûãÂ±ÇÁ∫ßÂèØËßÜÂåñ üìä\n\n\ngeneric ÊòØÊ†π\nnumber, bool_ Á≠â, ÊòØ generic ÁöÑÂ≠êÁ±ª"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#È´òÁ∫ßÊï∞ÁªÑÊìç‰ΩúÈáçÂ°ë",
    "href": "qmd/pandas3edA1cn.html#È´òÁ∫ßÊï∞ÁªÑÊìç‰ΩúÈáçÂ°ë",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È´òÁ∫ßÊï∞ÁªÑÊìç‰ΩúÔºöÈáçÂ°ë üîÑ",
    "text": "È´òÁ∫ßÊï∞ÁªÑÊìç‰ΩúÔºöÈáçÂ°ë üîÑ\n\n\nÈáçÂ°ëÔºöÊîπÂèòÊï∞ÁªÑÁöÑÂΩ¢Áä∂Ôºå‰∏çÂ§çÂà∂Êï∞ÊçÆ„ÄÇ\n‰ΩøÁî® reshape() ÊñπÊ≥ïÂíå‰∏Ä‰∏™ÂΩ¢Áä∂ÂÖÉÁªÑÔºö\n\n\narr = np.arange(8)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 7 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\narr.reshape((4, 2))  # Â∞ÜÊï∞ÁªÑÈáçÂ°ë‰∏∫ 4x2 ÁöÑ‰∫åÁª¥Êï∞ÁªÑ\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÈáçÂ°ëÂ§öÁª¥Êï∞ÁªÑ",
    "href": "qmd/pandas3edA1cn.html#ÈáçÂ°ëÂ§öÁª¥Êï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÂ°ëÂ§öÁª¥Êï∞ÁªÑ",
    "text": "ÈáçÂ°ëÂ§öÁª¥Êï∞ÁªÑ\n\n\narr.reshape((4, 2)).reshape((2, 4))  # Â∞ÜÊï∞ÁªÑÂÖàÈáçÂ°ë‰∏∫ 4x2ÔºåÂÜçÈáçÂ°ë‰∏∫ 2x4\n\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n\n\n\nÂØπ‰∏Ä‰∏™Áª¥Â∫¶‰ΩøÁî® -1 Êù•Êé®Êñ≠Â§ßÂ∞èÔºö\n\n\narr = np.arange(15)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 14 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\narr.reshape((5, -1))  # Â∞ÜÊï∞ÁªÑÈáçÂ°ë‰∏∫ 5 Ë°åÔºåÂàóÊï∞Ëá™Âä®Êé®Êñ≠ÔºàËøôÈáåÊòØ 3Ôºâ\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#‰ΩøÁî®ÂΩ¢Áä∂Â±ûÊÄßÈáçÂ°ë",
    "href": "qmd/pandas3edA1cn.html#‰ΩøÁî®ÂΩ¢Áä∂Â±ûÊÄßÈáçÂ°ë",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÂΩ¢Áä∂Â±ûÊÄßÈáçÂ°ë",
    "text": "‰ΩøÁî®ÂΩ¢Áä∂Â±ûÊÄßÈáçÂ°ë\n\n\nother_arr = np.ones((3, 5))  # ÂàõÂª∫‰∏Ä‰∏™ 3x5 ÁöÑÂÖ® 1 Êï∞ÁªÑ\narr.reshape(other_arr.shape)  # ‰ΩøÁî® other_arr ÁöÑÂΩ¢Áä∂ÈáçÂ°ë arr\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÊâÅÂπ≥ÂåñÊàñÂ±ïÂºÄ",
    "href": "qmd/pandas3edA1cn.html#ÊâÅÂπ≥ÂåñÊàñÂ±ïÂºÄ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊâÅÂπ≥ÂåñÊàñÂ±ïÂºÄ ‚û°Ô∏è",
    "text": "ÊâÅÂπ≥ÂåñÊàñÂ±ïÂºÄ ‚û°Ô∏è\n\n\nÊâÅÂπ≥Âåñ/Â±ïÂºÄÔºöÂ∞ÜÂ§öÁª¥Êï∞ÁªÑËΩ¨Êç¢‰∏∫‰∏ÄÁª¥Êï∞ÁªÑ„ÄÇ\nravel()ÔºöÂ¶ÇÊûúÂÄºÊòØËøûÁª≠ÁöÑÔºåÂàô‰∏çÂ§çÂà∂„ÄÇ\n\n\narr = np.arange(15).reshape((5, 3))  # ÂàõÂª∫‰∏Ä‰∏™ 5x3 ÁöÑÊï∞ÁªÑ\narr.ravel()  # Â∞ÜÊï∞ÁªÑÂ±ïÂºÄ‰∏∫‰∏ÄÁª¥Êï∞ÁªÑ\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\n\n\nflatten()ÔºöÂßãÁªàËøîÂõûÂâØÊú¨„ÄÇ\n\n\narr.flatten()  # Â∞ÜÊï∞ÁªÑÂ±ïÂºÄ‰∏∫‰∏ÄÁª¥Êï∞ÁªÑÔºàËøîÂõûÂâØÊú¨Ôºâ\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#c-vs.-fortran-È°∫Â∫è",
    "href": "qmd/pandas3edA1cn.html#c-vs.-fortran-È°∫Â∫è",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "C vs.¬†FORTRAN È°∫Â∫è üîÄ",
    "text": "C vs.¬†FORTRAN È°∫Â∫è üîÄ\n\n\nË°å‰∏ªÂ∫èÔºàCÔºâÔºöËøûÁª≠ÁöÑË°åÂÖÉÁ¥†Â≠òÂÇ®Âú®‰∏ÄËµ∑„ÄÇ\nÂàó‰∏ªÂ∫èÔºàFORTRANÔºâÔºöËøûÁª≠ÁöÑÂàóÂÖÉÁ¥†Â≠òÂÇ®Âú®‰∏ÄËµ∑„ÄÇ\nreshape Âíå ravel Êé•Âèó‰∏Ä‰∏™ order ÂèÇÊï∞Ôºà'C' Êàñ 'F'Ôºâ„ÄÇ\n\n\narr = np.arange(12).reshape((3, 4))  # ÂàõÂª∫‰∏Ä‰∏™ 3x4 ÁöÑÊï∞ÁªÑ\nprint(arr.ravel())      # ÈªòËÆ§Ôºö'C' È°∫Â∫è\nprint(arr.ravel('F'))  # FORTRAN È°∫Â∫è\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n[ 0  4  8  1  5  9  2  6 10  3  7 11]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#c-vs.-fortran-È°∫Â∫èÂèØËßÜÂåñ",
    "href": "qmd/pandas3edA1cn.html#c-vs.-fortran-È°∫Â∫èÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "C vs.¬†FORTRAN È°∫Â∫èÔºàÂèØËßÜÂåñÔºâ",
    "text": "C vs.¬†FORTRAN È°∫Â∫èÔºàÂèØËßÜÂåñÔºâ\n\n\nC/Ë°å‰∏ªÂ∫èÔºöÈ¶ñÂÖàÈÅçÂéÜÊõ¥È´òÁöÑÁª¥Â∫¶„ÄÇ\nFORTRAN/Âàó‰∏ªÂ∫èÔºöÊúÄÂêéÈÅçÂéÜÊõ¥È´òÁöÑÁª¥Â∫¶„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ËøûÊé•Êï∞ÁªÑ",
    "href": "qmd/pandas3edA1cn.html#ËøûÊé•Êï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøûÊé•Êï∞ÁªÑ ‚ûï",
    "text": "ËøûÊé•Êï∞ÁªÑ ‚ûï\n\n\nnumpy.concatenateÔºöÊ≤øÁé∞ÊúâËΩ¥ËøûÊé•Êï∞ÁªÑ„ÄÇ\n\n\narr1 = np.array([[1, 2, 3], [4, 5, 6]])  # ÂàõÂª∫‰∏Ä‰∏™ 2x3 ÁöÑÊï∞ÁªÑ\narr2 = np.array([[7, 8, 9], [10, 11, 12]])  # ÂàõÂª∫‰∏Ä‰∏™ 2x3 ÁöÑÊï∞ÁªÑ\nprint(np.concatenate([arr1, arr2], axis=0))  # Ê≤øË°åÔºàaxis=0ÔºâÂ†ÜÂè†ÔºàÂûÇÁõ¥Â†ÜÂè†Ôºâ\nprint(np.concatenate([arr1, arr2], axis=1))  # Ê≤øÂàóÔºàaxis=1ÔºâÂ†ÜÂè†ÔºàÊ∞¥Âπ≥Â†ÜÂè†Ôºâ\n\n[[ 1  2  3]\n [ 4  5  6]\n [ 7  8  9]\n [10 11 12]]\n[[ 1  2  3  7  8  9]\n [ 4  5  6 10 11 12]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ËøûÊé•ËæÖÂä©ÂáΩÊï∞",
    "href": "qmd/pandas3edA1cn.html#ËøûÊé•ËæÖÂä©ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøûÊé•ËæÖÂä©ÂáΩÊï∞",
    "text": "ËøûÊé•ËæÖÂä©ÂáΩÊï∞\n\n\nvstack, row_stackÔºöÊåâË°åÂ†ÜÂè†Ôºàaxis 0Ôºâ„ÄÇ\nhstackÔºöÊåâÂàóÂ†ÜÂè†Ôºàaxis 1Ôºâ„ÄÇ\ncolumn_stackÔºöÁ±ª‰ºº‰∫é hstackÔºå‰ΩÜÈ¶ñÂÖàÂ∞Ü‰∏ÄÁª¥Êï∞ÁªÑËΩ¨Êç¢‰∏∫‰∫åÁª¥Âàó„ÄÇ\ndstackÔºöÊåâ‚ÄúÊ∑±Â∫¶‚ÄùÂ†ÜÂè†Ôºàaxis 2Ôºâ„ÄÇ\n\n\nprint(np.vstack((arr1, arr2)))  # ÂûÇÁõ¥Â†ÜÂè†\nprint(np.hstack((arr1, arr2)))  # Ê∞¥Âπ≥Â†ÜÂè†\n\n[[ 1  2  3]\n [ 4  5  6]\n [ 7  8  9]\n [10 11 12]]\n[[ 1  2  3  7  8  9]\n [ 4  5  6 10 11 12]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÊãÜÂàÜÊï∞ÁªÑ",
    "href": "qmd/pandas3edA1cn.html#ÊãÜÂàÜÊï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊãÜÂàÜÊï∞ÁªÑ ‚ûó",
    "text": "ÊãÜÂàÜÊï∞ÁªÑ ‚ûó\n\n\nsplitÔºöÂ∞ÜÊï∞ÁªÑÊ≤øËΩ¥ÊãÜÂàÜ‰∏∫Â§ö‰∏™Êï∞ÁªÑ„ÄÇ\n\n\narr = rng.standard_normal((5, 2))  # ÂàõÂª∫‰∏Ä‰∏™ 5x2 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nfirst, second, third = np.split(arr, [1, 3])  # Â∞ÜÊï∞ÁªÑÂú®Á¥¢Âºï 1 Âíå 3 Â§ÑÊãÜÂàÜ\nprint(f\"{first=}\")  # ÊâìÂç∞Á¨¨‰∏Ä‰∏™ÊãÜÂàÜÁªìÊûú\nprint(f\"{second=}\")  # ÊâìÂç∞Á¨¨‰∫å‰∏™ÊãÜÂàÜÁªìÊûú\nprint(f\"{third=}\")  # ÊâìÂç∞Á¨¨‰∏â‰∏™ÊãÜÂàÜÁªìÊûú\n\nfirst=array([[-1.42382504,  1.26372846]])\nsecond=array([[-0.87066174, -0.25917323],\n       [-0.07534331, -0.74088465]])\nthird=array([[-1.3677927 ,  0.6488928 ],\n       [ 0.36105811, -1.95286306]])\n\n\n\nhsplit/vsplitÔºöÂàÜÂà´Âú®ËΩ¥ 0 Âíå 1 ‰∏äÊãÜÂàÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#Êï∞ÁªÑËøûÊé•ÂáΩÊï∞Ë°®",
    "href": "qmd/pandas3edA1cn.html#Êï∞ÁªÑËøûÊé•ÂáΩÊï∞Ë°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑËøûÊé•ÂáΩÊï∞Ë°®",
    "text": "Êï∞ÁªÑËøûÊé•ÂáΩÊï∞Ë°®\n\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nconcatenate\nÈÄöÁî®ÂáΩÊï∞ÔºåÊ≤øËΩ¥ËøûÊé•Êï∞ÁªÑ„ÄÇ\n\n\nvstack, row_stack\nÊåâË°åÂ†ÜÂè†Êï∞ÁªÑÔºàaxis 0Ôºâ„ÄÇ\n\n\nhstack\nÊåâÂàóÂ†ÜÂè†Êï∞ÁªÑÔºàaxis 1Ôºâ„ÄÇ\n\n\ncolumn_stack\nÁ±ª‰ºº‰∫é hstackÔºå‰ΩÜÂ∞Ü‰∏ÄÁª¥Êï∞ÁªÑËΩ¨Êç¢‰∏∫‰∫åÁª¥Âàó„ÄÇ\n\n\ndstack\nÊåâ‚ÄúÊ∑±Â∫¶‚ÄùÂ†ÜÂè†Êï∞ÁªÑÔºàaxis 2Ôºâ„ÄÇ\n\n\nsplit\nÂú®Ê≤øËΩ¥ÁöÑ‰ΩçÁΩÆÊãÜÂàÜÊï∞ÁªÑ„ÄÇ\n\n\nhsplit/vsplit\nÂàÜÂà´Âú®ËΩ¥ 0 Âíå 1 ‰∏äÊãÜÂàÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#Â†ÜÂè†ËæÖÂä©ÂØπË±°r_-Âíå-c_",
    "href": "qmd/pandas3edA1cn.html#Â†ÜÂè†ËæÖÂä©ÂØπË±°r_-Âíå-c_",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â†ÜÂè†ËæÖÂä©ÂØπË±°Ôºör_ Âíå c_",
    "text": "Â†ÜÂè†ËæÖÂä©ÂØπË±°Ôºör_ Âíå c_\n\n\nr_ Âíå c_ ‰ΩøÂ†ÜÂè†Êõ¥ÁÆÄÊ¥ÅÔºö\n\n\narr = np.arange(6)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 5 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\narr1 = arr.reshape((3, 2))  # Â∞ÜÊï∞ÁªÑÈáçÂ°ë‰∏∫ 3x2\narr2 = rng.standard_normal((3, 2))  # ÂàõÂª∫‰∏Ä‰∏™ 3x2 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nprint(np.r_[arr1, arr2])  # Á±ª‰ºº‰∫é row_stack\nprint(np.c_[np.r_[arr1, arr2], arr])  # Â∞Ü arr ‰Ωú‰∏∫Êñ∞ÂàóËøûÊé•\n\n[[ 0.          1.        ]\n [ 2.          3.        ]\n [ 4.          5.        ]\n [ 2.34740965  0.96849691]\n [-0.75938718  0.90219827]\n [-0.46695317 -0.06068952]]\n[[ 0.          1.          0.        ]\n [ 2.          3.          1.        ]\n [ 4.          5.          2.        ]\n [ 2.34740965  0.96849691  3.        ]\n [-0.75938718  0.90219827  4.        ]\n [-0.46695317 -0.06068952  5.        ]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÈáçÂ§çÂÖÉÁ¥†tile-Âíå-repeat",
    "href": "qmd/pandas3edA1cn.html#ÈáçÂ§çÂÖÉÁ¥†tile-Âíå-repeat",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÂ§çÂÖÉÁ¥†Ôºötile Âíå repeat üîÅ",
    "text": "ÈáçÂ§çÂÖÉÁ¥†Ôºötile Âíå repeat üîÅ\n\n\nrepeatÔºöÂ§çÂà∂ÊØè‰∏™ÂÖÉÁ¥†Ôºö\n\n\narr = np.arange(3)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 2 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\nprint(arr.repeat(3))  # ÊØè‰∏™ÂÖÉÁ¥†ÈáçÂ§ç 3 Ê¨°\nprint(arr.repeat([2, 3, 4]))  # ÊØè‰∏™ÂÖÉÁ¥†ÂàÜÂà´ÈáçÂ§ç 2„ÄÅ3„ÄÅ4 Ê¨°\n\n[0 0 0 1 1 1 2 2 2]\n[0 0 1 1 1 2 2 2 2]\n\n\n\n‰∫åÁª¥Êï∞ÁªÑÁ§∫‰æãÔºö\n\n\narr = rng.standard_normal((2, 2))  # ÂàõÂª∫‰∏Ä‰∏™ 2x2 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\narr.repeat(2, axis=0) # Ê≤øÁùÄË°åÈáçÂ§ç\n\narray([[ 0.78884434, -1.25666813],\n       [ 0.78884434, -1.25666813],\n       [ 0.57585751,  1.39897899],\n       [ 0.57585751,  1.39897899]])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#tileÂ†ÜÂè†ÂâØÊú¨",
    "href": "qmd/pandas3edA1cn.html#tileÂ†ÜÂè†ÂâØÊú¨",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "tileÔºöÂ†ÜÂè†ÂâØÊú¨",
    "text": "tileÔºöÂ†ÜÂè†ÂâØÊú¨\n\n\ntileÔºöÊ≤øËΩ¥Â†ÜÂè†Êï∞ÁªÑÁöÑÂâØÊú¨Ôºö\n\n\narr = rng.standard_normal((2, 2))  # ÂàõÂª∫‰∏Ä‰∏™ 2x2 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nprint(np.tile(arr, 2))  # Ê≤øË°åÈáçÂ§çÊï∞ÁªÑ‰∏§Ê¨°\nprint(np.tile(arr, (2, 1)))  # Ê≤øË°åÈáçÂ§ç 2 Ê¨°ÔºåÊ≤øÂàóÈáçÂ§ç 1 Ê¨°\nprint(np.tile(arr, (3, 2)))  # Ê≤øË°åÈáçÂ§ç 3 Ê¨°ÔºåÊ≤øÂàóÈáçÂ§ç 2 Ê¨°\n\n[[ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]]\n[[ 1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273]\n [ 1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273]]\n[[ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]\n [ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]\n [ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#‰ΩøÁî®-take-Âíå-put-ËøõË°åËä±ÂºèÁ¥¢Âºï",
    "href": "qmd/pandas3edA1cn.html#‰ΩøÁî®-take-Âíå-put-ËøõË°åËä±ÂºèÁ¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® take Âíå put ËøõË°åËä±ÂºèÁ¥¢Âºï",
    "text": "‰ΩøÁî® take Âíå put ËøõË°åËä±ÂºèÁ¥¢Âºï\n\n\ntakeÔºöÈÄöËøáÊï¥Êï∞Á¥¢ÂºïÈÄâÊã©ÂÖÉÁ¥†Ôºö\n\n\narr = np.arange(10) * 100  # ÂàõÂª∫‰∏Ä‰∏™ [0, 100, 200, ..., 900] ÁöÑÊï∞ÁªÑ\ninds = [7, 1, 2, 6]  # ÂÆö‰πâÁ¥¢ÂºïÂàóË°®\narr.take(inds)  # Á±ª‰ºº‰∫é arr[inds]\n\narray([700, 100, 200, 600])\n\n\n\nputÔºöÂ∞ÜÂÄºÂàÜÈÖçÁªôÁ¥¢ÂºïÔºàÂéüÂú∞Ôºâ„ÄÇ‰∏çÊé•ÂèóËΩ¥ÂèÇÊï∞Ôºö\n\n\narr.put(inds, 42)  # Â∞ÜÁ¥¢Âºï‰ΩçÁΩÆÁöÑÂÄºËÆæÁΩÆ‰∏∫ 42\nprint(arr)  # ÊâìÂç∞‰øÆÊîπÂêéÁöÑÊï∞ÁªÑ\narr.put(inds, [40, 41, 42, 43])  # Â∞ÜÁ¥¢Âºï‰ΩçÁΩÆÁöÑÂÄºÂàÜÂà´ËÆæÁΩÆ‰∏∫ 40„ÄÅ41„ÄÅ42„ÄÅ43\nprint(arr)  # ÊâìÂç∞‰øÆÊîπÂêéÁöÑÊï∞ÁªÑ\n\n[  0  42  42 300 400 500  42  42 800 900]\n[  0  41  42 300 400 500  43  40 800 900]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂπøÊí≠Êú∫Âà∂",
    "href": "qmd/pandas3edA1cn.html#ÂπøÊí≠Êú∫Âà∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂπøÊí≠Êú∫Âà∂ üì°",
    "text": "ÂπøÊí≠Êú∫Âà∂ üì°\n\n\nÂπøÊí≠Êú∫Âà∂Ôºö‰∏çÂêåÂΩ¢Áä∂ÁöÑÊï∞ÁªÑ‰πãÈó¥Â¶Ç‰ΩïËøõË°åËøêÁÆó„ÄÇ\nÊúÄÁÆÄÂçïÁöÑÊÉÖÂÜµÔºöÊ†áÈáèÂíåÊï∞ÁªÑÔºö\n\n\narr = np.arange(5)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 4 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\narr * 4  # 4 Ë¢´‚ÄúÂπøÊí≠‚ÄùÂà∞ÊâÄÊúâÂÖÉÁ¥†\n\narray([ 0,  4,  8, 12, 16])\n\n\n\nÂùáÂÄºÊ∂àÂáèÔºö\n\n\narr = rng.standard_normal((4, 3))   # ÂàõÂª∫‰∏Ä‰∏™4x3ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÊï∞ÁªÑ\ndemeaned = arr - arr.mean(0)  #  arr.mean(0)ÊòØËÆ°ÁÆóÊØèÂàóÁöÑÂùáÂÄº\ndemeaned\n\narray([[ 0.00978669,  0.05184267, -1.55788029],\n       [ 0.08628836,  1.32709867,  2.40388021],\n       [ 0.94533729,  0.43099193, -1.17326753],\n       [-1.04141234, -1.80993328,  0.32726761]])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂπøÊí≠ËßÑÂàô",
    "href": "qmd/pandas3edA1cn.html#ÂπøÊí≠ËßÑÂàô",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂπøÊí≠ËßÑÂàô üìè",
    "text": "ÂπøÊí≠ËßÑÂàô üìè\n\n\nÂ¶ÇÊûúÂØπ‰∫éÊØè‰∏™Â∞æÈöèÁª¥Â∫¶Ôºö\n\nËΩ¥ÈïøÂ∫¶ÂåπÈÖçÔºåÊàñËÄÖ\nÂÖ∂‰∏≠‰∏Ä‰∏™ÈïøÂ∫¶‰∏∫ 1„ÄÇ\n\nÂàôÊï∞ÁªÑÊòØÂÖºÂÆπÁöÑ„ÄÇ\nÂπøÊí≠ÂèëÁîüÂú®Áº∫Â§±ÊàñÈïøÂ∫¶‰∏∫ 1 ÁöÑÁª¥Â∫¶‰∏ä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂπøÊí≠ËßÑÂàôÂèØËßÜÂåñ",
    "href": "qmd/pandas3edA1cn.html#ÂπøÊí≠ËßÑÂàôÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂπøÊí≠ËßÑÂàôÔºàÂèØËßÜÂåñÔºâ",
    "text": "ÂπøÊí≠ËßÑÂàôÔºàÂèØËßÜÂåñÔºâ\n\n\nËøôÊòØ‰∏Ä‰∏™Â∞ÜÂΩ¢Áä∂‰∏∫ (3,) ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑÊ≤øÁùÄ 0 ËΩ¥ÂπøÊí≠Âà∞ÂΩ¢Áä∂‰∏∫ (4, 3) ÁöÑ‰∫åÁª¥Êï∞ÁªÑÁöÑ‰æãÂ≠ê"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂπøÊí≠Á§∫‰æãÂáèÂéªË°åÂùáÂÄº",
    "href": "qmd/pandas3edA1cn.html#ÂπøÊí≠Á§∫‰æãÂáèÂéªË°åÂùáÂÄº",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂπøÊí≠Á§∫‰æãÔºöÂáèÂéªË°åÂùáÂÄº",
    "text": "ÂπøÊí≠Á§∫‰æãÔºöÂáèÂéªË°åÂùáÂÄº\n\n\narr = rng.standard_normal((4, 3))  # ÂàõÂª∫‰∏Ä‰∏™ 4x3 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nrow_means = arr.mean(1)  # ËÆ°ÁÆóÊØèË°åÁöÑÂùáÂÄº\nprint(row_means.shape)  # ÊâìÂç∞Ë°åÂùáÂÄºÁöÑÂΩ¢Áä∂\n\n# Â∞Ü row_means ÈáçÂ°ë‰∏∫ (4, 1) ‰ª•ËøõË°åÂπøÊí≠\ndemeaned = arr - row_means.reshape((4, 1))  # ÂáèÂéªË°åÂùáÂÄº\nprint(demeaned.mean(1))  # È™åËØÅÊØèË°åÁöÑÂùáÂÄºÁé∞Âú®‰∏∫ 0ÔºàÊàñÊé•Ëøë 0Ôºâ\n\n(4,)\n[ 3.70074342e-17 -1.85037171e-17 -1.85037171e-17  0.00000000e+00]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#Âú®ÂÖ∂‰ªñËΩ¥‰∏äÂπøÊí≠",
    "href": "qmd/pandas3edA1cn.html#Âú®ÂÖ∂‰ªñËΩ¥‰∏äÂπøÊí≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âú®ÂÖ∂‰ªñËΩ¥‰∏äÂπøÊí≠",
    "text": "Âú®ÂÖ∂‰ªñËΩ¥‰∏äÂπøÊí≠\n\n\nÈáçÂ°ë‰ª•Âú®ËΩ¥ 0 ‰ª•Â§ñÁöÑËΩ¥‰∏äËøõË°åÂπøÊí≠„ÄÇ\n‰ΩøÁî® np.newaxis ÂíåÂàáÁâáÊ∑ªÂä†‰∏Ä‰∏™ÈïøÂ∫¶‰∏∫ 1 ÁöÑÊñ∞ËΩ¥Ôºö\n\n\narr = np.zeros((4, 4))  # ÂàõÂª∫‰∏Ä‰∏™ 4x4 ÁöÑÂÖ® 0 Êï∞ÁªÑ\narr_3d = arr[:, np.newaxis, :]  # Âú®‰∏≠Èó¥Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ËΩ¥\nprint(arr_3d.shape)  # ÊâìÂç∞Êñ∞Êï∞ÁªÑÁöÑÂΩ¢Áä∂\n\narr_1d = rng.standard_normal(3)  # ÂàõÂª∫‰∏Ä‰∏™ÈïøÂ∫¶‰∏∫ 3 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÁªÑ\nprint(arr_1d[:, np.newaxis])  # ËΩ¨Êç¢‰∏∫ÂàóÂêëÈáè\nprint(arr_1d[np.newaxis, :])  # ËΩ¨Êç¢‰∏∫Ë°åÂêëÈáè\n\n(4, 1, 4)\n[[0.06114402]\n [0.0709146 ]\n [0.43365454]]\n[[0.06114402 0.0709146  0.43365454]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÈÄöËøáÂπøÊí≠ËÆæÁΩÆÂÄº",
    "href": "qmd/pandas3edA1cn.html#ÈÄöËøáÂπøÊí≠ËÆæÁΩÆÂÄº",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÄöËøáÂπøÊí≠ËÆæÁΩÆÂÄº",
    "text": "ÈÄöËøáÂπøÊí≠ËÆæÁΩÆÂÄº\n\n\nÂπøÊí≠ÈÄÇÁî®‰∫éËÆæÁΩÆÂÄºÔºö\n\n\narr = np.zeros((4, 3))  # ÂàõÂª∫‰∏Ä‰∏™ 4x3 ÁöÑÂÖ® 0 Êï∞ÁªÑ\narr[:] = 5  # Â∞ÜÊâÄÊúâÂÖÉÁ¥†ËÆæÁΩÆ‰∏∫ 5\nprint(arr)  # ÊâìÂç∞‰øÆÊîπÂêéÁöÑÊï∞ÁªÑ\n\ncol = np.array([1.28, -0.42, 0.44, 1.6])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 4 ‰∏™ÂÖÉÁ¥†ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\narr[:] = col[:, np.newaxis]  # Â∞Ü col ÂπøÊí≠Âà∞ arr ÁöÑÊØè‰∏ÄË°å\nprint(arr)  # ÊâìÂç∞‰øÆÊîπÂêéÁöÑÊï∞ÁªÑ\n\n[[5. 5. 5.]\n [5. 5. 5.]\n [5. 5. 5.]\n [5. 5. 5.]]\n[[ 1.28  1.28  1.28]\n [-0.42 -0.42 -0.42]\n [ 0.44  0.44  0.44]\n [ 1.6   1.6   1.6 ]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ufunc-È´òÁ∫ßÁî®Ê≥ï",
    "href": "qmd/pandas3edA1cn.html#ufunc-È´òÁ∫ßÁî®Ê≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ufunc È´òÁ∫ßÁî®Ê≥ï üöÄ",
    "text": "ufunc È´òÁ∫ßÁî®Ê≥ï üöÄ\n\n\nÈÄöÁî®ÂáΩÊï∞ (ufunc) ÂÖ∑ÊúâÁî®‰∫éÂêëÈáèÂåñÊìç‰ΩúÁöÑÊñπÊ≥ï„ÄÇ\nreduceÔºöÈÄöËøá‰∫åÂÖÉËøêÁÆóËøõË°åËÅöÂêàÔºö\n\n\narr = np.arange(10)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 9 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\nnp.add.reduce(arr)  # Á±ª‰ºº‰∫é arr.sum()ÔºåÂØπÊï∞ÁªÑÂÖÉÁ¥†Ê±ÇÂíå\n\nnp.int64(45)"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ufunc-ÊñπÊ≥ïaccumulate-Âíå-outer",
    "href": "qmd/pandas3edA1cn.html#ufunc-ÊñπÊ≥ïaccumulate-Âíå-outer",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ufunc ÊñπÊ≥ïÔºöaccumulate Âíå outer",
    "text": "ufunc ÊñπÊ≥ïÔºöaccumulate Âíå outer\n\n\naccumulateÔºö‰∏≠Èó¥‚ÄúÁ¥ØÁßØ‚ÄùÂÄºÔºö\n\n\narr = np.arange(15).reshape((3, 5))  # ÂàõÂª∫‰∏Ä‰∏™ 3x5 ÁöÑÊï∞ÁªÑ\nnp.add.accumulate(arr, axis=1)  # Ê≤øË°åËÆ°ÁÆóÁ¥ØÁßØÂíå\n\narray([[ 0,  1,  3,  6, 10],\n       [ 5, 11, 18, 26, 35],\n       [10, 21, 33, 46, 60]])\n\n\n\nouterÔºöÊàêÂØπÁöÑÂèâÁßØÔºö\n\n\narr = np.arange(3).repeat([1, 2, 2])  # ÂàõÂª∫‰∏Ä‰∏™ [0, 1, 1, 2, 2] ÁöÑÊï∞ÁªÑ\nnp.multiply.outer(arr, np.arange(5))  # ËÆ°ÁÆó arr Âíå [0, 1, 2, 3, 4] ÁöÑÂ§ñÁßØ\n\narray([[0, 0, 0, 0, 0],\n       [0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4],\n       [0, 2, 4, 6, 8],\n       [0, 2, 4, 6, 8]])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ufunc-ÊñπÊ≥ïreduceat",
    "href": "qmd/pandas3edA1cn.html#ufunc-ÊñπÊ≥ïreduceat",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ufunc ÊñπÊ≥ïÔºöreduceat",
    "text": "ufunc ÊñπÊ≥ïÔºöreduceat\n\n\nreduceatÔºö‚ÄúÂ±ÄÈÉ®‚ÄùÂΩíÁ∫¶ÔºàÊï∞ÁªÑÂàÜÁªÑÔºâÔºö\n\n\narr = np.arange(10)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 9 ÁöÑ‰∏ÄÁª¥Êï∞ÁªÑ\nnp.add.reduceat(arr, [0, 5, 8])  # ÂΩíÁ∫¶ [0:5]„ÄÅ[5:8]„ÄÅ[8:]\n\narray([10, 18, 17])\n\n\n\narr = np.multiply.outer(np.arange(4), np.arange(5))  # ËÆ°ÁÆóÂ§ñÁßØ\nnp.add.reduceat(arr, [0, 2, 4], axis=1) # Ê≤øÂàóÂΩíÁ∫¶\n\narray([[ 0,  0,  0],\n       [ 1,  5,  4],\n       [ 2, 10,  8],\n       [ 3, 15, 12]])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ufunc-ÊñπÊ≥ïË°®",
    "href": "qmd/pandas3edA1cn.html#ufunc-ÊñπÊ≥ïË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ufunc ÊñπÊ≥ïË°®",
    "text": "ufunc ÊñπÊ≥ïË°®\n\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\naccumulate(x)\nËÅöÂêàÔºå‰øùÁïôÈÉ®ÂàÜËÅöÂêà„ÄÇ\n\n\nat(x, i, b=None)\nÂú®Á¥¢Âºï i Â§ÑÂØπ x ËøõË°åÂéüÂú∞Êìç‰Ωú„ÄÇ\n\n\nreduce(x)\nÈÄöËøáËøûÁª≠Êìç‰ΩúËøõË°åËÅöÂêà„ÄÇ\n\n\nreduceat(x, bins)\n‚ÄúÂ±ÄÈÉ®‚ÄùÂΩíÁ∫¶/ÂàÜÁªÑÔºõÂΩíÁ∫¶ÂàáÁâá‰ª•ÁîüÊàêËÅöÂêàÊï∞ÁªÑ„ÄÇ\n\n\nouter(x, y)\nÂ∞ÜÊìç‰ΩúÂ∫îÁî®‰∫éÊâÄÊúâÂØπÔºõÁªìÊûúÂÖ∑ÊúâÂΩ¢Áä∂ x.shape + y.shape„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#numbaÂø´ÈÄü-numpy-ÂáΩÊï∞",
    "href": "qmd/pandas3edA1cn.html#numbaÂø´ÈÄü-numpy-ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumbaÔºöÂø´ÈÄü NumPy ÂáΩÊï∞ üèéÔ∏è",
    "text": "NumbaÔºöÂø´ÈÄü NumPy ÂáΩÊï∞ üèéÔ∏è\n\n\nNumbaÔºö‰∏∫Á±ª NumPy Êï∞ÊçÆÔºàCPU„ÄÅGPU Á≠âÔºâÂàõÂª∫Âø´ÈÄüÂáΩÊï∞„ÄÇ\n‰ΩøÁî® LLVM Â∞Ü Python ËΩ¨Êç¢‰∏∫Êú∫Âô®Á†Å„ÄÇ\nÁ§∫‰æãÔºöÁ∫Ø Python ÂáΩÊï∞Ôºö\n\n\nimport numpy as np  # ÂØºÂÖ• NumPy Â∫ì\n\ndef mean_distance(x, y):  # ÂÆö‰πâ‰∏Ä‰∏™ËÆ°ÁÆóÂπ≥ÂùáË∑ùÁ¶ªÁöÑÂáΩÊï∞\n    nx = len(x)  # Ëé∑Âèñ x ÁöÑÈïøÂ∫¶\n    result = 0.0  # ÂàùÂßãÂåñÁªìÊûú\n    count = 0  # ÂàùÂßãÂåñËÆ°Êï∞Âô®\n    for i in range(nx):  # ÈÅçÂéÜ x\n        result += x[i] - y[i]  # Á¥ØÂä†Â∑ÆÂÄº\n        count += 1  # ËÆ°Êï∞Âô®Âä† 1\n    return result / count  # ËøîÂõûÂπ≥ÂùáÂÄº"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#numba-ÁºñËØë",
    "href": "qmd/pandas3edA1cn.html#numba-ÁºñËØë",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Numba ÁºñËØë",
    "text": "Numba ÁºñËØë\n\n\nËøôÂæàÊÖ¢„ÄÇ‰ΩøÁî® numba.jit ÁºñËØëÔºö\n\n\nimport numba as nb  # ÂØºÂÖ• Numba Â∫ì\n\nnumba_mean_distance = nb.jit(mean_distance)  # ‰ΩøÁî® jit Ë£ÖÈ•∞Âô®ÁºñËØë mean_distance ÂáΩÊï∞\n\n# ÊàñËÄÖÔºå‰ΩøÁî®Ë£ÖÈ•∞Âô®Ôºö\n@nb.jit  # ‰ΩøÁî® jit Ë£ÖÈ•∞Âô®\ndef numba_mean_distance(x, y):  # ÂÆö‰πâ‰∏Ä‰∏™ËÆ°ÁÆóÂπ≥ÂùáË∑ùÁ¶ªÁöÑÂáΩÊï∞\n    nx = len(x)  # Ëé∑Âèñ x ÁöÑÈïøÂ∫¶\n    result = 0.0  # ÂàùÂßãÂåñÁªìÊûú\n    count = 0  # ÂàùÂßãÂåñËÆ°Êï∞Âô®\n    for i in range(nx):  # ÈÅçÂéÜ x\n        result += x[i] - y[i]  # Á¥ØÂä†Â∑ÆÂÄº\n        count += 1  # ËÆ°Êï∞Âô®Âä† 1\n    return result / count  # ËøîÂõûÂπ≥ÂùáÂÄº\n\n\nnumba_mean_distance ÈÄüÂ∫¶Âø´ÂæóÂ§öÔºàÁîöËá≥ÂèØËÉΩÊØî NumPy ÁöÑÁâàÊú¨ËøòË¶ÅÂø´ÔºÅÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#‰ΩøÁî®-numba-ÂàõÂª∫Ëá™ÂÆö‰πâ-ufunc",
    "href": "qmd/pandas3edA1cn.html#‰ΩøÁî®-numba-ÂàõÂª∫Ëá™ÂÆö‰πâ-ufunc",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® Numba ÂàõÂª∫Ëá™ÂÆö‰πâ ufunc",
    "text": "‰ΩøÁî® Numba ÂàõÂª∫Ëá™ÂÆö‰πâ ufunc\n\n\nnumba.vectorize ÂàõÂª∫ÁºñËØëÁöÑ NumPy ufuncÔºö\n\n\nfrom numba import vectorize  # ‰ªé Numba ÂØºÂÖ• vectorize Ë£ÖÈ•∞Âô®\n\n@vectorize  # ‰ΩøÁî® vectorize Ë£ÖÈ•∞Âô®\ndef nb_add(x, y):  # ÂÆö‰πâ‰∏Ä‰∏™Âä†Ê≥ïÂáΩÊï∞\n    return x + y  # ËøîÂõû x + y\n\n\nÁé∞Âú®Ôºånb_add ÂÖÖÂΩì ufunc„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÁªìÊûÑÂåñÊï∞ÁªÑ",
    "href": "qmd/pandas3edA1cn.html#ÁªìÊûÑÂåñÊï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªìÊûÑÂåñÊï∞ÁªÑ üè¢",
    "text": "ÁªìÊûÑÂåñÊï∞ÁªÑ üè¢\n\n\nndarray ÈÄöÂ∏∏ÊòØÂêåË¥®ÁöÑ„ÄÇ\nÁªìÊûÑÂåñÊï∞ÁªÑÔºöÊØè‰∏™ÂÖÉÁ¥†‰ª£Ë°®‰∏Ä‰∏™‚ÄúÁªìÊûÑ‚ÄùÔºàÁ±ª‰ºº‰∫é C ‰∏≠ÁöÑÁªìÊûÑÔºâÊàñ SQL Ë°®Ë°å„ÄÇ\n\n\ndtype = [('x', np.float64), ('y', np.int32)]  # Â≠óÊÆµÂêçÁß∞ÂíåÁ±ªÂûã\nsarr = np.array([(1.5, 6), (np.pi, -2)], dtype=dtype)  # ÂàõÂª∫ÁªìÊûÑÂåñÊï∞ÁªÑ\nprint(sarr)  # ÊâìÂç∞Êï∞ÁªÑ\nprint(sarr[0])  # ÊâìÂç∞Á¨¨‰∏Ä‰∏™ÂÖÉÁ¥†\nprint(sarr[0]['y'])  # ËÆøÈóÆÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑ 'y' Â≠óÊÆµ\n\n[(1.5       ,  6) (3.14159265, -2)]\n(1.5, 6)\n6"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂµåÂ•óÊï∞ÊçÆÁ±ªÂûãÂíåÂ§öÁª¥Â≠óÊÆµ",
    "href": "qmd/pandas3edA1cn.html#ÂµåÂ•óÊï∞ÊçÆÁ±ªÂûãÂíåÂ§öÁª¥Â≠óÊÆµ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂµåÂ•óÊï∞ÊçÆÁ±ªÂûãÂíåÂ§öÁª¥Â≠óÊÆµ",
    "text": "ÂµåÂ•óÊï∞ÊçÆÁ±ªÂûãÂíåÂ§öÁª¥Â≠óÊÆµ\n\n\ndtype = [('x', np.int64, 3), ('y', np.int32)]  # 'x' ÊòØ‰∏Ä‰∏™ÂåÖÂê´ 3 ‰∏™ int64 ÁöÑÊï∞ÁªÑ\narr = np.zeros(4, dtype=dtype)  # ÂàõÂª∫‰∏Ä‰∏™ÁªìÊûÑÂåñÊï∞ÁªÑ\nprint(arr)  # ÊâìÂç∞Êï∞ÁªÑ\nprint(arr[0]['x'])  # ËÆøÈóÆÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑ 'x' Â≠óÊÆµ\n\n[([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0)]\n[0 0 0]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#‰∏∫‰ªÄ‰πà‰ΩøÁî®ÁªìÊûÑÂåñÊï∞ÁªÑ",
    "href": "qmd/pandas3edA1cn.html#‰∏∫‰ªÄ‰πà‰ΩøÁî®ÁªìÊûÑÂåñÊï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πà‰ΩøÁî®ÁªìÊûÑÂåñÊï∞ÁªÑÔºü",
    "text": "‰∏∫‰ªÄ‰πà‰ΩøÁî®ÁªìÊûÑÂåñÊï∞ÁªÑÔºü\n\n\nÂ∞ÜÂÜÖÂ≠òËß£Èáä‰∏∫Ë°®Ê†ºÁªìÊûÑ„ÄÇ\nÂØπ‰∫éÁ£ÅÁõò I/OÔºàÂåÖÊã¨ÂÜÖÂ≠òÊò†Â∞ÑÔºâÂæàÊúâÊïà„ÄÇ\nË°®Á§∫Êù•Ëá™ C/C++ ‰ª£Á†ÅÁöÑÊï∞ÊçÆ„ÄÇ\nÊØî pandas DataFrame Êõ¥Â∫ïÂ±Ç„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÊéíÂ∫è",
    "href": "qmd/pandas3edA1cn.html#ÊéíÂ∫è",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊéíÂ∫è Ô∏èÔ∏èÔ∏èÔ∏èÔ∏è‚¨ÜÔ∏è",
    "text": "ÊéíÂ∫è Ô∏èÔ∏èÔ∏èÔ∏èÔ∏è‚¨ÜÔ∏è\n\n\nndarray.sort()ÔºöÂéüÂú∞ÊéíÂ∫èÔºö\n\n\narr = rng.standard_normal(6)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 6 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÂÖÉÁ¥†ÁöÑÊï∞ÁªÑ\narr.sort()  # ÂçáÂ∫èÊéíÂ∫è\nprint(arr)  # ÊâìÂç∞ÊéíÂ∫èÂêéÁöÑÊï∞ÁªÑ\n\n[-0.79501746  0.27748366  0.30003095  0.53025239  0.53672097  0.61835001]\n\n\n\nnumpy.sort()ÔºöÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ„ÄÅÊéíÂ∫èÁöÑÂâØÊú¨„ÄÇ\n\n\narr = rng.standard_normal(5)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 5 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÂÖÉÁ¥†ÁöÑÊï∞ÁªÑ\nprint(np.sort(arr))  # ÊéíÂ∫èÂâØÊú¨\n\n[-1.60270159 -1.26162378 -0.07127081  0.26679883  0.47404973]\n\n\n\n‰∏§ÁßçÊñπÊ≥ïÈÉΩÊé•Âèó axis ÂèÇÊï∞\n\n\narr = rng.standard_normal((3, 5))   # ÂàõÂª∫‰∏Ä‰∏™3x5ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÊï∞ÁªÑ\narr.sort(axis=1)  # ÂØπÊØè‰∏ÄË°åËøõË°åÊéíÂ∫è\nprint(arr)  # ÊâìÂç∞ÊéíÂ∫èÂêéÁöÑÊï∞ÁªÑ\n\n[[-1.64041784 -0.85725882 -0.41485376  0.0977165   0.68828179]\n [-1.38835995 -1.15452958 -1.09542531 -0.90738246  0.65045239]\n [-1.06580785 -0.18147274  0.00714569  0.5343599   1.6219518 ]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#Èó¥Êé•ÊéíÂ∫èargsort-Âíå-lexsort",
    "href": "qmd/pandas3edA1cn.html#Èó¥Êé•ÊéíÂ∫èargsort-Âíå-lexsort",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Èó¥Êé•ÊéíÂ∫èÔºöargsort Âíå lexsort",
    "text": "Èó¥Êé•ÊéíÂ∫èÔºöargsort Âíå lexsort\n\n\nÈó¥Êé•ÊéíÂ∫èÔºöËøîÂõûÊï¥Êï∞Á¥¢Âºï‰ª•ÈáçÊñ∞ÊéíÂ∫èÊï∞ÊçÆ„ÄÇ\nargsort()ÔºöËøîÂõûÂ∞ÜÂØπÊï∞ÁªÑËøõË°åÊéíÂ∫èÁöÑÁ¥¢ÂºïÔºö\n\n\nvalues = np.array([5, 0, 1, 3, 2])  # ÂàõÂª∫‰∏Ä‰∏™‰∏ÄÁª¥Êï∞ÁªÑ\nindexer = values.argsort()  # Ëé∑ÂèñÊéíÂ∫èÂêéÁöÑÁ¥¢Âºï\nprint(indexer)  # ÊâìÂç∞Á¥¢Âºï\nprint(values[indexer])  # ‰ΩøÁî®Á¥¢ÂºïÂØπÊï∞ÁªÑËøõË°åÊéíÂ∫è\n\n[1 2 4 3 0]\n[0 1 2 3 5]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#lexsortÂ§ö‰∏™ÈîÆ",
    "href": "qmd/pandas3edA1cn.html#lexsortÂ§ö‰∏™ÈîÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "lexsortÔºöÂ§ö‰∏™ÈîÆ",
    "text": "lexsortÔºöÂ§ö‰∏™ÈîÆ\n\n\nlexsort()ÔºöÂØπÂ§ö‰∏™ÈîÆËøõË°åÂ≠óÂÖ∏Â∫èÊéíÂ∫èÔºàÊúÄÂêé‰∏Ä‰∏™Êï∞ÁªÑÊòØ‰∏ªÈîÆÔºâÔºö\n\n\nfirst_name = np.array(['Bob', 'Jane', 'Steve', 'Bill', 'Barbara'])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÂêçÂ≠óÁöÑÊï∞ÁªÑ\nlast_name = np.array(['Jones', 'Arnold', 'Arnold', 'Jones', 'Walters'])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÂßìÊ∞èÁöÑÊï∞ÁªÑ\nsorter = np.lexsort((first_name, last_name))  # ÂÖàÊåâÂßìÊ∞èÊéíÂ∫èÔºåÂÜçÊåâÂêçÂ≠óÊéíÂ∫è\nprint(list(zip(last_name[sorter], first_name[sorter])))  # ÊâìÂç∞ÊéíÂ∫èÂêéÁöÑÂßìÂêç\n\n[(np.str_('Arnold'), np.str_('Jane')), (np.str_('Arnold'), np.str_('Steve')), (np.str_('Jones'), np.str_('Bill')), (np.str_('Jones'), np.str_('Bob')), (np.str_('Walters'), np.str_('Barbara'))]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#Êõø‰ª£ÊéíÂ∫èÁÆóÊ≥ï",
    "href": "qmd/pandas3edA1cn.html#Êõø‰ª£ÊéíÂ∫èÁÆóÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êõø‰ª£ÊéíÂ∫èÁÆóÊ≥ï",
    "text": "Êõø‰ª£ÊéíÂ∫èÁÆóÊ≥ï\n\n\nÁÆóÊ≥ïÔºöquicksortÔºàÈªòËÆ§Ôºâ„ÄÅmergesort„ÄÅheapsort„ÄÅtimsort„ÄÇ\nÁ®≥ÂÆöÊéíÂ∫èÔºö‰øùÁïôÁõ∏Á≠âÂÖÉÁ¥†ÁöÑÁõ∏ÂØπ‰ΩçÁΩÆÔºàmergesort ÊòØÁ®≥ÂÆöÁöÑÔºâ„ÄÇ\n\n\nvalues = np.array(['2:first', '2:second', '1:first', '1:second', '1:third'])  # ÂàõÂª∫‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Êï∞ÁªÑ\nkey = np.array([2, 2, 1, 1, 1])  # ÂàõÂª∫‰∏Ä‰∏™ÈîÆÊï∞ÁªÑ\nindexer = key.argsort(kind='mergesort')  # ‰ΩøÁî®Á®≥ÂÆöÁöÑ mergesort ËøõË°åÊéíÂ∫è\nprint(values.take(indexer))  # ‰ΩøÁî®Á¥¢ÂºïÂØπÂÄºÊï∞ÁªÑËøõË°åÊéíÂ∫è\n\n['1:first' '1:second' '1:third' '2:first' '2:second']"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#Êï∞ÁªÑÊéíÂ∫èÊñπÊ≥ïË°®",
    "href": "qmd/pandas3edA1cn.html#Êï∞ÁªÑÊéíÂ∫èÊñπÊ≥ïË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÁªÑÊéíÂ∫èÊñπÊ≥ïË°®",
    "text": "Êï∞ÁªÑÊéíÂ∫èÊñπÊ≥ïË°®\n\n\n\n\nÁßçÁ±ª\nÈÄüÂ∫¶\nÁ®≥ÂÆöÊÄß\nÂ∑•‰ΩúÁ©∫Èó¥\nÊúÄÂùèÊÉÖÂÜµ\n\n\n\n\n‚Äòquicksort‚Äô\n1\nÂê¶\n0\nO(n^2)\n\n\n‚Äòmergesort‚Äô\n2\nÊòØ\n~n/2\nO(n log n)\n\n\n‚Äòheapsort‚Äô\n3\nÂê¶\n0\nO(n log n)\n\n\n‚Äòtimsort‚Äô\n4\nÊòØ\n~n/2\nO(n log n)\n\n\n\n\nÊ≥®ÊÑèÔºötimsort ‰πüÊòØÁ®≥ÂÆöÁöÑÔºåÂπ∂‰∏îÈÄöÂ∏∏ÈùûÂ∏∏È´òÊïà„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÈÉ®ÂàÜÊéíÂ∫èÊï∞ÁªÑ",
    "href": "qmd/pandas3edA1cn.html#ÈÉ®ÂàÜÊéíÂ∫èÊï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÉ®ÂàÜÊéíÂ∫èÊï∞ÁªÑ",
    "text": "ÈÉ®ÂàÜÊéíÂ∫èÊï∞ÁªÑ\n\n\nnumpy.partition, np.argpartitionÔºöÂõ¥ÁªïÁ¨¨ k ‰∏™ÊúÄÂ∞èÂÖÉÁ¥†ËøõË°åÂàÜÂå∫„ÄÇ\n\n\nrng = np.random.default_rng(12345)  # ÂàõÂª∫‰∏Ä‰∏™ÈöèÊú∫Êï∞ÁîüÊàêÂô®\narr = rng.standard_normal(20)  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 20 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÂÖÉÁ¥†ÁöÑÊï∞ÁªÑ\nnp.partition(arr, 3)  # Ââç 3 ‰∏™ÊòØÊúÄÂ∞èÁöÑÔºàÊú™ÊéíÂ∫èÔºâ\n\narray([-1.95286306, -1.42382504, -1.3677927 , -1.25666813, -0.87066174,\n       -0.75938718, -0.74088465, -0.46695317, -0.25917323, -0.07534331,\n       -0.06068952,  0.36105811,  0.57585751,  0.6488928 ,  0.78884434,\n        0.90219827,  0.96849691,  1.26372846,  1.39897899,  2.34740965])\n\n\n\nnp.argpartition ËøîÂõûÁ¥¢ÂºïÔºö\n\n\nindices = np.argpartition(arr, 3)  # Ëé∑ÂèñÈÉ®ÂàÜÊéíÂ∫èÁöÑÁ¥¢Âºï\narr.take(indices)  # ÈÉ®ÂàÜÊéíÂ∫è\n\narray([-1.95286306, -1.42382504, -1.3677927 , -1.25666813, -0.87066174,\n       -0.75938718, -0.74088465, -0.46695317, -0.25917323, -0.07534331,\n       -0.06068952,  0.36105811,  0.57585751,  0.6488928 ,  0.78884434,\n        0.90219827,  0.96849691,  1.26372846,  1.39897899,  2.34740965])"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#numpy.searchsortedÊü•ÊâæÂÖÉÁ¥†",
    "href": "qmd/pandas3edA1cn.html#numpy.searchsortedÊü•ÊâæÂÖÉÁ¥†",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "numpy.searchsortedÔºöÊü•ÊâæÂÖÉÁ¥† üîé",
    "text": "numpy.searchsortedÔºöÊü•ÊâæÂÖÉÁ¥† üîé\n\n\nsearchsortedÔºöÂú®ÊéíÂ∫èÊï∞ÁªÑ‰∏äËøõË°å‰∫åÂàÜÊü•ÊâæÔºõËøîÂõûÊèíÂÖ•Á¥¢Âºï„ÄÇ\n\n\narr = np.array([0, 1, 7, 12, 15])  # ÂàõÂª∫‰∏Ä‰∏™ÊéíÂ∫èÊï∞ÁªÑ\nprint(arr.searchsorted(9))   # Âú®Âì™ÈáåÊèíÂÖ• 9Ôºü\nprint(arr.searchsorted([0, 8, 11, 16]))  # Êü•ÊâæÂ§ö‰∏™ÂÄºÁöÑÊèíÂÖ•‰ΩçÁΩÆ\n\n3\n[0 3 3 5]\n\n\n\nside='right' Êõ¥ÊîπÁõ∏Á≠âÂÄºÁöÑË°å‰∏∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#searchsorted-Á§∫‰æãÂàÜÁÆ±",
    "href": "qmd/pandas3edA1cn.html#searchsorted-Á§∫‰æãÂàÜÁÆ±",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "searchsorted Á§∫‰æãÔºöÂàÜÁÆ±",
    "text": "searchsorted Á§∫‰æãÔºöÂàÜÁÆ±\n\n\ndata = np.floor(rng.uniform(0, 10000, size=50))  # ÁîüÊàê 50 ‰∏™ 0 Âà∞ 10000 ‰πãÈó¥ÁöÑÈöèÊú∫Êï¥Êï∞\nbins = np.array([0, 100, 1000, 5000, 10000])  # ÂÆö‰πâÂàÜÁÆ±ËæπÁïå\nlabels = bins.searchsorted(data)  # ÂØπÊØè‰∏™Êï∞ÊçÆÁÇπËøõË°åÂàÜÁÆ±\nprint(labels)  # ÊâìÂç∞ÊØè‰∏™Êï∞ÊçÆÁÇπÊâÄÂ±ûÁöÑÁÆ±Â≠êÊ†áÁ≠æ\n\n[2 3 3 3 3 4 3 3 2 4 4 4 4 4 4 4 4 4 3 3 3 4 3 4 3 3 3 3 1 4 3 2 4 3 3 3 3\n 3 3 3 3 3 3 3 3 3 3 3 4 3]\n\n\n\n‰∏é pandas ÁöÑ groupby ÁªìÂêà‰ΩøÁî®‰ª•Ëé∑ÂèñÁÆ±Â≠êÁªüËÆ°‰ø°ÊÅØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂",
    "href": "qmd/pandas3edA1cn.html#ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂ üíæ",
    "text": "ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂ üíæ\n\n\nÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂Ôºö‰∏éÁ£ÅÁõò‰∏äÁöÑ‰∫åËøõÂà∂Êï∞ÊçÆ‰∫§‰∫íÔºåÂ∞±ÂÉèÂÆÉÂú®ÂÜÖÂ≠ò‰∏≠‰∏ÄÊ†∑„ÄÇ\nmemmapÔºöNumPy ÁöÑÁ±ª‰ºº ndarray ÁöÑÂØπË±°„ÄÇËØªÂèñ/ÂÜôÂÖ•ÊÆµÔºåËÄåÊó†ÈúÄÂä†ËΩΩÊï¥‰∏™Êñá‰ª∂„ÄÇ\n‰ΩøÁî® np.memmap ÂàõÂª∫ÔºöÊåáÂÆöË∑ØÂæÑ„ÄÅdtype„ÄÅÂΩ¢Áä∂„ÄÅÊ®°ÂºèÔºö\n\n\nmmap = np.memmap('mymmap', dtype='float64', mode='w+',\n                 shape=(10000, 10000))  # ÂàõÂª∫‰∏Ä‰∏™ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂\nprint(mmap)  # ÊâìÂç∞ÂÜÖÂ≠òÊò†Â∞ÑÂØπË±°\n\n[[0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂Áª≠",
    "href": "qmd/pandas3edA1cn.html#ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂ÔºàÁª≠Ôºâ",
    "text": "ÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂ÔºàÁª≠Ôºâ\n\n\nÂàáÁâáËøîÂõûÁ£ÅÁõò‰∏äÁöÑËßÜÂõæÔºö\n\n\nsection = mmap[:5]  # Ââç 5 Ë°å\n\n\nÂàÜÈÖçÁºìÂÜ≤Âå∫Âú®ÂÜÖÂ≠ò‰∏≠Ôºõ‰ΩøÁî® flush() ÂÜôÂÖ•Ôºö\n\n\nsection[:] = rng.standard_normal((5, 10000))  # Â∞ÜÊï∞ÊçÆÂÜôÂÖ•ÂàáÁâá\nmmap.flush()  # Â∞ÜÊõ¥ÊîπÂà∑Êñ∞Âà∞Á£ÅÁõò\n\n\nÊâìÂºÄÁé∞ÊúâÊò†Â∞Ñ‰ªçÁÑ∂ÈúÄË¶Å dtype ÂíåÂΩ¢Áä∂Ôºö\n\n\nmmap = np.memmap('mymmap', dtype='float64', shape=(10000, 10000))  # ÊâìÂºÄÁé∞ÊúâÁöÑÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂\nprint(mmap)  # ÊâìÂç∞ÂÜÖÂ≠òÊò†Â∞ÑÂØπË±°\n\n[[-0.90738246 -1.09542531  0.00714569 ...  0.27528689 -1.164065\n   0.85209933]\n [-0.01030507 -0.06457559 -1.06146483 ... -1.10033268  0.25046196\n   0.58323566]\n [ 0.45830978  1.2992377   1.71366921 ...  0.86913463 -0.78886549\n  -0.24314164]\n ...\n [ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ...  0.          0.\n   0.        ]]\n\n\n\nmemmap ÈÄÇÁî®‰∫éÁªìÊûÑÂåñÊï∞ÊçÆÁ±ªÂûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÊÄßËÉΩÊèêÁ§∫",
    "href": "qmd/pandas3edA1cn.html#ÊÄßËÉΩÊèêÁ§∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄßËÉΩÊèêÁ§∫ üöÄ",
    "text": "ÊÄßËÉΩÊèêÁ§∫ üöÄ\n\n\nÂÖ≥ÈîÆÔºöÁî® NumPy Êï∞ÁªÑ/Â∏ÉÂ∞îËøêÁÆóÊõøÊç¢Âæ™ÁéØ/Êù°‰ª∂ËØ≠Âè•„ÄÇ\n‰ΩøÁî®ÂπøÊí≠„ÄÇ\n‰ΩøÁî®Êï∞ÁªÑËßÜÂõæÔºàÂàáÁâáÔºâ‚Äì ÈÅøÂÖçÂ§çÂà∂„ÄÇ\n‰ΩøÁî® ufunc Âíå ufunc ÊñπÊ≥ï„ÄÇ\nÂ¶ÇÊûúÈúÄË¶ÅÔºåËÄÉËôë C„ÄÅFORTRAN Êàñ Cython„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ËøûÁª≠ÂÜÖÂ≠ò",
    "href": "qmd/pandas3edA1cn.html#ËøûÁª≠ÂÜÖÂ≠ò",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøûÁª≠ÂÜÖÂ≠ò üß†",
    "text": "ËøûÁª≠ÂÜÖÂ≠ò üß†\n\n\nÂÜÖÂ≠òÂ∏ÉÂ±ÄÂΩ±ÂìçÊÄßËÉΩ„ÄÇ\nËøûÁª≠ÔºöÂÖÉÁ¥†ÊåâÈ°∫Â∫èÂ≠òÂÇ®ÔºàC Êàñ FORTRANÔºâ„ÄÇ\nËÆøÈóÆËøûÁª≠ÂùóÊúÄÂø´ÔºàCPU ÁºìÂ≠òÔºâ„ÄÇ\nNumPy Êï∞ÁªÑÈªòËÆ§‰∏∫ C ËøûÁª≠ÔºõËΩ¨ÁΩÆÊòØ Fortran ËøûÁª≠ÁöÑ„ÄÇ\n‰ΩøÁî® flags Ê£ÄÊü•Ôºö\n\n\narr_c = np.ones((100, 10000), order='C')  # ÂàõÂª∫‰∏Ä‰∏™ C ËøûÁª≠Êï∞ÁªÑ\narr_f = np.ones((100, 10000), order='F')  # ÂàõÂª∫‰∏Ä‰∏™ Fortran ËøûÁª≠Êï∞ÁªÑ\nprint(arr_c.flags)  # C_CONTIGUOUS: True, F_CONTIGUOUS: False\nprint(arr_f.flags)  # C_CONTIGUOUS: False, F_CONTIGUOUS: True\n\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n\n  C_CONTIGUOUS : False\n  F_CONTIGUOUS : True\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ËøûÁª≠ÂÜÖÂ≠òÁª≠",
    "href": "qmd/pandas3edA1cn.html#ËøûÁª≠ÂÜÖÂ≠òÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøûÁª≠ÂÜÖÂ≠òÔºàÁª≠Ôºâ",
    "text": "ËøûÁª≠ÂÜÖÂ≠òÔºàÁª≠Ôºâ\n\n\nÂØπ C ËøûÁª≠Êï∞ÁªÑÁöÑË°åÊ±ÇÂíåÈÄöÂ∏∏Êõ¥Âø´„ÄÇ\nÂ¶ÇÊûúÈúÄË¶ÅÔºå‰ΩøÁî® copy() Âíå 'C' Êàñ 'F'Ôºö\n\n\narr_f.copy('C').flags  # Â∞Ü Fortran ËøûÁª≠Êï∞ÁªÑÂ§çÂà∂‰∏∫ C ËøûÁª≠Êï∞ÁªÑ\n\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n\n\n\nÈáçË¶ÅÔºöËßÜÂõæ‰∏ç‰øùËØÅËøûÁª≠ÔºõÊ£ÄÊü• flags.contiguous„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3edA1cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì üìö",
    "text": "ÊÄªÁªì üìö\n\nndarray ÂÜÖÈÉ®ÁªìÊûÑÔºödtype„ÄÅÂΩ¢Áä∂„ÄÅË∑®Â∫¶„ÄÇ\nÊï∞ÁªÑÊìç‰ΩúÔºöÈáçÂ°ë„ÄÅËøûÊé•„ÄÅÊãÜÂàÜ„ÄÅÈáçÂ§ç„ÄÇ\nÂπøÊí≠Êú∫Âà∂„ÄÇ\nÈ´òÁ∫ß ufunc ÊñπÊ≥ï„ÄÇ\nÁªìÊûÑÂåñÊï∞ÁªÑ„ÄÇ\nÊéíÂ∫èÔºàÈó¥Êé•„ÄÅÈÉ®ÂàÜÔºâ„ÄÇ\nÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂„ÄÇ\nÊÄßËÉΩÔºöËøûÁª≠ÂÜÖÂ≠ò„ÄÇ\nNumbaÔºÅ"
  },
  {
    "objectID": "qmd/pandas3edA1cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3edA1cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ üí≠",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ üí≠\n\nÊÇ®Â¶Ç‰ΩïÂ∫îÁî®Ëøô‰∫õÊäÄÊúØÔºü\nÂÜÖÂ≠òÊò†Â∞ÑÊñá‰ª∂Âú®‰ªÄ‰πàÊó∂ÂÄôÊúâÁî®Ôºü\n‰ªÄ‰πàÊó∂ÂÄô‰ΩøÁî® NumbaÔºü\nÁªìÊûÑÂåñÊï∞ÁªÑ vs.¬†pandas DataFrameÔºü\nÊéíÂ∫èÁÆóÊ≥ïÈÄâÊã©Ôºü\nÂêëÈáèÂåñÊìç‰Ωú vs.¬†Âæ™ÁéØÔºü\nËøõ‰∏ÄÊ≠•Êé¢Á¥¢ NumbaÔºÅ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html",
    "href": "qmd/pandas3ed10cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨ËäÇÈáçÁÇπ‰ªãÁªçÊï∞ÊçÆËÅöÂêà‰∏éÂàÜÁªÑÊìç‰ΩúÔºåËøôÊòØÊï∞ÊçÆÂàÜÊûêÁöÑÂÖ≥ÈîÆÈÉ®ÂàÜ„ÄÇÊàë‰ª¨Â∞ÜÂ≠¶‰π†Â¶Ç‰ΩïÂØπÊï∞ÊçÆËøõË°åÂàÜÁ±ªÔºåÂπ∂ÂØπÊØè‰∏™ÁªÑÂ∫îÁî®ÂáΩÊï∞‚Äî‚ÄîËøôÊòØËÆ∏Â§öÊï∞ÊçÆÂ∑•‰ΩúÊµÅÁ®ã‰∏≠ÁöÑÂü∫Êú¨Ê≠•È™§„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Êú¨Á´†ÂÜÖÂÆπ",
    "href": "qmd/pandas3ed10cn.html#Êú¨Á´†ÂÜÖÂÆπ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨ËäÇÈáçÁÇπ‰ªãÁªçÊï∞ÊçÆËÅöÂêà‰∏éÂàÜÁªÑÊìç‰ΩúÔºåËøôÊòØÊï∞ÊçÆÂàÜÊûêÁöÑÂÖ≥ÈîÆÈÉ®ÂàÜ„ÄÇÊàë‰ª¨Â∞ÜÂ≠¶‰π†Â¶Ç‰ΩïÂØπÊï∞ÊçÆËøõË°åÂàÜÁ±ªÔºåÂπ∂ÂØπÊØè‰∏™ÁªÑÂ∫îÁî®ÂáΩÊï∞‚Äî‚ÄîËøôÊòØËÆ∏Â§öÊï∞ÊçÆÂ∑•‰ΩúÊµÅÁ®ã‰∏≠ÁöÑÂü∫Êú¨Ê≠•È™§„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Ê†∏ÂøÉÊìç‰Ωú",
    "href": "qmd/pandas3ed10cn.html#Ê†∏ÂøÉÊìç‰Ωú",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê†∏ÂøÉÊìç‰Ωú ‚öôÔ∏è",
    "text": "Ê†∏ÂøÉÊìç‰Ωú ‚öôÔ∏è\nÊàë‰ª¨Â∞ÜÂ≠¶‰π†Ôºö\n\nÂ∞Ü pandas ÂØπË±°ÊãÜÂàÜ‰∏∫ÁªÑ„ÄÇ\nËÆ°ÁÆóÁªÑÊëòË¶ÅÁªüËÆ°‰ø°ÊÅØÔºàËÆ°Êï∞„ÄÅÂπ≥ÂùáÂÄºÁ≠âÔºâ„ÄÇ\nÂú®ÁªÑÂÜÖÂ∫îÁî®ËΩ¨Êç¢„ÄÇ\nËÆ°ÁÆóÊï∞ÊçÆÈÄèËßÜË°®Âíå‰∫§ÂèâË°®„ÄÇ\nÊâßË°åÂàÜ‰ΩçÊï∞ÂàÜÊûê„ÄÇ\n‰ΩøÁî® transform Âíå apply„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰∏∫‰ªÄ‰πàËøôÂæàÈáçË¶Å",
    "href": "qmd/pandas3ed10cn.html#‰∏∫‰ªÄ‰πàËøôÂæàÈáçË¶Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πàËøôÂæàÈáçË¶ÅÔºüüìà",
    "text": "‰∏∫‰ªÄ‰πàËøôÂæàÈáçË¶ÅÔºüüìà\nÂàÜÁªÑÂíåËÅöÂêàÊï∞ÊçÆÊúâÂä©‰∫éÊàë‰ª¨Ôºö\n\nÈÄöËøáÊ±áÊÄªÂ§ßÂûãÊï∞ÊçÆÈõÜËé∑ÂæóËßÅËß£„ÄÇ\nÊØîËæÉ‰∏çÂêåÁöÑÁªÑ„ÄÇ\nÂáÜÂ§áÊï∞ÊçÆ‰ª•ËøõË°åÂàÜÊûêÊàñÂèØËßÜÂåñ„ÄÇ\nÂèëÁé∞Ê®°Âºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂ËåÉÂºè",
    "href": "qmd/pandas3ed10cn.html#ÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂ËåÉÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‚ÄúÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂‚ÄùËåÉÂºè üí°",
    "text": "‚ÄúÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂‚ÄùËåÉÂºè üí°\nHadley Wickham ÁöÑ ‚ÄúÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂‚Äù (split-apply-combine) ËåÉÂºèÊòØÁêÜËß£Êï∞ÊçÆÂ§ÑÁêÜÁöÑÂº∫Â§ßÊñπÂºè„ÄÇ\n\nÊãÜÂàÜ (Split)Ôºö Ê†πÊçÆ‚ÄúÈîÆ‚ÄùÂ∞ÜÊï∞ÊçÆÂàÜÊàêÁªÑ„ÄÇ\nÂ∫îÁî® (Apply)Ôºö ÂØπÊØè‰∏™ÁªÑÂ∫îÁî®‰∏Ä‰∏™ÂáΩÊï∞„ÄÇ\nÂêàÂπ∂ (Combine)Ôºö Â∞ÜÁªìÊûúÂêàÂπ∂‰∏∫ÊúÄÁªàËæìÂá∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂ÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed10cn.html#ÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂ÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‚ÄúÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂‚ÄùÂèØËßÜÂåñ üìä",
    "text": "‚ÄúÊãÜÂàÜ-Â∫îÁî®-ÂêàÂπ∂‚ÄùÂèØËßÜÂåñ üìä\n\n\n\n\n\ngraph LR\n    A[Êï∞ÊçÆ] --&gt; B(ÊåâÈîÆÊãÜÂàÜ)\n    B --&gt; C1[ÁªÑ 1]\n    B --&gt; C2[ÁªÑ 2]\n    B --&gt; C3[ÁªÑ 3]\n    C1 --&gt; D1(Â∫îÁî®ÂáΩÊï∞)\n    C2 --&gt; D2(Â∫îÁî®ÂáΩÊï∞)\n    C3 --&gt; D3(Â∫îÁî®ÂáΩÊï∞)\n    D1 --&gt; E[ÂêàÂπ∂ÁªìÊûú]\n    D2 --&gt; E\n    D3 --&gt; E"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÂàÜÁªÑÈîÆ",
    "href": "qmd/pandas3ed10cn.html#ÂàÜÁªÑÈîÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÁªÑÈîÆ üîë",
    "text": "ÂàÜÁªÑÈîÆ üîë\nÈîÆÂèØ‰ª•ÊòØÔºö\n\nÂàóË°®ÊàñÊï∞ÁªÑ„ÄÇ\nDataFrame ÂàóÂêç„ÄÇ\nÂ∞ÜÂÄºÊò†Â∞ÑÂà∞ÁªÑÂêçÁöÑÂ≠óÂÖ∏Êàñ Series„ÄÇ\nÂ∫îÁî®‰∫éÁ¥¢ÂºïÁöÑÂáΩÊï∞„ÄÇ\n\nËøô‰∫õÊú¨Ë¥®‰∏äÈÉΩÊòØÁî®‰∫éÊãÜÂàÜÂØπË±°ÁöÑÊï∞ÁªÑÂÄºÁöÑÂø´Êç∑ÊñπÂºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Á§∫‰æãÁÆÄÂçïÂàÜÁªÑËÅöÂêà",
    "href": "qmd/pandas3ed10cn.html#Á§∫‰æãÁÆÄÂçïÂàÜÁªÑËÅöÂêà",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÁÆÄÂçïÂàÜÁªÑËÅöÂêà",
    "text": "Á§∫‰æãÔºöÁÆÄÂçïÂàÜÁªÑËÅöÂêà\n\n\n\nSplit-Apply-Combine\n\n\n\nÈîÆÂíåÊï∞ÊçÆÔºöÂ∏¶Êúâ‚ÄúKey‚ÄùÂíå‚ÄúData‚ÄùÂàóÁöÑË°®Ê†º„ÄÇ\nÊãÜÂàÜÔºöÊï∞ÊçÆÊåâ‚ÄúKey‚ÄùÊãÜÂàÜ‰∏∫ÁªÑÔºàA„ÄÅB„ÄÅCÔºâ„ÄÇ\nÂ∫îÁî®ÔºöSum ÂáΩÊï∞Â∫îÁî®‰∫éÊØè‰∏™ÁªÑÁöÑ‚ÄúData‚Äù„ÄÇ\nÂêàÂπ∂ÔºöÊÄªÂíåÂêàÂπ∂Âà∞‰∏Ä‰∏™Êñ∞Ë°®‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÊåâÂçïÂàóÂàÜÁªÑ",
    "href": "qmd/pandas3ed10cn.html#ÊåâÂçïÂàóÂàÜÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÂçïÂàóÂàÜÁªÑ",
    "text": "ÊåâÂçïÂàóÂàÜÁªÑ\nËÆ°ÁÆó key1 ‰∏≠ÊØè‰∏™ÁªÑÁöÑ data1 ÁöÑÂπ≥ÂùáÂÄºÔºö\n\ngrouped = df[\"data1\"].groupby(df[\"key1\"])  # Êåâ key1 ÂàÜÁªÑ data1\ngrouped.mean()  # ËÆ°ÁÆóÊØè‰∏™ÁªÑÁöÑÂπ≥ÂùáÂÄº\n\nkey1\na    0.389291\nb    1.042415\nName: data1, dtype: float64\n\n\n\ndf[\"data1\"]ÔºöÈÄâÊã© data1 Âàó„ÄÇ\n.groupby(df[\"key1\"])ÔºöÊåâ key1 ÂàóÂàÜÁªÑ„ÄÇ\ngroupedÔºö‰∏Ä‰∏™ GroupBy ÂØπË±°ÔºåÂ≠òÂÇ®ÂàÜÁªÑ‰ø°ÊÅØ„ÄÇ\n.mean()ÔºöËÆ°ÁÆóÊØè‰∏™ÁªÑÁöÑÂπ≥ÂùáÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÊåâÂ§öÂàóÂàÜÁªÑ",
    "href": "qmd/pandas3ed10cn.html#ÊåâÂ§öÂàóÂàÜÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÂ§öÂàóÂàÜÁªÑ",
    "text": "ÊåâÂ§öÂàóÂàÜÁªÑ\nÊåâÂ§öÂàóÂàÜÁªÑÔºàÂàÜÂ±ÇÁ¥¢ÂºïÔºâÔºö\n\ngrouped = df.groupby([\"key1\", \"key2\"])  # Êåâ key1 Âíå key2 ÂàÜÁªÑ\ngrouped.agg({\n    \"data1\": [\"mean\", \"std\"],  # ÂØπ data1 ËÆ°ÁÆóÂπ≥ÂùáÂÄºÂíåÊ†áÂáÜÂ∑Æ\n    \"data2\": [\"mean\", \"std\"]   # ÂØπ data2 ËÆ°ÁÆóÂπ≥ÂùáÂÄºÂíåÊ†áÂáÜÂ∑Æ\n})\n\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\n\n\nmean\nstd\nmean\nstd\n\n\nkey1\nkey2\n\n\n\n\n\n\n\n\na\n1\n0.776910\n0.158565\n-1.141688\n2.334797\n\n\n2\n-0.385946\nNaN\n-1.701094\nNaN\n\n\nb\n1\n-0.281999\nNaN\n-0.725398\nNaN\n\n\n2\n2.366829\nNaN\n-0.358514\nNaN\n\n\n\n\n\n\n\nÊï∞ÊçÆÊåâ key1 Âíå key2 ÁöÑÁªÑÂêàËøõË°åÂàÜÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Â±ïÂºÄ-unstacking",
    "href": "qmd/pandas3ed10cn.html#Â±ïÂºÄ-unstacking",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â±ïÂºÄ (Unstacking)",
    "text": "Â±ïÂºÄ (Unstacking)\nunstack() ÈáçÂ°ëÁªìÊûúÔºö\n\nmeans = df.groupby([\"key1\", \"key2\"])[\"data1\"].mean()  # Êåâ key1 Âíå key2 ÂàÜÁªÑÔºåËÆ°ÁÆó data1 ÁöÑÂπ≥ÂùáÂÄº\nmeans.unstack()  # Â∞ÜÁªìÊûúÂ±ïÂºÄÔºå‰Ωø key2 Êàê‰∏∫Âàó\n\n\n\n\n\n\n\nkey2\n1\n2\n\n\nkey1\n\n\n\n\n\n\na\n0.776910\n-0.385946\n\n\nb\n-0.281999\n2.366829"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®-series-ÂíåÊï∞ÁªÑÂàÜÁªÑ",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®-series-ÂíåÊï∞ÁªÑÂàÜÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® Series ÂíåÊï∞ÁªÑÂàÜÁªÑ",
    "text": "‰ΩøÁî® Series ÂíåÊï∞ÁªÑÂàÜÁªÑ\nÈîÆÂèØ‰ª•ÊòØÂ§ñÈÉ® Series ÊàñÊï∞ÁªÑÔºö\n\nstates = np.array([\"OH\", \"CA\", \"CA\", \"OH\", \"OH\", \"CA\", \"OH\"])  # Â§ñÈÉ®Êï∞ÁªÑ states\nyears = np.array([2005, 2005, 2006, 2005, 2006, 2005, 2006])  # Â§ñÈÉ®Êï∞ÁªÑ years\n\n# ÂàõÂª∫Êñ∞ÁöÑ df ‰ª•ÂåπÈÖç states Âíå years ÁöÑÈïøÂ∫¶\ndf_ext = pd.DataFrame({\n    \"key1\": [\"a\", \"a\", \"b\", \"b\", \"a\", \"b\", \"a\"],\n    \"key2\": [1, 2, 1, 2, 1, 2, 1],\n    \"data1\": np.random.randn(7),\n    \"data2\": np.random.randn(7)\n})\n\nresult = df_ext[\"data1\"].groupby([states, years]).mean()  # ‰ΩøÁî®Â§ñÈÉ®Êï∞ÁªÑÂàÜÁªÑ\nprint(\"\\nÂàÜÁªÑÁªìÊûú:\")\nprint(result)\n\nprint(\"\\nÂ±ïÂºÄÁªìÊûú:\")\nprint(result.unstack())\n\n\nÂàÜÁªÑÁªìÊûú:\nCA  2005   -1.352798\n    2006   -0.144896\nOH  2005   -0.853971\n    2006   -0.073923\nName: data1, dtype: float64\n\nÂ±ïÂºÄÁªìÊûú:\n        2005      2006\nCA -1.352798 -0.144896\nOH -0.853971 -0.073923\n\n\nËøôÈáåÔºåÊàë‰ª¨ÊåâÂ§ñÈÉ®Êï∞ÁªÑ states Âíå years ÂØπ data1 ËøõË°åÂàÜÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Áõ¥Êé•‰ΩøÁî®ÂàóÂêçÂàÜÁªÑ",
    "href": "qmd/pandas3ed10cn.html#Áõ¥Êé•‰ΩøÁî®ÂàóÂêçÂàÜÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áõ¥Êé•‰ΩøÁî®ÂàóÂêçÂàÜÁªÑ",
    "text": "Áõ¥Êé•‰ΩøÁî®ÂàóÂêçÂàÜÁªÑ\nÂ¶ÇÊûúÂàÜÁªÑ‰ø°ÊÅØÂú® DataFrame ‰∏≠ÔºåÁõ¥Êé•‰ΩøÁî®ÂàóÂêçÔºö\n\ndf.groupby(\"key1\").mean()  # Êåâ key1 ÂàÜÁªÑÔºåËÆ°ÁÆóÊâÄÊúâÊï∞ÂÄºÂàóÁöÑÂπ≥ÂùáÂÄº\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\nkey1\n\n\n\n\n\n\n\na\n1.333333\n0.389291\n-1.328157\n\n\nb\n1.500000\n1.042415\n-0.541956\n\n\n\n\n\n\n\nÈùûÊï∞ÂÄºÂàó key1 ‰ºöË¢´Ëá™Âä®ÊéíÈô§ÔºåÂõ†‰∏∫ÂÆÉÊòØ‰∏Ä‰∏™Âπ≤Êâ∞Âàó\n\ndf.groupby([\"key1\", \"key2\"]).mean()  # Êåâ key1 Âíå key2 ÂàÜÁªÑÔºåËÆ°ÁÆóÊâÄÊúâÊï∞ÂÄºÂàóÁöÑÂπ≥ÂùáÂÄº\n\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\nkey1\nkey2\n\n\n\n\n\n\na\n1\n0.776910\n-1.141688\n\n\n2\n-0.385946\n-1.701094\n\n\nb\n1\n-0.281999\n-0.725398\n\n\n2\n2.366829\n-0.358514"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÁªÑÂ§ßÂ∞è",
    "href": "qmd/pandas3ed10cn.html#ÁªÑÂ§ßÂ∞è",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªÑÂ§ßÂ∞è",
    "text": "ÁªÑÂ§ßÂ∞è\nsize() ÊòæÁ§∫ÊØè‰∏™ÁªÑ‰∏≠ÁöÑÊï∞ÊçÆÁÇπÊï∞ÈáèÔºö\n\ndf.groupby([\"key1\", \"key2\"]).size()  # Êåâ key1 Âíå key2 ÂàÜÁªÑÔºåËÆ°ÁÆóÊØè‰∏™ÁªÑÁöÑÂ§ßÂ∞è\n\nkey1  key2\na     1       2\n      2       1\nb     1       1\n      2       1\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Â§ÑÁêÜÂàÜÁªÑÈîÆ‰∏≠ÁöÑÁº∫Â§±ÂÄº",
    "href": "qmd/pandas3ed10cn.html#Â§ÑÁêÜÂàÜÁªÑÈîÆ‰∏≠ÁöÑÁº∫Â§±ÂÄº",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â§ÑÁêÜÂàÜÁªÑÈîÆ‰∏≠ÁöÑÁº∫Â§±ÂÄº",
    "text": "Â§ÑÁêÜÂàÜÁªÑÈîÆ‰∏≠ÁöÑÁº∫Â§±ÂÄº\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÂàÜÁªÑÈîÆ‰∏≠ÁöÑÁº∫Â§±ÂÄº‰ºöË¢´ÊéíÈô§„ÄÇ‰ΩøÁî® dropna=False ÂåÖÂê´ÂÆÉ‰ª¨Ôºö\n\ndf.groupby(\"key1\", dropna=False).size()  # Êåâ key1 ÂàÜÁªÑÔºåÂåÖÊã¨Áº∫Â§±ÂÄºÔºàÂ¶ÇÊûúÊúâÔºâ\n\nkey1\na    3\nb    2\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®ÂçïÈîÆËø≠‰ª£",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®ÂçïÈîÆËø≠‰ª£",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÂçïÈîÆËø≠‰ª£",
    "text": "‰ΩøÁî®ÂçïÈîÆËø≠‰ª£\nGroupBy ÊîØÊåÅËø≠‰ª£ÔºåÁîüÊàêÁªÑÂêçÂíåÊï∞ÊçÆÂùóÔºö\n\nfor name, group in df.groupby(\"key1\"):  # Êåâ key1 Ëø≠‰ª£ÁªÑ\n    print(f\"ÁªÑÂêç: {name}\")  # ÊâìÂç∞ÁªÑÂêç\n    print(group)  # ÊâìÂç∞ÁªÑÊï∞ÊçÆ\n\nÁªÑÂêç: a\n  key1  key2     data1     data2\n0    a     1  0.889032  0.509262\n1    a     2 -0.385946 -1.701094\n4    a     1  0.664787 -2.792639\nÁªÑÂêç: b\n  key1  key2     data1     data2\n2    b     1 -0.281999 -0.725398\n3    b     2  2.366829 -0.358514"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®Â§öÈîÆËø≠‰ª£",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®Â§öÈîÆËø≠‰ª£",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®Â§öÈîÆËø≠‰ª£",
    "text": "‰ΩøÁî®Â§öÈîÆËø≠‰ª£\n‰ΩøÁî®Â§ö‰∏™ÈîÆÊó∂ÔºåÁªÑÂêçÊòØ‰∏Ä‰∏™ÂÖÉÁªÑÔºö\n\nfor (k1, k2), group in df.groupby([\"key1\", \"key2\"]):  # Êåâ key1 Âíå key2 Ëø≠‰ª£ÁªÑ\n    print(f\"ÁªÑÈîÆ: {(k1, k2)}\")  # ÊâìÂç∞ÁªÑÈîÆ\n    print(group)  # ÊâìÂç∞ÁªÑÊï∞ÊçÆ\n\nÁªÑÈîÆ: ('a', np.int64(1))\n  key1  key2     data1     data2\n0    a     1  0.889032  0.509262\n4    a     1  0.664787 -2.792639\nÁªÑÈîÆ: ('a', np.int64(2))\n  key1  key2     data1     data2\n1    a     2 -0.385946 -1.701094\nÁªÑÈîÆ: ('b', np.int64(1))\n  key1  key2     data1     data2\n2    b     1 -0.281999 -0.725398\nÁªÑÈîÆ: ('b', np.int64(2))\n  key1  key2     data1     data2\n3    b     2  2.366829 -0.358514"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÂàõÂª∫Êï∞ÊçÆÂùóÂ≠óÂÖ∏",
    "href": "qmd/pandas3ed10cn.html#ÂàõÂª∫Êï∞ÊçÆÂùóÂ≠óÂÖ∏",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàõÂª∫Êï∞ÊçÆÂùóÂ≠óÂÖ∏",
    "text": "ÂàõÂª∫Êï∞ÊçÆÂùóÂ≠óÂÖ∏\nÂàõÂª∫ÁªÑÊï∞ÊçÆÁöÑÂ≠óÂÖ∏Ôºö\n\npieces = dict(list(df.groupby(\"key1\")))  # Â∞ÜÊåâ key1 ÂàÜÁªÑÁöÑÁªìÊûúËΩ¨Êç¢‰∏∫Â≠óÂÖ∏\npieces[\"b\"]  # Ëé∑Âèñ key1 ‰∏∫ \"b\" ÁöÑÁªÑ\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata1\ndata2\n\n\n\n\n2\nb\n1\n-0.281999\n-0.725398\n\n\n3\nb\n2\n2.366829\n-0.358514"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÈÄâÊã©ÂçïÂàó-seriesgroupby",
    "href": "qmd/pandas3ed10cn.html#ÈÄâÊã©ÂçïÂàó-seriesgroupby",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÄâÊã©ÂçïÂàó (SeriesGroupBy)",
    "text": "ÈÄâÊã©ÂçïÂàó (SeriesGroupBy)\nÂØπ GroupBy ÂØπË±°ËøõË°åÁ¥¢Âºï‰ª•ËÅöÂêàÁâπÂÆöÂàóÔºö\n\ndf.groupby([\"key1\", \"key2\"])[\"data2\"].mean()  # Êåâ key1 Âíå key2 ÂàÜÁªÑÔºåËÆ°ÁÆó data2 ÁöÑÂπ≥ÂùáÂÄº\n\nkey1  key2\na     1      -1.141688\n      2      -1.701094\nb     1      -0.725398\n      2      -0.358514\nName: data2, dtype: float64\n\n\nËøôÊòØ df[\"data2\"].groupby([df[\"key1\"], df[\"key2\"]]).mean() ÁöÑÁÆÄÂÜô„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÈÄâÊã©Â§öÂàó-dataframegroupby",
    "href": "qmd/pandas3ed10cn.html#ÈÄâÊã©Â§öÂàó-dataframegroupby",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÄâÊã©Â§öÂàó (DataFrameGroupBy)",
    "text": "ÈÄâÊã©Â§öÂàó (DataFrameGroupBy)\n\ndf.groupby([\"key1\", \"key2\"])[[\"data2\"]].mean()  # Êåâ key1 Âíå key2 ÂàÜÁªÑÔºåËÆ°ÁÆó data2 ÁöÑÂπ≥ÂùáÂÄº\n\n\n\n\n\n\n\n\n\ndata2\n\n\nkey1\nkey2\n\n\n\n\n\na\n1\n-1.141688\n\n\n2\n-1.701094\n\n\nb\n1\n-0.725398\n\n\n2\n-0.358514\n\n\n\n\n\n\n\nËøôÁ≠âÂêå‰∫é df[[\"data2\"]].groupby([df[\"key1\"], df[\"key2\"]]).mean()„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ºòÂåñÁöÑËÅöÂêàÊñπÊ≥ï",
    "href": "qmd/pandas3ed10cn.html#‰ºòÂåñÁöÑËÅöÂêàÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ºòÂåñÁöÑËÅöÂêàÊñπÊ≥ï",
    "text": "‰ºòÂåñÁöÑËÅöÂêàÊñπÊ≥ï\nËÅöÂêàÂ∞ÜÊï∞ÁªÑËΩ¨Êç¢‰∏∫Ê†áÈáè„ÄÇ‰ºòÂåñÊñπÊ≥ïÔºö\n\ncount„ÄÅsum„ÄÅmean„ÄÅmedian„ÄÅstd„ÄÅvar\nmin„ÄÅmax„ÄÅprod„ÄÅfirst„ÄÅlast\nany„ÄÅall„ÄÅcummin„ÄÅcummax„ÄÅcumsum„ÄÅcumprod\nnth„ÄÅohlc„ÄÅquantile„ÄÅrank„ÄÅsize"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®Ëá™ÂÆö‰πâËÅöÂêàÂáΩÊï∞",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®Ëá™ÂÆö‰πâËÅöÂêàÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®Ëá™ÂÆö‰πâËÅöÂêàÂáΩÊï∞",
    "text": "‰ΩøÁî®Ëá™ÂÆö‰πâËÅöÂêàÂáΩÊï∞\n‰ΩøÁî® agg ÂÆö‰πâËá™ÂÆö‰πâÂáΩÊï∞Ôºö\n\ndef peak_to_peak(arr):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËÆ°ÁÆóÊï∞ÁªÑÁöÑÊûÅÂ∑ÆÔºàÊúÄÂ§ßÂÄº - ÊúÄÂ∞èÂÄºÔºâ\n    return arr.max() - arr.min()\n\ngrouped = df.groupby(\"key1\")  # Êåâ key1 ÂàÜÁªÑ\ngrouped.agg(peak_to_peak)  # Â∫îÁî®Ëá™ÂÆö‰πâÂáΩÊï∞\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\nkey1\n\n\n\n\n\n\n\na\n1\n1.274978\n3.301902\n\n\nb\n1\n2.648829\n0.366884"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#describe-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed10cn.html#describe-ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "describe ÊñπÊ≥ï",
    "text": "describe ÊñπÊ≥ï\n‰ΩøÁî®ÈùûËÅöÂêàÊñπÊ≥ïÔºåÂ¶Ç describeÔºö\n\ngrouped.describe()  # Ëé∑ÂèñÊØè‰∏™ÁªÑÁöÑÊèèËø∞ÊÄßÁªüËÆ°‰ø°ÊÅØ\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\ncount\nmean\n...\n75%\nmax\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nkey1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n3.0\n1.333333\n0.577350\n1.0\n1.00\n1.0\n1.50\n2.0\n3.0\n0.389291\n...\n0.776910\n0.889032\n3.0\n-1.328157\n1.682245\n-2.792639\n-2.246866\n-1.701094\n-0.595916\n0.509262\n\n\nb\n2.0\n1.500000\n0.707107\n1.0\n1.25\n1.5\n1.75\n2.0\n2.0\n1.042415\n...\n1.704622\n2.366829\n2.0\n-0.541956\n0.259426\n-0.725398\n-0.633677\n-0.541956\n-0.450235\n-0.358514\n\n\n\n\n2 rows √ó 24 columns"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÂçïÂàó‰∏äÁöÑÂ§ö‰∏™ÂáΩÊï∞",
    "href": "qmd/pandas3ed10cn.html#ÂçïÂàó‰∏äÁöÑÂ§ö‰∏™ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂçïÂàó‰∏äÁöÑÂ§ö‰∏™ÂáΩÊï∞",
    "text": "ÂçïÂàó‰∏äÁöÑÂ§ö‰∏™ÂáΩÊï∞\nÂä†ËΩΩÂ∞èË¥πÊï∞ÊçÆÈõÜÔºö\n\ntips = pd.read_csv(\"examples/tips.csv\")  # ‰ªé CSV Êñá‰ª∂Âä†ËΩΩÊï∞ÊçÆ(ÈúÄÁ°Æ‰øù examples Êñá‰ª∂Â§πÂèä tips.csv Êñá‰ª∂Â≠òÂú®)\ntips[\"tip_pct\"] = tips[\"tip\"] / tips[\"total_bill\"]  # Ê∑ªÂä†‰∏Ä‰∏™Â∞èË¥πÁôæÂàÜÊØîÂàó\n\nÂ∫îÁî®Â§ö‰∏™ÂáΩÊï∞Ôºö\n\ngrouped = tips.groupby([\"day\", \"smoker\"])  # Êåâ day Âíå smoker ÂàÜÁªÑ\ngrouped_pct = grouped[\"tip_pct\"]  # ÈÄâÊã© tip_pct Âàó\ngrouped_pct.agg([\"mean\", \"std\", peak_to_peak])  # Â∫îÁî®Â§ö‰∏™ËÅöÂêàÂáΩÊï∞\n\n\n\n\n\n\n\n\n\nmean\nstd\npeak_to_peak\n\n\nday\nsmoker\n\n\n\n\n\n\n\nFri\nNo\n0.151650\n0.028123\n0.067349\n\n\nYes\n0.174783\n0.051293\n0.159925\n\n\nSat\nNo\n0.158048\n0.039767\n0.235193\n\n\nYes\n0.147906\n0.061375\n0.290095\n\n\nSun\nNo\n0.160113\n0.042347\n0.193226\n\n\nYes\n0.187250\n0.154134\n0.644685\n\n\nThur\nNo\n0.160298\n0.038774\n0.193350\n\n\nYes\n0.163863\n0.039389\n0.151240"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Ëá™ÂÆö‰πâÂàóÂêç",
    "href": "qmd/pandas3ed10cn.html#Ëá™ÂÆö‰πâÂàóÂêç",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ëá™ÂÆö‰πâÂàóÂêç",
    "text": "Ëá™ÂÆö‰πâÂàóÂêç\nÊèê‰æõËá™ÂÆö‰πâÂêçÁß∞Ôºö\n\ngrouped_pct.agg([(\"average\", \"mean\"), (\"stdev\", np.std)])  # ‰ΩøÁî®Ëá™ÂÆö‰πâÂàóÂêç\n\n/tmp/ipykernel_2885/3675398900.py:1: FutureWarning: The provided callable &lt;function std at 0x7fa2f8107d80&gt; is currently using SeriesGroupBy.std. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"std\" instead.\n  grouped_pct.agg([(\"average\", \"mean\"), (\"stdev\", np.std)])  # ‰ΩøÁî®Ëá™ÂÆö‰πâÂàóÂêç\n\n\n\n\n\n\n\n\n\n\naverage\nstdev\n\n\nday\nsmoker\n\n\n\n\n\n\nFri\nNo\n0.151650\n0.028123\n\n\nYes\n0.174783\n0.051293\n\n\nSat\nNo\n0.158048\n0.039767\n\n\nYes\n0.147906\n0.061375\n\n\nSun\nNo\n0.160113\n0.042347\n\n\nYes\n0.187250\n0.154134\n\n\nThur\nNo\n0.160298\n0.038774\n\n\nYes\n0.163863\n0.039389"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÂØπ‰∏çÂêåÂàóÂ∫îÁî®‰∏çÂêåÂáΩÊï∞",
    "href": "qmd/pandas3ed10cn.html#ÂØπ‰∏çÂêåÂàóÂ∫îÁî®‰∏çÂêåÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØπ‰∏çÂêåÂàóÂ∫îÁî®‰∏çÂêåÂáΩÊï∞",
    "text": "ÂØπ‰∏çÂêåÂàóÂ∫îÁî®‰∏çÂêåÂáΩÊï∞\nÂØπ‰∏çÂêåÂàóÂ∫îÁî®‰∏çÂêåÁöÑÂáΩÊï∞Ôºö\n\nfunctions = [\"count\", \"mean\", \"max\"]  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÂàóË°®\nresult = grouped[[\"tip_pct\", \"total_bill\"]].agg(functions)  # ÂØπ tip_pct Âíå total_bill Â∫îÁî®ÂáΩÊï∞ÂàóË°®\nresult\n\n\n\n\n\n\n\n\n\ntip_pct\ntotal_bill\n\n\n\n\ncount\nmean\nmax\ncount\nmean\nmax\n\n\nday\nsmoker\n\n\n\n\n\n\n\n\n\n\nFri\nNo\n4\n0.151650\n0.187735\n4\n18.420000\n22.75\n\n\nYes\n15\n0.174783\n0.263480\n15\n16.813333\n40.17\n\n\nSat\nNo\n45\n0.158048\n0.291990\n45\n19.661778\n48.33\n\n\nYes\n42\n0.147906\n0.325733\n42\n21.276667\n50.81\n\n\nSun\nNo\n57\n0.160113\n0.252672\n57\n20.506667\n48.17\n\n\nYes\n19\n0.187250\n0.710345\n19\n24.120000\n45.35\n\n\nThur\nNo\n45\n0.160298\n0.266312\n45\n17.113111\n41.19\n\n\nYes\n17\n0.163863\n0.241255\n17\n19.190588\n43.11\n\n\n\n\n\n\n\n\ngrouped.agg({\"tip\" : np.max, \"size\" : \"sum\"})  # ÂØπ tip ÂàóÂ∫îÁî® max ÂáΩÊï∞ÔºåÂØπ size ÂàóÂ∫îÁî® sum ÂáΩÊï∞\n\n/tmp/ipykernel_2885/2920994840.py:1: FutureWarning: The provided callable &lt;function max at 0x7fa2f8107240&gt; is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n  grouped.agg({\"tip\" : np.max, \"size\" : \"sum\"})  # ÂØπ tip ÂàóÂ∫îÁî® max ÂáΩÊï∞ÔºåÂØπ size ÂàóÂ∫îÁî® sum ÂáΩÊï∞\n\n\n\n\n\n\n\n\n\n\ntip\nsize\n\n\nday\nsmoker\n\n\n\n\n\n\nFri\nNo\n3.50\n9\n\n\nYes\n4.73\n31\n\n\nSat\nNo\n9.00\n115\n\n\nYes\n10.00\n104\n\n\nSun\nNo\n6.00\n167\n\n\nYes\n6.50\n49\n\n\nThur\nNo\n6.70\n112\n\n\nYes\n5.00\n40\n\n\n\n\n\n\n\n\ngrouped.agg({\n    \"tip_pct\": [\"min\", \"max\", \"mean\", \"std\"],  # ÂØπ tip_pct Â∫îÁî®Â§ö‰∏™ÂáΩÊï∞\n    \"size\": \"sum\"  # ÂØπ size Â∫îÁî® sum ÂáΩÊï∞\n})\n\n\n\n\n\n\n\n\n\ntip_pct\nsize\n\n\n\n\nmin\nmax\nmean\nstd\nsum\n\n\nday\nsmoker\n\n\n\n\n\n\n\n\n\nFri\nNo\n0.120385\n0.187735\n0.151650\n0.028123\n9\n\n\nYes\n0.103555\n0.263480\n0.174783\n0.051293\n31\n\n\nSat\nNo\n0.056797\n0.291990\n0.158048\n0.039767\n115\n\n\nYes\n0.035638\n0.325733\n0.147906\n0.061375\n104\n\n\nSun\nNo\n0.059447\n0.252672\n0.160113\n0.042347\n167\n\n\nYes\n0.065660\n0.710345\n0.187250\n0.154134\n49\n\n\nThur\nNo\n0.072961\n0.266312\n0.160298\n0.038774\n112\n\n\nYes\n0.090014\n0.241255\n0.163863\n0.039389\n40"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#apply-ÁöÑÂº∫Â§ß‰πãÂ§Ñ",
    "href": "qmd/pandas3ed10cn.html#apply-ÁöÑÂº∫Â§ß‰πãÂ§Ñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "apply ÁöÑÂº∫Â§ß‰πãÂ§Ñ üí™",
    "text": "apply ÁöÑÂº∫Â§ß‰πãÂ§Ñ üí™\napply ÊòØÊúÄÈÄöÁî®ÁöÑ GroupBy ÊñπÊ≥ï„ÄÇÊãÜÂàÜ„ÄÅÂ∫îÁî®ÂáΩÊï∞„ÄÅËøûÊé•„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Á§∫‰æãÈÄâÊã©ÂâçÂá†Ë°å",
    "href": "qmd/pandas3ed10cn.html#Á§∫‰æãÈÄâÊã©ÂâçÂá†Ë°å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÈÄâÊã©ÂâçÂá†Ë°å",
    "text": "Á§∫‰æãÔºöÈÄâÊã©ÂâçÂá†Ë°å\n\ndef top(df, n=5, column=\"tip_pct\"):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÊåâÊåáÂÆöÂàóÈÄâÊã©Ââç n Ë°å\n    return df.sort_values(column, ascending=False)[:n]\n\ntips.groupby(\"smoker\").apply(top)  # Êåâ smoker ÂàÜÁªÑÔºåÂ∫îÁî® top ÂáΩÊï∞\n\n/tmp/ipykernel_2885/3081321245.py:4: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  tips.groupby(\"smoker\").apply(top)  # Êåâ smoker ÂàÜÁªÑÔºåÂ∫îÁî® top ÂáΩÊï∞\n\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\ntip_pct\n\n\nsmoker\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n232\n11.61\n3.39\nNo\nSat\nDinner\n2\n0.291990\n\n\n149\n7.51\n2.00\nNo\nThur\nLunch\n2\n0.266312\n\n\n51\n10.29\n2.60\nNo\nSun\nDinner\n2\n0.252672\n\n\n185\n20.69\n5.00\nNo\nSun\nDinner\n5\n0.241663\n\n\n88\n24.71\n5.85\nNo\nThur\nLunch\n2\n0.236746\n\n\nYes\n172\n7.25\n5.15\nYes\nSun\nDinner\n2\n0.710345\n\n\n178\n9.60\n4.00\nYes\nSun\nDinner\n2\n0.416667\n\n\n67\n3.07\n1.00\nYes\nSat\nDinner\n1\n0.325733\n\n\n183\n23.17\n6.50\nYes\nSun\nDinner\n4\n0.280535\n\n\n109\n14.31\n4.00\nYes\nSat\nDinner\n2\n0.279525"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Âêë-apply-‰º†ÈÄíÂèÇÊï∞",
    "href": "qmd/pandas3ed10cn.html#Âêë-apply-‰º†ÈÄíÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âêë apply ‰º†ÈÄíÂèÇÊï∞",
    "text": "Âêë apply ‰º†ÈÄíÂèÇÊï∞\n\ntips.groupby([\"smoker\", \"day\"]).apply(top, n=1, column=\"total_bill\")  # Âêë apply ‰º†ÈÄíÈ¢ùÂ§ñÁöÑÂèÇÊï∞\n\n/tmp/ipykernel_2885/1043258707.py:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  tips.groupby([\"smoker\", \"day\"]).apply(top, n=1, column=\"total_bill\")  # Âêë apply ‰º†ÈÄíÈ¢ùÂ§ñÁöÑÂèÇÊï∞\n\n\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\ntip_pct\n\n\nsmoker\nday\n\n\n\n\n\n\n\n\n\n\n\n\nNo\nFri\n94\n22.75\n3.25\nNo\nFri\nDinner\n2\n0.142857\n\n\nSat\n212\n48.33\n9.00\nNo\nSat\nDinner\n4\n0.186220\n\n\nSun\n156\n48.17\n5.00\nNo\nSun\nDinner\n6\n0.103799\n\n\nThur\n142\n41.19\n5.00\nNo\nThur\nLunch\n5\n0.121389\n\n\nYes\nFri\n95\n40.17\n4.73\nYes\nFri\nDinner\n4\n0.117750\n\n\nSat\n170\n50.81\n10.00\nYes\nSat\nDinner\n3\n0.196812\n\n\nSun\n182\n45.35\n3.50\nYes\nSun\nDinner\n3\n0.077178\n\n\nThur\n197\n43.11\n5.00\nYes\nThur\nLunch\n4\n0.115982"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Âú®-apply-‰∏≠ÊäëÂà∂ÁªÑÈîÆ",
    "href": "qmd/pandas3ed10cn.html#Âú®-apply-‰∏≠ÊäëÂà∂ÁªÑÈîÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âú® apply ‰∏≠ÊäëÂà∂ÁªÑÈîÆ",
    "text": "Âú® apply ‰∏≠ÊäëÂà∂ÁªÑÈîÆ\n‰ΩøÁî® group_keys=FalseÔºö\n\ntips.groupby(\"smoker\", group_keys=False).apply(top)  # ÊäëÂà∂ÁªÑÈîÆ\n\n/tmp/ipykernel_2885/178130250.py:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  tips.groupby(\"smoker\", group_keys=False).apply(top)  # ÊäëÂà∂ÁªÑÈîÆ\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\ntip_pct\n\n\n\n\n232\n11.61\n3.39\nNo\nSat\nDinner\n2\n0.291990\n\n\n149\n7.51\n2.00\nNo\nThur\nLunch\n2\n0.266312\n\n\n51\n10.29\n2.60\nNo\nSun\nDinner\n2\n0.252672\n\n\n185\n20.69\n5.00\nNo\nSun\nDinner\n5\n0.241663\n\n\n88\n24.71\n5.85\nNo\nThur\nLunch\n2\n0.236746\n\n\n172\n7.25\n5.15\nYes\nSun\nDinner\n2\n0.710345\n\n\n178\n9.60\n4.00\nYes\nSun\nDinner\n2\n0.416667\n\n\n67\n3.07\n1.00\nYes\nSat\nDinner\n1\n0.325733\n\n\n183\n23.17\n6.50\nYes\nSun\nDinner\n4\n0.280535\n\n\n109\n14.31\n4.00\nYes\nSat\nDinner\n2\n0.279525"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Â∞Ü-cut-Âíå-qcut-‰∏é-groupby-ÁªìÂêà‰ΩøÁî®",
    "href": "qmd/pandas3ed10cn.html#Â∞Ü-cut-Âíå-qcut-‰∏é-groupby-ÁªìÂêà‰ΩøÁî®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞Ü cut Âíå qcut ‰∏é groupby ÁªìÂêà‰ΩøÁî®",
    "text": "Â∞Ü cut Âíå qcut ‰∏é groupby ÁªìÂêà‰ΩøÁî®\nÂ∞Ü cut/qcut ‰∏é groupby ÁªìÂêà‰ΩøÁî®ËøõË°åÊ°∂/ÂàÜ‰ΩçÊï∞ÂàÜÊûêÔºö\n\nframe = pd.DataFrame({\n    \"data1\": np.random.standard_normal(1000),  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 1000 ‰∏™ÈöèÊú∫Êï∞ÁöÑ DataFrame\n    \"data2\": np.random.standard_normal(1000)\n})\nquartiles = pd.cut(frame[\"data1\"], 4)  # Â∞Ü data1 ÂàóÂàÜ‰∏∫ 4 ‰∏™Ê°∂\n\ndef get_stats(group):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËÆ°ÁÆóÁªÑÁöÑÁªüËÆ°‰ø°ÊÅØ\n    return pd.DataFrame(\n        {\"min\": group.min(), \"max\": group.max(),\n        \"count\": group.count(), \"mean\": group.mean()}\n    )\n\ngrouped = frame.groupby(quartiles)  # ÊåâÂàÜ‰ΩçÊï∞ÂàÜÁªÑ\ngrouped.apply(get_stats)  # Â∫îÁî® get_stats ÂáΩÊï∞\n\n/tmp/ipykernel_2885/149866670.py:13: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped = frame.groupby(quartiles)  # ÊåâÂàÜ‰ΩçÊï∞ÂàÜÁªÑ\n\n\n\n\n\n\n\n\n\n\nmin\nmax\ncount\nmean\n\n\ndata1\n\n\n\n\n\n\n\n\n\n(-3.47, -1.798]\ndata1\n-3.463633\n-1.801195\n39\n-2.222720\n\n\ndata2\n-2.006649\n2.527682\n39\n0.072085\n\n\n(-1.798, -0.133]\ndata1\n-1.790149\n-0.136841\n382\n-0.773966\n\n\ndata2\n-2.798776\n2.872683\n382\n-0.000894\n\n\n(-0.133, 1.532]\ndata1\n-0.130968\n1.526832\n516\n0.580444\n\n\ndata2\n-3.112524\n3.006541\n516\n0.024306\n\n\n(1.532, 3.197]\ndata1\n1.534330\n3.197269\n63\n2.034750\n\n\ndata2\n-1.954648\n2.633272\n63\n0.109399\n\n\n\n\n\n\n\nÁõ∏ÂêåÁöÑÁªìÊûúÂèØ‰ª•Áî®Êõ¥ÁÆÄÂçïÁöÑÊñπÊ≥ïËÆ°ÁÆóÂæóÂà∞:\n\ngrouped.agg([\"min\", \"max\", \"count\", \"mean\"])\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\n\nmin\nmax\ncount\nmean\nmin\nmax\ncount\nmean\n\n\ndata1\n\n\n\n\n\n\n\n\n\n\n\n\n(-3.47, -1.798]\n-3.463633\n-1.801195\n39\n-2.222720\n-2.006649\n2.527682\n39\n0.072085\n\n\n(-1.798, -0.133]\n-1.790149\n-0.136841\n382\n-0.773966\n-2.798776\n2.872683\n382\n-0.000894\n\n\n(-0.133, 1.532]\n-0.130968\n1.526832\n516\n0.580444\n-3.112524\n3.006541\n516\n0.024306\n\n\n(1.532, 3.197]\n1.534330\n3.197269\n63\n2.034750\n-1.954648\n2.633272\n63\n0.109399"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®-qcut-Ëé∑ÂèñÁõ∏Á≠âÂ§ßÂ∞èÁöÑÊ°∂",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®-qcut-Ëé∑ÂèñÁõ∏Á≠âÂ§ßÂ∞èÁöÑÊ°∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® qcut Ëé∑ÂèñÁõ∏Á≠âÂ§ßÂ∞èÁöÑÊ°∂",
    "text": "‰ΩøÁî® qcut Ëé∑ÂèñÁõ∏Á≠âÂ§ßÂ∞èÁöÑÊ°∂\n\nquartiles_samp = pd.qcut(frame[\"data1\"], 4, labels=False)  # Â∞Ü data1 ÂàóÂàÜ‰∏∫ 4 ‰∏™Áõ∏Á≠âÂ§ßÂ∞èÁöÑÊ°∂ÔºåËøîÂõûÊ†áÁ≠æ\ngrouped = frame.groupby(quartiles_samp)  # ÊåâÂàÜ‰ΩçÊï∞Ê†áÁ≠æÂàÜÁªÑ\ngrouped.apply(get_stats)  # Â∫îÁî® get_stats ÂáΩÊï∞\n\n\n\n\n\n\n\n\n\nmin\nmax\ncount\nmean\n\n\ndata1\n\n\n\n\n\n\n\n\n\n0\ndata1\n-3.463633\n-0.612464\n250\n-1.276390\n\n\ndata2\n-2.263471\n2.527682\n250\n0.027311\n\n\n1\ndata1\n-0.608569\n0.040523\n250\n-0.266919\n\n\ndata2\n-2.798776\n2.872683\n250\n-0.027168\n\n\n2\ndata1\n0.043529\n0.759537\n250\n0.379052\n\n\ndata2\n-3.112524\n2.651350\n250\n-0.028211\n\n\n3\ndata1\n0.760484\n3.197269\n250\n1.345686\n\n\ndata2\n-2.280409\n3.006541\n250\n0.115682"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®Âπ≥ÂùáÂÄºÂ°´ÂÖÖ",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®Âπ≥ÂùáÂÄºÂ°´ÂÖÖ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®Âπ≥ÂùáÂÄºÂ°´ÂÖÖ",
    "text": "‰ΩøÁî®Âπ≥ÂùáÂÄºÂ°´ÂÖÖ\n\ns = pd.Series(np.random.standard_normal(6))  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 6 ‰∏™ÈöèÊú∫Êï∞ÁöÑ Series\ns[::2] = np.nan  # Â∞Ü‰∏Ä‰∫õÂÄºËÆæÁΩÆ‰∏∫ NaN\ns.fillna(s.mean())  # ‰ΩøÁî® Series ÁöÑÂπ≥ÂùáÂÄºÂ°´ÂÖÖ NaN\n\n0    0.301104\n1    2.326304\n2    0.301104\n3   -1.811516\n4    0.301104\n5    0.388523\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®ÁªÑÁâπÂÆöÂπ≥ÂùáÂÄºÂ°´ÂÖÖ",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®ÁªÑÁâπÂÆöÂπ≥ÂùáÂÄºÂ°´ÂÖÖ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÁªÑÁâπÂÆöÂπ≥ÂùáÂÄºÂ°´ÂÖÖ",
    "text": "‰ΩøÁî®ÁªÑÁâπÂÆöÂπ≥ÂùáÂÄºÂ°´ÂÖÖ\n\nstates = [\"Ohio\", \"New York\", \"Vermont\", \"Florida\",  # ÂàõÂª∫‰∏Ä‰∏™Â∑ûÂàóË°®\n          \"Oregon\", \"Nevada\", \"California\", \"Idaho\"]\ngroup_key = [\"East\"] * 4 + [\"West\"] * 4  # ÂàõÂª∫‰∏Ä‰∏™ÂàÜÁªÑÈîÆÂàóË°®\ndata = pd.Series(np.random.standard_normal(8), index=states)  # ÂàõÂª∫‰∏Ä‰∏™ SeriesÔºåÁ¥¢Âºï‰∏∫Â∑û\ndata[[\"Vermont\", \"Nevada\", \"Idaho\"]] = np.nan  # Â∞Ü‰∏Ä‰∫õÂÄºËÆæÁΩÆ‰∏∫ NaN\n\ndef fill_mean(group):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞Ôºå‰ΩøÁî®ÁªÑÁöÑÂπ≥ÂùáÂÄºÂ°´ÂÖÖ NaN\n    return group.fillna(group.mean())\n\ndata.groupby(group_key).apply(fill_mean)  # ÊåâÁªÑÈîÆÂàÜÁªÑÔºåÂ∫îÁî® fill_mean ÂáΩÊï∞\n\nEast  Ohio         -1.624621\n      New York     -0.536016\n      Vermont      -0.933978\n      Florida      -0.641297\nWest  Oregon       -1.431865\n      Nevada       -1.408131\n      California   -1.384396\n      Idaho        -1.408131\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#È¢ÑÂÆö‰πâÂ°´ÂÖÖÂÄº",
    "href": "qmd/pandas3ed10cn.html#È¢ÑÂÆö‰πâÂ°´ÂÖÖÂÄº",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È¢ÑÂÆö‰πâÂ°´ÂÖÖÂÄº",
    "text": "È¢ÑÂÆö‰πâÂ°´ÂÖÖÂÄº\n\nfill_values = {\"East\": 0.5, \"West\": -1}  # ÂàõÂª∫‰∏Ä‰∏™Â°´ÂÖÖÂÄºÂ≠óÂÖ∏\ndef fill_func(group):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞Ôºå‰ΩøÁî®È¢ÑÂÆö‰πâÂÄºÂ°´ÂÖÖ NaN\n    return group.fillna(fill_values[group.name])\n\ndata.groupby(group_key).apply(fill_func)  # ÊåâÁªÑÈîÆÂàÜÁªÑÔºåÂ∫îÁî® fill_func ÂáΩÊï∞\n\nEast  Ohio         -1.624621\n      New York     -0.536016\n      Vermont       0.500000\n      Florida      -0.641297\nWest  Oregon       -1.431865\n      Nevada       -1.000000\n      California   -1.384396\n      Idaho        -1.000000\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Ê®°Êãü‰∏ÄÂâØÁâå",
    "href": "qmd/pandas3ed10cn.html#Ê®°Êãü‰∏ÄÂâØÁâå",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê®°Êãü‰∏ÄÂâØÁâå",
    "text": "Ê®°Êãü‰∏ÄÂâØÁâå\n\nsuits = [\"H\", \"S\", \"C\", \"D\"]  # Ëä±Ëâ≤\ncard_val = (list(range(1, 11)) + [10] * 3) * 4  # ÁâåÂÄº\nbase_names = [\"A\"] + list(range(2, 11)) + [\"J\", \"K\", \"Q\"]  # ÁâåÂêç\ncards = []\nfor suit in suits:\n    cards.extend(str(num) + suit for num in base_names)\n\ndeck = pd.Series(card_val, index=cards)  # ÂàõÂª∫‰∏ÄÂâØÁâå"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÊäΩÂèñÈöèÊú∫‰∏ÄÊâãÁâå",
    "href": "qmd/pandas3ed10cn.html#ÊäΩÂèñÈöèÊú∫‰∏ÄÊâãÁâå",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊäΩÂèñÈöèÊú∫‰∏ÄÊâãÁâå",
    "text": "ÊäΩÂèñÈöèÊú∫‰∏ÄÊâãÁâå\n\ndef draw(deck, n=5):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞Ôºå‰ªé‰∏ÄÂâØÁâå‰∏≠ÊäΩÂèñ n Âº†Áâå\n    return deck.sample(n)\n\ndraw(deck)  # ÊäΩÂèñ 5 Âº†Áâå\n\n4D     4\n8H     8\nJD    10\n8D     8\n7S     7\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ªéÊØè‰∏™Ëä±Ëâ≤‰∏≠ÊäΩÂèñ‰∏§Âº†ÈöèÊú∫Áâå",
    "href": "qmd/pandas3ed10cn.html#‰ªéÊØè‰∏™Ëä±Ëâ≤‰∏≠ÊäΩÂèñ‰∏§Âº†ÈöèÊú∫Áâå",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ªéÊØè‰∏™Ëä±Ëâ≤‰∏≠ÊäΩÂèñ‰∏§Âº†ÈöèÊú∫Áâå",
    "text": "‰ªéÊØè‰∏™Ëä±Ëâ≤‰∏≠ÊäΩÂèñ‰∏§Âº†ÈöèÊú∫Áâå\n\ndef get_suit(card):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËé∑ÂèñÁâåÁöÑËä±Ëâ≤\n    return card[-1]\n\ndeck.groupby(get_suit).apply(draw, n=2)  # ÊåâËä±Ëâ≤ÂàÜÁªÑÔºå‰ªéÊØè‰∏™Ëä±Ëâ≤‰∏≠ÊäΩÂèñ 2 Âº†Áâå\n\nC  6C    6\n   4C    4\nD  6D    6\n   9D    9\nH  AH    1\n   3H    3\nS  5S    5\n   9S    9\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÁªÑÂä†ÊùÉÂπ≥Âùá",
    "href": "qmd/pandas3ed10cn.html#ÁªÑÂä†ÊùÉÂπ≥Âùá",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªÑÂä†ÊùÉÂπ≥Âùá",
    "text": "ÁªÑÂä†ÊùÉÂπ≥Âùá\n\ndf = pd.DataFrame({\n    \"category\": [\"a\", \"a\", \"a\", \"a\",  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\n                 \"b\", \"b\", \"b\", \"b\"],\n    \"data\": np.random.standard_normal(8),\n    \"weights\": np.random.uniform(size=8)\n})\n\ngrouped = df.groupby(\"category\")  # Êåâ category ÂàÜÁªÑ\n\ndef get_wavg(group):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËÆ°ÁÆóÁªÑÁöÑÂä†ÊùÉÂπ≥ÂùáÂÄº\n    return np.average(group[\"data\"], weights=group[\"weights\"])\n\ngrouped.apply(get_wavg)  # Â∫îÁî® get_wavg ÂáΩÊï∞\n\n/tmp/ipykernel_2885/888171918.py:13: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  grouped.apply(get_wavg)  # Â∫îÁî® get_wavg ÂáΩÊï∞\n\n\ncategory\na    0.253727\nb    0.105938\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰∏é-spxÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞ÁöÑÁõ∏ÂÖ≥ÊÄß",
    "href": "qmd/pandas3ed10cn.html#‰∏é-spxÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞ÁöÑÁõ∏ÂÖ≥ÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏é SPXÔºàÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÔºâÁöÑÁõ∏ÂÖ≥ÊÄß",
    "text": "‰∏é SPXÔºàÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÔºâÁöÑÁõ∏ÂÖ≥ÊÄß\n\n# ÂÅáËÆæ examples Êñá‰ª∂Â§πÂ≠òÂú®‰∏îÂåÖÂê´ stock_px.csv Êñá‰ª∂\nclose_px = pd.read_csv(\"examples/stock_px.csv\", parse_dates=True, index_col=0)  # ‰ªé CSV Êñá‰ª∂Âä†ËΩΩÊï∞ÊçÆ\n\nrets = close_px.pct_change().dropna()  # ËÆ°ÁÆóÊî∂ÁõäÁéáÂπ∂Âà†Èô§Áº∫Â§±ÂÄº\n\ndef get_year(x):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËé∑ÂèñÂπ¥‰ªΩ\n    return x.year\n\nby_year = rets.groupby(get_year)  # ÊåâÂπ¥‰ªΩÂàÜÁªÑ\n\ndef spx_corr(group):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËÆ°ÁÆó‰∏é SPX ÁöÑÁõ∏ÂÖ≥ÊÄß\n    return group.corrwith(group[\"SPX\"])\n\nby_year.apply(spx_corr)  # Â∫îÁî® spx_corr ÂáΩÊï∞\n\n\n\n\n\n\n\n\nAAPL\nMSFT\nXOM\nSPX\n\n\n\n\n2003\n0.541124\n0.745174\n0.661265\n1.0\n\n\n2004\n0.374283\n0.588531\n0.557742\n1.0\n\n\n2005\n0.467540\n0.562374\n0.631010\n1.0\n\n\n2006\n0.428267\n0.406126\n0.518514\n1.0\n\n\n2007\n0.508118\n0.658770\n0.786264\n1.0\n\n\n2008\n0.681434\n0.804626\n0.828303\n1.0\n\n\n2009\n0.707103\n0.654902\n0.797921\n1.0\n\n\n2010\n0.710105\n0.730118\n0.839057\n1.0\n\n\n2011\n0.691931\n0.800996\n0.859975\n1.0"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÂàóÈó¥Áõ∏ÂÖ≥ÊÄßapple-Âíå-microsoft",
    "href": "qmd/pandas3ed10cn.html#ÂàóÈó¥Áõ∏ÂÖ≥ÊÄßapple-Âíå-microsoft",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóÈó¥Áõ∏ÂÖ≥ÊÄßÔºàApple Âíå MicrosoftÔºâ",
    "text": "ÂàóÈó¥Áõ∏ÂÖ≥ÊÄßÔºàApple Âíå MicrosoftÔºâ\n\ndef corr_aapl_msft(group):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËÆ°ÁÆó Apple Âíå Microsoft ‰πãÈó¥ÁöÑÁõ∏ÂÖ≥ÊÄß\n    return group[\"AAPL\"].corr(group[\"MSFT\"])\n\nby_year.apply(corr_aapl_msft)  # Â∫îÁî® corr_aapl_msft ÂáΩÊï∞\n\n2003    0.480868\n2004    0.259024\n2005    0.300093\n2006    0.161735\n2007    0.417738\n2008    0.611901\n2009    0.432738\n2010    0.571946\n2011    0.581987\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#transform-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed10cn.html#transform-ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "transform ÊñπÊ≥ï",
    "text": "transform ÊñπÊ≥ï\ntransform Á±ª‰ºº‰∫é applyÔºå‰ΩÜÔºö\n\nÂèØ‰ª•ÁîüÊàêË¶ÅÂπøÊí≠ÁöÑÊ†áÈáè„ÄÇ\nÁîüÊàê‰∏éËæìÂÖ•ÂΩ¢Áä∂Áõ∏ÂêåÁöÑÂØπË±°„ÄÇ\n‰∏çÂæóÊîπÂèòÂÖ∂ËæìÂÖ•„ÄÇ\n\n\ndf = pd.DataFrame({'key': ['a', 'b', 'c'] * 4,\n                   'value': np.arange(12.)})\ng = df.groupby('key')['value']\n\ndef get_mean(group):  #ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞Ê±ÇÂπ≥ÂùáÂÄº\n    return group.mean()\ng.transform(get_mean)\n\n0     4.5\n1     5.5\n2     6.5\n3     4.5\n4     5.5\n5     6.5\n6     4.5\n7     5.5\n8     6.5\n9     4.5\n10    5.5\n11    6.5\nName: value, dtype: float64\n\n\nÊàë‰ª¨ÂèØ‰ª•ÂÉè‰ΩøÁî® GroupBy agg ÊñπÊ≥ï‰∏ÄÊ†∑‰º†ÈÄíÂ≠óÁ¨¶‰∏≤Âà´ÂêçÔºö\n\ng.transform('mean')\n\n0     4.5\n1     5.5\n2     6.5\n3     4.5\n4     5.5\n5     6.5\n6     4.5\n7     5.5\n8     6.5\n9     4.5\n10    5.5\n11    6.5\nName: value, dtype: float64\n\n\n‰∏é apply Á±ª‰ººÔºåtransform ÈÄÇÁî®‰∫éËøîÂõû Series ÁöÑÂáΩÊï∞Ôºå‰ΩÜÁªìÊûúÂøÖÈ°ª‰∏éËæìÂÖ•Â§ßÂ∞èÁõ∏Âêå„ÄÇ ‰æãÂ¶ÇÔºåÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®ËæÖÂä©ÂáΩÊï∞Â∞ÜÊØè‰∏™ÁªÑ‰πò‰ª• 2Ôºö\n\ndef times_two(group):\n      return group * 2\ng.transform(times_two)\n\n0      0.0\n1      2.0\n2      4.0\n3      6.0\n4      8.0\n5     10.0\n6     12.0\n7     14.0\n8     16.0\n9     18.0\n10    20.0\n11    22.0\nName: value, dtype: float64\n\n\n‰Ωú‰∏∫‰∏Ä‰∏™Êõ¥Â§çÊùÇÁöÑÁ§∫‰æãÔºåÊàë‰ª¨ÂèØ‰ª•ËÆ°ÁÆóÊØè‰∏™ÁªÑÁöÑÈôçÂ∫èÊéíÂêçÔºö\n\ndef get_ranks(group):\n    return group.rank(ascending=False)\ng.transform(get_ranks)\n\n0     4.0\n1     4.0\n2     4.0\n3     3.0\n4     3.0\n5     3.0\n6     2.0\n7     2.0\n8     2.0\n9     1.0\n10    1.0\n11    1.0\nName: value, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Â±ïÂºÄÁöÑÂàÜÁªÑÊìç‰Ωú",
    "href": "qmd/pandas3ed10cn.html#Â±ïÂºÄÁöÑÂàÜÁªÑÊìç‰Ωú",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‚ÄúÂ±ïÂºÄÁöÑ‚ÄùÂàÜÁªÑÊìç‰Ωú",
    "text": "‚ÄúÂ±ïÂºÄÁöÑ‚ÄùÂàÜÁªÑÊìç‰Ωú\n‚ÄúÂ±ïÂºÄÁöÑ‚ÄùÊìç‰ΩúÈÄöÂ∏∏ÊØî apply Âø´Ôºö\n\ndef normalize(x):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËøõË°åÊ†áÂáÜÂåñ\n    return (x - x.mean()) / x.std()\n\ng.transform(normalize)  # ‰ΩøÁî® transform ËøõË°åÊ†áÂáÜÂåñ\n\n0    -1.161895\n1    -1.161895\n2    -1.161895\n3    -0.387298\n4    -0.387298\n5    -0.387298\n6     0.387298\n7     0.387298\n8     0.387298\n9     1.161895\n10    1.161895\n11    1.161895\nName: value, dtype: float64\n\n\n\ng.apply(normalize)  # ‰ΩøÁî® apply ËøõË°åÊ†áÂáÜÂåñ\n\nkey    \na    0    -1.161895\n     3    -0.387298\n     6     0.387298\n     9     1.161895\nb    1    -1.161895\n     4    -0.387298\n     7     0.387298\n     10    1.161895\nc    2    -1.161895\n     5    -0.387298\n     8     0.387298\n     11    1.161895\nName: value, dtype: float64\n\n\n\nnormalized = (df['value'] - g.transform('mean')) / g.transform('std')  # Â±ïÂºÄÁöÑÂàÜÁªÑÊìç‰Ωú\nnormalized\n\n0    -1.161895\n1    -1.161895\n2    -1.161895\n3    -0.387298\n4    -0.387298\n5    -0.387298\n6     0.387298\n7     0.387298\n8     0.387298\n9     1.161895\n10    1.161895\n11    1.161895\nName: value, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ªÄ‰πàÊòØÊï∞ÊçÆÈÄèËßÜË°®",
    "href": "qmd/pandas3ed10cn.html#‰ªÄ‰πàÊòØÊï∞ÊçÆÈÄèËßÜË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ªÄ‰πàÊòØÊï∞ÊçÆÈÄèËßÜË°®Ôºüü§î",
    "text": "‰ªÄ‰πàÊòØÊï∞ÊçÆÈÄèËßÜË°®Ôºüü§î\nÊåâÈîÆËÅöÂêàÊï∞ÊçÆÔºåÂ∞ÜÂÖ∂ÊéíÂàóÊàêÁü©ÂΩ¢„ÄÇÂú®ÁîµÂ≠êË°®Ê†º‰∏≠ÂæàÂ∏∏ËßÅ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®-pandas-ÂàõÂª∫Êï∞ÊçÆÈÄèËßÜË°®",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®-pandas-ÂàõÂª∫Êï∞ÊçÆÈÄèËßÜË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® pandas ÂàõÂª∫Êï∞ÊçÆÈÄèËßÜË°®",
    "text": "‰ΩøÁî® pandas ÂàõÂª∫Êï∞ÊçÆÈÄèËßÜË°®\npivot_table Âà©Áî® groupby ÂíåÂàÜÂ±ÇÁ¥¢ÂºïÔºö\n\ntips.pivot_table(\n    values=['total_bill', 'tip'],  # Ë¶ÅËÅöÂêàÁöÑÂàó\n    index=['day', 'smoker'],  # Ë°åÁ¥¢Âºï\n    aggfunc='mean'  # ËÅöÂêàÂáΩÊï∞\n)\n\n\n\n\n\n\n\n\n\ntip\ntotal_bill\n\n\nday\nsmoker\n\n\n\n\n\n\nFri\nNo\n2.812500\n18.420000\n\n\nYes\n2.714000\n16.813333\n\n\nSat\nNo\n3.102889\n19.661778\n\n\nYes\n2.875476\n21.276667\n\n\nSun\nNo\n3.167895\n20.506667\n\n\nYes\n3.516842\n24.120000\n\n\nThur\nNo\n2.673778\n17.113111\n\n\nYes\n3.030000\n19.190588"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#ÊåâÂ§ö‰∏™ÂèòÈáèÂàÜÁªÑ",
    "href": "qmd/pandas3ed10cn.html#ÊåâÂ§ö‰∏™ÂèòÈáèÂàÜÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÂ§ö‰∏™ÂèòÈáèÂàÜÁªÑ",
    "text": "ÊåâÂ§ö‰∏™ÂèòÈáèÂàÜÁªÑ\n\ntips.pivot_table(index=[\"time\", \"day\"], columns=\"smoker\",  # Ë°åÂíåÂàó\n                 values=[\"tip_pct\", \"size\"])  # Ë¶ÅËÅöÂêàÁöÑÂàó\n\n\n\n\n\n\n\n\n\nsize\ntip_pct\n\n\n\nsmoker\nNo\nYes\nNo\nYes\n\n\ntime\nday\n\n\n\n\n\n\n\n\nDinner\nFri\n2.000000\n2.222222\n0.139622\n0.165347\n\n\nSat\n2.555556\n2.476190\n0.158048\n0.147906\n\n\nSun\n2.929825\n2.578947\n0.160113\n0.187250\n\n\nThur\n2.000000\nNaN\n0.159744\nNaN\n\n\nLunch\nFri\n3.000000\n1.833333\n0.187735\n0.188937\n\n\nThur\n2.500000\n2.352941\n0.160311\n0.163863"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#Ê∑ªÂä†ËæπË∑ùÈÉ®ÂàÜÊÄªËÆ°",
    "href": "qmd/pandas3ed10cn.html#Ê∑ªÂä†ËæπË∑ùÈÉ®ÂàÜÊÄªËÆ°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê∑ªÂä†ËæπË∑ùÔºàÈÉ®ÂàÜÊÄªËÆ°Ôºâ",
    "text": "Ê∑ªÂä†ËæπË∑ùÔºàÈÉ®ÂàÜÊÄªËÆ°Ôºâ\n\ntips.pivot_table(index=[\"time\", \"day\"], columns=\"smoker\",\n                 values=[\"tip_pct\", \"size\"], margins=True)  # Ê∑ªÂä†ËæπË∑ù\n\n\n\n\n\n\n\n\n\nsize\ntip_pct\n\n\n\nsmoker\nNo\nYes\nAll\nNo\nYes\nAll\n\n\ntime\nday\n\n\n\n\n\n\n\n\n\n\nDinner\nFri\n2.000000\n2.222222\n2.166667\n0.139622\n0.165347\n0.158916\n\n\nSat\n2.555556\n2.476190\n2.517241\n0.158048\n0.147906\n0.153152\n\n\nSun\n2.929825\n2.578947\n2.842105\n0.160113\n0.187250\n0.166897\n\n\nThur\n2.000000\nNaN\n2.000000\n0.159744\nNaN\n0.159744\n\n\nLunch\nFri\n3.000000\n1.833333\n2.000000\n0.187735\n0.188937\n0.188765\n\n\nThur\n2.500000\n2.352941\n2.459016\n0.160311\n0.163863\n0.161301\n\n\nAll\n\n2.668874\n2.408602\n2.569672\n0.159328\n0.163196\n0.160803"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰ΩøÁî®‰∏çÂêåÁöÑËÅöÂêàÂáΩÊï∞",
    "href": "qmd/pandas3ed10cn.html#‰ΩøÁî®‰∏çÂêåÁöÑËÅöÂêàÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®‰∏çÂêåÁöÑËÅöÂêàÂáΩÊï∞",
    "text": "‰ΩøÁî®‰∏çÂêåÁöÑËÅöÂêàÂáΩÊï∞\n\ntips.pivot_table(index=[\"time\", \"smoker\"], columns=\"day\",\n                 values=\"tip_pct\", aggfunc=len, margins=True)  # ‰ΩøÁî® len ‰Ωú‰∏∫ËÅöÂêàÂáΩÊï∞\n\n\n\n\n\n\n\n\nday\nFri\nSat\nSun\nThur\nAll\n\n\ntime\nsmoker\n\n\n\n\n\n\n\n\n\nDinner\nNo\n3.0\n45.0\n57.0\n1.0\n106\n\n\nYes\n9.0\n42.0\n19.0\nNaN\n70\n\n\nLunch\nNo\n1.0\nNaN\nNaN\n44.0\n45\n\n\nYes\n6.0\nNaN\nNaN\n17.0\n23\n\n\nAll\n\n19.0\n87.0\n76.0\n62.0\n244"
  },
  {
    "objectID": "qmd/pandas3ed10cn.html#‰∫§ÂèâË°®-crosstab",
    "href": "qmd/pandas3ed10cn.html#‰∫§ÂèâË°®-crosstab",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫§ÂèâË°® (Crosstab)",
    "text": "‰∫§ÂèâË°® (Crosstab)\nCrosstab ËÆ°ÁÆóÁªÑÈ¢ëÁéáÔºö\n\nfrom io import StringIO\n\ndata = pd.read_table(StringIO(\"\"\"Sample Nationality Handedness\n1 USA Right-handed\n2 Japan Left-handed\n3 USA Right-handed\n4 Japan Right-handed\n5 Japan Left-handed\n6 Japan Right-handed\n7 USA Right-handed\n8 USA Left-handed\n9 Japan Right-handed\n10 USA Right-handed\"\"\"), sep=\"\\s+\")\n\npd.crosstab(data[\"Nationality\"], data[\"Handedness\"], margins=True)  # ÂàõÂª∫‰∫§ÂèâË°®\n\n&lt;&gt;:13: SyntaxWarning: invalid escape sequence '\\s'\n&lt;&gt;:13: SyntaxWarning: invalid escape sequence '\\s'\n/tmp/ipykernel_2885/2308762248.py:13: SyntaxWarning: invalid escape sequence '\\s'\n  10 USA Right-handed\"\"\"), sep=\"\\s+\")\n\n\n\n\n\n\n\n\nHandedness\nLeft-handed\nRight-handed\nAll\n\n\nNationality\n\n\n\n\n\n\n\nJapan\n2\n3\n5\n\n\nUSA\n1\n4\n5\n\n\nAll\n3\n7\n10\n\n\n\n\n\n\n\n\npd.crosstab([tips[\"time\"], tips[\"day\"]], tips[\"smoker\"], margins=True)  # ÂàõÂª∫‰∫§ÂèâË°®\n\n\n\n\n\n\n\n\nsmoker\nNo\nYes\nAll\n\n\ntime\nday\n\n\n\n\n\n\n\nDinner\nFri\n3\n9\n12\n\n\nSat\n45\n42\n87\n\n\nSun\n57\n19\n76\n\n\nThur\n1\n0\n1\n\n\nLunch\nFri\n1\n6\n7\n\n\nThur\n44\n17\n61\n\n\nAll\n\n151\n93\n244"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html",
    "href": "qmd/pandas3ed3cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨Á´†Ê∑±ÂÖ•Êé¢ËÆ® Python ‰∏≠ÂØπÊï∞ÊçÆÂàÜÊûêËá≥ÂÖ≥ÈáçË¶ÅÁöÑÂü∫Êú¨ÊûÑÂª∫Âùó„ÄÇÊàë‰ª¨Â∞ÜÊé¢Á¥¢ Python ÁöÑÂÜÖÁΩÆÊï∞ÊçÆÁªìÊûÑÔºåÂ¶Ç‰ΩïÂàõÂª∫ÂèØÈáçÁî®ÁöÑÂáΩÊï∞Ôºå‰ª•ÂèäÂ¶Ç‰Ωï‰∏éÊñá‰ª∂‰∫§‰∫í„ÄÇ\n\n\n\n\n\n\nNote\n\n\n\nËôΩÁÑ∂ÂÉè pandas Âíå NumPy ËøôÊ†∑ÁöÑÂ∫ì‰∏∫Êõ¥Â§ßÁöÑÊï∞ÊçÆÈõÜÊèê‰æõ‰∫ÜÈ´òÁ∫ßÂäüËÉΩÔºå‰ΩÜÂÆÉ‰ª¨ÁöÑËÆæËÆ°ÁõÆÁöÑÊòØ‰∏é Python ÁöÑÊ†∏ÂøÉÊï∞ÊçÆÊìç‰ΩúÂ∑•ÂÖ∑ÂçèÂêåÂ∑•‰Ωú„ÄÇÊéåÊè°Ëøô‰∫õÂü∫Á°ÄÁü•ËØÜËá≥ÂÖ≥ÈáçË¶ÅÔºÅüõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Á¨¨-3-Á´†ÂÜÖÁΩÆÊï∞ÊçÆÁªìÊûÑÂáΩÊï∞ÂíåÊñá‰ª∂",
    "href": "qmd/pandas3ed3cn.html#Á¨¨-3-Á´†ÂÜÖÁΩÆÊï∞ÊçÆÁªìÊûÑÂáΩÊï∞ÂíåÊñá‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨Á´†Ê∑±ÂÖ•Êé¢ËÆ® Python ‰∏≠ÂØπÊï∞ÊçÆÂàÜÊûêËá≥ÂÖ≥ÈáçË¶ÅÁöÑÂü∫Êú¨ÊûÑÂª∫Âùó„ÄÇÊàë‰ª¨Â∞ÜÊé¢Á¥¢ Python ÁöÑÂÜÖÁΩÆÊï∞ÊçÆÁªìÊûÑÔºåÂ¶Ç‰ΩïÂàõÂª∫ÂèØÈáçÁî®ÁöÑÂáΩÊï∞Ôºå‰ª•ÂèäÂ¶Ç‰Ωï‰∏éÊñá‰ª∂‰∫§‰∫í„ÄÇ\n\n\n\n\n\n\nNote\n\n\n\nËôΩÁÑ∂ÂÉè pandas Âíå NumPy ËøôÊ†∑ÁöÑÂ∫ì‰∏∫Êõ¥Â§ßÁöÑÊï∞ÊçÆÈõÜÊèê‰æõ‰∫ÜÈ´òÁ∫ßÂäüËÉΩÔºå‰ΩÜÂÆÉ‰ª¨ÁöÑËÆæËÆ°ÁõÆÁöÑÊòØ‰∏é Python ÁöÑÊ†∏ÂøÉÊï∞ÊçÆÊìç‰ΩúÂ∑•ÂÖ∑ÂçèÂêåÂ∑•‰Ωú„ÄÇÊéåÊè°Ëøô‰∫õÂü∫Á°ÄÁü•ËØÜËá≥ÂÖ≥ÈáçË¶ÅÔºÅüõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Êï∞ÊçÆÁªìÊûÑÂíåÂ∫èÂàó",
    "href": "qmd/pandas3ed3cn.html#Êï∞ÊçÆÁªìÊûÑÂíåÂ∫èÂàó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÁªìÊûÑÂíåÂ∫èÂàó",
    "text": "Êï∞ÊçÆÁªìÊûÑÂíåÂ∫èÂàó\nPython Êèê‰æõ‰∫ÜÂá†ÁßçÈÄöÁî®ÁöÑÊï∞ÊçÆÁªìÊûÑ„ÄÇÊàë‰ª¨Â∞Ü‰ªé‰ª•‰∏ãÂá†‰∏™ÂºÄÂßãÔºö\n\nÂÖÉÁªÑ (Tuples)\nÂàóË°® (Lists)\nÂ≠óÂÖ∏ (Dictionaries)\n\nÁêÜËß£Ëøô‰∫õÊòØÊéåÊè° Python ÁöÑÂÖ≥ÈîÆ‰∏ÄÊ≠•„ÄÇüêç"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÂÆö‰πâ",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÂÆö‰πâ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºöÂÆö‰πâ",
    "text": "ÂÖÉÁªÑÔºöÂÆö‰πâ\nÂÖÉÁªÑÊòØÂõ∫ÂÆöÈïøÂ∫¶„ÄÅ‰∏çÂèØÂèòÁöÑ Python ÂØπË±°Â∫èÂàó„ÄÇ‰∏ÄÊó¶ÂàõÂª∫ÔºåÂ∞±‰∏çËÉΩÊõ¥ÊîπÂÖ∂ÂÖÉÁ¥†ÊàñÂ§ßÂ∞è„ÄÇ\n\n\n\n\n\n\n‰∏çÂèØÂèòÊÄß\n\n\n\n‰∏çÂèØÂèòÊÄßÊÑèÂë≥ÁùÄÂÜÖÂÆπÂú®ÂàõÂª∫Âêé‰∏çËÉΩÊõ¥Êîπ„ÄÇËøôÁ°Æ‰øù‰∫ÜÊï∞ÊçÆÁöÑÂÆåÊï¥ÊÄß„ÄÇÂèØ‰ª•ÊääÂÆÉÊÉ≥Ë±°Êàê‰∏Ä‰∏™ÂØÜÂ∞ÅÁöÑÂÆπÂô®üì¶‚Äî‚Äî‰Ω†ÂèØ‰ª•ÁúãÂà∞ÈáåÈù¢ÁöÑ‰∏úË•øÔºå‰ΩÜ‰Ω†‰∏çËÉΩ‰∫§Êç¢‰∏úË•ø„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÂàõÂª∫",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÂàõÂª∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºöÂàõÂª∫",
    "text": "ÂÖÉÁªÑÔºöÂàõÂª∫\n‰ΩøÁî®ÈÄóÂè∑ÂàÜÈöîÁöÑÂÄºÂàõÂª∫ÂÖÉÁªÑÔºåÈÄöÂ∏∏Âú®Êã¨Âè∑‰∏≠Ôºö\n\ntup = (4, 5, 6)  # ‰ΩøÁî®ÂúÜÊã¨Âè∑ÂàõÂª∫ÂÖÉÁªÑ\nprint(tup)      # ËæìÂá∫: (4, 5, 6)\n\n(4, 5, 6)\n\n\nÊã¨Âè∑ÈÄöÂ∏∏ÊòØÂèØÈÄâÁöÑÔºö\n\ntup = 4, 5, 6  # ‰∏ç‰ΩøÁî®Êã¨Âè∑ÂàõÂª∫ÂÖÉÁªÑ\nprint(tup)    # ËæìÂá∫: (4, 5, 6)\n\n(4, 5, 6)"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑËΩ¨Êç¢ÂíåËÆøÈóÆ",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑËΩ¨Êç¢ÂíåËÆøÈóÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºöËΩ¨Êç¢ÂíåËÆøÈóÆ",
    "text": "ÂÖÉÁªÑÔºöËΩ¨Êç¢ÂíåËÆøÈóÆ\n‰ΩøÁî® tuple() Â∞ÜÂ∫èÂàó/Ëø≠‰ª£Âô®ËΩ¨Êç¢‰∏∫ÂÖÉÁªÑÔºö\n\nmy_list = [4, 0, 2]           # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°®\nmy_tuple = tuple(my_list)     # Â∞ÜÂàóË°®ËΩ¨Êç¢‰∏∫ÂÖÉÁªÑ\nprint(my_tuple)              # ËæìÂá∫: (4, 0, 2)\n\nstring_tuple = tuple('string') # Â∞ÜÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫ÂÖÉÁªÑ\nprint(string_tuple)           # ËæìÂá∫: ('s', 't', 'r', 'i', 'n', 'g')\n\n(4, 0, 2)\n('s', 't', 'r', 'i', 'n', 'g')\n\n\n‰ΩøÁî® [] ËÆøÈóÆÂÖÉÁ¥†Ôºà‰ªé 0 ÂºÄÂßãÁ¥¢ÂºïÔºâÔºö\n\nprint(string_tuple[0])  # ËÆøÈóÆÂÖÉÁªÑÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåËæìÂá∫: 's'\n\ns"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÂµåÂ•óÂÖÉÁªÑ",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÂµåÂ•óÂÖÉÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºöÂµåÂ•óÂÖÉÁªÑ",
    "text": "ÂÖÉÁªÑÔºöÂµåÂ•óÂÖÉÁªÑ\nÂÖÉÁªÑÂèØ‰ª•ÂåÖÂê´ÂÖ∂‰ªñÂÖÉÁªÑÔºö\n\nnested_tup = (4, 5, 6), (7, 8) # ÂàõÂª∫‰∏Ä‰∏™ÂµåÂ•óÂÖÉÁªÑ\nprint(nested_tup)             # ËæìÂá∫: ((4, 5, 6), (7, 8))\nprint(nested_tup[0])          # ËÆøÈóÆÁ¨¨‰∏Ä‰∏™ÂÖÉÁªÑÔºåËæìÂá∫: (4, 5, 6)\nprint(nested_tup[1][0])       # ËÆøÈóÆÁ¨¨‰∫å‰∏™ÂÖÉÁªÑÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåËæìÂá∫: 7\n\n((4, 5, 6), (7, 8))\n(4, 5, 6)\n7"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑ‰∏çÂèØÂèòÊÄßËØ¶ÁªÜÁ§∫‰æã",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑ‰∏çÂèØÂèòÊÄßËØ¶ÁªÜÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºö‰∏çÂèØÂèòÊÄßÔºàËØ¶ÁªÜÁ§∫‰æãÔºâ",
    "text": "ÂÖÉÁªÑÔºö‰∏çÂèØÂèòÊÄßÔºàËØ¶ÁªÜÁ§∫‰æãÔºâ\nËôΩÁÑ∂ÂÖÉÁªÑÂÜÖÁöÑÂØπË±°ÂèØËÉΩÊòØÂèØÂèòÁöÑÔºå‰ΩÜÂÖÉÁªÑÊú¨Ë∫´ÊòØ‰∏çÂèØÂèòÁöÑÔºö\n\ntup = tuple(['foo', [1, 2], True]) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÂàóË°®ÁöÑÂÖÉÁªÑ\n# tup[2] = False  # ËøôË°å‰ª£Á†Å‰ºöÂºïÂèë TypeErrorÔºåÂõ†‰∏∫ÂÖÉÁªÑ‰∏çÂèØÂèòÔºÅ\n\n# ‰ΩÜÊòØÔºåÂèØ‰ª•*Âú®ÂéüÂ§Ñ*‰øÆÊîπÂèØÂèòÂÖÉÁ¥†Ôºö\ntup[1].append(3)  # ÂêëÂàóË°® [1, 2] ‰∏≠ËøΩÂä†ÂÖÉÁ¥† 3\nprint(tup)       # ËæìÂá∫: ('foo', [1, 2, 3], True)\n\n('foo', [1, 2, 3], True)\n\n\n\n\n\n\n\n\nCaution\n\n\n\n‰Ω†‰∏çËÉΩÂ∞ÜÊñ∞ÂØπË±°ÂàÜÈÖçÁªôÂÖÉÁªÑ‰∏≠ÁöÑ‰ΩçÁΩÆÔºå‰ΩÜÊòØ‰Ω†ÂèØ‰ª•‰øÆÊîπÂÖÉÁªÑ‰∏≠ÂèØÂèòÂØπË±°ÁöÑÂÜÖÂÆπ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑËøûÊé•ÂíåÈáçÂ§ç",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑËøûÊé•ÂíåÈáçÂ§ç",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºöËøûÊé•ÂíåÈáçÂ§ç",
    "text": "ÂÖÉÁªÑÔºöËøûÊé•ÂíåÈáçÂ§ç\n‰ΩøÁî® + ËøûÊé•Ôºö\n\ntuple1 = (4, None, 'foo')          # ÂàõÂª∫ÂÖÉÁªÑ tuple1\ntuple2 = (6, 0)                   # ÂàõÂª∫ÂÖÉÁªÑ tuple2\ntuple3 = ('bar',)                 # ÂàõÂª∫ÂçïÂÖÉÁ¥†ÂÖÉÁªÑ tuple3ÔºàÊ≥®ÊÑèÈÄóÂè∑Ôºâ\ncombined_tuple = tuple1 + tuple2 + tuple3 # ËøûÊé•‰∏â‰∏™ÂÖÉÁªÑ\nprint(combined_tuple)             # ËæìÂá∫: (4, None, 'foo', 6, 0, 'bar')\n\n(4, None, 'foo', 6, 0, 'bar')\n\n\n‰ΩøÁî® * ÈáçÂ§çÔºö\n\nrepeated_tuple = ('foo', 'bar') * 4 # Â∞ÜÂÖÉÁªÑÈáçÂ§ç 4 Ê¨°\nprint(repeated_tuple)             # ËæìÂá∫: ('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar')\n\n('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar')\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂè™‰ºöÂ§çÂà∂ÂØπË±°ÁöÑÂºïÁî®ÔºåËÄå‰∏çÊòØÂØπË±°Êú¨Ë∫´„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑËß£ÂåÖ",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑËß£ÂåÖ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºöËß£ÂåÖ",
    "text": "ÂÖÉÁªÑÔºöËß£ÂåÖ\nÂ∞ÜÂÖÉÁªÑËß£ÂåÖÂà∞ÂèòÈáè‰∏≠Ôºö\n\ntup = (4, 5, 6) # ÂàõÂª∫‰∏Ä‰∏™ÂÖÉÁªÑ\na, b, c = tup    # Â∞ÜÂÖÉÁªÑËß£ÂåÖÂà∞ÂèòÈáè a, b, c ‰∏≠\nprint(b)        # ËæìÂá∫: 5\n\n5\n\n\nÂµåÂ•óÂÖÉÁªÑ‰πüÂèØ‰ª•Ôºö\n\ntup = 4, 5, (6, 7) # ÂàõÂª∫‰∏Ä‰∏™ÂµåÂ•óÂÖÉÁªÑ\na, b, (c, d) = tup  # Ëß£ÂåÖÂµåÂ•óÂÖÉÁªÑ\nprint(d)         # ËæìÂá∫: 7\n\n7"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑ‰∫§Êç¢ÂèòÈáè",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑ‰∫§Êç¢ÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºö‰∫§Êç¢ÂèòÈáè",
    "text": "ÂÖÉÁªÑÔºö‰∫§Êç¢ÂèòÈáè\n‰ºòÈõÖÁöÑÂèòÈáè‰∫§Êç¢Ôºö\n\na, b = 1, 2        # Â∞Ü a ËµãÂÄº‰∏∫ 1Ôºåb ËµãÂÄº‰∏∫ 2\nprint(f\"a: {a}, b: {b}\") # ËæìÂá∫: a: 1, b: 2\nb, a = a, b        # ‰∫§Êç¢ a Âíå b ÁöÑÂÄº\nprint(f\"a: {a}, b: {b}\") # ËæìÂá∫: a: 2, b: 1\n\na: 1, b: 2\na: 2, b: 1"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑrest-Âíå-_",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑrest-Âíå-_",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºö*rest (Âíå _)",
    "text": "ÂÖÉÁªÑÔºö*rest (Âíå _)\n*rest ÊçïËé∑Ââ©‰ΩôÁöÑÂÖÉÁ¥†Ôºö\n\nvalues = 1, 2, 3, 4, 5 # ÂàõÂª∫‰∏Ä‰∏™ÂÖÉÁªÑ\na, b, *rest = values   # Â∞ÜÂâç‰∏§‰∏™ÂÖÉÁ¥†ËµãÂÄºÁªô a Âíå bÔºåÂÖ∂‰ΩôËµãÂÄºÁªô rest\nprint(a)             # ËæìÂá∫: 1\nprint(b)             # ËæìÂá∫: 2\nprint(rest)          # ËæìÂá∫: [3, 4, 5]\n\n1\n2\n[3, 4, 5]\n\n\n_ Áî®‰∫é‰∏çÈúÄË¶ÅÁöÑÂèòÈáèÔºö\n\na, b, *_ = values  # ÂøΩÁï•Ââ©‰ΩôÁöÑÂÖÉÁ¥†"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÊñπÊ≥ï-count",
    "href": "qmd/pandas3ed3cn.html#ÂÖÉÁªÑÊñπÊ≥ï-count",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖÉÁªÑÔºöÊñπÊ≥ï (count)",
    "text": "ÂÖÉÁªÑÔºöÊñπÊ≥ï (count)\nÁî±‰∫é‰∏çÂèØÂèòÊÄßÔºåÂÖÉÁªÑÁöÑÊñπÊ≥ïÂæàÂ∞ë„ÄÇcount() ÂæàÊúâÁî®Ôºö\n\na = (1, 2, 2, 2, 3, 4, 2) # ÂàõÂª∫‰∏Ä‰∏™ÂÖÉÁªÑ\ncount_of_2 = a.count(2)   # ËÆ°ÁÆóÂÖÉÁªÑ‰∏≠ 2 Âá∫Áé∞ÁöÑÊ¨°Êï∞\nprint(count_of_2)         # ËæìÂá∫: 4\n\n4\n\n\n# `count` ÊñπÊ≥ïËøîÂõûÊåáÂÆöÂÄºÂá∫Áé∞ÁöÑÊ¨°Êï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÂÆö‰πâÂíåÂèØÂèòÊÄß",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÂÆö‰πâÂíåÂèØÂèòÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÂÆö‰πâÂíåÂèØÂèòÊÄß",
    "text": "ÂàóË°®ÔºöÂÆö‰πâÂíåÂèØÂèòÊÄß\nÂàóË°®ÊòØÂèØÂèòÈïøÂ∫¶‰∏îÂèØÂèòÁöÑ„ÄÇ‰Ω†ÂèØ‰ª•Âú®ÂàõÂª∫ÂêéÊõ¥ÊîπÂÖ∂ÂÜÖÂÆπÂíåÂ§ßÂ∞è„ÄÇ\n\n\n\n\n\n\nÂèØÂèòÊÄß\n\n\n\nÂèØÂèòÊÄßÊÑèÂë≥ÁùÄ‰Ω†ÂèØ‰ª•Âú®ÂàõÂª∫ÂêéÊõ¥ÊîπÂÖÉÁ¥†„ÄÅÊ∑ªÂä†Êñ∞ÂÖÉÁ¥†ÊàñÂà†Èô§Áé∞ÊúâÂÖÉÁ¥†„ÄÇÂàóË°®ÈùûÂ∏∏ÁÅµÊ¥ªÔºÅü§∏‚Äç‚ôÄÔ∏è"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàõÂª∫",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàõÂª∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÂàõÂª∫",
    "text": "ÂàóË°®ÔºöÂàõÂª∫\n‰ΩøÁî® [] Êàñ list() ÂàõÂª∫ÂàóË°®Ôºö\n\na_list = [2, 3, 7, None]     # ‰ΩøÁî®ÊñπÊã¨Âè∑ÂàõÂª∫ÂàóË°®\ntup = ('foo', 'bar', 'baz')  # ÂàõÂª∫‰∏Ä‰∏™ÂÖÉÁªÑ\nb_list = list(tup)          # Â∞ÜÂÖÉÁªÑËΩ¨Êç¢‰∏∫ÂàóË°®\nprint(b_list)               # ËæìÂá∫: ['foo', 'bar', 'baz']\n\n['foo', 'bar', 'baz']\n\n\n‰øÆÊîπÂÖÉÁ¥†Ôºö\n\nb_list[1] = 'peekaboo' # Â∞ÜÂàóË°®ÁöÑÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†‰øÆÊîπ‰∏∫ 'peekaboo'\nprint(b_list)          # ËæìÂá∫: ['foo', 'peekaboo', 'baz']\n\n['foo', 'peekaboo', 'baz']"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÂÆû‰ΩìÂåñËø≠‰ª£Âô®",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÂÆû‰ΩìÂåñËø≠‰ª£Âô®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÂÆû‰ΩìÂåñËø≠‰ª£Âô®",
    "text": "ÂàóË°®ÔºöÂÆû‰ΩìÂåñËø≠‰ª£Âô®\nlist() ÂÆû‰ΩìÂåñËø≠‰ª£Âô®/ÁîüÊàêÂô®Ôºö\n\ngen = range(10)     # ÂàõÂª∫‰∏Ä‰∏™ range ÂØπË±°ÔºàËø≠‰ª£Âô®Ôºâ\nprint(gen)          # ËæìÂá∫: range(0, 10)\nmy_list = list(gen) # Â∞Ü range ÂØπË±°ËΩ¨Êç¢‰∏∫ÂàóË°®\nprint(my_list)      # ËæìÂá∫: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nrange(0, 10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®Ê∑ªÂä†ÂÖÉÁ¥†",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®Ê∑ªÂä†ÂÖÉÁ¥†",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÊ∑ªÂä†ÂÖÉÁ¥†",
    "text": "ÂàóË°®ÔºöÊ∑ªÂä†ÂÖÉÁ¥†\n\nappend(): Ê∑ªÂä†Âà∞Êú´Â∞æ„ÄÇ\n\n\nb_list.append('dwarf') # Âú®ÂàóË°®Êú´Â∞æÊ∑ªÂä† 'dwarf'\nprint(b_list)         # ËæìÂá∫: ['foo', 'peekaboo', 'baz', 'dwarf']\n\n['foo', 'peekaboo', 'baz', 'dwarf']\n\n\n\ninsert(): Âú®ÁâπÂÆö‰ΩçÁΩÆÊèíÂÖ•„ÄÇ\n\n\nb_list.insert(1, 'red') # Âú®Á¥¢Âºï 1 Â§ÑÊèíÂÖ• 'red'\nprint(b_list)           # ËæìÂá∫: ['foo', 'red', 'peekaboo', 'baz', 'dwarf']\n\n['foo', 'red', 'peekaboo', 'baz', 'dwarf']\n\n\n\n\n\n\n\n\nCaution\n\n\n\ninsert ÊØî append ÂºÄÈîÄÊõ¥Â§ßÔºàÂÆÉ‰ºöÁßªÂä®ÂÖÉÁ¥†Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®Âà†Èô§ÂÖÉÁ¥†-pop-Âíå-remove",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®Âà†Èô§ÂÖÉÁ¥†-pop-Âíå-remove",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÂà†Èô§ÂÖÉÁ¥† (pop Âíå remove)",
    "text": "ÂàóË°®ÔºöÂà†Èô§ÂÖÉÁ¥† (pop Âíå remove)\n\npop(): Âà†Èô§Âπ∂ËøîÂõûÊåáÂÆöÁ¥¢ÂºïÂ§ÑÁöÑÂÖÉÁ¥†„ÄÇ\n\n\nremoved_element = b_list.pop(2) # Âà†Èô§Á¥¢Âºï 2 Â§ÑÁöÑÂÖÉÁ¥†ÔºåÂπ∂Â∞ÜÂÖ∂ËµãÂÄºÁªô removed_element\nprint(removed_element)         # ËæìÂá∫: peekaboo\nprint(b_list)                   # ËæìÂá∫: ['foo', 'red', 'baz', 'dwarf']\n\npeekaboo\n['foo', 'red', 'baz', 'dwarf']\n\n\n\nremove(): Âà†Èô§Á¨¨‰∏Ä‰∏™Âá∫Áé∞ÁöÑÊåáÂÆöÂÄº„ÄÇ\n\n\nb_list.append('foo')         # ÂÜçÊ¨°Âú®ÂàóË°®Êú´Â∞æÊ∑ªÂä† 'foo'\nb_list.remove('foo')        # Âà†Èô§Á¨¨‰∏Ä‰∏™Âá∫Áé∞ÁöÑ 'foo'\nprint(b_list)               # ËæìÂá∫: ['red', 'baz', 'dwarf', 'foo']\n\n['red', 'baz', 'dwarf', 'foo']"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®Ê£ÄÊü•ÊàêÂëòËµÑÊ†º-in-Âíå-not-in",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®Ê£ÄÊü•ÊàêÂëòËµÑÊ†º-in-Âíå-not-in",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÊ£ÄÊü•ÊàêÂëòËµÑÊ†º (in Âíå not in)",
    "text": "ÂàóË°®ÔºöÊ£ÄÊü•ÊàêÂëòËµÑÊ†º (in Âíå not in)\n\nprint('dwarf' in b_list)     # Ê£ÄÊü• 'dwarf' ÊòØÂê¶Âú®ÂàóË°®‰∏≠ÔºåËæìÂá∫: True\nprint('dwarf' not in b_list) # Ê£ÄÊü• 'dwarf' ÊòØÂê¶‰∏çÂú®ÂàóË°®‰∏≠ÔºåËæìÂá∫: False\n\nTrue\nFalse\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂØπ‰∫éÂàóË°®Ôºåin / not in ÈÄüÂ∫¶ÂæàÊÖ¢ÔºàÁ∫øÊÄßÊâ´ÊèèÔºâ„ÄÇÂ≠óÂÖ∏ÂíåÈõÜÂêàÂø´ÂæóÂ§öÔºàÂìàÂ∏åË°®ÔºåÂ∏∏Êï∞Êó∂Èó¥Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ËøûÊé•ÂíåÂêàÂπ∂",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ËøûÊé•ÂíåÂêàÂπ∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöËøûÊé•ÂíåÂêàÂπ∂",
    "text": "ÂàóË°®ÔºöËøûÊé•ÂíåÂêàÂπ∂\n‰ΩøÁî® + ËøûÊé•Ôºö\n\nlist1 = [4, None, 'foo']      # ÂàõÂª∫ÂàóË°® list1\nlist2 = [7, 8, (2, 3)]      # ÂàõÂª∫ÂàóË°® list2\ncombined_list = list1 + list2 # ËøûÊé•‰∏§‰∏™ÂàóË°®\nprint(combined_list)         # ËæìÂá∫: [4, None, 'foo', 7, 8, (2, 3)]\n\n[4, None, 'foo', 7, 8, (2, 3)]\n\n\nextend() ËøΩÂä†Â§ö‰∏™ÂÖÉÁ¥†Ôºö\n\nx = [4, None, 'foo']       # ÂàõÂª∫ÂàóË°® x\nx.extend([7, 8, (2, 3)]) # ‰ΩøÁî® extend ÊñπÊ≥ïËøΩÂä†Â§ö‰∏™ÂÖÉÁ¥†\nprint(x)                   # ËæìÂá∫: [4, None, 'foo', 7, 8, (2, 3)]\n\n[4, None, 'foo', 7, 8, (2, 3)]\n\n\n\n\n\n\n\n\nTip\n\n\n\nextend() ÈÄöÂ∏∏ÊØî + Âø´Ôºà‰∏çÂàõÂª∫Êñ∞ÂàóË°®Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÊéíÂ∫è-sort-Âíå-sorted",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÊéíÂ∫è-sort-Âíå-sorted",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÊéíÂ∫è (sort Âíå sorted)",
    "text": "ÂàóË°®ÔºöÊéíÂ∫è (sort Âíå sorted)\n\nsort(): Â∞±Âú∞ÊéíÂ∫è„ÄÇ\n\n\na = [7, 2, 5, 1, 3] # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°®\na.sort()            # ÂØπÂàóË°®ËøõË°åÂ∞±Âú∞ÊéíÂ∫è\nprint(a)            # ËæìÂá∫: [1, 2, 3, 5, 7]\n\n[1, 2, 3, 5, 7]\n\n\n\nkey ÂèÇÊï∞: Êèê‰æõËá™ÂÆö‰πâÊéíÂ∫èÊñπÊ≥ï„ÄÇ\n\n\nb = ['saw', 'small', 'He', 'foxes', 'six'] # ÂàõÂª∫‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÂàóË°®\nb.sort(key=len)   # ÊåâÁÖßÂ≠óÁ¨¶‰∏≤ÈïøÂ∫¶ÂØπÂàóË°®ËøõË°åÊéíÂ∫è\nprint(b)            # ËæìÂá∫: ['He', 'saw', 'six', 'small', 'foxes']\n\n['He', 'saw', 'six', 'small', 'foxes']"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâá",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâá",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÂàáÁâá",
    "text": "ÂàóË°®ÔºöÂàáÁâá\n‰ΩøÁî® start:stop ÈÄâÊã©ÈÉ®ÂàÜÔºö\n\nseq = [7, 2, 3, 7, 5, 6, 0, 1] # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°®\nsub_list = seq[1:5]          # ‰ªéÁ¥¢Âºï 1ÔºàÂåÖÂê´ÔºâÂà∞ 5Ôºà‰∏çÂåÖÂê´ÔºâËøõË°åÂàáÁâá\nprint(sub_list)              # ËæìÂá∫: [2, 3, 7, 5]\n\nseq[3:5] = [6,3] # ‰ΩøÁî®ÂàáÁâáÊõøÊç¢ÂÖÉÁ¥†\nprint(seq) # ËæìÂá∫: [7, 2, 3, 6, 3, 6, 0, 1]\n\n[2, 3, 7, 5]\n[7, 2, 3, 6, 3, 6, 0, 1]"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâáÁúÅÁï•-startstop-ÂíåË¥üÁ¥¢Âºï",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâáÁúÅÁï•-startstop-ÂíåË¥üÁ¥¢Âºï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÂàáÁâáÔºàÁúÅÁï• start/stop ÂíåË¥üÁ¥¢ÂºïÔºâ",
    "text": "ÂàóË°®ÔºöÂàáÁâáÔºàÁúÅÁï• start/stop ÂíåË¥üÁ¥¢ÂºïÔºâ\n\nÁúÅÁï• start: ÈªòËÆ§‰∏∫ÂºÄÂ§¥„ÄÇ\nÁúÅÁï• stop: ÈªòËÆ§‰∏∫ÁªìÂ∞æ„ÄÇ\nË¥üÁ¥¢ÂºïÔºö‰ªéÊú´Â∞æÂºÄÂßãËÆ°Êï∞„ÄÇ\n\n\nprint(seq[:5])    # Ëé∑ÂèñÂâç 5 ‰∏™ÂÖÉÁ¥†ÔºåËæìÂá∫: [7, 2, 3, 6, 3]\nprint(seq[3:])    # ‰ªéÁ¥¢Âºï 3 ÂºÄÂßãÂà∞ÁªìÂ∞æÔºåËæìÂá∫: [6, 3, 6, 0, 1]\nprint(seq[-4:])   # Ëé∑ÂèñÊúÄÂêé 4 ‰∏™ÂÖÉÁ¥†ÔºåËæìÂá∫: [3, 6, 0, 1]\nprint(seq[-6:-2]) # Ëé∑ÂèñÂÄíÊï∞Á¨¨ 6 ‰∏™Âà∞ÂÄíÊï∞Á¨¨ 2 ‰∏™ÂÖÉÁ¥†Ôºà‰∏çÂåÖÂê´ÔºâÔºåËæìÂá∫: [3, 6, 3, 6]\n\n[7, 2, 3, 6, 3]\n[6, 3, 6, 0, 1]\n[3, 6, 0, 1]\n[3, 6, 3, 6]"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâáÊ≠•Èïø",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâáÊ≠•Èïø",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÔºöÂàáÁâáÔºàÊ≠•ÈïøÔºâ",
    "text": "ÂàóË°®ÔºöÂàáÁâáÔºàÊ≠•ÈïøÔºâ\n‰ΩøÁî®Ê≠•ÈïøÈÄâÊã©ÊØè n ‰∏™ÂÖÉÁ¥†Ôºö\n\nprint(seq[::2])   # ÊØèÈöî‰∏Ä‰∏™ÂÖÉÁ¥†Âèñ‰∏Ä‰∏™ÔºåËæìÂá∫: [7, 3, 3, 0]\nprint(seq[::-1])  # ÂèçËΩ¨ÂàóË°®ÔºåËæìÂá∫: [1, 0, 6, 3, 6, 3, 2, 7]\n\n[7, 3, 3, 0]\n[1, 0, 6, 3, 6, 3, 2, 7]"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâáÂõæÁ§∫",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÂàáÁâáÂõæÁ§∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®ÂàáÁâáÂõæÁ§∫",
    "text": "ÂàóË°®ÂàáÁâáÂõæÁ§∫\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\nH\nE\nL\nL\nO\n!\n\n\n0\n1\n2\n3\n4\n5\n\n\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\n\n\nstring = \"HELLO!\"\nprint(string[2:4]) # ‰ΩøÁî®Ê≠£Á¥¢ÂºïËøõË°åÂàáÁâáÔºåËæìÂá∫: LL\nprint(string[-5:-2]) # ‰ΩøÁî®Ë¥üÁ¥¢ÂºïËøõË°åÂàáÁâá, ËæìÂá∫: ELL\n\nLL\nELL\n\n\nÊ≠§ÂõæËØ¥Êòé‰∫ÜÂú®Â≠óÁ¨¶‰∏≤‚ÄúHELLO!‚Äù‰∏äÁöÑÂàáÁâá„ÄÇÁ¥¢ÂºïÊòæÁ§∫Âú®‚ÄúÊ†ºÂ≠êËæπÁºò‚ÄùÔºå‰ª•Â∏ÆÂä©ÊòæÁ§∫‰ΩøÁî®Ê≠£Á¥¢ÂºïÊàñË¥üÁ¥¢ÂºïÊó∂ÂàáÁâáÈÄâÊã©ÁöÑÂºÄÂßãÂíåÂÅúÊ≠¢‰ΩçÁΩÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏-dictÂÆö‰πâ",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏-dictÂÆö‰πâ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏ (dict)ÔºöÂÆö‰πâ",
    "text": "Â≠óÂÖ∏ (dict)ÔºöÂÆö‰πâ\nÂ≠óÂÖ∏ÔºàÊàñ dictÔºâËá≥ÂÖ≥ÈáçË¶Å„ÄÇÂÆÉ‰ª¨Â≠òÂÇ®ÈîÆÂÄºÂØπÔºàÁ±ª‰ºº‰∫éÂìàÂ∏åÊò†Â∞ÑÔºâ„ÄÇ\n\n\n\n\n\n\nÈîÆÂÄºÂØπ\n\n\n\nÊØè‰∏™ÈîÆÈÉΩ‰∏é‰∏Ä‰∏™ÂÄºÁõ∏ÂÖ≥ËÅî„ÄÇÈîÆÊòØÂîØ‰∏Ä‰∏î‰∏çÂèØÂèòÁöÑÔºàÂ≠óÁ¨¶‰∏≤„ÄÅÊï∞Â≠ó„ÄÅÂÖÉÁªÑÔºâ„ÄÇÂÄºÂèØ‰ª•ÊòØ‰ªª‰Ωï‰∏úË•ø„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ÂàõÂª∫",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ÂàõÂª∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏ÔºöÂàõÂª∫",
    "text": "Â≠óÂÖ∏ÔºöÂàõÂª∫\n‰ΩøÁî® {} Âíå :Ôºö\n\nempty_dict = {} # ÂàõÂª∫‰∏Ä‰∏™Á©∫Â≠óÂÖ∏\nd1 = {'a': 'some value', 'b': [1, 2, 3, 4]} # ÂàõÂª∫‰∏Ä‰∏™Â≠óÂÖ∏\nprint(d1) # ËæìÂá∫: {'a': 'some value', 'b': [1, 2, 3, 4]}\n\n{'a': 'some value', 'b': [1, 2, 3, 4]}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ËÆøÈóÆÊèíÂÖ•ËÆæÁΩÆ",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ËÆøÈóÆÊèíÂÖ•ËÆæÁΩÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏ÔºöËÆøÈóÆ„ÄÅÊèíÂÖ•„ÄÅËÆæÁΩÆ",
    "text": "Â≠óÂÖ∏ÔºöËÆøÈóÆ„ÄÅÊèíÂÖ•„ÄÅËÆæÁΩÆ\n\nd1[7] = 'an integer'  # Ê∑ªÂä†ÈîÆÂÄºÂØπ 7: 'an integer'\nprint(d1)            # ËæìÂá∫: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\nprint(d1['b'])       # ËÆøÈóÆÈîÆ 'b' ÂØπÂ∫îÁöÑÂÄºÔºåËæìÂá∫: [1, 2, 3, 4]\n\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\n[1, 2, 3, 4]"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏Ê£ÄÊü•ÈîÆ-in",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏Ê£ÄÊü•ÈîÆ-in",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏ÔºöÊ£ÄÊü•ÈîÆ (in)",
    "text": "Â≠óÂÖ∏ÔºöÊ£ÄÊü•ÈîÆ (in)\n\nprint('b' in d1)  # Ê£ÄÊü•ÈîÆ 'b' ÊòØÂê¶Â≠òÂú®‰∫éÂ≠óÂÖ∏‰∏≠ÔºåËæìÂá∫: True\n\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏Âà†Èô§-del-Âíå-pop",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏Âà†Èô§-del-Âíå-pop",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏ÔºöÂà†Èô§ (del Âíå pop)",
    "text": "Â≠óÂÖ∏ÔºöÂà†Èô§ (del Âíå pop)\n\ndel:\n\n\nd1[5] = 'some value'      # Ê∑ªÂä†ÈîÆÂÄºÂØπ 5: 'some value'\nd1['dummy'] = 'another value' # Ê∑ªÂä†ÈîÆÂÄºÂØπ 'dummy': 'another value'\nprint(d1)                   # ËæìÂá∫: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 5: 'some value', 'dummy': 'another value'}\ndel d1[5]                 # Âà†Èô§ÈîÆ 5 ÂèäÂÖ∂ÂØπÂ∫îÁöÑÂÄº\nprint(d1)                   # ËæìÂá∫: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 'dummy': 'another value'}\n\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 5: 'some value', 'dummy': 'another value'}\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 'dummy': 'another value'}\n\n\n\npop(): Âà†Èô§Âπ∂ËøîÂõû„ÄÇ\n\n\nret = d1.pop('dummy') # Âà†Èô§ÈîÆ 'dummy' ÂèäÂÖ∂ÂØπÂ∫îÁöÑÂÄºÔºåÂπ∂Â∞ÜÂÄºËµãÁªô ret\nprint(ret)            # ËæìÂá∫: another value\nprint(d1)            # ËæìÂá∫: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\n\nanother value\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏keys-values-Âíå-items-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏keys-values-Âíå-items-ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏Ôºökeys(), values() Âíå items() ÊñπÊ≥ï",
    "text": "Â≠óÂÖ∏Ôºökeys(), values() Âíå items() ÊñπÊ≥ï\n\nkeys(): ÈîÆÁöÑËø≠‰ª£Âô®„ÄÇ\nvalues(): ÂÄºÁöÑËø≠‰ª£Âô®„ÄÇ\nitems(): ÈîÆÂÄºÂØπÁöÑËø≠‰ª£Âô®„ÄÇ\n\n\nprint(list(d1.keys()))   # Ëé∑ÂèñÂ≠óÂÖ∏‰∏≠ÊâÄÊúâÈîÆÁöÑÂàóË°®ÔºåËæìÂá∫: ['a', 'b', 7]\nprint(list(d1.values())) # Ëé∑ÂèñÂ≠óÂÖ∏‰∏≠ÊâÄÊúâÂÄºÁöÑÂàóË°®ÔºåËæìÂá∫: ['some value', [1, 2, 3, 4], 'an integer']\nprint(list(d1.items()))  # Ëé∑ÂèñÂ≠óÂÖ∏‰∏≠ÊâÄÊúâÈîÆÂÄºÂØπÁöÑÂàóË°®ÔºåËæìÂá∫: [('a', 'some value'), ('b', [1, 2, 3, 4]), (7, 'an integer')]\n\n['a', 'b', 7]\n['some value', [1, 2, 3, 4], 'an integer']\n[('a', 'some value'), ('b', [1, 2, 3, 4]), (7, 'an integer')]\n\n\n\n\n\n\n\n\nNote\n\n\n\nÈîÆÁöÑÈ°∫Â∫èÂèñÂÜ≥‰∫éÊèíÂÖ•È°∫Â∫è„ÄÇkeys Âíå values ‰ª•Áõ∏ÂêåÁöÑÈ°∫Â∫èËøîÂõûËø≠‰ª£Âô®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏‰ΩøÁî®-update-ÂêàÂπ∂",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏‰ΩøÁî®-update-ÂêàÂπ∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏Ôºö‰ΩøÁî® update() ÂêàÂπ∂",
    "text": "Â≠óÂÖ∏Ôºö‰ΩøÁî® update() ÂêàÂπ∂\nupdate() ÂêàÂπ∂Â≠óÂÖ∏Ôºö\n\nd1.update({'b': 'foo', 'c': 12})  # Êõ¥Êñ∞ÈîÆ 'b' ÁöÑÂÄºÔºåÂπ∂Ê∑ªÂä†ÈîÆÂÄºÂØπ 'c': 12\nprint(d1)                       # ËæìÂá∫: {'a': 'some value', 'b': 'foo', 7: 'an integer', 'c': 12}\n\n{'a': 'some value', 'b': 'foo', 7: 'an integer', 'c': 12}\n\n\n\n\n\n\n\n\nCaution\n\n\n\nupdate() ÊòØÂ∞±Âú∞Êìç‰Ωú„ÄÇÁé∞ÊúâÈîÆÁöÑÂÄº‰ºöË¢´‰∏¢ÂºÉ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏‰ªéÂ∫èÂàóÂàõÂª∫",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏‰ªéÂ∫èÂàóÂàõÂª∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏Ôºö‰ªéÂ∫èÂàóÂàõÂª∫",
    "text": "Â≠óÂÖ∏Ôºö‰ªéÂ∫èÂàóÂàõÂª∫\n\nkey_list = ['a', 'b', 'c']             # ÂàõÂª∫‰∏Ä‰∏™ÈîÆÂàóË°®\nvalue_list = [1, 2, 3]               # ÂàõÂª∫‰∏Ä‰∏™ÂÄºÂàóË°®\nmapping = {}                          # ÂàõÂª∫‰∏Ä‰∏™Á©∫Â≠óÂÖ∏\nfor key, value in zip(key_list, value_list): # ‰ΩøÁî® zip Â∞ÜÈîÆÂàóË°®ÂíåÂÄºÂàóË°®ÈÖçÂØπ\n    mapping[key] = value            # Â∞ÜÈîÆÂÄºÂØπÊ∑ªÂä†Âà∞Â≠óÂÖ∏‰∏≠\nprint(mapping)                      # ËæìÂá∫: {'a': 1, 'b': 2, 'c': 3}\n\n# ÁÆÄÊ¥ÅÂÜôÊ≥ïÔºödict() Âíå zip()\nmapping = dict(zip(range(5), reversed(range(5)))) # ‰ΩøÁî® zip Âíå reversed ÂàõÂª∫Â≠óÂÖ∏\nprint(mapping)                                  # ËæìÂá∫: {0: 4, 1: 3, 2: 2, 3: 1, 4: 0}\n\n{'a': 1, 'b': 2, 'c': 3}\n{0: 4, 1: 3, 2: 2, 3: 1, 4: 0}\n\n\nzip ÂáΩÊï∞ÂèØ‰ª•Â∞ÜÂ§ö‰∏™Â∫èÂàóÁöÑÂÖÉÁ¥†ÈÖçÂØπ„ÄÇdict Êé•Âèó‰∏Ä‰∏™Áî± 2 ÂÖÉÁªÑÁªÑÊàêÁöÑÂàóË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ÈªòËÆ§ÂÄº-get-Âíå-setdefault",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ÈªòËÆ§ÂÄº-get-Âíå-setdefault",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏ÔºöÈªòËÆ§ÂÄº (get Âíå setdefault)",
    "text": "Â≠óÂÖ∏ÔºöÈªòËÆ§ÂÄº (get Âíå setdefault)\n\n# ÂÜóÈïøÂÜôÊ≥ïÔºö\nif 'some_key' in some_dict:   # Ê£ÄÊü•ÈîÆÊòØÂê¶Â≠òÂú®\n    value = some_dict['some_key'] # Â¶ÇÊûúÂ≠òÂú®ÔºåËé∑ÂèñÂÄº\nelse:\n    value = default_value     # Â¶ÇÊûú‰∏çÂ≠òÂú®Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº\n\n# ÁÆÄÊ¥ÅÂÜôÊ≥ïÔºöget()\nvalue = some_dict.get('some_key', default_value) # Â¶ÇÊûúÈîÆÂ≠òÂú®ÔºåËøîÂõûÂÄºÔºõÂê¶ÂàôËøîÂõûÈªòËÆ§ÂÄº\n\nÂ¶ÇÊûúÈîÆ‰∏çÂ≠òÂú®Ôºåget ËøîÂõû NoneÔºàÊàñÊåáÂÆöÁöÑÈªòËÆ§ÂÄºÔºâÔºåËÄå pop ‰ºöÂºïÂèëÂºÇÂ∏∏„ÄÇ\n\nwords = ['apple', 'bat', 'bar', 'atom', 'book'] # ÂàõÂª∫‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÂàóË°®\nby_letter = {}                                  # ÂàõÂª∫‰∏Ä‰∏™Á©∫Â≠óÂÖ∏\nfor word in words:                             # ÈÅçÂéÜÂàóË°®‰∏≠ÁöÑÊØè‰∏™ÂçïËØç\n    letter = word[0]                          # Ëé∑ÂèñÂçïËØçÁöÑÈ¶ñÂ≠óÊØç\n    by_letter.setdefault(letter, []).append(word) # ‰ΩøÁî® setdefault ËÆæÁΩÆÈªòËÆ§ÂÄºÔºåÂπ∂ËøΩÂä†ÂçïËØç\nprint(by_letter)                                # ËæìÂá∫: {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}\n\n{'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}\n\n\nsetdefault(key, default): Â¶ÇÊûú key Â≠òÂú®ÔºåÂàôËøîÂõûÂÖ∂ÂÄº„ÄÇÂ¶ÇÊûú‰∏çÂ≠òÂú®ÔºåÂàôÊèíÂÖ• key Âπ∂ËÆæÁΩÆÂÄº‰∏∫ defaultÔºåÁÑ∂ÂêéËøîÂõû default„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏defaultdict",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏defaultdict",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏Ôºödefaultdict",
    "text": "Â≠óÂÖ∏Ôºödefaultdict\ncollections.defaultdict ÁÆÄÂåñ‰∫ÜÂàùÂßãÂåñÔºö\n\nfrom collections import defaultdict # ÂØºÂÖ• defaultdict\n\nby_letter = defaultdict(list)      # ÂàõÂª∫‰∏Ä‰∏™ defaultdictÔºåÈªòËÆ§ÂÄº‰∏∫ÂàóË°®\nfor word in words:                # ÈÅçÂéÜÂàóË°®‰∏≠ÁöÑÊØè‰∏™ÂçïËØç\n    by_letter[word[0]].append(word) # Ëá™Âä®ÂàõÂª∫ÂàóË°®Âπ∂ËøΩÂä†ÂçïËØç\nprint(by_letter)                   # ËæìÂá∫: defaultdict(&lt;class 'list'&gt;, {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']})\n\ndefaultdict(&lt;class 'list'&gt;, {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']})"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ÊúâÊïàÁöÑÈîÆÁ±ªÂûãÂìàÂ∏åÊÄß",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏ÊúâÊïàÁöÑÈîÆÁ±ªÂûãÂìàÂ∏åÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏ÔºöÊúâÊïàÁöÑÈîÆÁ±ªÂûãÔºàÂìàÂ∏åÊÄßÔºâ",
    "text": "Â≠óÂÖ∏ÔºöÊúâÊïàÁöÑÈîÆÁ±ªÂûãÔºàÂìàÂ∏åÊÄßÔºâ\n\nÈîÆÂøÖÈ°ªÊòØ‰∏çÂèØÂèòÁöÑ„ÄÇ\n‰ΩøÁî® hash() Ê£ÄÊü•Ôºö\n\n\nprint(hash('string'))        # Â≠óÁ¨¶‰∏≤ÂèØ‰ª•ÂìàÂ∏åÔºåËæìÂá∫‰∏Ä‰∏™ÂìàÂ∏åÂÄº\nprint(hash((1, 2, (2, 3)))) # ÂÖÉÁªÑÂèØ‰ª•ÂìàÂ∏åÔºåËæìÂá∫‰∏Ä‰∏™ÂìàÂ∏åÂÄº\n# print(hash((1, 2, [2, 3])))  # ËøôË°å‰ª£Á†Å‰ºöÂºïÂèë TypeError: unhashable type: 'list'ÔºåÂõ†‰∏∫ÂàóË°®‰∏çÂèØÂìàÂ∏å\n\n# ÂàóË°®‰Ωú‰∏∫ÈîÆÔºüËΩ¨Êç¢‰∏∫ÂÖÉÁªÑÔºö\nd = {}                      # ÂàõÂª∫‰∏Ä‰∏™Á©∫Â≠óÂÖ∏\nd[tuple([1, 2, 3])] = 5    # Â∞ÜÂàóË°®ËΩ¨Êç¢‰∏∫ÂÖÉÁªÑ‰Ωú‰∏∫ÈîÆ\nprint(d)                    # ËæìÂá∫: {(1, 2, 3): 5}\n\n3435266725997992489\n-9209053662355515447\n{(1, 2, 3): 5}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂÆö‰πâÂíåÂîØ‰∏ÄÊÄß",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂÆö‰πâÂíåÂîØ‰∏ÄÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÔºöÂÆö‰πâÂíåÂîØ‰∏ÄÊÄß",
    "text": "ÈõÜÂêàÔºöÂÆö‰πâÂíåÂîØ‰∏ÄÊÄß\nÈõÜÂêàÊòØÊó†Â∫èÁöÑÂîØ‰∏ÄÂÖÉÁ¥†ÈõÜÂêàÔºàÁ±ª‰ºº‰∫éÂè™ÊúâÈîÆÁöÑÂ≠óÂÖ∏Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂàõÂª∫",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂàõÂª∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÔºöÂàõÂª∫",
    "text": "ÈõÜÂêàÔºöÂàõÂª∫\n\nset1 = {2, 2, 2, 1, 3, 3}  # ‰ΩøÁî® {} ÂàõÂª∫ÈõÜÂêà\nprint(set1)               # ËæìÂá∫: {1, 2, 3} ÔºàËá™Âä®ÂéªÈáçÔºâ\nset2 = set([2, 2, 2, 1, 3, 3])  # ‰ΩøÁî® set() ÂàõÂª∫ÈõÜÂêà\nprint(set2)                      # ËæìÂá∫: {1, 2, 3}\n\n{1, 2, 3}\n{1, 2, 3}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàËøêÁÆóÂπ∂ÈõÜ‰∫§ÈõÜÁ≠â",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàËøêÁÆóÂπ∂ÈõÜ‰∫§ÈõÜÁ≠â",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÔºöËøêÁÆóÔºàÂπ∂ÈõÜ„ÄÅ‰∫§ÈõÜÁ≠âÔºâ",
    "text": "ÈõÜÂêàÔºöËøêÁÆóÔºàÂπ∂ÈõÜ„ÄÅ‰∫§ÈõÜÁ≠âÔºâ\n\na = {1, 2, 3, 4, 5} # ÂàõÂª∫ÈõÜÂêà a\nb = {3, 4, 5, 6, 7, 8} # ÂàõÂª∫ÈõÜÂêà b\n\n# Âπ∂ÈõÜ (| Êàñ union())\nprint(a.union(b))     # ËæìÂá∫: {1, 2, 3, 4, 5, 6, 7, 8}\nprint(a | b)          # ËæìÂá∫: {1, 2, 3, 4, 5, 6, 7, 8}\n\n# ‰∫§ÈõÜ (& Êàñ intersection())\nprint(a.intersection(b)) # ËæìÂá∫: {3, 4, 5}\nprint(a & b)          # ËæìÂá∫: {3, 4, 5}\n\n# Â∑ÆÈõÜ (- Êàñ difference())\nprint(a.difference(b)) # ËæìÂá∫: {1, 2}\nprint(a - b) #ËæìÂá∫Ôºö {1, 2}\n\n{1, 2, 3, 4, 5, 6, 7, 8}\n{1, 2, 3, 4, 5, 6, 7, 8}\n{3, 4, 5}\n{3, 4, 5}\n{1, 2}\n{1, 2}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàËøêÁÆó",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàËøêÁÆó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàËøêÁÆó",
    "text": "ÈõÜÂêàËøêÁÆó\n\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊõø‰ª£ËØ≠Ê≥ï\nÊèèËø∞\n\n\n\n\na.add(x)\nN/A\nÂ∞ÜÂÖÉÁ¥† x Ê∑ªÂä†Âà∞ÈõÜÂêà a\n\n\na.clear()\nN/A\nÂ∞ÜÈõÜÂêà a ÈáçÁΩÆ‰∏∫Á©∫ÈõÜÔºå‰∏¢ÂºÉÊâÄÊúâÂÖÉÁ¥†\n\n\na.remove(x)\nN/A\n‰ªéÈõÜÂêà a ‰∏≠ÁßªÈô§ÂÖÉÁ¥† x\n\n\na.pop()\nN/A\n‰ªéÈõÜÂêà a ‰∏≠ÁßªÈô§Âπ∂ËøîÂõû‰∏Ä‰∏™‰ªªÊÑèÂÖÉÁ¥†ÔºåÂ¶ÇÊûúÈõÜÂêà‰∏∫Á©∫ÂàôÂºïÂèë KeyError\n\n\na.union(b)\na \\| b\na Âíå b ‰∏≠ÁöÑÊâÄÊúâÂîØ‰∏ÄÂÖÉÁ¥†\n\n\na.update(b)\na \\|= b\nÂ∞Ü a ÁöÑÂÜÖÂÆπËÆæÁΩÆ‰∏∫ a Âíå b ‰∏≠ÂÖÉÁ¥†ÁöÑÂπ∂ÈõÜ\n\n\na.intersection(b)\na & b\na Âíå b ‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†\n\n\na.intersection_update(b)\na &= b\nÂ∞Ü a ÁöÑÂÜÖÂÆπËÆæÁΩÆ‰∏∫ a Âíå b ‰∏≠ÂÖÉÁ¥†ÁöÑ‰∫§ÈõÜ\n\n\na.difference(b)\na - b\na ‰∏≠‰∏çÂú® b ‰∏≠ÁöÑÂÖÉÁ¥†\n\n\na.difference_update(b)\na -= b\nÂ∞Ü a ËÆæÁΩÆ‰∏∫ a ‰∏≠‰∏çÂú® b ‰∏≠ÁöÑÂÖÉÁ¥†\n\n\na.symmetric_difference(b)\na ^ b\na Êàñ b ‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥†Ôºå‰ΩÜ‰∏çÂêåÊó∂Âú®‰∏§ËÄÖ‰∏≠\n\n\na.symmetric_difference_update(b)\na ^= b\nÂ∞Ü a ËÆæÁΩÆ‰∏∫ÂåÖÂê´ a Êàñ b ‰∏≠ÁöÑÂÖÉÁ¥†Ôºå‰ΩÜ‰∏çÂêåÊó∂Âú®‰∏§ËÄÖ‰∏≠\n\n\na.issubset(b)\n&lt;=\nÂ¶ÇÊûú a ÁöÑÊâÄÊúâÂÖÉÁ¥†ÈÉΩÂåÖÂê´Âú® b ‰∏≠ÔºåÂàô‰∏∫ True\n\n\na.issuperset(b)\n&gt;=\nÂ¶ÇÊûú b ÁöÑÊâÄÊúâÂÖÉÁ¥†ÈÉΩÂåÖÂê´Âú® a ‰∏≠ÔºåÂàô‰∏∫ True\n\n\na.isdisjoint(b)\nN/A\nÂ¶ÇÊûú a Âíå b Ê≤°ÊúâÂÖ±ÂêåÂÖÉÁ¥†ÔºåÂàô‰∏∫ True"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂ∞±Âú∞ËøêÁÆó",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂ∞±Âú∞ËøêÁÆó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÔºöÂ∞±Âú∞ËøêÁÆó",
    "text": "ÈõÜÂêàÔºöÂ∞±Âú∞ËøêÁÆó\nÂ≠òÂú®Â∞±Âú∞ÁâàÊú¨Ôºà‰æãÂ¶ÇÔºåa |= bÔºâÔºö\n\nc = a.copy() # ÂàõÂª∫ a ÁöÑÂâØÊú¨\nc |= b       # Â∞±Âú∞Âπ∂ÈõÜ\nprint(c)     # ËæìÂá∫: {1, 2, 3, 4, 5, 6, 7, 8}\n\nd = a.copy()  # ÂàõÂª∫ a ÁöÑÂâØÊú¨\nd &= b        # Â∞±Âú∞‰∫§ÈõÜ\nprint(d)      # ËæìÂá∫: {3, 4, 5}\n\n{1, 2, 3, 4, 5, 6, 7, 8}\n{3, 4, 5}\n\n\n\n\n\n\n\n\nTip\n\n\n\nÂØπ‰∫éÂ§ßÂûãÈõÜÂêàÔºåÂ∞±Âú∞ËøêÁÆóÊõ¥ÊúâÊïà„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂÖÉÁ¥†ÂìàÂ∏åÊÄß",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂÖÉÁ¥†ÂìàÂ∏åÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÔºöÂÖÉÁ¥†ÂìàÂ∏åÊÄß",
    "text": "ÈõÜÂêàÔºöÂÖÉÁ¥†ÂìàÂ∏åÊÄß\n‰∏éÂ≠óÂÖ∏ÈîÆ‰∏ÄÊ†∑ÔºåÈõÜÂêàÂÖÉÁ¥†ÂøÖÈ°ªÊòØ‰∏çÂèØÂèò‰∏îÂèØÂìàÂ∏åÁöÑ„ÄÇ\n\nmy_data = [1, 2, 3, 4]   # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°®\n# my_set = {my_data}  # ËøôË°å‰ª£Á†Å‰ºöÂºïÂèë TypeErrorÔºåÂõ†‰∏∫ÂàóË°®‰∏çÂèØÂìàÂ∏å\nmy_set = {tuple(my_data)} # Â∞ÜÂàóË°®ËΩ¨Êç¢‰∏∫ÂÖÉÁªÑ\nprint(my_set)            # ËæìÂá∫: {(1, 2, 3, 4)}\n\n{(1, 2, 3, 4)}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂ≠êÈõÜÂíåË∂ÖÈõÜ",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàÂ≠êÈõÜÂíåË∂ÖÈõÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÔºöÂ≠êÈõÜÂíåË∂ÖÈõÜ",
    "text": "ÈõÜÂêàÔºöÂ≠êÈõÜÂíåË∂ÖÈõÜ\n\na_set = {1, 2, 3, 4, 5} # ÂàõÂª∫‰∏Ä‰∏™ÈõÜÂêà\nprint({1, 2, 3}.issubset(a_set))   # Ê£ÄÊü• {1, 2, 3} ÊòØÂê¶ÊòØ a_set ÁöÑÂ≠êÈõÜÔºåËæìÂá∫: True\nprint(a_set.issuperset({1, 2, 3})) # Ê£ÄÊü• a_set ÊòØÂê¶ÊòØ {1, 2, 3} ÁöÑË∂ÖÈõÜÔºåËæìÂá∫: True\n\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàÁõ∏Á≠âÊÄß",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàÁõ∏Á≠âÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÔºöÁõ∏Á≠âÊÄß",
    "text": "ÈõÜÂêàÔºöÁõ∏Á≠âÊÄß\nÂ¶ÇÊûúÂÜÖÂÆπÁõ∏Á≠âÔºåÂàôÈõÜÂêàÁõ∏Á≠âÔºö\n\nprint({1, 2, 3} == {3, 2, 1}) # ËæìÂá∫: True\n\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞enumerate",
    "href": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞enumerate",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºöenumerate",
    "text": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºöenumerate\nenumerate Âú®Ëø≠‰ª£ÊúüÈó¥Ë∑üË∏™Á¥¢ÂºïÔºö\n\ncollection = ['foo', 'bar', 'baz'] # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°®\n\n# ‰∏ç‰ΩøÁî® enumerate ÁöÑÂÜôÊ≥ïÔºö\ni = 0                             # ÂàùÂßãÂåñÁ¥¢Âºï\nfor value in collection:         # ÈÅçÂéÜÂàóË°®\n    print(f\"Index: {i}, Value: {value}\") # ÊâìÂç∞Á¥¢ÂºïÂíåÂÄº\n    i += 1                        # Á¥¢ÂºïÈÄíÂ¢û\n\n# ‰ΩøÁî® enumerateÔºö\nfor i, value in enumerate(collection): # ÂêåÊó∂Ëé∑ÂèñÁ¥¢ÂºïÂíåÂÄº\n    print(f\"Index: {i}, Value: {value}\") # ÊâìÂç∞Á¥¢ÂºïÂíåÂÄº\n\nIndex: 0, Value: foo\nIndex: 1, Value: bar\nIndex: 2, Value: baz\nIndex: 0, Value: foo\nIndex: 1, Value: bar\nIndex: 2, Value: baz\n\n\nenumerate ËøîÂõû (index, value) ÂÖÉÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞sorted",
    "href": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞sorted",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºösorted",
    "text": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºösorted\nsorted ËøîÂõû‰∏Ä‰∏™Êñ∞ÁöÑÊéíÂ∫èÂàóË°®Ôºö\n\nprint(sorted([7, 1, 2, 6, 0, 3, 2]))  # ÂØπÂàóË°®ËøõË°åÊéíÂ∫èÔºåËæìÂá∫: [0, 1, 2, 2, 3, 6, 7]\nprint(sorted('horse race'))          # ÂØπÂ≠óÁ¨¶‰∏≤ËøõË°åÊéíÂ∫èÔºåËæìÂá∫: [' ', 'a', 'c', 'e', 'e', 'h', 'o', 'r', 'r', 's']\n\n[0, 1, 2, 2, 3, 6, 7]\n[' ', 'a', 'c', 'e', 'e', 'h', 'o', 'r', 'r', 's']\n\n\n\n\n\n\n\n\nNote\n\n\n\nsorted() ËøîÂõû‰∏Ä‰∏™Êñ∞ÂàóË°®„ÄÇlist.sort() Â∞±Âú∞ÊéíÂ∫è„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞zip",
    "href": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞zip",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºözip",
    "text": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºözip\nzip Â∞ÜÂÖÉÁ¥†‚ÄúÈÖçÂØπ‚ÄùÔºö\n\nseq1 = ['foo', 'bar', 'baz']   # ÂàõÂª∫ÂàóË°® seq1\nseq2 = ['one', 'two', 'three'] # ÂàõÂª∫ÂàóË°® seq2\nzipped = zip(seq1, seq2)       # Â∞Ü seq1 Âíå seq2 ÈÖçÂØπ\nprint(list(zipped))           # ËæìÂá∫: [('foo', 'one'), ('bar', 'two'), ('baz', 'three')]\n\n[('foo', 'one'), ('bar', 'two'), ('baz', 'three')]\n\n\nzip ÂèØ‰ª•Êé•Âèó‰ªªÊÑèÊï∞ÈáèÁöÑÂ∫èÂàó„ÄÇËæìÂá∫ÈïøÂ∫¶Áî±ÊúÄÁü≠ÁöÑÂ∫èÂàóÂÜ≥ÂÆöÔºö\n\nseq3 = [False, True]           # ÂàõÂª∫ÂàóË°® seq3\nprint(list(zip(seq1, seq2, seq3))) # ËæìÂá∫: [('foo', 'one', False), ('bar', 'two', True)]\n\n[('foo', 'one', False), ('bar', 'two', True)]"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞zip-‰∏é-enumerate-ÁªìÂêà",
    "href": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞zip-‰∏é-enumerate-ÁªìÂêà",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºözip (‰∏é enumerate ÁªìÂêà)",
    "text": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºözip (‰∏é enumerate ÁªìÂêà)\n‰ΩøÁî® enumerate Ëø≠‰ª£Â§ö‰∏™Â∫èÂàóÔºö\n\nfor i, (a, b) in enumerate(zip(seq1, seq2)): # ÂêåÊó∂Ëø≠‰ª£Â§ö‰∏™Â∫èÂàóÔºåÂπ∂Ëé∑ÂèñÁ¥¢Âºï\n    print(f'{i}: {a}, {b}')                  # ËæìÂá∫: 0: foo, one \\n 1: bar, two \\n 2: baz, three\n\n0: foo, one\n1: bar, two\n2: baz, three"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞reversed",
    "href": "qmd/pandas3ed3cn.html#ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞reversed",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºöreversed",
    "text": "ÂÜÖÁΩÆÂ∫èÂàóÂáΩÊï∞Ôºöreversed\nreversed ‰ª•Áõ∏ÂèçÁöÑÈ°∫Â∫èËø≠‰ª£Ôºö\n\nprint(list(reversed(range(10))))  # ÂèçÂêëËø≠‰ª£ range(10)ÔºåËæìÂá∫: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\n\n\n\n\n\n\nNote\n\n\n\nreversed ÊòØ‰∏Ä‰∏™ÁîüÊàêÂô®ÔºàÂú®ÂÆû‰ΩìÂåñ‰πãÂâç‰∏ç‰ºöÂàõÂª∫ÂèçÂêëÂ∫èÂàóÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®ÈõÜÂêàÂíåÂ≠óÂÖ∏Êé®ÂØºÂºè",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®ÈõÜÂêàÂíåÂ≠óÂÖ∏Êé®ÂØºÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®„ÄÅÈõÜÂêàÂíåÂ≠óÂÖ∏Êé®ÂØºÂºè",
    "text": "ÂàóË°®„ÄÅÈõÜÂêàÂíåÂ≠óÂÖ∏Êé®ÂØºÂºè\nÊé®ÂØºÂºèÂèØ‰ª•ÁÆÄÊ¥ÅÂú∞ÂàõÂª∫Êñ∞ÈõÜÂêà„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂàóË°®Êé®ÂØºÂºèÂü∫Êú¨ÂΩ¢Âºè",
    "href": "qmd/pandas3ed3cn.html#ÂàóË°®Êé®ÂØºÂºèÂü∫Êú¨ÂΩ¢Âºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàóË°®Êé®ÂØºÂºèÔºöÂü∫Êú¨ÂΩ¢Âºè",
    "text": "ÂàóË°®Êé®ÂØºÂºèÔºöÂü∫Êú¨ÂΩ¢Âºè\n\n# ÈÄöÁî®ÂΩ¢ÂºèÔºö[expr for val in collection if condition]\n\n# Á≠âÊïàÁöÑ for Âæ™ÁéØÔºö\nresult = []                # ÂàõÂª∫‰∏Ä‰∏™Á©∫ÂàóË°®\nfor val in collection:     # ÈÅçÂéÜÈõÜÂêà‰∏≠ÁöÑÊØè‰∏™ÂÖÉÁ¥†\n    if condition:          # Â¶ÇÊûúÊù°‰ª∂‰∏∫Áúü\n        result.append(expr) # Â∞ÜË°®ËææÂºèÁöÑÁªìÊûúÊ∑ªÂä†Âà∞ÂàóË°®‰∏≠\n\nÁ§∫‰æãÔºö\n\nstrings = ['a', 'as', 'bat', 'car', 'dove', 'python'] # ÂàõÂª∫‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÂàóË°®\n# ‰ΩøÁî®ÂàóË°®Êé®ÂØºÂºèÂ∞ÜÈïøÂ∫¶Â§ß‰∫é 2 ÁöÑÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫Â§ßÂÜô\nupper_case_long_strings = [x.upper() for x in strings if len(x) &gt; 2]\nprint(upper_case_long_strings)  # ËæìÂá∫: ['BAT', 'CAR', 'DOVE', 'PYTHON']\n\n['BAT', 'CAR', 'DOVE', 'PYTHON']"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈõÜÂêàÊé®ÂØºÂºè",
    "href": "qmd/pandas3ed3cn.html#ÈõÜÂêàÊé®ÂØºÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈõÜÂêàÊé®ÂØºÂºè",
    "text": "ÈõÜÂêàÊé®ÂØºÂºè\n\n# {expr for val in collection if condition}\nstrings = ['a', 'as', 'bat', 'car', 'dove', 'python'] # ÂàõÂª∫‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÂàóË°®\nunique_lengths = {len(x) for x in strings}   # ‰ΩøÁî®ÈõÜÂêàÊé®ÂØºÂºèËé∑ÂèñÂàóË°®‰∏≠Â≠óÁ¨¶‰∏≤ÁöÑÂîØ‰∏ÄÈïøÂ∫¶\nprint(unique_lengths)                       # ËæìÂá∫: {1, 2, 3, 4, 6}\n\n# ‰ΩøÁî® map ÂáΩÊï∞\nprint(set(map(len, strings))) # ‰ΩøÁî®mapÂáΩÊï∞ÂíåsetËææÂà∞ÂêåÊ†∑ÊïàÊûú\n\n{1, 2, 3, 4, 6}\n{1, 2, 3, 4, 6}\n\n\nÁ±ª‰ºº‰∫éÂàóË°®Êé®ÂØºÂºèÔºå‰ΩÜ‰ΩøÁî® {}ÔºàÂàõÂª∫‰∏Ä‰∏™ÈõÜÂêàÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏Êé®ÂØºÂºè",
    "href": "qmd/pandas3ed3cn.html#Â≠óÂÖ∏Êé®ÂØºÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÂÖ∏Êé®ÂØºÂºè",
    "text": "Â≠óÂÖ∏Êé®ÂØºÂºè\n\n# {key_expr: value_expr for val in collection if condition}\n\nstrings = ['a', 'as', 'bat', 'car', 'dove', 'python']   # ÂàõÂª∫‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÂàóË°®\n# ‰ΩøÁî®Â≠óÂÖ∏Êé®ÂØºÂºèÂàõÂª∫‰∏Ä‰∏™Â≠óÂÖ∏ÔºåÂÖ∂‰∏≠ÈîÆÊòØÂ≠óÁ¨¶‰∏≤ÔºåÂÄºÊòØÂ≠óÁ¨¶‰∏≤Âú®ÂàóË°®‰∏≠ÁöÑÁ¥¢Âºï\nloc_mapping = {val: index for index, val in enumerate(strings)}\nprint(loc_mapping) # ËæìÂá∫: {'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}\n\n{'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂµåÂ•óÂàóË°®Êé®ÂØºÂºè",
    "href": "qmd/pandas3ed3cn.html#ÂµåÂ•óÂàóË°®Êé®ÂØºÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂµåÂ•óÂàóË°®Êé®ÂØºÂºè",
    "text": "ÂµåÂ•óÂàóË°®Êé®ÂØºÂºè\n\nall_data = [['John', 'Emily', 'Michael', 'Mary', 'Steven'],\n            ['Maria', 'Juan', 'Javier', 'Natalia', 'Pilar']]\n\n# ‰ΩøÁî®ÂµåÂ•óÂàóË°®Êé®ÂØºÂºèÊâæÂá∫ÂêçÂ≠ó‰∏≠ÂåÖÂê´2‰∏™‰ª•‰∏äaÁöÑÂêçÂ≠ó„ÄÇ\nnames_of_interest = [name for names in all_data for name in names\n                     if name.count('a') &gt;= 2]\nprint(names_of_interest) # ËæìÂá∫: ['Maria', 'Natalia']\n\n\nsome_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)] # ÂàõÂª∫‰∏Ä‰∏™ÂÖÉÁªÑÂàóË°®\nflattened = [x for tup in some_tuples for x in tup] # ‰ΩøÁî®ÂµåÂ•óÂàóË°®Êé®ÂØºÂºèÂ±ïÂºÄÂÖÉÁªÑ\nprint(flattened) # ËæìÂá∫: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# ÂàóË°®Êé®ÂØºÂºè‰∏≠ÁöÑÂàóË°®Êé®ÂØºÂºè\nflattened = [[x for x in tup] for tup in some_tuples]  # ‰∏§Â±ÇÂàóË°®Êé®ÂØº\nprint(flattened) # ËæìÂá∫Ôºö [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n['Maria', 'Natalia']\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\n\n\n\n\n\nNote\n\n\n\nfor ÁöÑÈ°∫Â∫è‰∏éÂµåÂ•ó for Âæ™ÁéØ‰∏≠ÁöÑÈ°∫Â∫èÁõ∏Âêå„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂáΩÊï∞",
    "href": "qmd/pandas3ed3cn.html#ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "3.2 ÂáΩÊï∞",
    "text": "3.2 ÂáΩÊï∞\nÂáΩÊï∞ÁªÑÁªáÂíåÈáçÁî®‰ª£Á†Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂáΩÊï∞Â£∞Êòé-def",
    "href": "qmd/pandas3ed3cn.html#ÂáΩÊï∞Â£∞Êòé-def",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂáΩÊï∞Â£∞Êòé (def)",
    "text": "ÂáΩÊï∞Â£∞Êòé (def)\n\ndef my_function(x, y):                      # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂêç‰∏∫ my_functionÔºåÊé•Âèó‰∏§‰∏™ÂèÇÊï∞ x Âíå y\n    \"\"\"Docstring: Ëß£ÈáäÂáΩÊï∞ÁöÑÂäüËÉΩ„ÄÇ\"\"\"   # ÂáΩÊï∞ÁöÑÊñáÊ°£Â≠óÁ¨¶‰∏≤\n    return x + y                            # ËøîÂõû x Âíå y ÁöÑÂíå\n\nresult = my_function(1, 2)                  # Ë∞ÉÁî®ÂáΩÊï∞ÔºåÂπ∂Â∞ÜËøîÂõûÂÄºËµãÁªô result\nprint(result)                              # ËæìÂá∫: 3\nprint(my_function.__doc__) # ËÆøÈóÆÊñáÊ°£Â≠óÁ¨¶‰∏≤, ËæìÂá∫: Docstring: Ëß£ÈáäÂáΩÊï∞ÁöÑÂäüËÉΩ„ÄÇ\n\n3\nDocstring: Ëß£ÈáäÂáΩÊï∞ÁöÑÂäüËÉΩ„ÄÇ\n\n\n\nreturn ËøîÂõû‰∏Ä‰∏™ÂÄº„ÄÇ\nÂ¶ÇÊûúÊ≤°Êúâ return ËØ≠Âè•ÔºåÂàôÈöêÂºèËøîÂõû None„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂáΩÊï∞ÂèÇÊï∞‰ΩçÁΩÆÂèÇÊï∞ÂíåÂÖ≥ÈîÆÂ≠óÂèÇÊï∞",
    "href": "qmd/pandas3ed3cn.html#ÂáΩÊï∞ÂèÇÊï∞‰ΩçÁΩÆÂèÇÊï∞ÂíåÂÖ≥ÈîÆÂ≠óÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂáΩÊï∞ÂèÇÊï∞Ôºà‰ΩçÁΩÆÂèÇÊï∞ÂíåÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Ôºâ",
    "text": "ÂáΩÊï∞ÂèÇÊï∞Ôºà‰ΩçÁΩÆÂèÇÊï∞ÂíåÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Ôºâ\n\ndef my_function2(x, y, z=1.5):  # ÂÆö‰πâÂáΩÊï∞Ôºåz ÊòØÂÖ≥ÈîÆÂ≠óÂèÇÊï∞ÔºåÈªòËÆ§ÂÄº‰∏∫ 1.5\n    if z &gt; 1:                   # Â¶ÇÊûú z Â§ß‰∫é 1\n        return z * (x + y)      # ËøîÂõû z ‰πò‰ª• x Âíå y ÁöÑÂíå\n    else:                       # Âê¶Âàô\n        return z / (x + y)      # ËøîÂõû z Èô§‰ª• x Âíå y ÁöÑÂíå\n\nprint(my_function2(5, 6, z=0.7))  # ‰ΩøÁî®ÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Ë∞ÉÁî®ÂáΩÊï∞ÔºåËæìÂá∫: 0.06363636363636363\nprint(my_function2(3.14, 7, 3.5)) # ‰ΩøÁî®‰ΩçÁΩÆÂèÇÊï∞Ë∞ÉÁî®ÂáΩÊï∞ÔºåËæìÂá∫: 35.49\nprint(my_function2(10, 20))       # ‰ΩøÁî®ÈªòËÆ§ÂèÇÊï∞Ë∞ÉÁî®ÂáΩÊï∞ÔºåËæìÂá∫: 45.0\n\n0.06363636363636363\n35.49\n45.0\n\n\n\n‰ΩçÁΩÆÂèÇÊï∞ÔºöÊåâÊ≠£Á°ÆÁöÑÈ°∫Â∫è‰º†ÈÄí„ÄÇ\nÂÖ≥ÈîÆÂ≠óÂèÇÊï∞ÔºöÂèØ‰ª•Êåâ‰ªªÊÑèÈ°∫Â∫è‰º†ÈÄíÔºåÈÄöÂ∏∏Â∏¶ÊúâÈªòËÆ§ÂÄº„ÄÇ\nÂÖ≥ÈîÆÂ≠óÂèÇÊï∞ÂøÖÈ°ªË∑üÂú®‰ΩçÁΩÆÂèÇÊï∞‰πãÂêé„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂëΩÂêçÁ©∫Èó¥‰ΩúÁî®ÂüüÂíåÂ±ÄÈÉ®ÂáΩÊï∞",
    "href": "qmd/pandas3ed3cn.html#ÂëΩÂêçÁ©∫Èó¥‰ΩúÁî®ÂüüÂíåÂ±ÄÈÉ®ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂëΩÂêçÁ©∫Èó¥„ÄÅ‰ΩúÁî®ÂüüÂíåÂ±ÄÈÉ®ÂáΩÊï∞",
    "text": "ÂëΩÂêçÁ©∫Èó¥„ÄÅ‰ΩúÁî®ÂüüÂíåÂ±ÄÈÉ®ÂáΩÊï∞\n\nÂáΩÊï∞ÂÜÖÁöÑÂèòÈáè‰Ωç‰∫éÂ±ÄÈÉ®ÂëΩÂêçÁ©∫Èó¥‰∏≠ÔºàÈªòËÆ§Ôºâ„ÄÇ\nÂ±ÄÈÉ®ÂëΩÂêçÁ©∫Èó¥ÔºöÂú®ÂáΩÊï∞Ë∞ÉÁî®Êó∂ÂàõÂª∫ÔºåÂú®ÂáΩÊï∞ÁªìÊùüÊó∂ÈîÄÊØÅ„ÄÇ\n\n\ndef func():        # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞\n    a = []          # 'a' ÊòØÂ±ÄÈÉ®ÂèòÈáè\n    for i in range(5): # Âæ™ÁéØ 5 Ê¨°\n        a.append(i) # Â∞Ü i ËøΩÂä†Âà∞ÂàóË°® a ‰∏≠\n\nfunc()             # Ë∞ÉÁî®ÂáΩÊï∞\n# print(a)  # ËøôË°å‰ª£Á†Å‰ºöÂºïÂèë NameError: name 'a' is not definedÔºåÂõ†‰∏∫ 'a' Âú®ÂáΩÊï∞Â§ñÈÉ®‰∏çÂèØËßÅ\n\n\nÂèØ‰ª•ËÆøÈóÆÂ∞ÅÈó≠‰ΩúÁî®ÂüüÔºå‰ΩÜË¶Å‰øÆÊîπÂÆÉ‰ª¨ÔºåËØ∑‰ΩøÁî® global Êàñ nonlocal„ÄÇ\n\n\na = []  # ÂÖ®Â±ÄÂèòÈáè\n\ndef func2():          # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞\n    for i in range(5): # Âæ™ÁéØ 5 Ê¨°\n        a.append(i)  # ‰øÆÊîπÂÖ®Â±ÄÂèòÈáè 'a'\n\nfunc2()            # Ë∞ÉÁî®ÂáΩÊï∞\nprint(a)            # ËæìÂá∫: [0, 1, 2, 3, 4]\n\nb = None # ÂÖ®Â±ÄÂèòÈáè\ndef bind_b_variable():  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞\n    global b          # Â£∞Êòé 'b' ‰∏∫ÂÖ®Â±ÄÂèòÈáè\n    b = []           # Â∞ÜÁ©∫ÂàóË°®ËµãÂÄºÁªôÂÖ®Â±ÄÂèòÈáè 'b'\nbind_b_variable()     # Ë∞ÉÁî®ÂáΩÊï∞\nprint(b)            # ËæìÂá∫: []\n\n[0, 1, 2, 3, 4]\n[]\n\n\n\n\n\n\n\n\nCaution\n\n\n\nÂ∞ΩÈáèÂáèÂ∞ë global ÁöÑ‰ΩøÁî®„ÄÇÊõ¥Â•ΩÁöÑËÆæËÆ°ÂèØ‰ª•ÂáèÂ∞ëÂØπÂÖ®Â±ÄÁä∂ÊÄÅÁöÑ‰æùËµñ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ËøîÂõûÂ§ö‰∏™ÂÄº",
    "href": "qmd/pandas3ed3cn.html#ËøîÂõûÂ§ö‰∏™ÂÄº",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøîÂõûÂ§ö‰∏™ÂÄº",
    "text": "ËøîÂõûÂ§ö‰∏™ÂÄº\n\ndef f():             # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞\n    a = 5            # Â±ÄÈÉ®ÂèòÈáè\n    b = 6            # Â±ÄÈÉ®ÂèòÈáè\n    c = 7            # Â±ÄÈÉ®ÂèòÈáè\n    return a, b, c  # ËøîÂõû‰∏Ä‰∏™ÂÖÉÁªÑ\n\nx, y, z = f()        # Ë∞ÉÁî®ÂáΩÊï∞ÔºåÂπ∂Â∞ÜËøîÂõûÁöÑÂÖÉÁªÑËß£ÂåÖÂà∞ÂèòÈáè x, y, z ‰∏≠\nprint(x, y, z)      # ËæìÂá∫: 5 6 7\n\n# ÊàñËÄÖËøîÂõû‰∏Ä‰∏™Â≠óÂÖ∏\ndef f2():\n  a = 5\n  b = 6\n  c = 7\n  return {'a' : a, 'b' : b, 'c' : c} # ËøîÂõûÂÄºÊîπ‰∏∫Â≠óÂÖ∏\n\nresult = f2()\nprint(result) # ËæìÂá∫: {'a': 5, 'b': 6, 'c': 7}\n\n5 6 7\n{'a': 5, 'b': 6, 'c': 7}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂáΩÊï∞ÊòØÂØπË±°",
    "href": "qmd/pandas3ed3cn.html#ÂáΩÊï∞ÊòØÂØπË±°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂáΩÊï∞ÊòØÂØπË±°",
    "text": "ÂáΩÊï∞ÊòØÂØπË±°\nÂáΩÊï∞ÊòØ‰∏ÄÁ≠âÂÖ¨Ê∞ëÔºö\n\nÂèØ‰ª•‰Ωú‰∏∫ÂèÇÊï∞‰º†ÈÄí„ÄÇ\nÂèØ‰ª•ËµãÂÄºÁªôÂèòÈáè„ÄÇ\nÂèØ‰ª•‰ªéÂÖ∂‰ªñÂáΩÊï∞ËøîÂõû„ÄÇ\n\n\nimport re  # ÂØºÂÖ•Ê≠£ÂàôË°®ËææÂºèÊ®°Âùó\n\nstates = ['   Alabama ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda',\n          'south   carolina##', 'West virginia?'] # ÂàóË°®\n\ndef clean_strings(strings):          # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÁî®‰∫éÊ∏ÖÁêÜÂ≠óÁ¨¶‰∏≤ÂàóË°®\n    result = []                      # ÂàõÂª∫‰∏Ä‰∏™Á©∫ÂàóË°®\n    for value in strings:            # ÈÅçÂéÜÂàóË°®‰∏≠ÁöÑÊØè‰∏™Â≠óÁ¨¶‰∏≤\n        value = value.strip()         # ÂéªÈô§Â≠óÁ¨¶‰∏≤‰∏§Á´ØÁöÑÁ©∫Ê†º\n        value = re.sub('[!#?]', '', value) # ‰ΩøÁî®Ê≠£ÂàôË°®ËææÂºèÂéªÈô§Ê†áÁÇπÁ¨¶Âè∑\n        value = value.title()         # Â∞ÜÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫Ê†áÈ¢òÊ†ºÂºè\n        result.append(value)          # Â∞ÜÂ§ÑÁêÜÂêéÁöÑÂ≠óÁ¨¶‰∏≤Ê∑ªÂä†Âà∞ÂàóË°®‰∏≠\n    return result                    # ËøîÂõûÂ§ÑÁêÜÂêéÁöÑÂàóË°®\n\nprint(clean_strings(states)) #ËæìÂá∫: ['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'South Carolina', 'West Virginia']\n\n# Êõø‰ª£ÊñπÊ°àÔºöÂáΩÊï∞ÂàóË°®\ndef remove_punctuation(value):            # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÁî®‰∫éÂéªÈô§Ê†áÁÇπÁ¨¶Âè∑\n    return re.sub('[!#?]', '', value)  # ‰ΩøÁî®Ê≠£ÂàôË°®ËææÂºèÂéªÈô§Ê†áÁÇπÁ¨¶Âè∑\n\nclean_ops = [str.strip, remove_punctuation, str.title] # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÂàóË°®\n\ndef clean_strings_functional(strings, ops): # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÊé•ÂèóÂ≠óÁ¨¶‰∏≤ÂàóË°®ÂíåÊìç‰ΩúÂàóË°®\n    result = []                         # ÂàõÂª∫‰∏Ä‰∏™Á©∫ÂàóË°®\n    for value in strings:               # ÈÅçÂéÜÂ≠óÁ¨¶‰∏≤ÂàóË°®‰∏≠ÁöÑÊØè‰∏™Â≠óÁ¨¶‰∏≤\n        for function in ops:            # ÈÅçÂéÜÊìç‰ΩúÂàóË°®‰∏≠ÁöÑÊØè‰∏™ÂáΩÊï∞\n            value = function(value)     # ÂØπÂ≠óÁ¨¶‰∏≤Â∫îÁî®ÂáΩÊï∞\n        result.append(value)           # Â∞ÜÂ§ÑÁêÜÂêéÁöÑÂ≠óÁ¨¶‰∏≤Ê∑ªÂä†Âà∞ÂàóË°®‰∏≠\n    return result                     # ËøîÂõûÂ§ÑÁêÜÂêéÁöÑÂàóË°®\n\nprint(clean_strings_functional(states, clean_ops)) #ËæìÂá∫: ['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'South Carolina', 'West Virginia']\n\n# Â∞ÜÂáΩÊï∞‰∏é map ÁªìÂêà‰ΩøÁî®Ôºö\nfor x in map(remove_punctuation, states): # ‰ΩøÁî® map ÂáΩÊï∞ÂØπÂàóË°®‰∏≠ÁöÑÊØè‰∏™Â≠óÁ¨¶‰∏≤Â∫îÁî® remove_punctuation ÂáΩÊï∞\n  print(x)\n\n['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'South   Carolina', 'West Virginia']\n['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'South   Carolina', 'West Virginia']\n   Alabama \nGeorgia\nGeorgia\ngeorgia\nFlOrIda\nsouth   carolina\nWest virginia\n\n\nËøôÁßçÊñπÂºèÂæàÁÅµÊ¥ªÔºåËÄå‰∏îÂèØ‰ª•ÈáçÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÁîüÊàêÂô®",
    "href": "qmd/pandas3ed3cn.html#ÁîüÊàêÂô®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁîüÊàêÂô®",
    "text": "ÁîüÊàêÂô®\nÁîüÊàêÂô®ÊåâÈúÄÁîüÊàêÂÄºÔºàËäÇÁúÅÂÜÖÂ≠òÔºâ„ÄÇ\n\ndef squares(n=10):                         # ÂÆö‰πâ‰∏Ä‰∏™ÁîüÊàêÂô®ÂáΩÊï∞ÔºåÁîüÊàê 1 Âà∞ n^2 ÁöÑÂπ≥ÊñπÊï∞\n    print('Generating squares from 1 to %d' % n ** 2) # ÊâìÂç∞‰∏ÄÊù°Ê∂àÊÅØ\n    for i in range(1, n + 1):             # Âæ™ÁéØ 1 Âà∞ n\n        yield i ** 2                      # ‰ΩøÁî® yield ‰∫ßÁîü i ÁöÑÂπ≥Êñπ\n\ngen = squares()                          # ÂàõÂª∫‰∏Ä‰∏™ÁîüÊàêÂô®ÂØπË±°\nprint(gen)                             # ËæìÂá∫: &lt;generator object squares at 0x...&gt; ÔºàÁîüÊàêÂô®ÂØπË±°Ôºâ\nfor x in gen:                          # ËØ∑Ê±ÇÂÄº\n    print(x, end=' ')                   # ËæìÂá∫: 1 4 9 16 25 36 49 64 81 100\n\n&lt;generator object squares at 0x7f12bc4b19a0&gt;\nGenerating squares from 1 to 100\n1 4 9 16 25 36 49 64 81 100 \n\n\n\n‰ΩøÁî® yield ËÄå‰∏çÊòØ return„ÄÇ\n‰∏ç‰ºöÁ´ãÂç≥ÊâßË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÁîüÊàêÂô®Ë°®ËææÂºè",
    "href": "qmd/pandas3ed3cn.html#ÁîüÊàêÂô®Ë°®ËææÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁîüÊàêÂô®Ë°®ËææÂºè",
    "text": "ÁîüÊàêÂô®Ë°®ËææÂºè\nÁÆÄÊ¥ÅÁöÑÁîüÊàêÂô®ÔºàÁ±ª‰ºº‰∫éÊé®ÂØºÂºèÔºâÔºö\n\n# ÂàóË°®Êé®ÂØºÂºèÔºö[x ** 2 for x in range(100)]\ngen = (x ** 2 for x in range(100)) # ‰ΩøÁî®ÂúÜÊã¨Âè∑ÂàõÂª∫ÁîüÊàêÂô®Ë°®ËææÂºè\nprint(gen)                      # ËæìÂá∫: &lt;generator object &lt;genexpr&gt; at 0x...&gt; ÔºàÁîüÊàêÂô®ÂØπË±°Ôºâ\nprint(sum(gen))                 # ËæìÂá∫: 328350\n\n# ‰Ωú‰∏∫ÂáΩÊï∞ÂèÇÊï∞Ôºö\nprint(sum(x ** 2 for x in range(100)))   # Â∞ÜÁîüÊàêÂô®Ë°®ËææÂºè‰Ωú‰∏∫ÂèÇÊï∞‰º†ÈÄíÁªô sum ÂáΩÊï∞ÔºåËæìÂá∫: 328350\nprint(dict((i, i **2) for i in range(5))) # Â∞ÜÁîüÊàêÂô®Ë°®ËææÂºè‰Ωú‰∏∫ÂèÇÊï∞‰º†ÈÄíÁªô dict ÂáΩÊï∞ÔºåËæìÂá∫: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n&lt;generator object &lt;genexpr&gt; at 0x7f12e87fe9b0&gt;\n328350\n328350\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#itertools-Ê®°Âùó",
    "href": "qmd/pandas3ed3cn.html#itertools-Ê®°Âùó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "itertools Ê®°Âùó",
    "text": "itertools Ê®°Âùó\nitertools Êèê‰æõ‰∫ÜÊúâÁî®ÁöÑÁîüÊàêÂô®Ôºö\n\nimport itertools # ÂØºÂÖ• itertools Ê®°Âùó\n\ndef first_letter(x):   # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËøîÂõûÂ≠óÁ¨¶‰∏≤ÁöÑÁ¨¨‰∏Ä‰∏™Â≠óÊØç\n    return x[0]\n\nnames = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Steven'] # ÂàõÂª∫‰∏Ä‰∏™ÂêçÂ≠óÂàóË°®\n\nfor letter, names_iter in itertools.groupby(names, first_letter): # ‰ΩøÁî® itertools.groupby ÊåâÈ¶ñÂ≠óÊØçÂàÜÁªÑ\n    print(letter, list(names_iter)) # ËæìÂá∫ÊØèÁªÑÁöÑÈ¶ñÂ≠óÊØçÂíåÂêçÂ≠óÂàóË°®\n\nA ['Alan', 'Adam']\nW ['Wes', 'Will']\nA ['Albert']\nS ['Steven']\n\n\nitertools.groupby ÂØπËøûÁª≠ÁöÑÂÖÉÁ¥†ËøõË°åÂàÜÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÊúâÁî®ÁöÑ-itertools-ÂáΩÊï∞",
    "href": "qmd/pandas3ed3cn.html#ÊúâÁî®ÁöÑ-itertools-ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊúâÁî®ÁöÑ itertools ÂáΩÊï∞",
    "text": "ÊúâÁî®ÁöÑ itertools ÂáΩÊï∞\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nchain(*iterables)\nÈìæÊé•Ëø≠‰ª£Âô®„ÄÇ\n\n\ncombinations(iterable, k)\nÁîüÊàêÈïøÂ∫¶‰∏∫ k ÁöÑÁªÑÂêàÔºåÂøΩÁï•È°∫Â∫èÔºå‰∏çÊîæÂõû„ÄÇ\n\n\npermutations(iterable, k)\nÁîüÊàêÈïøÂ∫¶‰∏∫ k ÁöÑÊéíÂàóÔºåËÄÉËôëÈ°∫Â∫è„ÄÇ\n\n\ngroupby(iterable[, keyfunc])\n‰∏∫ÊØè‰∏™ÂîØ‰∏ÄÈîÆÁîüÊàê (key, sub-iterator)„ÄÇ\n\n\nproduct(*iterables, repeat=1)\nÁîüÊàêÁ¨õÂç°Â∞îÁßØÔºàÁ±ª‰ºº‰∫éÂµåÂ•ó for Âæ™ÁéØÔºâ„ÄÇ\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nÊü•Áúã itertools ÊñáÊ°£ÔºÅËøôÊòØ‰∏Ä‰∏™ÂÆùÂ∫ìÔºÅüíé"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÈîôËØØÂíåÂºÇÂ∏∏Â§ÑÁêÜ",
    "href": "qmd/pandas3ed3cn.html#ÈîôËØØÂíåÂºÇÂ∏∏Â§ÑÁêÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈîôËØØÂíåÂºÇÂ∏∏Â§ÑÁêÜ",
    "text": "ÈîôËØØÂíåÂºÇÂ∏∏Â§ÑÁêÜ\nÂ§ÑÁêÜÈîôËØØÂØπ‰∫éÂÅ•Â£ÆÁöÑ‰ª£Á†ÅËá≥ÂÖ≥ÈáçË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#try-except-Âùó",
    "href": "qmd/pandas3ed3cn.html#try-except-Âùó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "try-except Âùó",
    "text": "try-except Âùó\n\ndef attempt_float(x):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂ∞ùËØïÂ∞ÜËæìÂÖ•ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞\n    try:               # Â∞ùËØïÊâßË°å‰ª•‰∏ã‰ª£Á†ÅÂùó\n        return float(x) # Â∞Ü x ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞Âπ∂ËøîÂõû\n    except:            # Â¶ÇÊûúÂèëÁîü‰ªª‰ΩïÂºÇÂ∏∏ÔºåÂàôÊâßË°å‰ª•‰∏ã‰ª£Á†ÅÂùó\n        return x       # ËøîÂõûÂéüÂßãËæìÂÖ•\n\nprint(attempt_float('1.2345'))    # ËæìÂá∫: 1.2345\nprint(attempt_float('something')) # ËæìÂá∫: something\n\n1.2345\nsomething\n\n\n\ntry: ÂèØËÉΩÂºïÂèëÂºÇÂ∏∏ÁöÑ‰ª£Á†Å„ÄÇ\nexcept: Â¶ÇÊûúÂèëÁîüÂºÇÂ∏∏ÔºåÂàôÊâßË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÊçïËé∑ÁâπÂÆöÂºÇÂ∏∏",
    "href": "qmd/pandas3ed3cn.html#ÊçïËé∑ÁâπÂÆöÂºÇÂ∏∏",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊçïËé∑ÁâπÂÆöÂºÇÂ∏∏",
    "text": "ÊçïËé∑ÁâπÂÆöÂºÇÂ∏∏\n\ndef attempt_float2(x):         # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂ∞ùËØïÂ∞ÜËæìÂÖ•ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞\n    try:                      # Â∞ùËØïÊâßË°å‰ª•‰∏ã‰ª£Á†ÅÂùó\n        return float(x)        # Â∞Ü x ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞Âπ∂ËøîÂõû\n    except ValueError:       # Â¶ÇÊûúÂèëÁîü ValueError ÂºÇÂ∏∏ÔºåÂàôÊâßË°å‰ª•‰∏ã‰ª£Á†ÅÂùó\n        return x              # ËøîÂõûÂéüÂßãËæìÂÖ•\n\n# print(attempt_float2((1, 2)))  # ËøôË°å‰ª£Á†Å‰ºöÂºïÂèë TypeErrorÔºåÂõ†‰∏∫Ê≤°ÊúâÊçïËé∑ TypeError ÂºÇÂ∏∏\n\nÊåáÂÆöÂºÇÂ∏∏Á±ªÂûãÔºàÈ¶ñÈÄâÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÊçïËé∑Â§ö‰∏™ÂºÇÂ∏∏Á±ªÂûã",
    "href": "qmd/pandas3ed3cn.html#ÊçïËé∑Â§ö‰∏™ÂºÇÂ∏∏Á±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊçïËé∑Â§ö‰∏™ÂºÇÂ∏∏Á±ªÂûã",
    "text": "ÊçïËé∑Â§ö‰∏™ÂºÇÂ∏∏Á±ªÂûã\n\ndef attempt_float3(x):                 # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂ∞ùËØïÂ∞ÜËæìÂÖ•ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞\n    try:                              # Â∞ùËØïÊâßË°å‰ª•‰∏ã‰ª£Á†ÅÂùó\n        return float(x)                # Â∞Ü x ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞Âπ∂ËøîÂõû\n    except (TypeError, ValueError):  # Â¶ÇÊûúÂèëÁîü TypeError Êàñ ValueError ÂºÇÂ∏∏ÔºåÂàôÊâßË°å‰ª•‰∏ã‰ª£Á†ÅÂùó\n        return x                      # ËøîÂõûÂéüÂßãËæìÂÖ•\n\n‰ΩøÁî®ÂÖÉÁªÑÊçïËé∑Â§öÁßçÁ±ªÂûãÁöÑÂºÇÂ∏∏„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#finally-Âíå-else",
    "href": "qmd/pandas3ed3cn.html#finally-Âíå-else",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "finally Âíå else",
    "text": "finally Âíå else\n\nfinally: ÂßãÁªàÊâßË°åÔºàÊ∏ÖÁêÜÔºâ„ÄÇ\nelse: Â¶ÇÊûú try ÂùóÊ≤°ÊúâÂºïÂèëÂºÇÂ∏∏ÔºåÂàôÊâßË°å„ÄÇ\n\n\nf = open(\"tempfile.txt\", mode = \"w\") # ÂàõÂª∫‰∏Ä‰∏™‰∏¥Êó∂Êñá‰ª∂\ntry:\n    # write_to_file(f) # ÂÅáËÆæ write_to_file ÊòØ‰∏Ä‰∏™ÂèØËÉΩÂá∫ÈîôÁöÑÂáΩÊï∞\n    f.write(\"example text\")  # ÂÜôÂÖ•\nfinally:\n    f.close()  # Êó†ËÆ∫ÊòØÂê¶ÂèëÁîüÂºÇÂ∏∏ÔºåÈÉΩÂÖ≥Èó≠Êñá‰ª∂\n    import os\n    os.remove(\"tempfile.txt\") # Âà†Èô§‰∏¥Êó∂Êñá‰ª∂\n\n\nf = open(\"tempfile.txt\", mode = \"w\") # ÂàõÂª∫‰∏Ä‰∏™‰∏¥Êó∂Êñá‰ª∂\ntry:\n    #write_to_file(f) # ÂÅáËÆæ write_to_file ÊòØ‰∏Ä‰∏™ÂèØËÉΩÂá∫ÈîôÁöÑÂáΩÊï∞\n    f.write(\"example text\") #ÂÜôÂÖ•\nexcept:\n    print('Failed') # ÊçïËé∑ÂºÇÂ∏∏Êó∂ËæìÂá∫\nelse:\n    print('Succeeded') # Ê≤°ÊúâÊçïËé∑Âà∞ÂºÇÂ∏∏Êó∂ËæìÂá∫\nfinally:\n    f.close() # Êó†ËÆ∫ÊòØÂê¶ÊúâÂºÇÂ∏∏ÔºåÈÉΩÂÖ≥Èó≠Êñá‰ª∂\n    import os\n    os.remove(\"tempfile.txt\") # Âà†Èô§‰∏¥Êó∂Êñá‰ª∂\n\nSucceeded"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ipython-‰∏≠ÁöÑÂºÇÂ∏∏",
    "href": "qmd/pandas3ed3cn.html#ipython-‰∏≠ÁöÑÂºÇÂ∏∏",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPython ‰∏≠ÁöÑÂºÇÂ∏∏",
    "text": "IPython ‰∏≠ÁöÑÂºÇÂ∏∏\nIPython Êèê‰æõ‰∫ÜÊúâÁî®ÁöÑÂõûÊ∫Ø‰ø°ÊÅØ„ÄÇ‰ΩøÁî® %xmode ÊéßÂà∂ËØ¶ÁªÜÁ®ãÂ∫¶ÔºàPlain„ÄÅContext„ÄÅVerboseÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Êñá‰ª∂ÂíåÊìç‰ΩúÁ≥ªÁªü",
    "href": "qmd/pandas3ed3cn.html#Êñá‰ª∂ÂíåÊìç‰ΩúÁ≥ªÁªü",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "3.3 Êñá‰ª∂ÂíåÊìç‰ΩúÁ≥ªÁªü",
    "text": "3.3 Êñá‰ª∂ÂíåÊìç‰ΩúÁ≥ªÁªü"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÊâìÂºÄÊñá‰ª∂-open",
    "href": "qmd/pandas3ed3cn.html#ÊâìÂºÄÊñá‰ª∂-open",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊâìÂºÄÊñá‰ª∂ (open)",
    "text": "ÊâìÂºÄÊñá‰ª∂ (open)\n\npath = 'examples/segismundo.txt' # ËÆæÁΩÆÊñá‰ª∂Ë∑ØÂæÑÔºàËØ∑Á°Æ‰øùÊ≠§Êñá‰ª∂Â≠òÂú®Ôºâ\n\n# ÈªòËÆ§ÁºñÁ†ÅÂõ†Âπ≥Âè∞ËÄåÂºÇÔºåÊúÄÂ•ΩÊòéÁ°ÆÊåáÂÆö„ÄÇ\nf = open(path, encoding='utf-8')  # ‰ª•ËØªÂèñÊ®°ÂºèÊâìÂºÄÊñá‰ª∂Ôºà'r' ÊòØÈªòËÆ§Ê®°ÂºèÔºâÔºåÊåáÂÆöÁºñÁ†Å‰∏∫ utf-8\nfor line in f:                   # ÈÄêË°åËØªÂèñÊñá‰ª∂\n    print(line.rstrip())         # ÁßªÈô§ÊØèË°åÊú´Â∞æÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶Âπ∂ÊâìÂç∞\n\nf.close()                        # ÂÖ≥Èó≠Êñá‰ª∂\n\nSue√±a el rico en su riqueza,\nque m√°s cuidados le ofrece;\n\nsue√±a el pobre que padece\nsu miseria y su pobreza;\n\nsue√±a el que a medrar empieza,\nsue√±a el que afana y pretende,\nsue√±a el que agravia y ofende,\n\ny en el mundo, en conclusi√≥n,\ntodos sue√±an lo que son,\naunque ninguno lo entiende.\n\n\n\n\nopen(path, mode='r', encoding=None)\n\npath: Êñá‰ª∂Ë∑ØÂæÑ„ÄÇ\nmode: ‚Äòr‚Äô (ËØªÂèñ), ‚Äòw‚Äô (ÂÜôÂÖ•), ‚Äòa‚Äô (ËøΩÂä†), ‚Äòx‚Äô (ÂàõÂª∫), ‚Äòrb‚Äô, ‚Äòwb‚Äô Á≠â„ÄÇ\nencoding: Êñá‰ª∂ÁºñÁ†Å (‰æãÂ¶Ç, ‚Äòutf-8‚Äô)„ÄÇ\n\nÂÖ≥Èó≠Êñá‰ª∂Ôºöf.close()„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#‰ªéÊñá‰ª∂‰∏≠ËØªÂèñ",
    "href": "qmd/pandas3ed3cn.html#‰ªéÊñá‰ª∂‰∏≠ËØªÂèñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ªéÊñá‰ª∂‰∏≠ËØªÂèñ",
    "text": "‰ªéÊñá‰ª∂‰∏≠ËØªÂèñ\n\n# ËØªÂèñÊâÄÊúâË°å\nf = open(path, encoding=\"utf-8\")      # ‰ª•ËØªÂèñÊ®°ÂºèÊâìÂºÄÊñá‰ª∂ÔºåÊåáÂÆöÁºñÁ†Å‰∏∫ utf-8\nlines = [x.rstrip() for x in f]      # ËØªÂèñÊâÄÊúâË°åÔºåÁßªÈô§ÊØèË°åÊú´Â∞æÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶ÔºåÂπ∂Â≠òÂÇ®Âú®ÂàóË°®‰∏≠\nprint(lines)                           # ÊâìÂç∞ÊâÄÊúâË°å\nf.close()                            # ÂÖ≥Èó≠Êñá‰ª∂\n\n['Sue√±a el rico en su riqueza,', 'que m√°s cuidados le ofrece;', '', 'sue√±a el pobre que padece', 'su miseria y su pobreza;', '', 'sue√±a el que a medrar empieza,', 'sue√±a el que afana y pretende,', 'sue√±a el que agravia y ofende,', '', 'y en el mundo, en conclusi√≥n,', 'todos sue√±an lo que son,', 'aunque ninguno lo entiende.', '']"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#‰ΩøÁî®-with-ËØ≠Âè•Ëá™Âä®ÂÖ≥Èó≠Êñá‰ª∂",
    "href": "qmd/pandas3ed3cn.html#‰ΩøÁî®-with-ËØ≠Âè•Ëá™Âä®ÂÖ≥Èó≠Êñá‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® with ËØ≠Âè•Ëá™Âä®ÂÖ≥Èó≠Êñá‰ª∂",
    "text": "‰ΩøÁî® with ËØ≠Âè•Ëá™Âä®ÂÖ≥Èó≠Êñá‰ª∂\nwith ËØ≠Âè•‰ºöËá™Âä®ÂÖ≥Èó≠Êñá‰ª∂Ôºö\n\nwith open(path, encoding=\"utf-8\") as f: # ‰ΩøÁî® with ËØ≠Âè•ÊâìÂºÄÊñá‰ª∂ÔºåÊåáÂÆöÁºñÁ†Å‰∏∫ utf-8\n    lines = [x.rstrip() for x in f]  # ËØªÂèñÊâÄÊúâË°åÔºåÁßªÈô§ÊØèË°åÊú´Â∞æÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶ÔºåÂπ∂Â≠òÂÇ®Âú®ÂàóË°®‰∏≠\nprint(lines)                         # ÊâìÂç∞ÊâÄÊúâË°å\n# 'f' Âú®ËøôÈáåËá™Âä®ÂÖ≥Èó≠\n\n['Sue√±a el rico en su riqueza,', 'que m√°s cuidados le ofrece;', '', 'sue√±a el pobre que padece', 'su miseria y su pobreza;', '', 'sue√±a el que a medrar empieza,', 'sue√±a el que afana y pretende,', 'sue√±a el que agravia y ofende,', '', 'y en el mundo, en conclusi√≥n,', 'todos sue√±an lo que son,', 'aunque ninguno lo entiende.', '']\n\n\n\n\n\n\n\n\nTip\n\n\n\n‰ΩøÁî® withÔºÅÂç≥‰ΩøÂá∫Áé∞ÈîôËØØÔºåÂÆÉ‰πüËÉΩÁ°Æ‰øùÊ∏ÖÁêÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Êñá‰ª∂Ê®°Âºè",
    "href": "qmd/pandas3ed3cn.html#Êñá‰ª∂Ê®°Âºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êñá‰ª∂Ê®°Âºè",
    "text": "Êñá‰ª∂Ê®°Âºè\n\n\n\n\n\n\n\nÊ®°Âºè\nÊèèËø∞\n\n\n\n\nr\nÂè™ËØª\n\n\nw\nÂè™ÂÜôÔºõÂàõÂª∫Êñ∞Êñá‰ª∂ÔºàÊì¶Èô§Áé∞ÊúâÊñá‰ª∂Ôºâ\n\n\nx\nÂè™ÂÜôÔºõÂàõÂª∫Êñ∞Êñá‰ª∂\n\n\na\nËøΩÂä†Âà∞Áé∞ÊúâÊñá‰ª∂ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºåÂàõÂª∫Êñ∞Êñá‰ª∂Ôºâ\n\n\nr+\nËØªÂÜô\n\n\nb\n‰∫åËøõÂà∂Ê®°ÂºèÔºàÊ∑ªÂä†Âà∞Ê®°ÂºèÔºö‚Äòrb‚Äô, ‚Äòwb‚ÄôÔºâ\n\n\nt\nÊñáÊú¨Ê®°ÂºèÔºàËß£Á†ÅÂ≠óËäÇÔºâÔºõÈªòËÆ§"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#read-seek-Âíå-tell",
    "href": "qmd/pandas3ed3cn.html#read-seek-Âíå-tell",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "read, seek Âíå tell",
    "text": "read, seek Âíå tell\n\nf1 = open(path, encoding = \"utf-8\")  # ‰ª•ÊñáÊú¨Ê®°ÂºèÊâìÂºÄÊñá‰ª∂ÔºåÊåáÂÆöÁºñÁ†Å‰∏∫ utf-8\nprint(f1.read(10))                # ËØªÂèñ 10 ‰∏™*Â≠óÁ¨¶*\n\nf2 = open(path, mode='rb')        # ‰ª•‰∫åËøõÂà∂Ê®°ÂºèÊâìÂºÄÊñá‰ª∂\nprint(f2.read(10))                # ËØªÂèñ 10 ‰∏™*Â≠óËäÇ*\n\nprint(f1.tell())                  # Ëé∑ÂèñÂΩìÂâç‰ΩçÁΩÆÔºàÂ≠óÁ¨¶Ôºâ\nprint(f2.tell())                  # Ëé∑ÂèñÂΩìÂâç‰ΩçÁΩÆÔºàÂ≠óËäÇÔºâ\n\nimport sys\nprint(sys.getdefaultencoding())    # Ëé∑ÂèñÈªòËÆ§ÁºñÁ†Å\n\nf1.seek(3)                        # ÁßªÂä®Âà∞Á¨¨ 3 ‰∏™Â≠óËäÇ/Â≠óÁ¨¶\nprint(f1.read(1))                 # ËØªÂèñ 1 ‰∏™Â≠óÁ¨¶\n\nf1.close()                        # ÂÖ≥Èó≠Êñá‰ª∂\nf2.close()                        # ÂÖ≥Èó≠Êñá‰ª∂\n\nSue√±a el r\nb'Sue\\xc3\\xb1a el '\n11\n10\nutf-8\n√±\n\n\n\nread(n): ËØªÂèñ n ‰∏™Â≠óÁ¨¶/Â≠óËäÇ„ÄÇ\ntell(): ÂΩìÂâç‰ΩçÁΩÆ„ÄÇ\nseek(position): ÁßªÂä®ÊåáÈíà„ÄÇ\nÊ≥®ÊÑè seek Âíå UTF-8ÔºàÂ§öÂ≠óËäÇÂ≠óÁ¨¶Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÂÜôÂÖ•Êñá‰ª∂",
    "href": "qmd/pandas3ed3cn.html#ÂÜôÂÖ•Êñá‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜôÂÖ•Êñá‰ª∂",
    "text": "ÂÜôÂÖ•Êñá‰ª∂\n\nwith open('tmp.txt', 'w', encoding = \"utf-8\") as handle:    # ‰ª•ÂÜôÂÖ•Ê®°ÂºèÊâìÂºÄ‰∏Ä‰∏™‰∏¥Êó∂Êñá‰ª∂ÔºåÊåáÂÆöÁºñÁ†Å‰∏∫ utf-8\n     # Â∞Ü segismundo.txt Êñá‰ª∂‰∏≠ÈïøÂ∫¶Â§ß‰∫é 1 ÁöÑË°åÂÜôÂÖ• tmp.txt\n    handle.writelines(x for x in open(path, encoding = \"utf-8\") if len(x) &gt; 1)\n\nwith open('tmp.txt', encoding = \"utf-8\") as f:            # ‰ª•ËØªÂèñÊ®°ÂºèÊâìÂºÄ‰∏¥Êó∂Êñá‰ª∂ÔºåÊåáÂÆöÁºñÁ†Å‰∏∫ utf-8\n    lines = f.readlines()                               # ËØªÂèñÊâÄÊúâË°å\nprint(lines)                                             # ÊâìÂç∞ÊâÄÊúâË°å\n\nimport os\nos.remove(\"tmp.txt\")                                       # Âà†Èô§‰∏¥Êó∂Êñá‰ª∂\n\n['Sue√±a el rico en su riqueza,\\n', 'que m√°s cuidados le ofrece;\\n', 'sue√±a el pobre que padece\\n', 'su miseria y su pobreza;\\n', 'sue√±a el que a medrar empieza,\\n', 'sue√±a el que afana y pretende,\\n', 'sue√±a el que agravia y ofende,\\n', 'y en el mundo, en conclusi√≥n,\\n', 'todos sue√±an lo que son,\\n', 'aunque ninguno lo entiende.\\n']\n\n\n\nwrite(string): ÂÜôÂÖ•Â≠óÁ¨¶‰∏≤„ÄÇ\nwritelines(list_of_strings): ÂÜôÂÖ•Â≠óÁ¨¶‰∏≤ÂàóË°®„ÄÇ\n\n##ÈáçË¶ÅÁöÑÊñá‰ª∂ÊñπÊ≥ï/Â±ûÊÄß\n\n\n\n\n\n\n\nÊñπÊ≥ï/Â±ûÊÄß\nÊèèËø∞\n\n\n\n\nread([size])\nËøîÂõûÊï∞ÊçÆÔºàÂ≠óËäÇ/Â≠óÁ¨¶‰∏≤Ôºâ„ÄÇ\n\n\nreadable()\nÂ¶ÇÊûúÂèØËØªÔºåÂàôËøîÂõû True„ÄÇ\n\n\nreadlines([size])\nËøîÂõûË°åÁöÑÂàóË°®„ÄÇ\n\n\nwrite(string)\nÂÜôÂÖ•Â≠óÁ¨¶‰∏≤„ÄÇ\n\n\nwritable()\nÂ¶ÇÊûúÂèØÂÜôÔºåÂàôËøîÂõû True„ÄÇ\n\n\nwritelines(strings)\nÂÜôÂÖ•Â≠óÁ¨¶‰∏≤Â∫èÂàó„ÄÇ\n\n\nclose()\nÂÖ≥Èó≠Êñá‰ª∂„ÄÇ\n\n\nflush()\nÂ∞ÜÁºìÂÜ≤Âå∫Âà∑Êñ∞Âà∞Á£ÅÁõò„ÄÇ\n\n\nseek(pos)\nÁßªÂä®Âà∞ÊåáÂÆö‰ΩçÁΩÆ„ÄÇ\n\n\nseekable()\nÂ¶ÇÊûúÂèØÂØªÂùÄÔºåÂàôËøîÂõû True„ÄÇ\n\n\ntell()\nËøîÂõûÂΩìÂâç‰ΩçÁΩÆ„ÄÇ\n\n\nclosed\nÂ¶ÇÊûúÂ∑≤ÂÖ≥Èó≠ÔºåÂàôËøîÂõû True„ÄÇ\n\n\nencoding\nËøîÂõûÊñá‰ª∂ÁºñÁ†Å (‰æãÂ¶Ç, UTF-8)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#Â≠óËäÇÂíå-unicode-‰∏éÊñá‰ª∂",
    "href": "qmd/pandas3ed3cn.html#Â≠óËäÇÂíå-unicode-‰∏éÊñá‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óËäÇÂíå Unicode ‰∏éÊñá‰ª∂",
    "text": "Â≠óËäÇÂíå Unicode ‰∏éÊñá‰ª∂\n\nÈªòËÆ§ÔºöÊñáÊú¨Ê®°ÂºèÔºàÂ≠óÁ¨¶‰∏≤/UnicodeÔºâ„ÄÇ\nmode='rb'/'wb': ‰∫åËøõÂà∂Ê®°ÂºèÔºàÂ≠óËäÇÔºâ„ÄÇ\n\n\nwith open(path, encoding = \"utf-8\") as f: # ‰ª•ÊñáÊú¨Ê®°ÂºèÊâìÂºÄÊñá‰ª∂\n    chars = f.read(10) # ËØªÂèñÂâç10‰∏™Â≠óÁ¨¶\nprint(len(chars)) #ËæìÂá∫Â≠óÁ¨¶Êï∞\n\nwith open(path, 'rb') as f: # ‰ª•‰∫åËøõÂà∂Ê®°ÂºèÊâìÂºÄÊñá‰ª∂\n    data = f.read(10) # ËØªÂèñÂâç10‰∏™Â≠óËäÇ\nprint(data)\n\nprint(data.decode('utf-8'))  # Â∞ÜÂ≠óËäÇËß£Á†Å‰∏∫Â≠óÁ¨¶‰∏≤\n\n# print(data[:4].decode('utf-8')) # ËøôË°å‰ª£Á†ÅÂèØËÉΩ‰ºöÂºïÂèë UnicodeDecodeErrorÔºà‰∏çÂÆåÊï¥ÁöÑÂ§öÂ≠óËäÇÂ≠óÁ¨¶Ôºâ\n\n10\nb'Sue\\xc3\\xb1a el '\nSue√±a el \n\n\n\nUTF-8ÔºöÂèØÂèòÈïøÂ∫¶ÁºñÁ†Å„ÄÇread(n) ‰∏™Â≠óÁ¨¶ ‚â† read(n) ‰∏™Â≠óËäÇ„ÄÇ\n‰∫åËøõÂà∂Ôºöread ËøîÂõûÁ°ÆÂàáÁöÑÂ≠óËäÇ„ÄÇ\nËß£Á†ÅÂÆåÊï¥ÁöÑÂ≠óÁ¨¶„ÄÇ\n\n\nsink_path = 'sink.txt' # ËÆæÁΩÆ‰∏Ä‰∏™Áî®‰∫éÊºîÁ§∫ÁöÑÊñá‰ª∂Âêç\nwith open(path, encoding = \"utf-8\") as source: # ‰ª•utf-8ÁºñÁ†ÅËØªÂèñ\n    with open(sink_path, 'x', encoding='iso-8859-1') as sink: # ‰ª•iso-8859-1ÁºñÁ†ÅÂÜôÂÖ•\n        sink.write(source.read())\n\nwith open(sink_path, encoding='iso-8859-1') as f: # ‰ª•iso-8859-1ÁºñÁ†ÅËØªÂèñ\n    print(f.read(10))\n\nimport os\nos.remove(sink_path) # Âà†Èô§‰∏¥Êó∂Êñá‰ª∂\n\n# Ê≥®ÊÑèÔºö\nf = open(path, encoding = \"utf-8\") # ‰ª•utf-8ÁºñÁ†ÅËØªÂèñ\nprint(f.read(5))\nf.seek(4)  # ÁßªÂä®Âà∞Á¨¨4‰∏™Â≠óËäÇ‰ΩçÁΩÆ\n# print(f.read(1)) # ËøôË°å‰ª£Á†ÅÂèØËÉΩ‰ºöÂºïÂèë UnicodeDecodeErrorÔºåÂõ†‰∏∫ÂèØËÉΩÂú®Â§öÂ≠óËäÇÂ≠óÁ¨¶ÁöÑ‰∏≠Èó¥\nf.close()\n\nSue√±a el r\nSue√±a\n\n\n\n\n\n\n\n\nCaution\n\n\n\nÂú®Èùû‰∫åËøõÂà∂Ê®°Âºè‰∏ã‰ΩøÁî® seek Êó∂Ë¶ÅÈùûÂ∏∏Â∞èÂøÉ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed3cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\nÊú¨Á´†Ê∂µÁõñ‰∫ÜÔºö\n\nÊï∞ÊçÆÁªìÊûÑÔºöÂÖÉÁªÑ„ÄÅÂàóË°®„ÄÅÂ≠óÂÖ∏„ÄÅÈõÜÂêà„ÄÇ\nÂÜÖÁΩÆÂáΩÊï∞Ôºöenumerate„ÄÅsorted„ÄÅzip„ÄÅreversed„ÄÇ\nÊé®ÂØºÂºèÔºöÁÆÄÊ¥ÅÁöÑÈõÜÂêàÂàõÂª∫„ÄÇ\nÂáΩÊï∞ÔºöÂÆö‰πâ„ÄÅÂèÇÊï∞„ÄÅÂëΩÂêçÁ©∫Èó¥„ÄÅËøîÂõûÂÄº„ÄÅlambda ÂáΩÊï∞„ÄÇ\nÁîüÊàêÂô®ÔºöËäÇÁúÅÂÜÖÂ≠òÁöÑËø≠‰ª£„ÄÇ\nitertoolsÔºöÊúâÁî®ÁöÑËø≠‰ª£Âô®Â∑•ÂÖ∑„ÄÇ\nÈîôËØØÂ§ÑÁêÜÔºötry„ÄÅexcept„ÄÅfinally„ÄÅelse„ÄÇ\nÊñá‰ª∂Â§ÑÁêÜÔºöÊâìÂºÄ„ÄÅËØªÂèñ„ÄÅÂÜôÂÖ•„ÄÅÊ®°Âºè„ÄÅÁºñÁ†Å„ÄÇ\n\nËøô‰∫õÊòØ Python Êï∞ÊçÆÂàÜÊûêÁöÑÂü∫Á°ÄÔºÅüß±"
  },
  {
    "objectID": "qmd/pandas3ed3cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "href": "qmd/pandas3ed3cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ ü§î\n\nÂ§ßÂûã CSV Êñá‰ª∂Ôºö ‰Ω†Êúâ‰∏Ä‰∏™Â§ß‰∫é RAM ÁöÑ CSV Êñá‰ª∂„ÄÇ‰Ω†Â∞ÜÂ¶Ç‰Ωï‰ΩøÁî®ÁîüÊàêÂô®ÂíåÊñá‰ª∂Â§ÑÁêÜÊù•ÊúâÊïàÂú∞Â§ÑÁêÜÂÆÉÔºü\nÂàóË°®‰∏éÂÖÉÁªÑÔºö ÊùÉË°°Ôºü‰ΩïÊó∂ÈÄâÊã©ÔºüÁ§∫‰æãÔºü\nÂàóË°®Êé®ÂØºÂºè‰∏éÁîüÊàêÂô®Ë°®ËææÂºèÔºö Âå∫Âà´Ôºü‰ΩïÊó∂Êõ¥ÂñúÊ¨¢ÁîüÊàêÂô®Ë°®ËææÂºèÔºü\nÂºÇÂ∏∏Â§ÑÁêÜÔºö ‰∏∫‰ªÄ‰πàÈáçË¶ÅÔºüÂú®Êï∞ÊçÆÂàÜÊûê‰∏ä‰∏ãÊñá‰∏≠ÁöÑÁ§∫‰æãÔºü\nwith ËØ≠Âè•Ôºö Êñá‰ª∂Â§ÑÁêÜÁöÑ‰ºòÂäøÔºü\nÊñáÊú¨Ê®°Âºè‰∏é‰∫åËøõÂà∂Ê®°ÂºèÔºö Âå∫Âà´ÔºüÁºñÁ†ÅÁöÑÈáçË¶ÅÊÄßÔºü\nÂ≠óÂÖ∏ vs ÈõÜÂêà: Â¶Ç‰ΩïÂÜ≥ÂÆö‰ΩøÁî®Âì™‰∏™Ôºü"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html",
    "href": "qmd/pandas3ed7cn.html",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "",
    "text": "Êï∞ÊçÆÂàÜÊûêÂíåÂª∫Ê®°ÈúÄË¶ÅÂ§ßÈáèÁöÑÊï∞ÊçÆÂáÜÂ§áÂ∑•‰Ωú„ÄÇ\nÂä†ËΩΩ„ÄÅÊ∏ÖÊ¥ó„ÄÅËΩ¨Êç¢ÂíåÈáçÊñ∞ÊéíÂàóÊï∞ÊçÆ‰ºöÂç†Áî®ÂàÜÊûêÂ∏àÁöÑÂ§ßÈáèÊó∂Èó¥ (ÈÄöÂ∏∏Âç† 80% ÁîöËá≥Êõ¥Â§öÔºÅüòÆ)„ÄÇ\nÊï∞ÊçÆÂπ∂‰∏çÊÄªÊòØ‰ª•Ê≠£Á°ÆÁöÑÊ†ºÂºèÂ≠òÂú®„ÄÇÁé∞ÂÆû‰∏ñÁïåÁöÑÊï∞ÊçÆÊòØÊ∑∑‰π±ÁöÑÔºÅ\nPandas ÁªìÂêà Python ÁöÑÂÜÖÁΩÆÂäüËÉΩÔºå‰∏∫Êï∞ÊçÆÊìç‰ΩúÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂºïË®Ä‰∏∫‰ªÄ‰πàÊï∞ÊçÆÊ∏ÖÊ¥óÂæàÈáçË¶Å",
    "href": "qmd/pandas3ed7cn.html#ÂºïË®Ä‰∏∫‰ªÄ‰πàÊï∞ÊçÆÊ∏ÖÊ¥óÂæàÈáçË¶Å",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "",
    "text": "Êï∞ÊçÆÂàÜÊûêÂíåÂª∫Ê®°ÈúÄË¶ÅÂ§ßÈáèÁöÑÊï∞ÊçÆÂáÜÂ§áÂ∑•‰Ωú„ÄÇ\nÂä†ËΩΩ„ÄÅÊ∏ÖÊ¥ó„ÄÅËΩ¨Êç¢ÂíåÈáçÊñ∞ÊéíÂàóÊï∞ÊçÆ‰ºöÂç†Áî®ÂàÜÊûêÂ∏àÁöÑÂ§ßÈáèÊó∂Èó¥ (ÈÄöÂ∏∏Âç† 80% ÁîöËá≥Êõ¥Â§öÔºÅüòÆ)„ÄÇ\nÊï∞ÊçÆÂπ∂‰∏çÊÄªÊòØ‰ª•Ê≠£Á°ÆÁöÑÊ†ºÂºèÂ≠òÂú®„ÄÇÁé∞ÂÆû‰∏ñÁïåÁöÑÊï∞ÊçÆÊòØÊ∑∑‰π±ÁöÑÔºÅ\nPandas ÁªìÂêà Python ÁöÑÂÜÖÁΩÆÂäüËÉΩÔºå‰∏∫Êï∞ÊçÆÊìç‰ΩúÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂºïË®Äpandas-Áî®‰∫éÊï∞ÊçÆÂ§ÑÁêÜ",
    "href": "qmd/pandas3ed7cn.html#ÂºïË®Äpandas-Áî®‰∫éÊï∞ÊçÆÂ§ÑÁêÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "ÂºïË®ÄÔºöPandas Áî®‰∫éÊï∞ÊçÆÂ§ÑÁêÜ",
    "text": "ÂºïË®ÄÔºöPandas Áî®‰∫éÊï∞ÊçÆÂ§ÑÁêÜ\n\nPandas Êèê‰æõ‰∫ÜÁî®‰∫éÊï∞ÊçÆÂ§ÑÁêÜÁöÑÈ´òÁ∫ß„ÄÅÁÅµÊ¥ª‰∏îÂø´ÈÄüÁöÑÂ∑•ÂÖ∑„ÄÇ\nÂÆÉÁöÑËÆæËÆ°ÁõÆÊ†áÊòØÊúâÊïàÂú∞Â§ÑÁêÜÁé∞ÂÆû‰∏ñÁïå‰∏≠ÁöÑÊï∞ÊçÆÊåëÊàò„ÄÇ\nÊú¨Á´†Ê∂µÁõñ‰ª•‰∏ãÂ∑•ÂÖ∑Ôºö\n\nÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÇ\nÂ§ÑÁêÜÈáçÂ§çÊï∞ÊçÆ„ÄÇ\nÂ≠óÁ¨¶‰∏≤Êìç‰Ωú„ÄÇ\nÂÖ∂‰ªñÂàÜÊûêÊï∞ÊçÆËΩ¨Êç¢„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ\n\nÁº∫Â§±Êï∞ÊçÆÂú®Êï∞ÊçÆÂàÜÊûê‰∏≠ÂæàÂ∏∏ËßÅ„ÄÇ\nPandas ÁöÑÁõÆÊ†áÊòØ‰ΩøÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∞ΩÂèØËÉΩÂÆπÊòì„ÄÇ\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåpandas ‰∏≠ÁöÑÊèèËø∞ÊÄßÁªüËÆ°‰ºöÊéíÈô§Áº∫Â§±Êï∞ÊçÆ„ÄÇ\nPandas ‰ΩøÁî® NaNÔºàNot a NumberÔºåÈùûÊï∞Â≠óÔºâÔºå‰∏Ä‰∏™ÊµÆÁÇπÂÄºÔºåÊù•Ë°®Á§∫Áº∫Â§±ÁöÑÊï∞ÊçÆÔºåÂ∞§ÂÖ∂ÊòØÂú®Â§ÑÁêÜfloat64Êï∞ÊçÆÁ±ªÂûãÊó∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆnan-Ê†áËÆ∞",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆnan-Ê†áËÆ∞",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNaN Ê†áËÆ∞",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNaN Ê†áËÆ∞\n\nimport numpy as np  # ÂØºÂÖ• NumPy Â∫ìÔºåÁî®‰∫éÊï∞ÂÄºËÆ°ÁÆó\nimport pandas as pd  # ÂØºÂÖ• Pandas Â∫ìÔºåÁî®‰∫éÊï∞ÊçÆÂàÜÊûê\n\nfloat_data = pd.Series([1.2, -3.5, np.nan, 0])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÊµÆÁÇπÊï∞Âíå NaN ÁöÑ Series\nfloat_data  # ÊòæÁ§∫ Series\n\n0    1.2\n1   -3.5\n2    NaN\n3    0.0\ndtype: float64\n\n\n\nnp.nan ÊòØ‰∏Ä‰∏™ÁâπÊÆäÁöÑÊµÆÁÇπÂÄºÔºåË°®Á§∫Áº∫Â§±Êï∞ÊçÆ„ÄÇ\nÂÆÉÊòØ‰∏Ä‰∏™Ê†áËÆ∞ÂÄº ‚Äì ÂÆÉÁöÑÂ≠òÂú®Ë°®Á§∫‰∏Ä‰∏™Áº∫Â§±ÂÄºÊàñÁ©∫ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-.isna-Ê£ÄÊµã",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-.isna-Ê£ÄÊµã",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® .isna() Ê£ÄÊµã",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® .isna() Ê£ÄÊµã\n\nfloat_data.isna()  # ‰ΩøÁî® .isna() ÊñπÊ≥ïÊ£ÄÊü• Series ‰∏≠ÁöÑÁº∫Â§±ÂÄº\n\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n\n\n.isna() ÊñπÊ≥ïËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞îÁ±ªÂûãÁöÑ Series„ÄÇ\nTrue Ë°®Á§∫Áº∫Â§±ÂÄº (NaN)ÔºåFalse Ë°®Á§∫ÈùûÁº∫Â§±ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆna-Á∫¶ÂÆö",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆna-Á∫¶ÂÆö",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNA Á∫¶ÂÆö",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNA Á∫¶ÂÆö\n\nPandas ÈááÁî® R ËØ≠Ë®ÄÁöÑÁ∫¶ÂÆöÔºöÁº∫Â§±Êï∞ÊçÆË¢´Áß∞‰∏∫ NA (not availableÔºå‰∏çÂèØÁî®)„ÄÇ\nNA ÂèØËÉΩÊÑèÂë≥ÁùÄÔºö\n\nÊï∞ÊçÆ‰∏çÂ≠òÂú®„ÄÇ\nÊï∞ÊçÆÂ≠òÂú®‰ΩÜÊú™Ë¢´ËßÇÂØüÂà∞ (‰æãÂ¶ÇÔºåÊï∞ÊçÆÊî∂ÈõÜÈóÆÈ¢ò)„ÄÇ\n\nÂàÜÊûêÁº∫Â§±Êï∞ÊçÆÊú¨Ë∫´ÂèØ‰ª•Êè≠Á§∫Êï∞ÊçÆÊî∂ÈõÜÈóÆÈ¢òÊàñÊΩúÂú®ÁöÑÂÅèÂ∑Æ„ÄÇü§î"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆnone-‰πüÊòØ-na",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆnone-‰πüÊòØ-na",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNone ‰πüÊòØ NA",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNone ‰πüÊòØ NA\n\nstring_data = pd.Series([\"aardvark\", np.nan, None, \"avocado\"])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Â≠óÁ¨¶‰∏≤„ÄÅNaN Âíå None ÁöÑ Series\nstring_data  # ÊòæÁ§∫ Series\n\n0    aardvark\n1         NaN\n2        None\n3     avocado\ndtype: object\n\n\n\nstring_data.isna()  # ‰ΩøÁî® .isna() ÊñπÊ≥ïÊ£ÄÊü•Áº∫Â§±ÂÄºÔºåNone ‰πü‰ºöË¢´ËØÜÂà´‰∏∫Áº∫Â§±ÂÄº\n\n0    False\n1     True\n2     True\n3    False\ndtype: bool\n\n\n\nPython ÂÜÖÁΩÆÁöÑ None ÂÄºÂú® pandas ‰∏≠‰πüË¢´ËßÜ‰∏∫ NA„ÄÇ\nÂ≠óÁ¨¶‰∏≤ÂíåÊï∞ÂÄºÁ±ªÂûãÁöÑ Series ÈÉΩÂèØ‰ª•Â∞Ü None Âíå NaN ‰Ωú‰∏∫ NA„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰∏ÄËá¥ÁöÑÂ§ÑÁêÜÊñπÂºè",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰∏ÄËá¥ÁöÑÂ§ÑÁêÜÊñπÂºè",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰∏ÄËá¥ÁöÑÂ§ÑÁêÜÊñπÂºè",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰∏ÄËá¥ÁöÑÂ§ÑÁêÜÊñπÂºè\n\nfloat_data = pd.Series([1, 2, None], dtype='float64') #Âç≥‰æøÂ∫èÂàó‰∏≠ÁªôÂÆöÁöÑÊòØNoneÔºåÂú®ÊåáÂÆöÁ±ªÂûã‰∏∫float64ÂêéÔºå‰ºöË¢´ËΩ¨Êç¢‰∏∫NaN\nfloat_data\n\n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n\n\n\nfloat_data.isna()\n\n0    False\n1    False\n2     True\ndtype: bool\n\n\n\nPandas Ëá¥Âäõ‰∫éÂú®‰∏çÂêåÊï∞ÊçÆÁ±ªÂûã‰∏≠‰øùÊåÅ‰∏ÄËá¥ÁöÑÁº∫Â§±Êï∞ÊçÆÂ§ÑÁêÜÊñπÂºè„ÄÇ\nfloat_data‰ΩøÁî®NaNÊù•Ë°®Á§∫Áº∫Â§±ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆna-Â§ÑÁêÜÊñπÊ≥ï",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆna-Â§ÑÁêÜÊñπÊ≥ï",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNA Â§ÑÁêÜÊñπÊ≥ï",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöNA Â§ÑÁêÜÊñπÊ≥ï\n\nÁî®‰∫éÁÆ°ÁêÜÁº∫Â§±ÂÄºÁöÑÂÖ≥ÈîÆÊñπÊ≥ï„ÄÇ\n\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\ndropna\nÊ†πÊçÆÁº∫Â§±ÂÄºÁ≠õÈÄâËΩ¥Ê†áÁ≠æ (Ë°å/Âàó)ÔºåÂπ∂Êèê‰æõÈòàÂÄºÈÄâÈ°π„ÄÇ\n\n\nfillna\n‰ΩøÁî®ÊåáÂÆöÂÄºÊàñÊèíÂÄºÊñπÊ≥ï (‰æãÂ¶Ç ‚Äúffill‚Äù„ÄÅ‚Äúbfill‚Äù) Â°´ÂÖÖÁº∫Â§±Êï∞ÊçÆ„ÄÇ\n\n\nisna\nËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞îÊï∞ÁªÑ/SeriesÔºåÊåáÁ§∫Âì™‰∫õÂÄºÊòØÁº∫Â§±ÁöÑ/NA„ÄÇ\n\n\nnotna\nisna ÁöÑÂèçÊìç‰ΩúÔºöÂØπ‰∫éÈùû NA ÂÄºËøîÂõû TrueÔºåÂØπ‰∫é NA ÂÄºËøîÂõû False„ÄÇ\n\n\n\nËøô‰∫õÊñπÊ≥ï‰∏∫Âú® pandas ‰∏≠Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÊèê‰æõ‰∫ÜÂü∫Á°Ä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆseries-‰∏äÁöÑ-dropna",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆseries-‰∏äÁöÑ-dropna",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöSeries ‰∏äÁöÑ dropna",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöSeries ‰∏äÁöÑ dropna\n\ndata = pd.Series([1, np.nan, 3.5, np.nan, 7])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Êï∞ÂÄºÂíå NaN ÁöÑ Series\ndata.dropna()  # ‰ΩøÁî® .dropna() ÊñπÊ≥ïÂà†Èô§ÂåÖÂê´ NaN ÁöÑÂÖÉÁ¥†\n\n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n\n\n\nSeries ‰∏äÁöÑ dropna() ËøîÂõû‰∏Ä‰∏™‰ªÖÂåÖÂê´ÈùûÁ©∫Êï∞ÊçÆÂíåÁ¥¢ÂºïÊ†áÁ≠æÁöÑÊñ∞ Series„ÄÇ\nÁ≠âÂêå‰∫éÂ∏ÉÂ∞îÁ¥¢ÂºïÔºödata[data.notna()]„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆdataframes-‰∏äÁöÑ-dropna-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆdataframes-‰∏äÁöÑ-dropna-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöDataFrames ‰∏äÁöÑ dropna (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöDataFrames ‰∏äÁöÑ dropna (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndata = pd.DataFrame([[1., 6.5, 3.], [1., np.nan, np.nan],\n                     [np.nan, np.nan, np.nan], [np.nan, 6.5, 3.]])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Êï∞ÂÄºÂíå NaN ÁöÑ DataFrame\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n1\n1.0\nNaN\nNaN\n\n\n2\nNaN\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆdataframes-‰∏äÁöÑ-dropna-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆdataframes-‰∏äÁöÑ-dropna-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöDataFrames ‰∏äÁöÑ dropna (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöDataFrames ‰∏äÁöÑ dropna (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndata.dropna()  # ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºå.dropna() ‰ºöÂà†Èô§ÂåÖÂê´‰ªª‰Ωï NaN ÂÄºÁöÑË°å\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n\n\n\n\n\n\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºådropna() ‰ºöÂà†Èô§ÂåÖÂê´‰ªª‰Ωï NA ÂÄºÁöÑË°å„ÄÇ\nËøôÁßçÊñπÂºèÂèØËÉΩÈùûÂ∏∏‰∏•Ê†º„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-howall-ÁöÑ-dropna",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-howall-ÁöÑ-dropna",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ how='all' ÁöÑ dropna",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ how='all' ÁöÑ dropna\n\ndata.dropna(how=\"all\")  # ‰ΩøÁî® how=\"all\" ÂèÇÊï∞ÔºåÂè™Âà†Èô§ÊâÄÊúâÂÄºÈÉΩ‰∏∫ NaN ÁöÑË°å\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n1\n1.0\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0\n\n\n\n\n\n\n\n\nhow=\"all\" ‰ªÖÂà†Èô§ÊâÄÊúâÂÄºÈÉΩ‰∏∫ NA ÁöÑË°å„ÄÇ\nÊØîÈªòËÆ§Ë°å‰∏∫Êõ¥ÂÆΩÊùæ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂà†Èô§Âàó-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂà†Èô§Âàó-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂà†Èô§Âàó (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂà†Èô§Âàó (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndata[4] = np.nan  # Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÂàóÔºåÊâÄÊúâÂÄºÈÉΩ‰∏∫ NaN\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\n0\n1\n2\n4\n\n\n\n\n0\n1.0\n6.5\n3.0\nNaN\n\n\n1\n1.0\nNaN\nNaN\nNaN\n\n\n2\nNaN\nNaN\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂà†Èô§Âàó-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂà†Èô§Âàó-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂà†Èô§Âàó (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂà†Èô§Âàó (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndata.dropna(axis=\"columns\", how=\"all\")  # ‰ΩøÁî® axis=\"columns\" Âíå how=\"all\" Âà†Èô§ÊâÄÊúâÂÄºÈÉΩ‰∏∫ NaN ÁöÑÂàó\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n1\n1.0\nNaN\nNaN\n\n\n2\nNaN\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0\n\n\n\n\n\n\n\n\nË¶ÅÂà†Èô§ÂàóÔºåËØ∑‰ΩøÁî® axis=\"columns\" (Êàñ axis=1)„ÄÇ\nhow=\"all\" ‰∏é axis=\"columns\" ‰∏ÄËµ∑‰ΩøÁî®‰ºöÂà†Èô§ÊâÄÊúâÂÄºÈÉΩ‰∏∫ NA ÁöÑÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-thresh-ÂèÇÊï∞ÁöÑ-dropna-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-thresh-ÂèÇÊï∞ÁöÑ-dropna-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ thresh ÂèÇÊï∞ÁöÑ dropna (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ thresh ÂèÇÊï∞ÁöÑ dropna (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndf = pd.DataFrame(np.random.standard_normal((7, 3)))  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÈöèÊú∫Êï∞ÁöÑ DataFrame\ndf.iloc[:4, 1] = np.nan  # Â∞ÜÁ¨¨ 1 ÂàóÁöÑÂâç 4 ‰∏™ÂÄºËÆæÁΩÆ‰∏∫ NaN\ndf.iloc[:2, 2] = np.nan  # Â∞ÜÁ¨¨ 2 ÂàóÁöÑÂâç 2 ‰∏™ÂÄºËÆæÁΩÆ‰∏∫ NaN\ndf  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.273648\nNaN\nNaN\n\n\n1\n0.160605\nNaN\nNaN\n\n\n2\n-0.187082\nNaN\n-0.771705\n\n\n3\n-1.161288\nNaN\n0.055194\n\n\n4\n0.359680\n-0.833503\n0.611586\n\n\n5\n0.673619\n-0.648503\n1.018266\n\n\n6\n-0.139209\n1.316226\n-2.126089"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-thresh-ÂèÇÊï∞ÁöÑ-dropna-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-thresh-ÂèÇÊï∞ÁöÑ-dropna-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ thresh ÂèÇÊï∞ÁöÑ dropna (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ thresh ÂèÇÊï∞ÁöÑ dropna (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndf.dropna()  # ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÂà†Èô§ÂåÖÂê´‰ªª‰Ωï NaN ÂÄºÁöÑË°å\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n4\n0.359680\n-0.833503\n0.611586\n\n\n5\n0.673619\n-0.648503\n1.018266\n\n\n6\n-0.139209\n1.316226\n-2.126089\n\n\n\n\n\n\n\n\ndf.dropna(thresh=2)  # ‰ΩøÁî® thresh=2 ÂèÇÊï∞Ôºå‰øùÁïôËá≥Â∞ëÊúâ 2 ‰∏™Èùû NaN ÂÄºÁöÑË°å\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n2\n-0.187082\nNaN\n-0.771705\n\n\n3\n-1.161288\nNaN\n0.055194\n\n\n4\n0.359680\n-0.833503\n0.611586\n\n\n5\n0.673619\n-0.648503\n1.018266\n\n\n6\n-0.139209\n1.316226\n-2.126089\n\n\n\n\n\n\n\n\nthresh ÂèÇÊï∞‰øùÁïôËá≥Â∞ëÂÖ∑Êúâ thresh ‰∏™Èùû NA ÂÄºÁöÑË°å„ÄÇ\nÂèØ‰ª•Êõ¥Á≤æÁªÜÂú∞ÊéßÂà∂Ë¶Å‰øùÁïôÂì™‰∫õË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-Â°´ÂÖÖ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-Â°´ÂÖÖ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna Â°´ÂÖÖ",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna Â°´ÂÖÖ\n\ndf.fillna(0)  # ‰ΩøÁî® .fillna(0) Â∞ÜÊâÄÊúâ NaN ÂÄºÊõøÊç¢‰∏∫ 0\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.273648\n0.000000\n0.000000\n\n\n1\n0.160605\n0.000000\n0.000000\n\n\n2\n-0.187082\n0.000000\n-0.771705\n\n\n3\n-1.161288\n0.000000\n0.055194\n\n\n4\n0.359680\n-0.833503\n0.611586\n\n\n5\n0.673619\n-0.648503\n1.018266\n\n\n6\n-0.139209\n1.316226\n-2.126089\n\n\n\n\n\n\n\n\nfillna(value) Â∞ÜÊâÄÊúâ NA ÂÄºÊõøÊç¢‰∏∫ÊåáÂÆöÁöÑ value„ÄÇ\n‰∏Ä‰∏™Â∏∏ËßÅÁöÑÈÄâÊã©ÊòØ 0Ôºå‰ΩÜËøôÂèñÂÜ≥‰∫éÂÖ∑‰ΩìÊÉÖÂÜµ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®Â≠óÂÖ∏ËøõË°å-fillna",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®Â≠óÂÖ∏ËøõË°å-fillna",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî®Â≠óÂÖ∏ËøõË°å fillna",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî®Â≠óÂÖ∏ËøõË°å fillna\n\ndf.fillna({1: 0.5, 2: 0})  # ‰ΩøÁî®Â≠óÂÖ∏‰∏∫‰∏çÂêåÁöÑÂàóÊåáÂÆö‰∏çÂêåÁöÑÂ°´ÂÖÖÂÄºÔºåËøôÈáåÂ∞ÜÁ¨¨1ÂàóÁöÑNaNÂÄºÂ°´ÂÖÖ‰∏∫0.5ÔºåÁ¨¨2ÂàóÁöÑNaNÂÄºÂ°´ÂÖÖ‰∏∫0\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.273648\n0.500000\n0.000000\n\n\n1\n0.160605\n0.500000\n0.000000\n\n\n2\n-0.187082\n0.500000\n-0.771705\n\n\n3\n-1.161288\n0.500000\n0.055194\n\n\n4\n0.359680\n-0.833503\n0.611586\n\n\n5\n0.673619\n-0.648503\n1.018266\n\n\n6\n-0.139209\n1.316226\n-2.126089\n\n\n\n\n\n\n\n\n‰ΩøÁî®Â≠óÂÖ∏‰∏∫ÊØèÂàóÊåáÂÆö‰∏çÂêåÁöÑÂ°´ÂÖÖÂÄº„ÄÇ\nÂ≠óÂÖ∏ÁöÑÈîÆÊòØÂàóÊ†áÁ≠æÔºõÂÄºÊòØÂ°´ÂÖÖÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-ËøõË°åÊèíÂÄº-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-ËøõË°åÊèíÂÄº-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna ËøõË°åÊèíÂÄº (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna ËøõË°åÊèíÂÄº (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndf = pd.DataFrame(np.random.standard_normal((6, 3)))  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÈöèÊú∫Êï∞ÁöÑ DataFrame\ndf.iloc[2:, 1] = np.nan  # Â∞ÜÁ¨¨ 1 ÂàóÁöÑÁ¨¨ 2 Ë°å‰πãÂêéÁöÑÂÄºËÆæÁΩÆ‰∏∫ NaN\ndf.iloc[4:, 2] = np.nan  # Â∞ÜÁ¨¨ 2 ÂàóÁöÑÁ¨¨ 4 Ë°å‰πãÂêéÁöÑÂÄºËÆæÁΩÆ‰∏∫ NaN\ndf  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.660493\n-0.123183\n-0.199149\n\n\n1\n0.416667\n0.655033\n0.021512\n\n\n2\n-0.931098\nNaN\n-0.197278\n\n\n3\n-1.675248\nNaN\n0.482372\n\n\n4\n0.317203\nNaN\nNaN\n\n\n5\n0.310384\nNaN\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-ËøõË°åÊèíÂÄº-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-ËøõË°åÊèíÂÄº-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna ËøõË°åÊèíÂÄº (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna ËøõË°åÊèíÂÄº (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndf.fillna(method=\"ffill\")  # ‰ΩøÁî® method=\"ffill\" ËøõË°åÂâçÂêëÂ°´ÂÖÖÔºåÂ∞Ü‰∏ä‰∏Ä‰∏™ÊúâÊïàÂÄº‰º†Êí≠Âà∞ÂêéÁª≠ÁöÑ NaN ÂÄº\n\n/tmp/ipykernel_2752/1544708321.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  df.fillna(method=\"ffill\")  # ‰ΩøÁî® method=\"ffill\" ËøõË°åÂâçÂêëÂ°´ÂÖÖÔºåÂ∞Ü‰∏ä‰∏Ä‰∏™ÊúâÊïàÂÄº‰º†Êí≠Âà∞ÂêéÁª≠ÁöÑ NaN ÂÄº\n\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.660493\n-0.123183\n-0.199149\n\n\n1\n0.416667\n0.655033\n0.021512\n\n\n2\n-0.931098\n0.655033\n-0.197278\n\n\n3\n-1.675248\n0.655033\n0.482372\n\n\n4\n0.317203\n0.655033\n0.482372\n\n\n5\n0.310384\n0.655033\n0.482372\n\n\n\n\n\n\n\n\nmethod=\"ffill\" (ÂâçÂêëÂ°´ÂÖÖ) Â∞Ü‰∏ä‰∏Ä‰∏™ÊúâÊïàËßÇÊµãÂÄºÂêëÂâç‰º†Êí≠„ÄÇ\n\n-method=\"bfill\"ÔºàÂêéÂêëÂ°´ÂÖÖÔºâ‰ΩøÁî®‰∏ã‰∏Ä‰∏™ÊúâÊïàËßÇÊµãÂÄºÊù•Â°´ÂÖÖÁ©∫Áº∫„ÄÇ - ÈÄÇÁî®‰∫éÊó∂Èó¥Â∫èÂàóÊàñÊúâÂ∫èÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-limit-ÂèÇÊï∞ÁöÑ-fillna",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂ∏¶Êúâ-limit-ÂèÇÊï∞ÁöÑ-fillna",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ limit ÂèÇÊï∞ÁöÑ fillna",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºöÂ∏¶Êúâ limit ÂèÇÊï∞ÁöÑ fillna\n\ndf.fillna(method=\"ffill\", limit=2)  # ‰ΩøÁî® limit=2 ÂèÇÊï∞ÈôêÂà∂ÂâçÂêëÂ°´ÂÖÖËøûÁª≠ NaN ÂÄºÁöÑÊï∞Èáè\n\n/tmp/ipykernel_2752/2269924182.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  df.fillna(method=\"ffill\", limit=2)  # ‰ΩøÁî® limit=2 ÂèÇÊï∞ÈôêÂà∂ÂâçÂêëÂ°´ÂÖÖËøûÁª≠ NaN ÂÄºÁöÑÊï∞Èáè\n\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.660493\n-0.123183\n-0.199149\n\n\n1\n0.416667\n0.655033\n0.021512\n\n\n2\n-0.931098\n0.655033\n-0.197278\n\n\n3\n-1.675248\n0.655033\n0.482372\n\n\n4\n0.317203\nNaN\n0.482372\n\n\n5\n0.310384\nNaN\n0.482372\n\n\n\n\n\n\n\n\nlimit ÂèÇÊï∞ÈôêÂà∂ ffill Êàñ bfill Â°´ÂÖÖÁöÑËøûÁª≠ NA ÂÄºÁöÑÊï∞Èáè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-ËøõË°åÊèíË°•",
    "href": "qmd/pandas3ed7cn.html#Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ‰ΩøÁî®-fillna-ËøõË°åÊèíË°•",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna ËøõË°åÊèíË°•",
    "text": "7.1 Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÔºö‰ΩøÁî® fillna ËøõË°åÊèíË°•\n\ndata = pd.Series([1., np.nan, 3.5, np.nan, 7])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Êï∞ÂÄºÂíå NaN ÁöÑ Series\ndata.fillna(data.mean())  # ‰ΩøÁî® .fillna(data.mean()) Â∞Ü NaN ÂÄºÊõøÊç¢‰∏∫ Series ÁöÑÂπ≥ÂùáÂÄº\n\n0    1.000000\n1    3.833333\n2    3.500000\n3    3.833333\n4    7.000000\ndtype: float64\n\n\n\nÁî®Âπ≥ÂùáÂÄº„ÄÅ‰∏≠‰ΩçÊï∞ÊàñÂÖ∂‰ªñÁªüËÆ°ÈáèÊõøÊç¢Áº∫Â§±ÂÄº„ÄÇ\nËøôÊòØ‰∏ÄÁßçÁÆÄÂçïÁöÑÊèíË°•ÂΩ¢Âºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢\n\nÁ≠õÈÄâÂíåÊ∏ÖÊ¥óÊòØÂøÖ‰∏çÂèØÂ∞ëÁöÑÔºå‰ΩÜÊï∞ÊçÆÈÄöÂ∏∏ÈúÄË¶ÅËøõ‰∏ÄÊ≠•ËΩ¨Êç¢„ÄÇ\nÊú¨ËäÇÊ∂µÁõñÔºö\n\nÂà†Èô§ÈáçÂ§çÈ°π„ÄÇ\n‰ΩøÁî®ÂáΩÊï∞ÊàñÊò†Â∞ÑËΩ¨Êç¢Êï∞ÊçÆ„ÄÇ\nÊõøÊç¢ÂÄº„ÄÇ\nÈáçÂëΩÂêçËΩ¥Á¥¢Âºï„ÄÇ\nÁ¶ªÊï£ÂåñÂíåÂàÜÁÆ±„ÄÇ\nÊ£ÄÊµãÂíåËøáÊª§ÂºÇÂ∏∏ÂÄº„ÄÇ\nÊéíÂàóÂíåÈöèÊú∫ÈááÊ†∑„ÄÇ\nËÆ°ÁÆóÊåáÊ†á/ËôöÊãüÂèòÈáè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Âà†Èô§ÈáçÂ§çÈ°π",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Âà†Èô§ÈáçÂ§çÈ°π",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂà†Èô§ÈáçÂ§çÈ°π",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂà†Èô§ÈáçÂ§çÈ°π\n\ndata = pd.DataFrame({\"k1\": [\"one\", \"two\"] * 3 + [\"two\"],\n                     \"k2\": [1, 1, 2, 3, 3, 4, 4]})  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÈáçÂ§çË°åÁöÑ DataFrame\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nk1\nk2\n\n\n\n\n0\none\n1\n\n\n1\ntwo\n1\n\n\n2\none\n2\n\n\n3\ntwo\n3\n\n\n4\none\n3\n\n\n5\ntwo\n4\n\n\n6\ntwo\n4\n\n\n\n\n\n\n\n\nÁî±‰∫éÂêÑÁßçÂéüÂõ†ÔºåÂèØËÉΩ‰ºöÂá∫Áé∞ÈáçÂ§çÁöÑË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-duplicated-ËØÜÂà´ÈáçÂ§çÈ°π",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-duplicated-ËØÜÂà´ÈáçÂ§çÈ°π",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® duplicated() ËØÜÂà´ÈáçÂ§çÈ°π",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® duplicated() ËØÜÂà´ÈáçÂ§çÈ°π\n\ndata.duplicated()  # ‰ΩøÁî® .duplicated() ÊñπÊ≥ïÊ£ÄÊü• DataFrame ‰∏≠ÁöÑÈáçÂ§çË°å\n\n0    False\n1    False\n2    False\n3    False\n4    False\n5    False\n6     True\ndtype: bool\n\n\n\nduplicated() ËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞î SeriesÔºåÊåáÁ§∫ÊØèË°åÊòØÂê¶‰∏∫ÈáçÂ§çÈ°π (ÊòØÂê¶Âú®‰πãÂâçÂá∫Áé∞Ëøá)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-drop_duplicates-Âà†Èô§ÈáçÂ§çÈ°π",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-drop_duplicates-Âà†Èô§ÈáçÂ§çÈ°π",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® drop_duplicates() Âà†Èô§ÈáçÂ§çÈ°π",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® drop_duplicates() Âà†Èô§ÈáçÂ§çÈ°π\n\ndata.drop_duplicates()  # ‰ΩøÁî® .drop_duplicates() ÊñπÊ≥ïÂà†Èô§ÈáçÂ§çË°åÔºåÈªòËÆ§‰øùÁïôÁ¨¨‰∏Ä‰∏™Âá∫Áé∞ÁöÑË°å\n\n\n\n\n\n\n\n\nk1\nk2\n\n\n\n\n0\none\n1\n\n\n1\ntwo\n1\n\n\n2\none\n2\n\n\n3\ntwo\n3\n\n\n4\none\n3\n\n\n5\ntwo\n4\n\n\n\n\n\n\n\n\ndrop_duplicates() ËøîÂõû‰∏Ä‰∏™Âà†Èô§‰∫ÜÈáçÂ§çË°åÁöÑÊñ∞ DataFrame„ÄÇ\n‰øùÁïôÊØè‰∏™ÂîØ‰∏ÄË°åÁöÑÁ¨¨‰∏Ä‰∏™Âá∫Áé∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Âú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî®-drop_duplicates-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Âú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî®-drop_duplicates-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî® drop_duplicates() (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî® drop_duplicates() (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndata[\"v1\"] = range(7)  # Ê∑ªÂä†‰∏Ä‰∏™Êñ∞Âàó\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nk1\nk2\nv1\n\n\n\n\n0\none\n1\n0\n\n\n1\ntwo\n1\n1\n\n\n2\none\n2\n2\n\n\n3\ntwo\n3\n3\n\n\n4\none\n3\n4\n\n\n5\ntwo\n4\n5\n\n\n6\ntwo\n4\n6"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Âú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî®-drop_duplicates-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Âú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî®-drop_duplicates-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî® drop_duplicates() (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂú®ÂàóÁöÑÂ≠êÈõÜ‰∏ä‰ΩøÁî® drop_duplicates() (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndata.drop_duplicates(subset=[\"k1\"])  # ‰ΩøÁî® subset ÂèÇÊï∞ÊåáÂÆöË¶ÅÊ£ÄÊü•ÈáçÂ§çÈ°πÁöÑÂàóÁöÑÂ≠êÈõÜÔºåËøôÈáåÂè™ËÄÉËôë \"k1\" Âàó\n\n\n\n\n\n\n\n\nk1\nk2\nv1\n\n\n\n\n0\none\n1\n0\n\n\n1\ntwo\n1\n1\n\n\n\n\n\n\n\n\n‰ΩøÁî® subset ÂèÇÊï∞ÊåáÂÆöË¶ÅÊ£ÄÊü•ÈáçÂ§çÈ°πÁöÑÂàóÁöÑÂ≠êÈõÜ„ÄÇ\nËøôÈáåÔºåÂè™ËÄÉËôë \"k1\" Âàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∏¶Êúâ-keeplast-ÁöÑ-drop_duplicates",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∏¶Êúâ-keeplast-ÁöÑ-drop_duplicates",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∏¶Êúâ keep='last' ÁöÑ drop_duplicates()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∏¶Êúâ keep='last' ÁöÑ drop_duplicates()\n\ndata.drop_duplicates([\"k1\", \"k2\"], keep=\"last\")  # ‰ΩøÁî® keep=\"last\" ÂèÇÊï∞‰øùÁïôÊØè‰∏™ÂîØ‰∏ÄË°å (ÊàñÂàóÁªÑÂêà) ÁöÑÊúÄÂêé‰∏Ä‰∏™Âá∫Áé∞\n\n\n\n\n\n\n\n\nk1\nk2\nv1\n\n\n\n\n0\none\n1\n0\n\n\n1\ntwo\n1\n1\n\n\n2\none\n2\n2\n\n\n3\ntwo\n3\n3\n\n\n4\none\n3\n4\n\n\n6\ntwo\n4\n6\n\n\n\n\n\n\n\n\nkeep=\"last\" ‰øùÁïôÊØè‰∏™ÂîØ‰∏ÄË°å (ÊàñÂàóÁªÑÂêà) ÁöÑÊúÄÂêé‰∏Ä‰∏™Âá∫Áé∞„ÄÇ\nÈªòËÆ§‰∏∫ keep=\"first\"„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®ÂáΩÊï∞ÊàñÊò†Â∞ÑËΩ¨Êç¢Êï∞ÊçÆ-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®ÂáΩÊï∞ÊàñÊò†Â∞ÑËΩ¨Êç¢Êï∞ÊçÆ-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî®ÂáΩÊï∞ÊàñÊò†Â∞ÑËΩ¨Êç¢Êï∞ÊçÆ (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî®ÂáΩÊï∞ÊàñÊò†Â∞ÑËΩ¨Êç¢Êï∞ÊçÆ (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndata = pd.DataFrame({\"food\": [\"bacon\", \"pulled pork\", \"bacon\",\n                              \"pastrami\", \"corned beef\", \"bacon\",\n                              \"pastrami\", \"honey ham\", \"nova lox\"],\n                     \"ounces\": [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´È£üÂìÅÂíåÈáçÈáè‰ø°ÊÅØÁöÑ DataFrame\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nfood\nounces\n\n\n\n\n0\nbacon\n4.0\n\n\n1\npulled pork\n3.0\n\n\n2\nbacon\n12.0\n\n\n3\npastrami\n6.0\n\n\n4\ncorned beef\n7.5\n\n\n5\nbacon\n8.0\n\n\n6\npastrami\n3.0\n\n\n7\nhoney ham\n5.0\n\n\n8\nnova lox\n6.0\n\n\n\n\n\n\n\n\nÂÅáËÆæÊàë‰ª¨ÊÉ≥Ê∑ªÂä†‰∏ÄÂàóÔºåÊåáÁ§∫ÊØèÁßçÈ£üÁâ©ÁöÑÂä®Áâ©Á±ªÂûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®Êò†Â∞ÑÂ≠óÂÖ∏",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®Êò†Â∞ÑÂ≠óÂÖ∏",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî®Êò†Â∞ÑÂ≠óÂÖ∏",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî®Êò†Â∞ÑÂ≠óÂÖ∏\n\nmeat_to_animal = {\n  \"bacon\": \"pig\",\n  \"pulled pork\": \"pig\",\n  \"pastrami\": \"cow\",\n  \"corned beef\": \"cow\",\n  \"honey ham\": \"pig\",\n  \"nova lox\": \"salmon\"\n}  # ÂàõÂª∫‰∏Ä‰∏™Â≠óÂÖ∏ÔºåÂ∞ÜÊØèÁßçÈ£üÁâ©Êò†Â∞ÑÂà∞ÂØπÂ∫îÁöÑÂä®Áâ©\n\n\nÂàõÂª∫‰∏Ä‰∏™Â≠óÂÖ∏ÔºåÂ∞ÜÊØèÁßçÈ£üÁâ©Êò†Â∞ÑÂà∞ÂÖ∂ÂØπÂ∫îÁöÑÂä®Áâ©„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-.map",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-.map",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® .map()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® .map()\n\ndata[\"animal\"] = data[\"food\"].map(meat_to_animal)  # ‰ΩøÁî® .map() ÊñπÊ≥ïÂíåÊò†Â∞ÑÂ≠óÂÖ∏Â∞Ü \"food\" ÂàóÊò†Â∞ÑÂà∞ \"animal\" Âàó\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nfood\nounces\nanimal\n\n\n\n\n0\nbacon\n4.0\npig\n\n\n1\npulled pork\n3.0\npig\n\n\n2\nbacon\n12.0\npig\n\n\n3\npastrami\n6.0\ncow\n\n\n4\ncorned beef\n7.5\ncow\n\n\n5\nbacon\n8.0\npig\n\n\n6\npastrami\n3.0\ncow\n\n\n7\nhoney ham\n5.0\npig\n\n\n8\nnova lox\n6.0\nsalmon\n\n\n\n\n\n\n\n\nSeries ÁöÑ .map() ÊñπÊ≥ïÊé•Âèó‰∏Ä‰∏™ÂáΩÊï∞Êàñ‰∏Ä‰∏™Á±ª‰ººÂ≠óÂÖ∏ÁöÑÂØπË±° (Â¶ÇÊàë‰ª¨ÁöÑÊò†Â∞Ñ)„ÄÇ\nÂÆÉÂ∞ÜÊò†Â∞ÑÂ∫îÁî®‰∫é Series ÁöÑÊØè‰∏™ÂÖÉÁ¥†„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∞ÜÂáΩÊï∞‰∏é-.map-‰∏ÄËµ∑‰ΩøÁî®",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∞ÜÂáΩÊï∞‰∏é-.map-‰∏ÄËµ∑‰ΩøÁî®",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∞ÜÂáΩÊï∞‰∏é .map() ‰∏ÄËµ∑‰ΩøÁî®",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∞ÜÂáΩÊï∞‰∏é .map() ‰∏ÄËµ∑‰ΩøÁî®\n\ndef get_animal(x):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÊ†πÊçÆÈ£üÁâ©ÂêçÁß∞ËøîÂõûÂØπÂ∫îÁöÑÂä®Áâ©\n    return meat_to_animal[x]\n\ndata[\"food\"].map(get_animal)  # ‰ΩøÁî® .map() ÊñπÊ≥ïÂíåËá™ÂÆö‰πâÂáΩÊï∞Â∞Ü \"food\" ÂàóÊò†Â∞ÑÂà∞Âä®Áâ©Á±ªÂûã\n\n0       pig\n1       pig\n2       pig\n3       cow\n4       cow\n5       pig\n6       cow\n7       pig\n8    salmon\nName: food, dtype: object\n\n\n\nÊàë‰ª¨‰πüÂèØ‰ª•Â∞ÜÂáΩÊï∞‰∏é .map() ‰∏ÄËµ∑‰ΩøÁî®„ÄÇ\nËØ•ÂáΩÊï∞Â∞Ü Series ‰∏≠ÁöÑÂçï‰∏™ÂÖÉÁ¥†‰Ωú‰∏∫ËæìÂÖ•ÔºåÂπ∂ËøîÂõûËΩ¨Êç¢ÂêéÁöÑÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊõøÊç¢ÂÄº",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊõøÊç¢ÂÄº",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊõøÊç¢ÂÄº",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊõøÊç¢ÂÄº\n\ndata = pd.Series([1., -999., 2., -999., -1000., 3.])  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Êï∞ÂÄºÂíå‰∏Ä‰∫õË°®Á§∫Áº∫Â§±ÂÄºÁöÑÁâπÊÆäÂÄºÁöÑ Series\ndata  # ÊòæÁ§∫ Series\n\n0       1.0\n1    -999.0\n2       2.0\n3    -999.0\n4   -1000.0\n5       3.0\ndtype: float64\n\n\n\nÂÅáËÆæ -999 Âíå -1000 ÊòØË°®Á§∫Áº∫Â§±Êï∞ÊçÆÁöÑÊ†áËÆ∞ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-replace-ÊõøÊç¢Âçï‰∏™ÂÄº",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-replace-ÊõøÊç¢Âçï‰∏™ÂÄº",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® replace() ÊõøÊç¢Âçï‰∏™ÂÄº",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® replace() ÊõøÊç¢Âçï‰∏™ÂÄº\n\ndata.replace(-999, np.nan)  # ‰ΩøÁî® .replace() ÊñπÊ≥ïÂ∞Ü -999 ÊõøÊç¢‰∏∫ NaN\n\n0       1.0\n1       NaN\n2       2.0\n3       NaN\n4   -1000.0\n5       3.0\ndtype: float64\n\n\n\nreplace(old_value, new_value) Â∞Ü old_value ÁöÑÊâÄÊúâÂá∫Áé∞ÊõøÊç¢‰∏∫ new_value„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-replace-ÊõøÊç¢Â§ö‰∏™ÂÄº",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-replace-ÊõøÊç¢Â§ö‰∏™ÂÄº",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® replace() ÊõøÊç¢Â§ö‰∏™ÂÄº",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® replace() ÊõøÊç¢Â§ö‰∏™ÂÄº\n\ndata.replace([-999, -1000], np.nan)  # ‰ΩøÁî® .replace() ÊñπÊ≥ï‰∏ÄÊ¨°ÊÄßÊõøÊç¢Â§ö‰∏™ÂÄºÔºåÂ∞Ü -999 Âíå -1000 ÈÉΩÊõøÊç¢‰∏∫ NaN\n\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    NaN\n5    3.0\ndtype: float64\n\n\n\n‰º†ÈÄí‰∏Ä‰∏™ÊóßÂÄºÂàóË°®‰ª•‰∏ÄÊ¨°ÊõøÊç¢Â§ö‰∏™ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏∫ÊØè‰∏™ÂÄº‰ΩøÁî®‰∏çÂêåÁöÑÊõøÊç¢",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏∫ÊØè‰∏™ÂÄº‰ΩøÁî®‰∏çÂêåÁöÑÊõøÊç¢",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏∫ÊØè‰∏™ÂÄº‰ΩøÁî®‰∏çÂêåÁöÑÊõøÊç¢",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏∫ÊØè‰∏™ÂÄº‰ΩøÁî®‰∏çÂêåÁöÑÊõøÊç¢\n\ndata.replace([-999, -1000], [np.nan, 0])  # ‰ΩøÁî® .replace() ÊñπÊ≥ï‰∏∫‰∏çÂêåÁöÑÊóßÂÄºÊåáÂÆö‰∏çÂêåÁöÑÊõøÊç¢ÂÄºÔºåÂ∞Ü -999 ÊõøÊç¢‰∏∫ NaNÔºåÂ∞Ü -1000 ÊõøÊç¢‰∏∫ 0\n\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64\n\n\n\nÊèê‰æõ‰∏Ä‰∏™ÊõøÊç¢ÂÄºÂàóË°®ÔºåÂØπÂ∫î‰∫éÊóßÂÄºÂàóË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∞ÜÂ≠óÂÖ∏‰∏é-replace-‰∏ÄËµ∑‰ΩøÁî®",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∞ÜÂ≠óÂÖ∏‰∏é-replace-‰∏ÄËµ∑‰ΩøÁî®",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∞ÜÂ≠óÂÖ∏‰∏é replace() ‰∏ÄËµ∑‰ΩøÁî®",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∞ÜÂ≠óÂÖ∏‰∏é replace() ‰∏ÄËµ∑‰ΩøÁî®\n\ndata.replace({-999: np.nan, -1000: 0})  # ‰ΩøÁî®Â≠óÂÖ∏ËøõË°åÊõøÊç¢ÔºåÂ∞Ü -999 ÊõøÊç¢‰∏∫ NaNÔºåÂ∞Ü -1000 ÊõøÊç¢‰∏∫ 0\n\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64\n\n\n\nÂ≠óÂÖ∏‰πüÂèØ‰ª•‰∏é replace() ‰∏ÄËµ∑‰ΩøÁî®„ÄÇ\nÈîÆÊòØÊóßÂÄºÔºõÂÄºÊòØÊñ∞ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÈáçÂëΩÂêçËΩ¥Á¥¢Âºï-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÈáçÂëΩÂêçËΩ¥Á¥¢Âºï-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÈáçÂëΩÂêçËΩ¥Á¥¢Âºï (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÈáçÂëΩÂêçËΩ¥Á¥¢Âºï (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndata = pd.DataFrame(np.arange(12).reshape((3, 4)),\n                    index=[\"Ohio\", \"Colorado\", \"New York\"],\n                    columns=[\"one\", \"two\", \"three\", \"four\"])  # ÂàõÂª∫‰∏Ä‰∏™ DataFrameÔºåÂπ∂ÊåáÂÆöË°åÁ¥¢ÂºïÂíåÂàóÁ¥¢Âºï\ndata  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOhio\n0\n1\n2\n3\n\n\nColorado\n4\n5\n6\n7\n\n\nNew York\n8\n9\n10\n11\n\n\n\n\n\n\n\n\nËΩ¥Ê†áÁ≠æ (Ë°åÂíåÂàóÁ¥¢Âºï) ‰πüÂèØ‰ª•ËøõË°åËΩ¨Êç¢„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-.map-‰øÆÊîπÁ¥¢Âºï-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-.map-‰øÆÊîπÁ¥¢Âºï-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® .map() ‰øÆÊîπÁ¥¢Âºï (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® .map() ‰øÆÊîπÁ¥¢Âºï (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndef transform(x):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåÂ∞ÜÂ≠óÁ¨¶‰∏≤ÁöÑÂâçÂõõ‰∏™Â≠óÁ¨¶ËΩ¨Êç¢‰∏∫Â§ßÂÜô\n    return x[:4].upper()\n\ndata.index.map(transform)  # ‰ΩøÁî® .map() ÊñπÊ≥ïÂíåËá™ÂÆö‰πâÂáΩÊï∞ËΩ¨Êç¢Ë°åÁ¥¢Âºï\n\nIndex(['OHIO', 'COLO', 'NEW '], dtype='object')"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-.map-‰øÆÊîπÁ¥¢Âºï-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-.map-‰øÆÊîπÁ¥¢Âºï-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® .map() ‰øÆÊîπÁ¥¢Âºï (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® .map() ‰øÆÊîπÁ¥¢Âºï (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndata.index = data.index.map(transform)  # Â∞ÜËΩ¨Êç¢ÂêéÁöÑÁ¥¢ÂºïËµãÂÄºÁªô data.indexÔºå‰ª•‰øÆÊîπ DataFrame ÁöÑË°åÁ¥¢Âºï\ndata\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOHIO\n0\n1\n2\n3\n\n\nCOLO\n4\n5\n6\n7\n\n\nNEW\n8\n9\n10\n11\n\n\n\n\n\n\n\n\n‰∏é Series Á±ª‰ººÔºåËΩ¥Á¥¢Âºï‰πüÊúâ‰∏Ä‰∏™ .map() ÊñπÊ≥ï„ÄÇ\nÊàë‰ª¨Â∫îÁî®‰∏Ä‰∏™ÂáΩÊï∞Êù•ËΩ¨Êç¢ÊØè‰∏™Á¥¢ÂºïÊ†áÁ≠æ„ÄÇ\nËµãÂÄºÁªô data.index ‰ºöÂ∞±Âú∞‰øÆÊîπ DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-rename-ÂàõÂª∫ËΩ¨Êç¢ÂêéÁöÑÂâØÊú¨",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-rename-ÂàõÂª∫ËΩ¨Êç¢ÂêéÁöÑÂâØÊú¨",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® rename() ÂàõÂª∫ËΩ¨Êç¢ÂêéÁöÑÂâØÊú¨",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® rename() ÂàõÂª∫ËΩ¨Êç¢ÂêéÁöÑÂâØÊú¨\n\ndata.rename(index=str.title, columns=str.upper)  # ‰ΩøÁî® .rename() ÊñπÊ≥ïÂàõÂª∫ËΩ¨Êç¢ÂêéÁöÑÂâØÊú¨ÔºåËÄå‰∏ç‰øÆÊîπÂéüÂßã DataFrameÔºåÂ∞ÜË°åÁ¥¢ÂºïÈ¶ñÂ≠óÊØçÂ§ßÂÜôÔºåÂàóÁ¥¢ÂºïÂÖ®ÈÉ®Â§ßÂÜô\n\n\n\n\n\n\n\n\nONE\nTWO\nTHREE\nFOUR\n\n\n\n\nOhio\n0\n1\n2\n3\n\n\nColo\n4\n5\n6\n7\n\n\nNew\n8\n9\n10\n11\n\n\n\n\n\n\n\n\nrename() ÂàõÂª∫‰∏Ä‰∏™ËΩ¨Êç¢ÂêéÁöÑÂâØÊú¨ÔºåËÄå‰∏ç‰øÆÊîπÂéüÂßã DataFrame„ÄÇ\nindex Âíå columns ÂèÇÊï∞ÂèØ‰ª•Êé•ÂèóÂáΩÊï∞„ÄÅÂ≠óÂÖ∏Êàñ Series„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®Â≠óÂÖ∏ËøõË°å-rename",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®Â≠óÂÖ∏ËøõË°å-rename",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî®Â≠óÂÖ∏ËøõË°å rename()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî®Â≠óÂÖ∏ËøõË°å rename()\n\ndata.rename(index={\"OHIO\": \"INDIANA\"},\n            columns={\"three\": \"peekaboo\"})  # ‰ΩøÁî®Â≠óÂÖ∏ÂØπÈÉ®ÂàÜËΩ¥Ê†áÁ≠æËøõË°åÈáçÂëΩÂêçÔºåÂ∞ÜË°åÁ¥¢Âºï \"OHIO\" ÈáçÂëΩÂêç‰∏∫ \"INDIANA\"ÔºåÂ∞ÜÂàóÁ¥¢Âºï \"three\" ÈáçÂëΩÂêç‰∏∫ \"peekaboo\"\n\n\n\n\n\n\n\n\none\ntwo\npeekaboo\nfour\n\n\n\n\nINDIANA\n0\n1\n2\n3\n\n\nCOLO\n4\n5\n6\n7\n\n\nNEW\n8\n9\n10\n11\n\n\n\n\n\n\n\n\n‰ΩøÁî®Â≠óÂÖ∏‰∏é rename() ‰∏ÄËµ∑‰ΩøÁî®ÂèØ‰ª•‰øÆÊîπËΩ¥Ê†áÁ≠æÁöÑÂ≠êÈõÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Á¶ªÊï£ÂåñÂíåÂàÜÁÆ±-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Á¶ªÊï£ÂåñÂíåÂàÜÁÆ±-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁ¶ªÊï£ÂåñÂíåÂàÜÁÆ± (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁ¶ªÊï£ÂåñÂíåÂàÜÁÆ± (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nËøûÁª≠Êï∞ÊçÆÈÄöÂ∏∏‰ºöË¢´Á¶ªÊï£ÂåñÊàñÂàÜÁÆ±‰ª•ËøõË°åÂàÜÊûê„ÄÇ\nÁ§∫‰æãÔºöÂ∞ÜÂπ¥ÈæÑÂàÜÁªÑÂà∞Âπ¥ÈæÑËåÉÂõ¥„ÄÇ\n\n\nages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]  # ÂàõÂª∫‰∏Ä‰∏™Âπ¥ÈæÑÂàóË°®\nbins = [18, 25, 35, 60, 100]  # ÂÆö‰πâÂàÜÁÆ±ËæπÁïå\nage_categories = pd.cut(ages, bins)  # ‰ΩøÁî® pd.cut() ÂáΩÊï∞Â∞ÜÂπ¥ÈæÑÊï∞ÊçÆÂàÜÁÆ±\nage_categories  # ÊòæÁ§∫ÂàÜÁÆ±ÁªìÊûú\n\n[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]]\nLength: 12\nCategories (4, interval[int64, right]): [(18, 25] &lt; (25, 35] &lt; (35, 60] &lt; (60, 100]]\n\n\n\npd.cut(data, bins) Ê†πÊçÆÊåáÂÆöÁöÑ bins ËæπÁïåÂ∞ÜÊï∞ÊçÆÂàíÂàÜ‰∏∫Â§ö‰∏™ÁÆ±„ÄÇ\nËøîÂõû‰∏Ä‰∏™ÁâπÊÆäÁöÑ Categorical ÂØπË±°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁêÜËß£-categorical-ÂØπË±°-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁêÜËß£-categorical-ÂØπË±°-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁêÜËß£ Categorical ÂØπË±° (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁêÜËß£ Categorical ÂØπË±° (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nage_categories.codes  # Êü•ÁúãÊØè‰∏™Âπ¥ÈæÑÂØπÂ∫îÁöÑÁÆ±ÁöÑÁºñÁ†Å\n\narray([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8)\n\n\n\nage_categories.categories  # Êü•ÁúãÁÆ±ÁöÑÁ±ªÂà´ (Âå∫Èó¥)\n\nIntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype='interval[int64, right]')"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁêÜËß£-categorical-ÂØπË±°-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁêÜËß£-categorical-ÂØπË±°-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁêÜËß£ Categorical ÂØπË±° (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁêÜËß£ Categorical ÂØπË±° (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nage_categories.categories[0]  # Êü•ÁúãÁ¨¨‰∏Ä‰∏™ÁÆ±ÁöÑÂå∫Èó¥\n\nInterval(18, 25, closed='right')\n\n\n\ncodes: ‰∏Ä‰∏™Êï¥Êï∞Êï∞ÁªÑÔºåË°®Á§∫ÊØè‰∏™ÂÄºÊâÄÂ±ûÁöÑÁÆ± (‰ªé 0 ÂºÄÂßã)„ÄÇ\ncategories: ‰∏Ä‰∏™ IntervalIndex ÂØπË±°ÔºåÂåÖÂê´ÁÆ±ÁöÑÂå∫Èó¥„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢categorical-‰∏äÁöÑ-value_counts",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢categorical-‰∏äÁöÑ-value_counts",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöCategorical ‰∏äÁöÑ value_counts()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöCategorical ‰∏äÁöÑ value_counts()\n\npd.value_counts(age_categories)  # ‰ΩøÁî® pd.value_counts() ÁªüËÆ°ÊØè‰∏™ÁÆ±‰∏≠ÁöÑÂÖÉÁ¥†Êï∞Èáè\n\n/tmp/ipykernel_2752/3311518851.py:1: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n  pd.value_counts(age_categories)  # ‰ΩøÁî® pd.value_counts() ÁªüËÆ°ÊØè‰∏™ÁÆ±‰∏≠ÁöÑÂÖÉÁ¥†Êï∞Èáè\n\n\n(18, 25]     5\n(25, 35]     3\n(35, 60]     3\n(60, 100]    1\nName: count, dtype: int64\n\n\n\npd.value_counts(categorical) Êèê‰æõ pd.cut() ÁªìÊûúÁöÑÁÆ±ËÆ°Êï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÂºÄÂå∫Èó¥‰∏éÈó≠Âå∫Èó¥",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÂºÄÂå∫Èó¥‰∏éÈó≠Âå∫Èó¥",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂºÄÂå∫Èó¥‰∏éÈó≠Âå∫Èó¥",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂºÄÂå∫Èó¥‰∏éÈó≠Âå∫Èó¥\n\nÂúÜÊã¨Âè∑ () Ë°®Á§∫ËØ•‰æßÊòØÂºÄÁöÑ (‰∏çÂåÖÂê´)„ÄÇ\nÊñπÊã¨Âè∑ [] Ë°®Á§∫ËØ•‰æßÊòØÈó≠ÁöÑ (ÂåÖÂê´)„ÄÇ\n(18, 25] Ë°®Á§∫ ‚ÄúÂ§ß‰∫é 18ÔºåÂ∞è‰∫éÁ≠â‰∫é 25‚Äù„ÄÇ\n\n\npd.cut(ages, bins, right=False)  # ‰ΩøÁî® right=False ÂèÇÊï∞Êõ¥ÊîπÂå∫Èó¥ÁöÑÈó≠Âêà‰æßÔºåÂèò‰∏∫Â∑¶Èó≠Âè≥ÂºÄ\n\n[[18, 25), [18, 25), [25, 35), [25, 35), [18, 25), ..., [25, 35), [60, 100), [35, 60), [35, 60), [25, 35)]\nLength: 12\nCategories (4, interval[int64, left]): [[18, 25) &lt; [25, 35) &lt; [35, 60) &lt; [60, 100)]\n\n\n\nright=False Êõ¥ÊîπÂå∫Èó¥ÁöÑÈó≠Âêà‰æß„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏∫ÁÆ±Ê∑ªÂä†Ê†áÁ≠æ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏∫ÁÆ±Ê∑ªÂä†Ê†áÁ≠æ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏∫ÁÆ±Ê∑ªÂä†Ê†áÁ≠æ",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏∫ÁÆ±Ê∑ªÂä†Ê†áÁ≠æ\n\ngroup_names = [\"Youth\", \"YoungAdult\", \"MiddleAged\", \"Senior\"]  # ÂÆö‰πâÁÆ±ÁöÑÊ†áÁ≠æ\npd.cut(ages, bins, labels=group_names)  # ‰ΩøÁî® labels ÂèÇÊï∞‰∏∫ÁÆ±ÊåáÂÆöËá™ÂÆö‰πâÂêçÁß∞\n\n['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', 'MiddleAged', 'MiddleAged', 'YoungAdult']\nLength: 12\nCategories (4, object): ['Youth' &lt; 'YoungAdult' &lt; 'MiddleAged' &lt; 'Senior']\n\n\n\nlabels ÂèÇÊï∞‰∏∫ÁÆ±ÂàÜÈÖçËá™ÂÆö‰πâÂêçÁß∞„ÄÇ\nÊØîÈªòËÆ§ÁöÑÂå∫Èó¥Ê†áÁ≠æÊõ¥ÂÖ∑‰ø°ÊÅØÈáè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∏¶ÊúâÁÆ±Êï∞ÈáèÁöÑ-pd.cut",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∏¶ÊúâÁÆ±Êï∞ÈáèÁöÑ-pd.cut",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∏¶ÊúâÁÆ±Êï∞ÈáèÁöÑ pd.cut()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∏¶ÊúâÁÆ±Êï∞ÈáèÁöÑ pd.cut()\n\ndata = np.random.uniform(size=20)  # ÁîüÊàê 20 ‰∏™ÂùáÂåÄÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞\npd.cut(data, 4, precision=2)  # Â∞ÜÊï∞ÊçÆÂàÜÊàê 4 ‰∏™Á≠âÈïøÁöÑÁÆ±ÔºåÂπ∂ËÆæÁΩÆÁ≤æÂ∫¶‰∏∫ 2\n\n[(0.5, 0.75], (0.5, 0.75], (0.0028, 0.25], (0.25, 0.5], (0.0028, 0.25], ..., (0.0028, 0.25], (0.0028, 0.25], (0.0028, 0.25], (0.75, 1.0], (0.0028, 0.25]]\nLength: 20\nCategories (4, interval[float64, right]): [(0.0028, 0.25] &lt; (0.25, 0.5] &lt; (0.5, 0.75] &lt; (0.75, 1.0]]\n\n\n\nÂ∞ÜÊï¥Êï∞‰∏™ÁÆ±‰º†ÈÄíÁªô pd.cut() ‰ª•Ê†πÊçÆÊúÄÂ∞èÂÄº/ÊúÄÂ§ßÂÄºËÆ°ÁÆóÁ≠âÈïøÁöÑÁÆ±„ÄÇ\nprecision ÈôêÂà∂ÁÆ±Ê†áÁ≠æÁöÑÂ∞èÊï∞Á≤æÂ∫¶„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Áî®‰∫éÂàÜ‰ΩçÊï∞ÂàÜÁÆ±ÁöÑ-pd.qcut",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Áî®‰∫éÂàÜ‰ΩçÊï∞ÂàÜÁÆ±ÁöÑ-pd.qcut",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁî®‰∫éÂàÜ‰ΩçÊï∞ÂàÜÁÆ±ÁöÑ pd.qcut()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁî®‰∫éÂàÜ‰ΩçÊï∞ÂàÜÁÆ±ÁöÑ pd.qcut()\n\ndata = np.random.standard_normal(1000)  # ÁîüÊàê 1000 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞\nquartiles = pd.qcut(data, 4, precision=2)  # Â∞ÜÊï∞ÊçÆÂàÜÊàêÂõõÂàÜ‰ΩçÊï∞ÔºåÂπ∂ËÆæÁΩÆÁ≤æÂ∫¶‰∏∫ 2\nquartiles  # ÊòæÁ§∫ÂàÜÁÆ±ÁªìÊûú\n\n[(0.0094, 0.73], (-3.5599999999999996, -0.65], (-3.5599999999999996, -0.65], (-3.5599999999999996, -0.65], (0.73, 3.31], ..., (-3.5599999999999996, -0.65], (-3.5599999999999996, -0.65], (0.73, 3.31], (-0.65, 0.0094], (0.0094, 0.73]]\nLength: 1000\nCategories (4, interval[float64, right]): [(-3.5599999999999996, -0.65] &lt; (-0.65, 0.0094] &lt; (0.0094, 0.73] &lt; (0.73, 3.31]]\n\n\n\npd.qcut() Ê†πÊçÆÊ†∑Êú¨ÂàÜ‰ΩçÊï∞ÂØπÊï∞ÊçÆËøõË°åÂàÜÁÆ±„ÄÇ\nÊó®Âú®ÂÆûÁé∞ (Â§ßËá¥) Á≠âÂ§ßÂ∞èÁöÑÁÆ±„ÄÇ\nÂØπ‰∫éÂ∞ÜÊï∞ÊçÆÂàíÂàÜ‰∏∫ÁôæÂàÜ‰ΩçÊï∞ÂæàÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∏¶ÊúâËá™ÂÆö‰πâÂàÜ‰ΩçÊï∞ÁöÑ-pd.qcut",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â∏¶ÊúâËá™ÂÆö‰πâÂàÜ‰ΩçÊï∞ÁöÑ-pd.qcut",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∏¶ÊúâËá™ÂÆö‰πâÂàÜ‰ΩçÊï∞ÁöÑ pd.qcut()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ∏¶ÊúâËá™ÂÆö‰πâÂàÜ‰ΩçÊï∞ÁöÑ pd.qcut()\n\npd.qcut(data, [0, 0.1, 0.5, 0.9, 1.]).value_counts()  # ‰ΩøÁî®Ëá™ÂÆö‰πâÂàÜ‰ΩçÊï∞ËøõË°åÂàÜÁÆ±ÔºåÂπ∂ÁªüËÆ°ÊØè‰∏™ÁÆ±‰∏≠ÁöÑÂÖÉÁ¥†Êï∞Èáè\n\n(-3.548, -1.249]    100\n(-1.249, 0.0094]    400\n(0.0094, 1.307]     400\n(1.307, 3.312]      100\nName: count, dtype: int64\n\n\n\nÂ∞ÜËá™ÂÆö‰πâÂàÜ‰ΩçÊï∞ (0 Âà∞ 1 ‰πãÈó¥ÁöÑÂÄº) ‰º†ÈÄíÁªô pd.qcut()„ÄÇ\nÁ§∫‰æãÔºöÂàíÂàÜ‰∏∫ÂçÅÂàÜ‰ΩçÊï∞ (0.1, 0.2, ‚Ä¶, 0.9)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Ê£ÄÊµãÂíåËøáÊª§ÂºÇÂ∏∏ÂÄº-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Ê£ÄÊµãÂíåËøáÊª§ÂºÇÂ∏∏ÂÄº-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊ£ÄÊµãÂíåËøáÊª§ÂºÇÂ∏∏ÂÄº (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊ£ÄÊµãÂíåËøáÊª§ÂºÇÂ∏∏ÂÄº (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nÂºÇÂ∏∏ÂÄºËøáÊª§/ËΩ¨Êç¢ÈÄöÂ∏∏ÊòØ‰∏Ä‰∏™Êï∞ÁªÑÊìç‰Ωú„ÄÇ\n\n\ndata = pd.DataFrame(np.random.standard_normal((1000, 4)))  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 1000 Ë°å 4 ÂàóÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞ÁöÑ DataFrame\ndata.describe()  # Êü•Áúã DataFrame ÁöÑÊèèËø∞ÊÄßÁªüËÆ°‰ø°ÊÅØ\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\ncount\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n\n\nmean\n0.036701\n-0.002865\n-0.072106\n0.032184\n\n\nstd\n1.029868\n0.985500\n0.951748\n1.014035\n\n\nmin\n-3.606637\n-3.239009\n-2.858020\n-2.937196\n\n\n25%\n-0.656069\n-0.618371\n-0.732526\n-0.661926\n\n\n50%\n0.053712\n0.001219\n-0.103923\n0.036664\n\n\n75%\n0.733433\n0.666496\n0.527074\n0.702610\n\n\nmax\n3.773156\n3.014819\n3.773474\n3.563949\n\n\n\n\n\n\n\n\nÂåÖÂê´Ê≠£ÊÄÅÂàÜÂ∏ÉÊï∞ÊçÆÁöÑÁ§∫‰æã DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Êü•ÊâæË∂ÖËøáÈòàÂÄºÁöÑÂÄº",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Êü•ÊâæË∂ÖËøáÈòàÂÄºÁöÑÂÄº",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊü•ÊâæË∂ÖËøáÈòàÂÄºÁöÑÂÄº",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊü•ÊâæË∂ÖËøáÈòàÂÄºÁöÑÂÄº\n\ncol = data[2]  # ÈÄâÊã©Á¨¨ 2 Âàó\ncol[col.abs() &gt; 3]  # ÊâæÂá∫Á¨¨ 2 Âàó‰∏≠ÁªùÂØπÂÄºÂ§ß‰∫é 3 ÁöÑÂÄº\n\n580    3.773474\nName: 2, dtype: float64\n\n\n\nÊü•ÊâæÁ¨¨ 2 Âàó‰∏≠ÁªùÂØπÂÄºÂ§ß‰∫é 3 ÁöÑÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Ê†πÊçÆÂºÇÂ∏∏ÂÄºÈÄâÊã©Ë°å",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Ê†πÊçÆÂºÇÂ∏∏ÂÄºÈÄâÊã©Ë°å",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊ†πÊçÆÂºÇÂ∏∏ÂÄºÈÄâÊã©Ë°å",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊ†πÊçÆÂºÇÂ∏∏ÂÄºÈÄâÊã©Ë°å\n\ndata[(data.abs() &gt; 3).any(axis=\"columns\")]  # ÈÄâÊã©ÂåÖÂê´Ëá≥Â∞ë‰∏Ä‰∏™ÁªùÂØπÂÄºÂ§ß‰∫é 3 ÁöÑÂÄºÁöÑË°å\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n8\n-0.930488\n-1.490699\n0.373217\n3.563949\n\n\n109\n-0.157746\n-3.049740\n-1.533122\n-1.187753\n\n\n155\n0.289391\n-3.239009\n2.032781\n-1.076698\n\n\n472\n1.053237\n3.014819\n-0.875245\n-0.822988\n\n\n580\n0.904787\n0.494948\n3.773474\n-0.345832\n\n\n660\n-0.550771\n0.587325\n-0.366744\n3.295254\n\n\n742\n3.773156\n-0.282111\n1.270517\n0.962997\n\n\n795\n3.314548\n0.556505\n0.051427\n-0.437921\n\n\n961\n-3.606637\n-1.619963\n-0.987822\n1.088619\n\n\n\n\n\n\n\n\ndata.abs() &gt; 3: Â∏ÉÂ∞î DataFrameÔºåÊåáÁ§∫Ë∂ÖËøá 3 Êàñ -3 ÁöÑÂÄº„ÄÇ\nany(axis=\"columns\"): Ê£ÄÊü•‰∏ÄË°å‰∏≠ÊòØÂê¶‰ªª‰ΩïÂÄº‰∏∫ True„ÄÇ\nÈÄâÊã©ÂåÖÂê´Ëá≥Â∞ë‰∏Ä‰∏™ÂºÇÂ∏∏ÂÄºÁöÑË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÈôêÂà∂ÂÄºÁöÑËåÉÂõ¥",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÈôêÂà∂ÂÄºÁöÑËåÉÂõ¥",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÈôêÂà∂ÂÄºÁöÑËåÉÂõ¥",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÈôêÂà∂ÂÄºÁöÑËåÉÂõ¥\n\ndata[data.abs() &gt; 3] = np.sign(data) * 3  # Â∞ÜÁªùÂØπÂÄºÂ§ß‰∫é 3 ÁöÑÂÄºÈôêÂà∂‰∏∫ -3 Êàñ 3\ndata.describe()  # Êü•Áúã DataFrame ÁöÑÊèèËø∞ÊÄßÁªüËÆ°‰ø°ÊÅØ\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\ncount\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n\n\nmean\n0.036220\n-0.002591\n-0.072880\n0.031325\n\n\nstd\n1.024412\n0.984545\n0.948930\n1.011314\n\n\nmin\n-3.000000\n-3.000000\n-2.858020\n-2.937196\n\n\n25%\n-0.656069\n-0.618371\n-0.732526\n-0.661926\n\n\n50%\n0.053712\n0.001219\n-0.103923\n0.036664\n\n\n75%\n0.733433\n0.666496\n0.527074\n0.702610\n\n\nmax\n3.000000\n3.000000\n3.000000\n3.000000\n\n\n\n\n\n\n\n\nnp.sign(data): ÂØπ‰∫éË¥üÂÄºËøîÂõû -1ÔºåÂØπ‰∫éÊ≠£ÂÄºËøîÂõû 1„ÄÇ\nÂ∞ÜË∂ÖÂá∫ [-3, 3] Âå∫Èó¥ÁöÑÂÄºÈôêÂà∂‰∏∫ -3 Âíå 3„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊéíÂàóÂíåÈöèÊú∫ÈááÊ†∑-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊéíÂàóÂíåÈöèÊú∫ÈááÊ†∑-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊéíÂàóÂíåÈöèÊú∫ÈááÊ†∑ (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊéíÂàóÂíåÈöèÊú∫ÈááÊ†∑ (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nÊéíÂàó (ÈöèÊú∫ÈáçÊñ∞ÊéíÂ∫è) Ë°åÊàñÂàó„ÄÇ\nÈÄâÊã©Êï∞ÊçÆÁöÑÈöèÊú∫Â≠êÈõÜ„ÄÇ\n\n\ndf = pd.DataFrame(np.arange(5 * 7).reshape((5, 7)))  # ÂàõÂª∫‰∏Ä‰∏™Á§∫‰æã DataFrame\ndf  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n0\n0\n1\n2\n3\n4\n5\n6\n\n\n1\n7\n8\n9\n10\n11\n12\n13\n\n\n2\n14\n15\n16\n17\n18\n19\n20\n\n\n3\n21\n22\n23\n24\n25\n26\n27\n\n\n4\n28\n29\n30\n31\n32\n33\n34\n\n\n\n\n\n\n\n\nÂàõÂª∫‰∏Ä‰∏™Á§∫‰æã DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-permutation-ÊéíÂàóË°å-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-permutation-ÊéíÂàóË°å-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® permutation() ÊéíÂàóË°å (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® permutation() ÊéíÂàóË°å (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nsampler = np.random.permutation(5)  # ÁîüÊàê‰∏Ä‰∏™ÂåÖÂê´ 0-4 ÁöÑÈöèÊú∫ÊéíÂàóÁöÑÊï∞ÁªÑ\nsampler  # ÊòæÁ§∫ÊéíÂàó\n\narray([4, 3, 0, 2, 1])"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-permutation-ÊéíÂàóË°å-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰ΩøÁî®-permutation-ÊéíÂàóË°å-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® permutation() ÊéíÂàóË°å (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰ΩøÁî® permutation() ÊéíÂàóË°å (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndf.take(sampler)  # ‰ΩøÁî® .take() ÊñπÊ≥ïÂíåÊéíÂàóÂØπ DataFrame ÁöÑË°åËøõË°åÈáçÊñ∞ÊéíÂ∫èÔºå‰πüÂèØ‰ª•‰ΩøÁî® df.iloc[sampler]\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n4\n28\n29\n30\n31\n32\n33\n34\n\n\n3\n21\n22\n23\n24\n25\n26\n27\n\n\n0\n0\n1\n2\n3\n4\n5\n6\n\n\n2\n14\n15\n16\n17\n18\n19\n20\n\n\n1\n7\n8\n9\n10\n11\n12\n13\n\n\n\n\n\n\n\n\nnp.random.permutation(n) ÁîüÊàê‰∏Ä‰∏™‰ªé 0 Âà∞ n-1 ÁöÑÊï¥Êï∞ÁöÑÈöèÊú∫ÊéíÂàó„ÄÇ\ntake() Êàñ iloc[] ÂèØ‰ª•‰∏éÊéíÂàó‰∏ÄËµ∑‰ΩøÁî®‰ª•ÂØπË°åËøõË°åÈáçÊñ∞ÊéíÂ∫è„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊéíÂàóÂàó-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊéíÂàóÂàó-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊéíÂàóÂàó (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊéíÂàóÂàó (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ncolumn_sampler = np.random.permutation(7)  # ÁîüÊàê‰∏Ä‰∏™ÂåÖÂê´ 0-6 ÁöÑÈöèÊú∫ÊéíÂàóÁöÑÊï∞ÁªÑ\ncolumn_sampler  # ÊòæÁ§∫ÊéíÂàó\n\narray([6, 0, 1, 5, 2, 3, 4])"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊéíÂàóÂàó-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊéíÂàóÂàó-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊéíÂàóÂàó (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊéíÂàóÂàó (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndf.take(column_sampler, axis=\"columns\")  # ‰ΩøÁî® .take() ÊñπÊ≥ï„ÄÅÊéíÂàóÂíå axis=\"columns\" ÂØπ DataFrame ÁöÑÂàóËøõË°åÈáçÊñ∞ÊéíÂ∫è\n\n\n\n\n\n\n\n\n6\n0\n1\n5\n2\n3\n4\n\n\n\n\n0\n6\n0\n1\n5\n2\n3\n4\n\n\n1\n13\n7\n8\n12\n9\n10\n11\n\n\n2\n20\n14\n15\n19\n16\n17\n18\n\n\n3\n27\n21\n22\n26\n23\n24\n25\n\n\n4\n34\n28\n29\n33\n30\n31\n32\n\n\n\n\n\n\n\n\nÁ±ª‰ººÂú∞ÊéíÂàóÂàóÔºå‰ΩøÁî® axis=\"columns\" ‰∏é take() ‰∏ÄËµ∑‰ΩøÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏çÊîæÂõûÈöèÊú∫ÈááÊ†∑",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏çÊîæÂõûÈöèÊú∫ÈááÊ†∑",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏çÊîæÂõûÈöèÊú∫ÈááÊ†∑",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏çÊîæÂõûÈöèÊú∫ÈááÊ†∑\n\ndf.sample(n=3)  # ‰ΩøÁî® .sample(n=3) ÈöèÊú∫ÈÄâÊã© 3 Ë°å (‰∏çÊîæÂõû)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n0\n0\n1\n2\n3\n4\n5\n6\n\n\n1\n7\n8\n9\n10\n11\n12\n13\n\n\n2\n14\n15\n16\n17\n18\n19\n20\n\n\n\n\n\n\n\n\nsample(n=k) ÈÄâÊã© k ‰∏™ÈöèÊú∫Ë°åÔºå‰∏çÊîæÂõû„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊúâÊîæÂõûÈöèÊú∫ÈááÊ†∑",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÊúâÊîæÂõûÈöèÊú∫ÈááÊ†∑",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊúâÊîæÂõûÈöèÊú∫ÈááÊ†∑",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÊúâÊîæÂõûÈöèÊú∫ÈááÊ†∑\n\nchoices = pd.Series([5, 7, -1, 6, 4])  # ÂàõÂª∫‰∏Ä‰∏™ Series\nchoices.sample(n=10, replace=True)  # ‰ΩøÁî® .sample(n=10, replace=True) ÈöèÊú∫ÈÄâÊã© 10 ‰∏™ÂÖÉÁ¥† (ÊúâÊîæÂõû)\n\n0    5\n0    5\n1    7\n1    7\n4    4\n0    5\n3    6\n2   -1\n1    7\n1    7\ndtype: int64\n\n\n\nreplace=True ÂÖÅËÆ∏ÊúâÊîæÂõûÈááÊ†∑ (Âêå‰∏ÄË°åÂèØ‰ª•Ë¢´Â§öÊ¨°ÈÄâÊã©)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ËÆ°ÁÆóÊåáÊ†áËôöÊãüÂèòÈáè-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ËÆ°ÁÆóÊåáÊ†áËôöÊãüÂèòÈáè-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöËÆ°ÁÆóÊåáÊ†á/ËôöÊãüÂèòÈáè (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöËÆ°ÁÆóÊåáÊ†á/ËôöÊãüÂèòÈáè (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nÂ∞ÜÂàÜÁ±ªÂèòÈáèËΩ¨Êç¢‰∏∫ ‚ÄúËôöÊãü‚Äù Êàñ ‚ÄúÊåáÊ†á‚Äù Áü©Èòµ„ÄÇ\nÁî®‰∫éÁªüËÆ°Âª∫Ê®°ÂíåÊú∫Âô®Â≠¶‰π†„ÄÇ\n\n\ndf = pd.DataFrame({\"key\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"b\"],\n                   \"data1\": range(6)})  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÂàÜÁ±ªÂèòÈáè \"key\" ÁöÑ DataFrame\ndf  # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nkey\ndata1\n\n\n\n\n0\nb\n0\n\n\n1\nb\n1\n\n\n2\na\n2\n\n\n3\nc\n3\n\n\n4\na\n4\n\n\n5\nb\n5\n\n\n\n\n\n\n\n\nÂåÖÂê´ÂàÜÁ±ªÂàó ‚Äúkey‚Äù ÁöÑÁ§∫‰æã DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢get_dummies",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢get_dummies",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºöget_dummies()",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºöget_dummies()\n\npd.get_dummies(df[\"key\"])  # ‰ΩøÁî® pd.get_dummies() ÂáΩÊï∞Â∞ÜÂàÜÁ±ªÂèòÈáèËΩ¨Êç¢‰∏∫ËôöÊãüÂèòÈáè\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\nFalse\nTrue\nFalse\n\n\n1\nFalse\nTrue\nFalse\n\n\n2\nTrue\nFalse\nFalse\n\n\n3\nFalse\nFalse\nTrue\n\n\n4\nTrue\nFalse\nFalse\n\n\n5\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\npd.get_dummies(categorical_column) ÂàõÂª∫‰∏Ä‰∏™ DataFrameÔºåÂÖ∂‰∏≠Ôºö\n\nÂéüÂßãÂàó‰∏≠ÁöÑÊØè‰∏™ÂîØ‰∏ÄÂÄºÈÉΩÊàê‰∏∫‰∏Ä‰∏™Êñ∞Âàó„ÄÇ\nÂ¶ÇÊûúÂéüÂßãË°åÂÖ∑ÊúâËØ•Á±ªÂà´ÔºåÂàôÂÄº‰∏∫ 1ÔºåÂê¶Âàô‰∏∫ 0„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏∫ËôöÊãüÂèòÈáèÊ∑ªÂä†ÂâçÁºÄ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏∫ËôöÊãüÂèòÈáèÊ∑ªÂä†ÂâçÁºÄ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏∫ËôöÊãüÂèòÈáèÊ∑ªÂä†ÂâçÁºÄ",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏∫ËôöÊãüÂèòÈáèÊ∑ªÂä†ÂâçÁºÄ\n\ndummies = pd.get_dummies(df[\"key\"], prefix=\"key\")  # ‰ΩøÁî® prefix ÂèÇÊï∞‰∏∫ËôöÊãüÂèòÈáèÁöÑÂàóÂêçÊ∑ªÂä†ÂâçÁºÄ\ndf_with_dummy = df[[\"data1\"]].join(dummies)  # Â∞ÜËôöÊãüÂèòÈáè‰∏éÂéüÂßã DataFrame ËøûÊé•\ndf_with_dummy  # ÊòæÁ§∫ÁªìÊûú DataFrame\n\n\n\n\n\n\n\n\ndata1\nkey_a\nkey_b\nkey_c\n\n\n\n\n0\n0\nFalse\nTrue\nFalse\n\n\n1\n1\nFalse\nTrue\nFalse\n\n\n2\n2\nTrue\nFalse\nFalse\n\n\n3\n3\nFalse\nFalse\nTrue\n\n\n4\n4\nTrue\nFalse\nFalse\n\n\n5\n5\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\nprefix ÂèÇÊï∞‰∏∫ËôöÊãüÂèòÈáèÂàóÂêçÊ∑ªÂä†ÂâçÁºÄ„ÄÇ\n‰∏éÂéüÂßã DataFrame ËøûÊé•Êó∂ÂæàÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â§ÑÁêÜÂ§ö‰∏™Á±ªÂà´-movielens-Á§∫‰æã-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢Â§ÑÁêÜÂ§ö‰∏™Á±ªÂà´-movielens-Á§∫‰æã-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ§ÑÁêÜÂ§ö‰∏™Á±ªÂà´ (MovieLens Á§∫‰æã) (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÂ§ÑÁêÜÂ§ö‰∏™Á±ªÂà´ (MovieLens Á§∫‰æã) (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nmnames = [\"movie_id\", \"title\", \"genres\"]  # ÂÆö‰πâÂàóÂêç\nmovies = pd.read_table(\"datasets/movielens/movies.dat\", sep=\"::\",\n                       header=None, names=mnames, engine=\"python\")  # ËØªÂèñ MovieLens Êï∞ÊçÆÈõÜÔºåÂàÜÈöîÁ¨¶‰∏∫ \"::\"\nmovies[:10]  # ÊòæÁ§∫Ââç 10 Ë°åÊï∞ÊçÆ\n\n\n\n\n\n\n\n\nmovie_id\ntitle\ngenres\n\n\n\n\n0\n1\nToy Story (1995)\nAnimation|Children's|Comedy\n\n\n1\n2\nJumanji (1995)\nAdventure|Children's|Fantasy\n\n\n2\n3\nGrumpier Old Men (1995)\nComedy|Romance\n\n\n3\n4\nWaiting to Exhale (1995)\nComedy|Drama\n\n\n4\n5\nFather of the Bride Part II (1995)\nComedy\n\n\n5\n6\nHeat (1995)\nAction|Crime|Thriller\n\n\n6\n7\nSabrina (1995)\nComedy|Romance\n\n\n7\n8\nTom and Huck (1995)\nAdventure|Children's\n\n\n8\n9\nSudden Death (1995)\nAction\n\n\n9\n10\nGoldenEye (1995)\nAction|Adventure|Thriller\n\n\n\n\n\n\n\n\nMovieLens Êï∞ÊçÆÈõÜÔºö‚Äúgenres‚Äù ÂàóÂåÖÂê´Áî®Á´ñÁ∫ø (|) ÂàÜÈöîÁöÑÁ±ªÂûãÂ≠óÁ¨¶‰∏≤„ÄÇ\n‰∏ÄÈÉ®ÁîµÂΩ±ÂèØ‰ª•Â±û‰∫éÂ§ö‰∏™Á±ªÂûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢str.get_dummies-Áî®‰∫éÂ§ö‰∏™Á±ªÂà´",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢str.get_dummies-Áî®‰∫éÂ§ö‰∏™Á±ªÂà´",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºöstr.get_dummies() Áî®‰∫éÂ§ö‰∏™Á±ªÂà´",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºöstr.get_dummies() Áî®‰∫éÂ§ö‰∏™Á±ªÂà´\n\ndummies = movies[\"genres\"].str.get_dummies(\"|\")  # ‰ΩøÁî® str.get_dummies(\"|\") Â§ÑÁêÜÂ§ö‰∏™Á±ªÂà´ÔºåÂàÜÈöîÁ¨¶‰∏∫ \"|\"\ndummies.iloc[:10, :6]  # ÊòæÁ§∫Ââç 10 Ë°åÂíåÂâç 6 Âàó\n\n\n\n\n\n\n\n\nAction\nAdventure\nAnimation\nChildren's\nComedy\nCrime\n\n\n\n\n0\n0\n0\n1\n1\n1\n0\n\n\n1\n0\n1\n0\n1\n0\n0\n\n\n2\n0\n0\n0\n0\n1\n0\n\n\n3\n0\n0\n0\n0\n1\n0\n\n\n4\n0\n0\n0\n0\n1\n0\n\n\n5\n1\n0\n0\n0\n0\n1\n\n\n6\n0\n0\n0\n0\n1\n0\n\n\n7\n0\n1\n0\n1\n0\n0\n\n\n8\n1\n0\n0\n0\n0\n0\n\n\n9\n1\n1\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nstr.get_dummies(separator) Â§ÑÁêÜÁî±ÂàÜÈöîÁ¨¶ÂàÜÈöîÁöÑÂ§ö‰∏™Á±ªÂà´„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏éÂéüÂßã-dataframe-ÁªÑÂêà",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢‰∏éÂéüÂßã-dataframe-ÁªÑÂêà",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏éÂéüÂßã DataFrame ÁªÑÂêà",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢Ôºö‰∏éÂéüÂßã DataFrame ÁªÑÂêà\n\nmovies_windic = movies.join(dummies.add_prefix(\"Genre_\"))  # Â∞ÜËôöÊãüÂèòÈáè‰∏éÂéüÂßã DataFrame ËøûÊé•ÔºåÂπ∂‰∏∫ËôöÊãüÂèòÈáèÂàóÂêçÊ∑ªÂä†ÂâçÁºÄ\n\n\nmovies_windic.iloc[0] # ÊòæÁ§∫ÁªìÊûú DataFrame ÁöÑÁ¨¨‰∏ÄË°å\n\nmovie_id                                       1\ntitle                           Toy Story (1995)\ngenres               Animation|Children's|Comedy\nGenre_Action                                   0\nGenre_Adventure                                0\nGenre_Animation                                1\nGenre_Children's                               1\nGenre_Comedy                                   1\nGenre_Crime                                    0\nGenre_Documentary                              0\nGenre_Drama                                    0\nGenre_Fantasy                                  0\nGenre_Film-Noir                                0\nGenre_Horror                                   0\nGenre_Musical                                  0\nGenre_Mystery                                  0\nGenre_Romance                                  0\nGenre_Sci-Fi                                   0\nGenre_Thriller                                 0\nGenre_War                                      0\nGenre_Western                                  0\nName: 0, dtype: object\n\n\n\nadd_prefix() ‰∏∫ËôöÊãüÂèòÈáèÂàóÊ∑ªÂä†ÂâçÁºÄ„ÄÇ\njoin() Â∞ÜËôöÊãüÂèòÈáè‰∏éÂéüÂßã DataFrame ÁªÑÂêà„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁªìÂêà-get_dummies-Âíå-cut-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁªìÂêà-get_dummies-Âíå-cut-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁªìÂêà get_dummies() Âíå cut() (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁªìÂêà get_dummies() Âíå cut() (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nnp.random.seed(12345) # ËÆæÁΩÆÈöèÊú∫Êï∞ÁßçÂ≠ê‰ª•Á°Æ‰øùÁªìÊûúÂèØÈáçÂ§ç\nvalues = np.random.uniform(size=10) # ÁîüÊàê 10 ‰∏™ÂùáÂåÄÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞\nvalues # ÊòæÁ§∫ÈöèÊú∫Êï∞\n\narray([0.92961609, 0.31637555, 0.18391881, 0.20456028, 0.56772503,\n       0.5955447 , 0.96451452, 0.6531771 , 0.74890664, 0.65356987])"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁªìÂêà-get_dummies-Âíå-cut-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êï∞ÊçÆËΩ¨Êç¢ÁªìÂêà-get_dummies-Âíå-cut-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁªìÂêà get_dummies() Âíå cut() (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.2 Êï∞ÊçÆËΩ¨Êç¢ÔºöÁªìÂêà get_dummies() Âíå cut() (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nbins = [0, 0.2, 0.4, 0.6, 0.8, 1] # ÂÆö‰πâÂàÜÁÆ±ËæπÁïå\npd.get_dummies(pd.cut(values, bins)) # Â∞ÜÊï∞ÊçÆÂàÜÁÆ±ÔºåÁÑ∂ÂêéËΩ¨Êç¢‰∏∫ËôöÊãüÂèòÈáè\n\n\n\n\n\n\n\n\n(0.0, 0.2]\n(0.2, 0.4]\n(0.4, 0.6]\n(0.6, 0.8]\n(0.8, 1.0]\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n1\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n2\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\n3\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n4\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n5\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n6\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n7\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n8\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n9\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\nÁªüËÆ°Â∫îÁî®ÁöÑ‰∏Ä‰∏™ÊäÄÂ∑ßÔºöÂ∞Ü get_dummies() ‰∏éÁ¶ªÊï£ÂåñÂáΩÊï∞ (Â¶Ç cut()) ÁªìÂêà‰ΩøÁî®„ÄÇ\n‰∏∫ÊØè‰∏™ÁÆ±ÂàõÂª∫ÊåáÊ†áÂèòÈáè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã\n\nPandas ÊúÄÂàùÂØπ NumPy ÁöÑ‰æùËµñÂ≠òÂú®Â±ÄÈôêÊÄßÔºö\n\nÂØπÊï¥Êï∞ÂíåÂ∏ÉÂ∞îÂÄºÁöÑÁº∫Â§±Êï∞ÊçÆÂ§ÑÁêÜ‰∏çÂÆåÊï¥„ÄÇ\nÂ≠óÁ¨¶‰∏≤Êï∞ÊçÆÂú®ËÆ°ÁÆó‰∏äÂºÄÈîÄËæÉÂ§ß„ÄÇ\nÊüê‰∫õÊï∞ÊçÆÁ±ªÂûã (Êó∂Èó¥Èó¥Èöî„ÄÅÊó∂Èó¥Â¢ûÈáè) Êú™ÂæóÂà∞ÊúâÊïàÊîØÊåÅ„ÄÇ\n\nPandas Áé∞Âú®Êúâ‰∏Ä‰∏™Êâ©Â±ïÁ±ªÂûãÁ≥ªÁªü„ÄÇ\n\nÂÖÅËÆ∏Ê∑ªÂä† NumPy Êú¨Ë∫´‰∏çÊîØÊåÅÁöÑÊñ∞Êï∞ÊçÆÁ±ªÂûã„ÄÇ\nÂ∞ÜËøô‰∫õÁ±ªÂûãËßÜ‰∏∫‰∏ÄÁ≠âÂÖ¨Ê∞ë„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÊï¥Êï∞Á§∫‰æã-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÊï¥Êï∞Á§∫‰æã-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöÊï¥Êï∞Á§∫‰æã (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöÊï¥Êï∞Á§∫‰æã (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ns = pd.Series([1, 2, 3, None]) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Êï¥Êï∞Âíå None ÁöÑ Series\ns # ÊòæÁ§∫ Series\n\n0    1.0\n1    2.0\n2    3.0\n3    NaN\ndtype: float64\n\n\n\ns.dtype # Êü•Áúã Series ÁöÑÊï∞ÊçÆÁ±ªÂûã\n\ndtype('float64')\n\n\n\n‰º†ÁªüË°å‰∏∫ÔºöÂåÖÂê´Áº∫Â§±ÂÄºÁöÑÊï¥Êï∞ Series Âèò‰∏∫ float64„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãint64dtype-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãint64dtype-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöInt64Dtype (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöInt64Dtype (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ns = pd.Series([1, 2, 3, None], dtype=pd.Int64Dtype()) # ‰ΩøÁî® pd.Int64Dtype() ÂàõÂª∫‰∏Ä‰∏™ÂèØÁ©∫Êï¥Êï∞ Series\ns # ÊòæÁ§∫ Series\n\n0       1\n1       2\n2       3\n3    &lt;NA&gt;\ndtype: Int64"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãint64dtype-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãint64dtype-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöInt64Dtype (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöInt64Dtype (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ns.isna() # Ê£ÄÊü•Áº∫Â§±ÂÄºÔºåNone ‰ºöË¢´Ê≠£Á°ÆËØÜÂà´‰∏∫Áº∫Â§±ÂÄº\n\n0    False\n1    False\n2    False\n3     True\ndtype: bool\n\n\n\ns.dtype # Êü•Áúã Series ÁöÑÊï∞ÊçÆÁ±ªÂûã\n\nInt64Dtype()\n\n\n\npd.Int64Dtype() (Êàñ \"Int64\") ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÊ≠£Á°Æ NA Â§ÑÁêÜÁöÑÊï¥Êï∞ Series„ÄÇ\n‰ΩøÁî® &lt;NA&gt; Ë°®Á§∫Áº∫Â§±ÂÄº (pandas.NA Ê†áËÆ∞ÂÄº)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÂ≠óÁ¨¶‰∏≤Á§∫‰æã",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÂ≠óÁ¨¶‰∏≤Á§∫‰æã",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöÂ≠óÁ¨¶‰∏≤Á§∫‰æã",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöÂ≠óÁ¨¶‰∏≤Á§∫‰æã\n\ns = pd.Series(['one', 'two', None, 'three'], dtype=pd.StringDtype()) # ‰ΩøÁî® pd.StringDtype() ÂàõÂª∫‰∏Ä‰∏™‰∏ìÈó®ÁöÑÂ≠óÁ¨¶‰∏≤ Series\ns # ÊòæÁ§∫ Series\n\n0      one\n1      two\n2     &lt;NA&gt;\n3    three\ndtype: string\n\n\n\ns.dtype #Êü•Áúã Series ÁöÑÊï∞ÊçÆÁ±ªÂûã\n\nstring[python]\n\n\n\npd.StringDtype() ÂàõÂª∫‰∏Ä‰∏™‰∏ìÈó®ÁöÑÂ≠óÁ¨¶‰∏≤Êï∞ÊçÆÁ±ªÂûã„ÄÇ\nÂØπ‰∫éÂ§ßÂûãÊï∞ÊçÆÈõÜÔºåÂÜÖÂ≠òÊïàÁéáÂíåËÆ°ÁÆóÊïàÁéáÊõ¥È´ò„ÄÇ\nÈúÄË¶Å pyarrow Â∫ì„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã-astype-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã-astype-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºö astype() (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºö astype() (Á¨¨ 1 ÈÉ®ÂàÜ)\n\ndf = pd.DataFrame({\"A\": [1, 2, None, 4],\n                    \"B\": [\"one\", \"two\", \"three\", None],\n                   \"C\": [False, None, False, True]}) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´‰∏çÂêåÊï∞ÊçÆÁ±ªÂûãÂíåÁº∫Â§±ÂÄºÁöÑ DataFrame\ndf # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n1.0\none\nFalse\n\n\n1\n2.0\ntwo\nNone\n\n\n2\nNaN\nthree\nFalse\n\n\n3\n4.0\nNone\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã-astype-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûã-astype-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºö astype() (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºö astype() (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndf[\"A\"] = df[\"A\"].astype(\"Int64\") # Â∞Ü \"A\" ÂàóËΩ¨Êç¢‰∏∫ÂèØÁ©∫Êï¥Êï∞Á±ªÂûã\ndf[\"B\"] = df[\"B\"].astype(\"string\") # Â∞Ü \"B\" ÂàóËΩ¨Êç¢‰∏∫‰∏ìÈó®ÁöÑÂ≠óÁ¨¶‰∏≤Á±ªÂûã\ndf[\"C\"] = df[\"C\"].astype(\"boolean\") # Â∞Ü \"C\" ÂàóËΩ¨Êç¢‰∏∫ÂèØÁ©∫Â∏ÉÂ∞îÁ±ªÂûã\ndf # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n1\none\nFalse\n\n\n1\n2\ntwo\n&lt;NA&gt;\n\n\n2\n&lt;NA&gt;\nthree\nFalse\n\n\n3\n4\n&lt;NA&gt;\nTrue\n\n\n\n\n\n\n\n\nÊâ©Â±ïÁ±ªÂûã‰∏éÁé∞ÊúâÂ∑•ÂÖ∑ÂæàÂ•ΩÂú∞ÈõÜÊàê„ÄÇÂèØ‰ª•‰ΩøÁî®astype()ÊñπÊ≥ïËΩ¨Êç¢‰∏çÂêåÁöÑÁ±ªÂûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÊÄªÁªì",
    "href": "qmd/pandas3ed7cn.html#Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÊÄªÁªì",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöÊÄªÁªì",
    "text": "7.3 Êâ©Â±ïÊï∞ÊçÆÁ±ªÂûãÔºöÊÄªÁªì\n\nÂèØÁî®ÁöÑÊâ©Â±ïÁ±ªÂûãÁöÑÂÆåÊï¥ÂàóË°®„ÄÇ\n\n\n\n\n\n\n\n\nÊâ©Â±ïÁ±ªÂûã\nÊèèËø∞\n\n\n\n\nBooleanDtype\nÂèØÁ©∫Â∏ÉÂ∞îÊï∞ÊçÆÔºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"boolean\"\n\n\nCategoricalDtype\nÂàÜÁ±ªÊï∞ÊçÆÁ±ªÂûãÔºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"category\"\n\n\nDatetimeTZDtype\nÂ∏¶Êó∂Âå∫ÁöÑÊó•ÊúüÊó∂Èó¥\n\n\nFloat32Dtype\n32 ‰ΩçÂèØÁ©∫ÊµÆÁÇπÊï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"Float32\"\n\n\nFloat64Dtype\n64 ‰ΩçÂèØÁ©∫ÊµÆÁÇπÊï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"Float64\"\n\n\nInt8Dtype\n8 ‰ΩçÂèØÁ©∫ÊúâÁ¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"Int8\"\n\n\nInt16Dtype\n16 ‰ΩçÂèØÁ©∫ÊúâÁ¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"Int16\"\n\n\nInt32Dtype\n32 ‰ΩçÂèØÁ©∫ÊúâÁ¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"Int32\"\n\n\nInt64Dtype\n64 ‰ΩçÂèØÁ©∫ÊúâÁ¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"Int64\"\n\n\nUInt8Dtype\n8 ‰ΩçÂèØÁ©∫Êó†Á¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"UInt8\"\n\n\nUInt16Dtype\n16 ‰ΩçÂèØÁ©∫Êó†Á¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"UInt16\"\n\n\nUInt32Dtype\n32 ‰ΩçÂèØÁ©∫Êó†Á¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"UInt32\"\n\n\nUInt64Dtype\n64 ‰ΩçÂèØÁ©∫Êó†Á¨¶Âè∑Êï¥Êï∞Ôºå‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤‰º†ÈÄíÊó∂‰ΩøÁî® \"UInt64\""
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωú",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωú",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰Ωú",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰Ωú\n\nPython Âõ†ÂÖ∂Â≠óÁ¨¶‰∏≤/ÊñáÊú¨Â§ÑÁêÜËÉΩÂäõËÄåÂπøÂèóÊ¨¢Ëøé„ÄÇ\nÂ≠óÁ¨¶‰∏≤ÂØπË±°ÊñπÊ≥ïÈÄöÂ∏∏Â∞±Ë∂≥Â§ü‰∫Ü„ÄÇ\nÊ≠£ÂàôË°®ËææÂºè (regex) Êèê‰æõ‰∫ÜÊõ¥Âº∫Â§ßÁöÑÂäüËÉΩ„ÄÇ\nPandas Â∞ÜËøô‰∫õÂäüËÉΩÁªìÂêàËµ∑Êù•ÔºåÂπ∂‰ºòÈõÖÂú∞Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nval = \"a,b,  guido\" # ÂÆö‰πâ‰∏Ä‰∏™ÂåÖÂê´ÈÄóÂè∑ÂàÜÈöîÁ¨¶ÂíåÁ©∫Ê†ºÁöÑÂ≠óÁ¨¶‰∏≤\nval.split(\",\") # ‰ΩøÁî® .split(\",\") ÊñπÊ≥ïÂ∞ÜÂ≠óÁ¨¶‰∏≤ÊãÜÂàÜ‰∏∫ÂàóË°®\n\n['a', 'b', '  guido']\n\n\n\nsplit(): Ê†πÊçÆÂàÜÈöîÁ¨¶Â∞ÜÂ≠óÁ¨¶‰∏≤ÊãÜÂàÜ‰∏∫Â≠êÂ≠óÁ¨¶‰∏≤ÂàóË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï (Á¨¨ 2 ÈÉ®ÂàÜ)\n\npieces = [x.strip() for x in val.split(\",\")] # ‰ΩøÁî®ÂàóË°®Êé®ÂØºÂºèÂíå .strip() ÊñπÊ≥ïÂéªÈô§ÊØè‰∏™Â≠êÂ≠óÁ¨¶‰∏≤‰∏§‰æßÁöÑÁ©∫Ê†º\npieces # ÊòæÁ§∫ÁªìÊûúÂàóË°®\n\n['a', 'b', 'guido']\n\n\n\nstrip(): Âà†Èô§ÂâçÂØº/Â∞æÈöèÁ©∫Ê†º„ÄÇÈÄöÂ∏∏‰∏é split() ‰∏ÄËµ∑‰ΩøÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠óÁ¨¶‰∏≤ËøûÊé•-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠óÁ¨¶‰∏≤ËøûÊé•-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠óÁ¨¶‰∏≤ËøûÊé• (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠óÁ¨¶‰∏≤ËøûÊé• (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nfirst, second, third = pieces # Â∞ÜÂàóË°®‰∏≠ÁöÑÂÖÉÁ¥†Ëß£ÂåÖÂà∞ÂèòÈáè‰∏≠\nfirst + \"::\" + second + \"::\" + third  # ‰ΩøÁî® + ËøêÁÆóÁ¨¶ËøûÊé•Â≠óÁ¨¶‰∏≤\n\n'a::b::guido'"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠óÁ¨¶‰∏≤ËøûÊé•-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠óÁ¨¶‰∏≤ËøûÊé•-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠óÁ¨¶‰∏≤ËøûÊé• (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠óÁ¨¶‰∏≤ËøûÊé• (Á¨¨ 2 ÈÉ®ÂàÜ)\n\n\"::\".join(pieces) # ‰ΩøÁî® .join() ÊñπÊ≥ïËøûÊé•Â≠óÁ¨¶‰∏≤ÔºåÊõ¥ Pythonic ÁöÑÊñπÂºè\n\n'a::b::guido'\n\n\n\njoin(): ‰ΩøÁî®ÂàÜÈöîÁ¨¶ËøûÊé•Â≠óÁ¨¶‰∏≤ÁöÑ‰∏ÄÁßçÊõ¥ Pythonic ÁöÑÊñπÂºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã (Á¨¨ 1 ÈÉ®ÂàÜ)\n\n\"guido\" in val # ‰ΩøÁî® in ËøêÁÆóÁ¨¶Ê£ÄÊü•Â≠óÁ¨¶‰∏≤‰∏≠ÊòØÂê¶ÂåÖÂê´Â≠êÂ≠óÁ¨¶‰∏≤\n\nTrue\n\n\n\nval.index(\",\")  # ‰ΩøÁî® .index() ÊñπÊ≥ïÊü•ÊâæÂ≠êÂ≠óÁ¨¶‰∏≤ÁöÑÁ¥¢ÂºïÔºåÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôÂºïÂèë ValueError ÂºÇÂ∏∏\n\n1"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ≠êÂ≠óÁ¨¶‰∏≤Ê£ÄÊµã (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nval.find(\":\")   # ‰ΩøÁî® .find() ÊñπÊ≥ïÊü•ÊâæÂ≠êÂ≠óÁ¨¶‰∏≤ÁöÑÁ¥¢ÂºïÔºåÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôËøîÂõû -1\n\n-1\n\n\n\nin: Ê£ÄÊü•Â≠êÂ≠óÁ¨¶‰∏≤ÊòØÂê¶Â≠òÂú®ÁöÑÊúÄ‰Ω≥ÊñπÊ≥ï„ÄÇ\nindex(): Êü•ÊâæÂ≠êÂ≠óÁ¨¶‰∏≤ÁöÑÁ¨¨‰∏ÄÊ¨°Âá∫Áé∞ÁöÑÁ¥¢ÂºïÔºõÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôÂºïÂèëÈîôËØØ„ÄÇ\nfind(): Á±ª‰ºº‰∫é index()Ôºå‰ΩÜÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôËøîÂõû -1„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúcount-Âíå-replace-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúcount-Âíå-replace-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöcount() Âíå replace() (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöcount() Âíå replace() (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nval.count(\",\") # ‰ΩøÁî® .count() ÊñπÊ≥ïËÆ°ÁÆóÂ≠êÂ≠óÁ¨¶‰∏≤Âá∫Áé∞ÁöÑÊ¨°Êï∞\n\n2\n\n\n\nval.replace(\",\", \"::\") # ‰ΩøÁî® .replace() ÊñπÊ≥ïÂ∞ÜÂ≠êÂ≠óÁ¨¶‰∏≤ÊõøÊç¢‰∏∫Âè¶‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤\n\n'a::b::  guido'"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúcount-Âíå-replace-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúcount-Âíå-replace-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöcount() Âíå replace() (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöcount() Âíå replace() (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nval.replace(\",\", \"\")  # ÈÄöËøáÊõøÊç¢‰∏∫Á©∫Â≠óÁ¨¶‰∏≤Êù•Âà†Èô§Â≠êÂ≠óÁ¨¶‰∏≤\n\n'ab  guido'\n\n\n\ncount(): ËÆ°ÁÆóÂ≠êÂ≠óÁ¨¶‰∏≤Âá∫Áé∞ÁöÑÊ¨°Êï∞„ÄÇ\nreplace(): Â∞Ü‰∏Ä‰∏™Ê®°ÂºèÁöÑÂá∫Áé∞ÊõøÊç¢‰∏∫Âè¶‰∏Ä‰∏™Ê®°Âºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï---ÊÄªÁªì",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï---ÊÄªÁªì",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï - ÊÄªÁªì",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï - ÊÄªÁªì\n\nÂ∏∏ËßÅÂ≠óÁ¨¶‰∏≤Êìç‰ΩúÊ¶ÇËø∞„ÄÇ\n\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\ncount\nËøîÂõûÂ≠óÁ¨¶‰∏≤‰∏≠Â≠êÂ≠óÁ¨¶‰∏≤ÁöÑ‰∏çÈáçÂè†Âá∫Áé∞Ê¨°Êï∞\n\n\nendswith\nÂ¶ÇÊûúÂ≠óÁ¨¶‰∏≤‰ª•ÊåáÂÆöÂêéÁºÄÁªìÂ∞æÔºåÂàôËøîÂõû True\n\n\nstartswith\nÂ¶ÇÊûúÂ≠óÁ¨¶‰∏≤‰ª•ÊåáÂÆöÂâçÁºÄÂºÄÂ§¥ÔºåÂàôËøîÂõû True\n\n\njoin\n‰ΩøÁî®Â≠óÁ¨¶‰∏≤‰Ωú‰∏∫ÂàÜÈöîÁ¨¶ËøûÊé•ÂÖ∂‰ªñÂ≠óÁ¨¶‰∏≤Â∫èÂàó\n\n\nindex\nËøîÂõû‰º†ÈÄíÁöÑÂ≠êÂ≠óÁ¨¶‰∏≤Âú®Â≠óÁ¨¶‰∏≤‰∏≠Á¨¨‰∏ÄÊ¨°Âá∫Áé∞ÁöÑËµ∑ÂßãÁ¥¢ÂºïÔºõÂ¶ÇÊûúÊú™ÊâæÂà∞ÔºåÂàôÂºïÂèë ValueError ÂºÇÂ∏∏\n\n\nfind\nËøîÂõûÂ≠óÁ¨¶‰∏≤‰∏≠Â≠êÂ≠óÁ¨¶‰∏≤Á¨¨‰∏ÄÊ¨°Âá∫Áé∞ÁöÑÁ¨¨‰∏Ä‰∏™Â≠óÁ¨¶ÁöÑ‰ΩçÁΩÆÔºõÁ±ª‰ºº‰∫é indexÔºå‰ΩÜÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôËøîÂõû -1\n\n\nrfind\nËøîÂõûÂ≠óÁ¨¶‰∏≤‰∏≠Â≠êÂ≠óÁ¨¶‰∏≤ÊúÄÂêé‰∏ÄÊ¨°Âá∫Áé∞ÁöÑÁ¨¨‰∏Ä‰∏™Â≠óÁ¨¶ÁöÑ‰ΩçÁΩÆÔºõÂ¶ÇÊûúÊú™ÊâæÂà∞ÂàôËøîÂõû -1\n\n\nreplace\nÂ∞ÜÂ≠óÁ¨¶‰∏≤ÁöÑÂá∫Áé∞ÊõøÊç¢‰∏∫Âè¶‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤\n\n\nstrip\n‰øÆÂâ™‰∏§‰æßÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶ÔºåÂåÖÊã¨Êç¢Ë°åÁ¨¶\n\n\nrstrip\n‰øÆÂâ™Âè≥‰æßÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶\n\n\n\n#| echo: false\nimport re # ÂØºÂÖ•Ê≠£ÂàôË°®ËææÂºèÊ®°Âùó"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï---ÊÄªÁªì-Áª≠",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpython-ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï---ÊÄªÁªì-Áª≠",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï - ÊÄªÁªì (Áª≠)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöPython ÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï - ÊÄªÁªì (Áª≠)\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nlstrip\n‰øÆÂâ™Â∑¶‰æßÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶\n\n\nsplit\n‰ΩøÁî®‰º†ÈÄíÁöÑÂàÜÈöîÁ¨¶Â∞ÜÂ≠óÁ¨¶‰∏≤ÊãÜÂàÜ‰∏∫Â≠êÂ≠óÁ¨¶‰∏≤ÂàóË°®\n\n\nlower\nÂ∞ÜÂ≠óÊØçÂ≠óÁ¨¶ËΩ¨Êç¢‰∏∫Â∞èÂÜô\n\n\nupper\nÂ∞ÜÂ≠óÊØçÂ≠óÁ¨¶ËΩ¨Êç¢‰∏∫Â§ßÂÜô\n\n\ncasefold\nÂ∞ÜÂ≠óÁ¨¶ËΩ¨Êç¢‰∏∫Â∞èÂÜôÔºåÂ§ÑÁêÜÁâπÂÆö‰∫éÂå∫ÂüüÁöÑÂèò‰Ωì\n\n\nljust\nÂ∑¶ÂØπÈΩêÔºõ‰ΩøÁî®Á©∫Ê†º (ÊàñÂÖ∂‰ªñÂ°´ÂÖÖÂ≠óÁ¨¶) Â°´ÂÖÖÂè≥‰æß\n\n\nrjust\nÂè≥ÂØπÈΩêÔºõ‰ΩøÁî®Á©∫Ê†º (ÊàñÂÖ∂‰ªñÂ°´ÂÖÖÂ≠óÁ¨¶) Â°´ÂÖÖÂ∑¶‰æß"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºè",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºè",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºè",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºè\n\nÊ≠£ÂàôË°®ËææÂºè (regex) Êèê‰æõ‰∫Ü‰∏ÄÁßçÂº∫Â§ßÁöÑÊñπÊ≥ïÊù•ÊêúÁ¥¢„ÄÅÂåπÈÖçÂíåÊìç‰ΩúÊñáÊú¨Ê®°Âºè„ÄÇ\nPython ÁöÑÂÜÖÁΩÆ re Ê®°ÂùóÂ§ÑÁêÜÊ≠£ÂàôË°®ËææÂºè„ÄÇ\nÊ≠£ÂàôË°®ËææÂºèÂáΩÊï∞ÂàÜ‰∏∫‰∏âÁ±ªÔºö\n\nÊ®°ÂºèÂåπÈÖç„ÄÇ\nÊõøÊç¢„ÄÇ\nÊãÜÂàÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã---ÊãÜÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã---ÊãÜÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã - ÊãÜÂàÜ",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã - ÊãÜÂàÜ\n\nimport re # ÂØºÂÖ• re Ê®°Âùó\ntext = \"foo    bar\\t baz  \\tqux\" # ÂÆö‰πâ‰∏Ä‰∏™ÂåÖÂê´‰∏çÂêåÁ©∫ÁôΩÂ≠óÁ¨¶ÂàÜÈöîÁöÑÂ≠óÁ¨¶‰∏≤\nre.split(r\"\\s+\", text)  # ‰ΩøÁî® re.split() ÂíåÊ≠£ÂàôË°®ËææÂºè \"\\s+\" Â∞ÜÂ≠óÁ¨¶‰∏≤ÊãÜÂàÜ‰∏∫ÂàóË°®Ôºå\"\\s+\" ÂåπÈÖç‰∏Ä‰∏™ÊàñÂ§ö‰∏™Á©∫ÁôΩÂ≠óÁ¨¶\n\n['foo', 'bar', 'baz', 'qux']\n\n\n\n\\s+: ‰∏Ä‰∏™ÊàñÂ§ö‰∏™Á©∫ÁôΩÂ≠óÁ¨¶ÁöÑÊ≠£ÂàôË°®ËææÂºè„ÄÇ\nre.split(pattern, text): Ê†πÊçÆÊ≠£ÂàôË°®ËææÂºèÊ®°ÂºèÊãÜÂàÜÊñáÊú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÁºñËØëÊ≠£ÂàôË°®ËææÂºèÂØπË±°",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÁºñËØëÊ≠£ÂàôË°®ËææÂºèÂØπË±°",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÁºñËØëÊ≠£ÂàôË°®ËææÂºèÂØπË±°",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÁºñËØëÊ≠£ÂàôË°®ËææÂºèÂØπË±°\n\nregex = re.compile(r\"\\s+\")  # ‰ΩøÁî® re.compile() ÁºñËØëÊ≠£ÂàôË°®ËææÂºèÔºåÂàõÂª∫‰∏Ä‰∏™ÂèØÈáçÁî®ÁöÑÊ≠£ÂàôË°®ËææÂºèÂØπË±°\nregex.split(text) # ‰ΩøÁî®ÁºñËØëÂêéÁöÑÊ≠£ÂàôË°®ËææÂºèÂØπË±°ÊãÜÂàÜÊñáÊú¨\n\n['foo', 'bar', 'baz', 'qux']\n\n\n\nre.compile(pattern): Â∞ÜÊ≠£ÂàôË°®ËææÂºèÁºñËØë‰∏∫ÂèØÈáçÁî®ÁöÑÊ≠£ÂàôË°®ËææÂºèÂØπË±°„ÄÇ\nÂ¶ÇÊûúÊÇ®Â∞ÜÂØπÂ§ö‰∏™Â≠óÁ¨¶‰∏≤Â∫îÁî®Áõ∏ÂêåÁöÑÊ≠£ÂàôË°®ËææÂºèÔºåÂàôÂª∫ËÆÆ‰ΩøÁî® (ËäÇÁúÅ CPU Âë®Êúü)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúfindall",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúfindall",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöfindall()",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöfindall()\n\nregex.findall(text) # ‰ΩøÁî® .findall() ÊñπÊ≥ïÊü•ÊâæÂ≠óÁ¨¶‰∏≤‰∏≠ÊâÄÊúâÂåπÈÖçÊ≠£ÂàôË°®ËææÂºèÁöÑÂ≠êÂ≠óÁ¨¶‰∏≤\n\n['    ', '\\t ', '  \\t']\n\n\n\nfindall(): ËøîÂõûÂ≠óÁ¨¶‰∏≤‰∏≠ÊâÄÊúâ‰∏çÈáçÂè†ÁöÑÊ®°ÂºèÂåπÈÖçÈ°πÁöÑÂàóË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã---ÁîµÂ≠êÈÇÆ‰ª∂ÂåπÈÖç",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã---ÁîµÂ≠êÈÇÆ‰ª∂ÂåπÈÖç",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã - ÁîµÂ≠êÈÇÆ‰ª∂ÂåπÈÖç",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁ§∫‰æã - ÁîµÂ≠êÈÇÆ‰ª∂ÂåπÈÖç\n\ntext = \"\"\"Dave dave@google.com\nSteve steve@gmail.com\nRob rob@gmail.com\nRyan ryan@yahoo.com\"\"\" # ÂÆö‰πâ‰∏Ä‰∏™ÂåÖÂê´Â§ö‰∏™ÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁöÑÂ≠óÁ¨¶‰∏≤\n\npattern = r\"[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\"  # Áî®‰∫éÂåπÈÖçÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁöÑÂü∫Êú¨Ê≠£ÂàôË°®ËææÂºè\n\n# re.IGNORECASE ‰ΩøÊ≠£ÂàôË°®ËææÂºè‰∏çÂå∫ÂàÜÂ§ßÂ∞èÂÜô\nregex = re.compile(pattern, flags=re.IGNORECASE) # ÁºñËØëÊ≠£ÂàôË°®ËææÂºèÔºåÂπ∂ËÆæÁΩÆ re.IGNORECASE Ê†áÂøó‰ª•ÂøΩÁï•Â§ßÂ∞èÂÜô\n\n\n‰∏Ä‰∏™Êõ¥Â§çÊùÇÁöÑÊ≠£ÂàôË°®ËææÂºèÊù•ÂåπÈÖçÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄ„ÄÇ\nre.IGNORECASE Ê†áÂøó‰ΩøÂåπÈÖç‰∏çÂå∫ÂàÜÂ§ßÂ∞èÂÜô„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∏¶ÊúâÁîµÂ≠êÈÇÆ‰ª∂Ê≠£ÂàôË°®ËææÂºèÁöÑ-findall",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∏¶ÊúâÁîµÂ≠êÈÇÆ‰ª∂Ê≠£ÂàôË°®ËææÂºèÁöÑ-findall",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∏¶ÊúâÁîµÂ≠êÈÇÆ‰ª∂Ê≠£ÂàôË°®ËææÂºèÁöÑ findall()",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∏¶ÊúâÁîµÂ≠êÈÇÆ‰ª∂Ê≠£ÂàôË°®ËææÂºèÁöÑ findall()\n\nregex.findall(text) # ‰ΩøÁî® .findall() ÊñπÊ≥ïÊü•ÊâæÂ≠óÁ¨¶‰∏≤‰∏≠ÊâÄÊúâÂåπÈÖçÊ≠£ÂàôË°®ËææÂºèÁöÑÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄ\n\n['dave@google.com', 'steve@gmail.com', 'rob@gmail.com', 'ryan@yahoo.com']\n\n\n\nfindall() ËøîÂõûÊâÄÊúâÂåπÈÖçÁöÑÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁöÑÂàóË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúsearch-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúsearch-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºösearch() (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºösearch() (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nm = regex.search(text) # ‰ΩøÁî® .search() ÊñπÊ≥ïÊü•ÊâæÂ≠óÁ¨¶‰∏≤‰∏≠Á¨¨‰∏Ä‰∏™ÂåπÈÖçÊ≠£ÂàôË°®ËææÂºèÁöÑÂ≠êÂ≠óÁ¨¶‰∏≤\nm # ÊòæÁ§∫ÂåπÈÖçÂØπË±°\n\n&lt;re.Match object; span=(5, 20), match='dave@google.com'&gt;"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúsearch-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúsearch-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºösearch() (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºösearch() (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ntext[m.start():m.end()] # ‰ΩøÁî®ÂåπÈÖçÂØπË±°ÁöÑ .start() Âíå .end() ÊñπÊ≥ïËé∑ÂèñÂåπÈÖçÂ≠êÂ≠óÁ¨¶‰∏≤Âú®ÂéüÂßãÂ≠óÁ¨¶‰∏≤‰∏≠ÁöÑ‰ΩçÁΩÆ\n\n'dave@google.com'\n\n\n\nsearch(): ËøîÂõûÂ≠óÁ¨¶‰∏≤‰∏≠Á¨¨‰∏Ä‰∏™ÂåπÈÖçÈ°πÁöÑÂåπÈÖçÂØπË±°„ÄÇ\nÂåπÈÖçÂØπË±°Êèê‰æõÂåπÈÖçÁöÑÂºÄÂßãÂíåÁªìÊùü‰ΩçÁΩÆ„ÄÇ\nregex.match() ËøîÂõû None„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúsub",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúsub",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºösub()",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºösub()\n\nprint(regex.sub(\"REDACTED\", text)) # ‰ΩøÁî® .sub() ÊñπÊ≥ïÂ∞ÜÂåπÈÖçÊ≠£ÂàôË°®ËææÂºèÁöÑÂ≠êÂ≠óÁ¨¶‰∏≤ÊõøÊç¢‰∏∫Âè¶‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤\n\nDave REDACTED\nSteve REDACTED\nRob REDACTED\nRyan REDACTED\n\n\n\nsub(replacement, text): ËøîÂõû‰∏Ä‰∏™Êñ∞Â≠óÁ¨¶‰∏≤ÔºåÂÖ∂‰∏≠Ê®°ÂºèÁöÑÂá∫Áé∞Ë¢´ replacement Â≠óÁ¨¶‰∏≤ÊõøÊç¢„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁªÑ-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁªÑ-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁªÑ (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁªÑ (Á¨¨ 1 ÈÉ®ÂàÜ)\n\npattern = r\"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})\"  # Â∏¶ÊúâÊçïËé∑ÁªÑÁöÑÊ≠£ÂàôË°®ËææÂºè\nregex = re.compile(pattern, flags=re.IGNORECASE) # ÁºñËØëÊ≠£ÂàôË°®ËææÂºèÔºåÂπ∂ËÆæÁΩÆ re.IGNORECASE Ê†áÂøó\n\nm = regex.match(\"wesm@bright.net\") # ‰ΩøÁî® .match() ÊñπÊ≥ïÂåπÈÖçÂ≠óÁ¨¶‰∏≤ÁöÑÂºÄÂ§¥\nm.groups() # ‰ΩøÁî® .groups() ÊñπÊ≥ïËé∑ÂèñÊçïËé∑ÁªÑÁöÑÂÜÖÂÆπ\n\n('wesm', 'bright', 'net')\n\n\n\nÊ≠£ÂàôË°®ËææÂºè‰∏≠ÁöÑÊã¨Âè∑ () ÂÆö‰πâÊçïËé∑ÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁªÑ-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÁªÑ-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁªÑ (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÁªÑ (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nÂåπÈÖçÂØπË±°ÁöÑ groups() ÊñπÊ≥ïËøîÂõû‰∏Ä‰∏™ÂåÖÂê´ÊçïËé∑ÁªÑÂÜÖÂÆπÁöÑÂÖÉÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∏¶ÊúâÁªÑÁöÑ-findall",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∏¶ÊúâÁªÑÁöÑ-findall",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∏¶ÊúâÁªÑÁöÑ findall()",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∏¶ÊúâÁªÑÁöÑ findall()\n\nregex.findall(text) # ÂΩìÊ≠£ÂàôË°®ËææÂºèÂåÖÂê´ÊçïËé∑ÁªÑÊó∂Ôºå.findall() ÊñπÊ≥ïËøîÂõû‰∏Ä‰∏™ÂÖÉÁªÑÂàóË°®ÔºåÊØè‰∏™ÂÖÉÁªÑÂåÖÂê´ÊçïËé∑ÁªÑÁöÑÂÜÖÂÆπ\n\n[('dave', 'google', 'com'),\n ('steve', 'gmail', 'com'),\n ('rob', 'gmail', 'com'),\n ('ryan', 'yahoo', 'com')]\n\n\n\nÂΩìÊ≠£ÂàôË°®ËææÂºèÊúâÁªÑÊó∂Ôºåfindall() ËøîÂõû‰∏Ä‰∏™ÂÖÉÁªÑÂàóË°®ÔºåÂÖ∂‰∏≠ÊØè‰∏™ÂÖÉÁªÑÂåÖÂê´ÊçïËé∑ÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∏¶ÊúâÁªÑÂºïÁî®ÁöÑ-sub",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∏¶ÊúâÁªÑÂºïÁî®ÁöÑ-sub",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∏¶ÊúâÁªÑÂºïÁî®ÁöÑ sub()",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∏¶ÊúâÁªÑÂºïÁî®ÁöÑ sub()\n\nprint(regex.sub(r\"Username: \\1, Domain: \\2, Suffix: \\3\", text)) # Âú® .sub() ÊñπÊ≥ï‰∏≠ÔºåÂèØ‰ª•‰ΩøÁî® \\1„ÄÅ\\2 Á≠âÂºïÁî®ÊçïËé∑ÁªÑ\n\nDave Username: dave, Domain: google, Suffix: com\nSteve Username: steve, Domain: gmail, Suffix: com\nRob Username: rob, Domain: gmail, Suffix: com\nRyan Username: ryan, Domain: yahoo, Suffix: com\n\n\n\nÂú® sub() ‰∏≠Ôºå\\1„ÄÅ\\2 Á≠âÂºïÁî®ÊçïËé∑ÁªÑ (ÂèçÂêëÂºïÁî®)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÊñπÊ≥ï---ÊÄªÁªì",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊ≠£ÂàôË°®ËææÂºèÊñπÊ≥ï---ÊÄªÁªì",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÊñπÊ≥ï - ÊÄªÁªì",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÊ≠£ÂàôË°®ËææÂºèÊñπÊ≥ï - ÊÄªÁªì\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nfindall\n‰ª•ÂàóË°®ÂΩ¢ÂºèËøîÂõûÂ≠óÁ¨¶‰∏≤‰∏≠ÊâÄÊúâ‰∏çÈáçÂè†ÁöÑÂåπÈÖçÊ®°Âºè\n\n\nfinditer\nÁ±ª‰ºº‰∫é findallÔºå‰ΩÜËøîÂõû‰∏Ä‰∏™Ëø≠‰ª£Âô®\n\n\nmatch\nÂåπÈÖçÂ≠óÁ¨¶‰∏≤ÂºÄÂ§¥ÁöÑÊ®°ÂºèÔºåÂπ∂ÂèØÈÄâÊã©Â∞ÜÊ®°ÂºèÁªÑ‰ª∂ÂàÜÊÆµÂà∞ÁªÑ‰∏≠ÔºõÂ¶ÇÊûúÊ®°ÂºèÂåπÈÖçÔºåÂàôËøîÂõû‰∏Ä‰∏™ÂåπÈÖçÂØπË±°ÔºåÂê¶ÂàôËøîÂõû None\n\n\nsearch\nÊâ´ÊèèÂ≠óÁ¨¶‰∏≤‰ª•Êü•Êâæ‰∏éÊ®°ÂºèÂåπÈÖçÁöÑÂ≠êÂ≠óÁ¨¶‰∏≤ÔºåÂ¶ÇÊûúÊâæÂà∞ÂàôËøîÂõû‰∏Ä‰∏™ÂåπÈÖçÂØπË±°Ôºõ‰∏é match ‰∏çÂêåÔºåÂåπÈÖçÂèØ‰ª•Âú®Â≠óÁ¨¶‰∏≤‰∏≠ÁöÑ‰ªª‰Ωï‰ΩçÁΩÆ\n\n\nsplit\nÂú®Ê®°ÂºèÁöÑÊØèÊ¨°Âá∫Áé∞Â§ÑÂ∞ÜÂ≠óÁ¨¶‰∏≤ÊãÜÂàÜ‰∏∫Â§ö‰∏™ÁâáÊÆµ\n\n\nsub, subn\nÂ∞ÜÂ≠óÁ¨¶‰∏≤‰∏≠Ê®°ÂºèÁöÑÊâÄÊúâÂá∫Áé∞ (sub) ÊàñÂâç n Ê¨°Âá∫Áé∞ (subn) ÊõøÊç¢‰∏∫ÊõøÊç¢Ë°®ËææÂºèÔºõ‰ΩøÁî®Á¨¶Âè∑ \\1„ÄÅ\\2 Á≠â"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpandas-‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤ÂáΩÊï∞",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúpandas-‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤ÂáΩÊï∞",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöpandas ‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤ÂáΩÊï∞",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöpandas ‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤ÂáΩÊï∞\n\nPandas Â∞ÜÂ≠óÁ¨¶‰∏≤Êìç‰ΩúÊâ©Â±ïÂà∞ Series Âíå DataFrame„ÄÇ\n‰ºòÈõÖÂú∞Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÇ\n\n\ndata = {\"Dave\": \"dave@google.com\", \"Steve\": \"steve@gmail.com\",\n        \"Rob\": \"rob@gmail.com\", \"Wes\": np.nan} # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÂíåÁº∫Â§±ÂÄºÁöÑÂ≠óÂÖ∏\ndata = pd.Series(data) # Â∞ÜÂ≠óÂÖ∏ËΩ¨Êç¢‰∏∫ Series\ndata # ÊòæÁ§∫ Series\n\nDave     dave@google.com\nSteve    steve@gmail.com\nRob        rob@gmail.com\nWes                  NaN\ndtype: object\n\n\n\ndata.isna() # Ê£ÄÊü•Áº∫Â§±ÂÄº\n\nDave     False\nSteve    False\nRob      False\nWes       True\ndtype: bool\n\n\n\nÂåÖÂê´Â≠óÁ¨¶‰∏≤Êï∞ÊçÆÂíåÁº∫Â§±ÂÄºÁöÑÁ§∫‰æã Series„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωústr-ËÆøÈóÆÂô®",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωústr-ËÆøÈóÆÂô®",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöstr ËÆøÈóÆÂô®",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöstr ËÆøÈóÆÂô®\n\ndata.str.contains(\"gmail\") # ‰ΩøÁî® .str.contains() ÊñπÊ≥ïÊ£ÄÊü•ÊØè‰∏™Â≠óÁ¨¶‰∏≤ÊòØÂê¶ÂåÖÂê´ \"gmail\"\n\nDave     False\nSteve     True\nRob       True\nWes        NaN\ndtype: object\n\n\n\nSeries Êúâ‰∏Ä‰∏™ str Â±ûÊÄßÔºåÊèê‰æõÂØπÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ïÁöÑËÆøÈóÆ„ÄÇ\nËøô‰∫õÊñπÊ≥ï‰ºöË∑≥ËøáÂπ∂‰º†Êí≠ NA ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωústr.contains",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωústr.contains",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöstr.contains()",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöstr.contains()\n\nstr.contains(substring): Ê£ÄÊü•ÊØè‰∏™Â≠óÁ¨¶‰∏≤ÊòØÂê¶ÂåÖÂê´ÁªôÂÆöÁöÑÂ≠êÂ≠óÁ¨¶‰∏≤„ÄÇ\nËøîÂõû‰∏Ä‰∏™Â∏ÉÂ∞î Series„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∞ÜÊ≠£ÂàôË°®ËææÂºè‰∏é-str-ÊñπÊ≥ï‰∏ÄËµ∑‰ΩøÁî®",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂ∞ÜÊ≠£ÂàôË°®ËææÂºè‰∏é-str-ÊñπÊ≥ï‰∏ÄËµ∑‰ΩøÁî®",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∞ÜÊ≠£ÂàôË°®ËææÂºè‰∏é str ÊñπÊ≥ï‰∏ÄËµ∑‰ΩøÁî®",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂ∞ÜÊ≠£ÂàôË°®ËææÂºè‰∏é str ÊñπÊ≥ï‰∏ÄËµ∑‰ΩøÁî®\n\npattern = r\"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})\" # ÂÆö‰πâÁî®‰∫éÂåπÈÖçÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄÁöÑÊ≠£ÂàôË°®ËææÂºè\ndata.str.findall(pattern, flags=re.IGNORECASE) # Â∞ÜÊ≠£ÂàôË°®ËææÂºè‰∏é .str.findall() ÊñπÊ≥ï‰∏ÄËµ∑‰ΩøÁî®ÔºåÂπ∂ËÆæÁΩÆ re.IGNORECASE Ê†áÂøó\n\nDave     [(dave, google, com)]\nSteve    [(steve, gmail, com)]\nRob        [(rob, gmail, com)]\nWes                        NaN\ndtype: object\n\n\n\nÊ≠£ÂàôË°®ËææÂºèÂèØ‰ª•‰∏é str ÊñπÊ≥ï‰∏ÄËµ∑‰ΩøÁî®„ÄÇ\nÂèØ‰ª•‰º†ÈÄí flags (Â¶Ç re.IGNORECASE)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢ (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢ (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nmatches = data.str.findall(pattern, flags=re.IGNORECASE).str[0] # ‰ΩøÁî® .str.findall() Êü•ÊâæÂåπÈÖçÈ°πÔºåÁÑ∂Âêé‰ΩøÁî® .str[0] Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™ÂåπÈÖçÈ°π\nmatches # ÊòæÁ§∫ÂåπÈÖçÈ°π\n\nDave     (dave, google, com)\nSteve    (steve, gmail, com)\nRob        (rob, gmail, com)\nWes                      NaN\ndtype: object\n\n\n\nmatches.str.get(1) # ‰ΩøÁî® .str.get(1) ËÆøÈóÆÂåπÈÖçÈ°πÁöÑÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†\n\nDave     google\nSteve     gmail\nRob       gmail\nWes         NaN\ndtype: object"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰ΩúÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢ (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢ (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndata.str[:5]  # Â≠óÁ¨¶‰∏≤ÂàáÁâá\n\nDave     dave@\nSteve    steve\nRob      rob@g\nWes        NaN\ndtype: object\n\n\n\nÂêëÈáèÂåñÂÖÉÁ¥†Ê£ÄÁ¥¢Ôºö‰ΩøÁî® str.get(i) ÊàñÁ¥¢ÂºïÂà∞ str Â±ûÊÄß (str[i])„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωústr.extract",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωústr.extract",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöstr.extract()",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöstr.extract()\n\ndata.str.extract(pattern, flags=re.IGNORECASE) # ‰ΩøÁî® .str.extract() ÊñπÊ≥ïÊèêÂèñÊçïËé∑ÁªÑÔºåÊØè‰∏™ÊçïËé∑ÁªÑÊàê‰∏∫ DataFrame ‰∏≠ÁöÑ‰∏ÄÂàó\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\nDave\ndave\ngoogle\ncom\n\n\nSteve\nsteve\ngmail\ncom\n\n\nRob\nrob\ngmail\ncom\n\n\nWes\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nstr.extract(pattern): ËøîÂõû‰∏Ä‰∏™ DataFrameÔºåÂÖ∂‰∏≠Ê≠£ÂàôË°®ËææÂºè‰∏≠ÁöÑÊØè‰∏™ÊçïËé∑ÁªÑÈÉΩÊàê‰∏∫‰∏ÄÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúseries-Â≠óÁ¨¶‰∏≤ÊñπÊ≥ïÈÉ®ÂàÜÂàóË°®---ÊÄªÁªì",
    "href": "qmd/pandas3ed7cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωúseries-Â≠óÁ¨¶‰∏≤ÊñπÊ≥ïÈÉ®ÂàÜÂàóË°®---ÊÄªÁªì",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöSeries Â≠óÁ¨¶‰∏≤ÊñπÊ≥ïÈÉ®ÂàÜÂàóË°® - ÊÄªÁªì",
    "text": "7.4 Â≠óÁ¨¶‰∏≤Êìç‰ΩúÔºöSeries Â≠óÁ¨¶‰∏≤ÊñπÊ≥ïÈÉ®ÂàÜÂàóË°® - ÊÄªÁªì\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\ncat\n‰ΩøÁî®ÂèØÈÄâÁöÑÂàÜÈöîÁ¨¶ÈÄêÂÖÉÁ¥†ËøûÊé•Â≠óÁ¨¶‰∏≤\n\n\ncontains\nÂ¶ÇÊûúÊØè‰∏™Â≠óÁ¨¶‰∏≤ÈÉΩÂåÖÂê´Ê®°Âºè/Ê≠£ÂàôË°®ËææÂºèÔºåÂàôËøîÂõûÂ∏ÉÂ∞îÊï∞ÁªÑ\n\n\ncount\nËÆ°ÁÆóÊ®°Âºè\n\n\nextract\n‰ΩøÁî®Â∏¶ÊúâÁªÑÁöÑÊ≠£ÂàôË°®ËææÂºè‰ªéÂ≠óÁ¨¶‰∏≤ Series ‰∏≠ÊèêÂèñ‰∏Ä‰∏™ÊàñÂ§ö‰∏™Â≠óÁ¨¶‰∏≤ÔºõÁªìÊûúÂ∞ÜÊòØ‰∏Ä‰∏™ DataFrameÔºåÊØè‰∏™ÁªÑ‰∏ÄÂàó\n\n\nendswith\nÁ≠âÊïà‰∫éÂØπÊØè‰∏™ÂÖÉÁ¥†ÊâßË°å x.endswith(pattern)\n\n\nstartswith\nÁ≠âÊïà‰∫éÂØπÊØè‰∏™ÂÖÉÁ¥†ÊâßË°å x.startswith(pattern)\n\n\nfindall\nËÆ°ÁÆóÊØè‰∏™Â≠óÁ¨¶‰∏≤ÁöÑÊâÄÊúâÊ®°Âºè/Ê≠£ÂàôË°®ËææÂºèÂåπÈÖçÈ°πÁöÑÂàóË°®\n\n\nget\nÁ¥¢ÂºïÂà∞ÊØè‰∏™ÂÖÉÁ¥† (Ê£ÄÁ¥¢Á¨¨ i ‰∏™ÂÖÉÁ¥†)\n\n\nisalnum\nÁ≠âÊïà‰∫éÂÜÖÁΩÆÁöÑ str.isalnum\n\n\nisalpha\nÁ≠âÊïà‰∫éÂÜÖÁΩÆÁöÑ str.isalpha\n\n\nisdecimal\nÁ≠âÊïà‰∫éÂÜÖÁΩÆÁöÑ str.isdecimal\n\n\nisdigit\nÁ≠âÊïà‰∫éÂÜÖÁΩÆÁöÑ str.isdigit\n\n\nislower\nÁ≠âÊïà‰∫éÂÜÖÁΩÆÁöÑ str.islower\n\n\nisnumeric\nÁ≠âÊïà‰∫éÂÜÖÁΩÆÁöÑ str.isnumeric\n\n\nisupper\nÁ≠âÊïà‰∫éÂÜÖÁΩÆÁöÑ str.isupper\n\n\njoin\n‰ΩøÁî®‰º†ÈÄíÁöÑÂàÜÈöîÁ¨¶ËøûÊé• Series ‰∏≠ÊØè‰∏™ÂÖÉÁ¥†‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤\n\n\nlen\nËÆ°ÁÆóÊØè‰∏™Â≠óÁ¨¶‰∏≤ÁöÑÈïøÂ∫¶\n\n\nlower, upper\nËΩ¨Êç¢Â§ßÂ∞èÂÜôÔºõÁ≠âÊïà‰∫éÂØπÊØè‰∏™ÂÖÉÁ¥†ÊâßË°å x.lower() Êàñ x.upper()\n\n\nmatch\nÂØπÊØè‰∏™ÂÖÉÁ¥†‰ΩøÁî® re.match Âíå‰º†ÈÄíÁöÑÊ≠£ÂàôË°®ËææÂºèÔºåËøîÂõû True Êàñ False Ë°®Á§∫ÊòØÂê¶ÂåπÈÖç\n\n\npad\nÂú®Â≠óÁ¨¶‰∏≤ÁöÑÂ∑¶‰æß„ÄÅÂè≥‰æßÊàñ‰∏§‰æßÊ∑ªÂä†Á©∫ÁôΩÂ≠óÁ¨¶\n\n\ncenter\nÁ≠âÊïà‰∫é pad(side=\"both\")\n\n\nrepeat\nÂ§çÂà∂ÂÄº (‰æãÂ¶ÇÔºås.str.repeat(3) Á≠âÊïà‰∫éÂØπÊØè‰∏™Â≠óÁ¨¶‰∏≤ÊâßË°å x * 3)\n\n\nreplace\nÂ∞ÜÊ®°Âºè/Ê≠£ÂàôË°®ËææÂºèÁöÑÂá∫Áé∞ÊõøÊç¢‰∏∫ÂÖ∂‰ªñÂ≠óÁ¨¶‰∏≤\n\n\nslice\nÂØπ Series ‰∏≠ÁöÑÊØè‰∏™Â≠óÁ¨¶‰∏≤ËøõË°åÂàáÁâá\n\n\nsplit\n‰ΩøÁî®ÂàÜÈöîÁ¨¶ÊàñÊ≠£ÂàôË°®ËææÂºèÊãÜÂàÜÂ≠óÁ¨¶‰∏≤\n\n\nstrip\n‰øÆÂâ™‰∏§‰æßÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶ÔºåÂåÖÊã¨Êç¢Ë°åÁ¨¶\n\n\nrstrip\n‰øÆÂâ™Âè≥‰æßÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶\n\n\nlstrip\n‰øÆÂâ™Â∑¶‰æßÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆ",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆ\n\n‰ªãÁªç pandas Categorical Á±ªÂûã„ÄÇ\nÊèêÈ´òÊüê‰∫õ pandas Êìç‰ΩúÁöÑÊÄßËÉΩÂíåÂÜÖÂ≠ò‰ΩøÁî®„ÄÇ\nÂØπÁªüËÆ°ÂíåÊú∫Âô®Â≠¶‰π†Â∫îÁî®ÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËÉåÊôØÂíåÂä®Êú∫-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËÉåÊôØÂíåÂä®Êú∫-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËÉåÊôØÂíåÂä®Êú∫ (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËÉåÊôØÂíåÂä®Êú∫ (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nÂàóÈÄöÂ∏∏ÂåÖÂê´‰∏ÄÁªÑËæÉÂ∞èÁöÑ‰∏çÂêåÂÄºÁöÑÈáçÂ§çÂÆû‰æã„ÄÇ\nÁª¥Â∫¶Ë°®ÊòØÊï∞ÊçÆ‰ªìÂ∫ì‰∏≠ÁöÑ‰∏ÄÁßçÂ∏∏Áî®ÊäÄÊúØ„ÄÇ\n\n‰∏çÂêåÂÄºÂ≠òÂÇ®Âú®Áª¥Â∫¶Ë°®‰∏≠„ÄÇ\n‰∏ªË¶ÅËßÇÊµãÂÄºÂ≠òÂÇ®‰∏∫ÂºïÁî®Áª¥Â∫¶Ë°®ÁöÑÊï¥Êï∞ÈîÆ„ÄÇ\n\nÊõ¥È´òÊïàÁöÑÂ≠òÂÇ®ÂíåËÆ°ÁÆó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËÉåÊôØÂíåÂä®Êú∫-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËÉåÊôØÂíåÂä®Êú∫-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËÉåÊôØÂíåÂä®Êú∫ (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËÉåÊôØÂíåÂä®Êú∫ (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nvalues = pd.Series(['apple', 'orange', 'apple',\n                    'apple'] * 2) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÈáçÂ§çÂ≠óÁ¨¶‰∏≤ÁöÑ Series\nvalues # ÊòæÁ§∫ Series\n\n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\ndtype: object\n\n\n\npd.unique(values) # ‰ΩøÁî® pd.unique() Ëé∑Âèñ Series ‰∏≠ÁöÑÂîØ‰∏ÄÂÄº\n\narray(['apple', 'orange'], dtype=object)\n\n\n\npd.value_counts(values) # ‰ΩøÁî® pd.value_counts() ÁªüËÆ°ÊØè‰∏™ÂîØ‰∏ÄÂÄºÁöÑÂá∫Áé∞Ê¨°Êï∞\n\n/tmp/ipykernel_2752/2641125703.py:1: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n  pd.value_counts(values) # ‰ΩøÁî® pd.value_counts() ÁªüËÆ°ÊØè‰∏™ÂîØ‰∏ÄÂÄºÁöÑÂá∫Áé∞Ê¨°Êï∞\n\n\napple     6\norange    2\nName: count, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÁª¥Â∫¶Ë°®Ë°®Á§∫-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÁª¥Â∫¶Ë°®Ë°®Á§∫-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÁª¥Â∫¶Ë°®Ë°®Á§∫ (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÁª¥Â∫¶Ë°®Ë°®Á§∫ (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nvalues = pd.Series([0, 1, 0, 0] * 2) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´Êï¥Êï∞ÈîÆÁöÑ Series\ndim = pd.Series(['apple', 'orange']) # ÂàõÂª∫‰∏Ä‰∏™Áª¥Â∫¶Ë°® Series\nvalues # ÊòæÁ§∫Êï¥Êï∞ÈîÆ Series\n\n0    0\n1    1\n2    0\n3    0\n4    0\n5    1\n6    0\n7    0\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÁª¥Â∫¶Ë°®Ë°®Á§∫-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÁª¥Â∫¶Ë°®Ë°®Á§∫-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÁª¥Â∫¶Ë°®Ë°®Á§∫ (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÁª¥Â∫¶Ë°®Ë°®Á§∫ (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ndim # ÊòæÁ§∫Áª¥Â∫¶Ë°®\n\n0     apple\n1    orange\ndtype: object\n\n\n\nvalues: ÂºïÁî®Áª¥Â∫¶Ë°®ÁöÑÊï¥Êï∞ÈîÆ„ÄÇ\ndim: ÂåÖÂê´‰∏çÂêåÂÄºÁöÑÁª¥Â∫¶Ë°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ‰ΩøÁî®-take-ÊÅ¢Â§çÂéüÂßãÊï∞ÊçÆ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ‰ΩøÁî®-take-ÊÅ¢Â§çÂéüÂßãÊï∞ÊçÆ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºö‰ΩøÁî® take() ÊÅ¢Â§çÂéüÂßãÊï∞ÊçÆ",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºö‰ΩøÁî® take() ÊÅ¢Â§çÂéüÂßãÊï∞ÊçÆ\n\ndim.take(values) # ‰ΩøÁî® .take() ÊñπÊ≥ïÂíåÊï¥Êï∞ÈîÆ‰ªéÁª¥Â∫¶Ë°®‰∏≠ÊÅ¢Â§çÂéüÂßãÂ≠óÁ¨¶‰∏≤ Series\n\n0     apple\n1    orange\n0     apple\n0     apple\n0     apple\n1    orange\n0     apple\n0     apple\ndtype: object\n\n\n\ntake() ÊñπÊ≥ïÂèØÁî®‰∫éÊÅ¢Â§çÂéüÂßãÂ≠óÁ¨¶‰∏≤ Series„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊúØËØ≠",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊúØËØ≠",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊúØËØ≠",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊúØËØ≠\n\nÂàÜÁ±ªÊàñÂ≠óÂÖ∏ÁºñÁ†ÅË°®Á§∫Ôºö‰ΩøÁî®Êï¥Êï∞Ë°®Á§∫ÂÖ∑ÊúâÈáçÂ§çÂÄºÁöÑÊï∞ÊçÆ„ÄÇ\nÁ±ªÂà´„ÄÅÂ≠óÂÖ∏ÊàñÁ∫ßÂà´Ôºö‰∏çÂêåÂÄºÁöÑÊï∞ÁªÑ„ÄÇ\nÁ±ªÂà´‰ª£Á†ÅÊàñ‰ª£Á†ÅÔºöÂºïÁî®Á±ªÂà´ÁöÑÊï¥Êï∞ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ‰ºòÁÇπ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ‰ºòÁÇπ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºö‰ºòÁÇπ",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºö‰ºòÁÇπ\n\nÊòæËëóÊèêÈ´òÂàÜÊûêÊÄßËÉΩ„ÄÇ\nÂú®‰øùÊåÅ‰ª£Á†Å‰∏çÂèòÁöÑÊÉÖÂÜµ‰∏ãÂØπÁ±ªÂà´ËøõË°åËΩ¨Êç¢„ÄÇ\n\nÈáçÂëΩÂêçÁ±ªÂà´„ÄÇ\nËøΩÂä†Êñ∞Á±ªÂà´„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆpandas-‰∏≠ÁöÑ-categorical-Êâ©Â±ïÁ±ªÂûã-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆpandas-‰∏≠ÁöÑ-categorical-Êâ©Â±ïÁ±ªÂûã-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöpandas ‰∏≠ÁöÑ Categorical Êâ©Â±ïÁ±ªÂûã (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöpandas ‰∏≠ÁöÑ Categorical Êâ©Â±ïÁ±ªÂûã (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nfruits = ['apple', 'orange', 'apple', 'apple'] * 2 # ÂàõÂª∫‰∏Ä‰∏™Ê∞¥ÊûúÂàóË°®\nN = len(fruits) # ËÆ°ÁÆóÂàóË°®ÈïøÂ∫¶\nrng = np.random.default_rng(seed=12345) # ÂàõÂª∫‰∏Ä‰∏™ÈöèÊú∫Êï∞ÁîüÊàêÂô®ÔºåÂπ∂ËÆæÁΩÆÁßçÂ≠ê‰ª•Á°Æ‰øùÁªìÊûúÂèØÈáçÂ§ç\ndf = pd.DataFrame({'fruit': fruits,\n                   'basket_id': np.arange(N),\n                   'count': rng.integers(3, 15, size=N),\n                   'weight': rng.uniform(0, 4, size=N)},\n                  columns=['basket_id', 'fruit', 'count', 'weight']) # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\ndf # ÊòæÁ§∫ DataFrame\n\n\n\n\n\n\n\n\nbasket_id\nfruit\ncount\nweight\n\n\n\n\n0\n0\napple\n11\n1.564438\n\n\n1\n1\norange\n5\n1.331256\n\n\n2\n2\napple\n12\n2.393235\n\n\n3\n3\napple\n6\n0.746937\n\n\n4\n4\napple\n5\n2.691024\n\n\n5\n5\norange\n12\n3.767211\n\n\n6\n6\napple\n10\n0.992983\n\n\n7\n7\napple\n11\n3.795525\n\n\n\n\n\n\n\n\nÂåÖÂê´ ‚Äúfruit‚Äù Âàó (Â≠óÁ¨¶‰∏≤ÂØπË±°) ÁöÑÁ§∫‰æã DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËΩ¨Êç¢‰∏∫-categorical",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËΩ¨Êç¢‰∏∫-categorical",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËΩ¨Êç¢‰∏∫ Categorical",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËΩ¨Êç¢‰∏∫ Categorical\n\nfruit_cat = df['fruit'].astype('category') # ‰ΩøÁî® .astype('category') Â∞Ü \"fruit\" ÂàóËΩ¨Êç¢‰∏∫ Categorical Á±ªÂûã\nfruit_cat # ÊòæÁ§∫ËΩ¨Êç¢ÂêéÁöÑ Series\n\n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\nName: fruit, dtype: category\nCategories (2, object): ['apple', 'orange']\n\n\n\nastype('category'): Â∞ÜÂàóËΩ¨Êç¢‰∏∫ Categorical Á±ªÂûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËÆøÈóÆ-categorical-ÂØπË±°",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËÆøÈóÆ-categorical-ÂØπË±°",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËÆøÈóÆ Categorical ÂØπË±°",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËÆøÈóÆ Categorical ÂØπË±°\n\nc = fruit_cat.array # ‰ΩøÁî® .array Â±ûÊÄßËÆøÈóÆÂ∫ïÂ±ÇÁöÑ Categorical ÂØπË±°\ntype(c) # Êü•ÁúãÂØπË±°ÁöÑÁ±ªÂûã\n\npandas.core.arrays.categorical.Categorical\n\n\n\n.array Â±ûÊÄßËÆøÈóÆÂ∫ïÂ±ÇÁöÑ Categorical ÂØπË±°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆcategories-Âíå-codes-Â±ûÊÄß-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆcategories-Âíå-codes-Â±ûÊÄß-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöcategories Âíå codes Â±ûÊÄß (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöcategories Âíå codes Â±ûÊÄß (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nc.categories # Êü•Áúã Categorical ÂØπË±°ÁöÑÁ±ªÂà´\n\nIndex(['apple', 'orange'], dtype='object')\n\n\n\nc.codes # Êü•Áúã Categorical ÂØπË±°ÁöÑ‰ª£Á†Å\n\narray([0, 1, 0, 0, 0, 1, 0, 0], dtype=int8)\n\n\n\ncategories: ‰∏çÂêåÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆcategories-Âíå-codes-Â±ûÊÄß-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆcategories-Âíå-codes-Â±ûÊÄß-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöcategories Âíå codes Â±ûÊÄß (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöcategories Âíå codes Â±ûÊÄß (Á¨¨ 2 ÈÉ®ÂàÜ)\n\ncodes: Ë°®Á§∫ÊØè‰∏™ÂÄºÁ±ªÂà´ÁöÑÊï¥Êï∞‰ª£Á†Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËΩ¨Êç¢-dataframe-Âàó",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆËΩ¨Êç¢-dataframe-Âàó",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËΩ¨Êç¢ DataFrame Âàó",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöËΩ¨Êç¢ DataFrame Âàó\n\ndf['fruit'] = df['fruit'].astype('category') # Â∞Ü DataFrame ÁöÑ \"fruit\" ÂàóËΩ¨Êç¢‰∏∫ Categorical Á±ªÂûã\ndf[\"fruit\"] # ÊòæÁ§∫ËΩ¨Êç¢ÂêéÁöÑÂàó\n\n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\nName: fruit, dtype: category\nCategories (2, object): ['apple', 'orange']\n\n\n\nÈÄöËøáÂàÜÈÖç astype('category') ÁöÑÁªìÊûúÔºåÂ∞Ü DataFrame ÂàóËΩ¨Êç¢‰∏∫ÂàÜÁ±ª„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÁõ¥Êé•ÂàõÂª∫-categorical",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÁõ¥Êé•ÂàõÂª∫-categorical",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÁõ¥Êé•ÂàõÂª∫ Categorical",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÁõ¥Êé•ÂàõÂª∫ Categorical\n\nmy_categories = pd.Categorical(['foo', 'bar', 'baz', 'foo', 'bar']) # Áõ¥Êé•‰ªé Python Â∫èÂàóÂàõÂª∫ Categorical ÂØπË±°\nmy_categories # ÊòæÁ§∫ Categorical ÂØπË±°\n\n['foo', 'bar', 'baz', 'foo', 'bar']\nCategories (3, object): ['bar', 'baz', 'foo']\n\n\n\nÁõ¥Êé•‰ªé Python Â∫èÂàóÂàõÂª∫ Categorical ÂØπË±°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆfrom_codes-ÊûÑÈÄ†ÂáΩÊï∞",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆfrom_codes-ÊûÑÈÄ†ÂáΩÊï∞",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöfrom_codes() ÊûÑÈÄ†ÂáΩÊï∞",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöfrom_codes() ÊûÑÈÄ†ÂáΩÊï∞\n\ncategories = ['foo', 'bar', 'baz'] # ÂÆö‰πâÁ±ªÂà´\ncodes = [0, 1, 2, 0, 0, 1] # ÂÆö‰πâ‰ª£Á†Å\nmy_cats_2 = pd.Categorical.from_codes(codes, categories) # ‰ΩøÁî® .from_codes() ÊûÑÈÄ†ÂáΩÊï∞‰ªé‰ª£Á†ÅÂíåÁ±ªÂà´ÂàõÂª∫ Categorical ÂØπË±°\nmy_cats_2 # ÊòæÁ§∫ Categorical ÂØπË±°\n\n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo', 'bar', 'baz']\n\n\n\nfrom_codes(codes, categories): ‰ªéÁé∞Êúâ‰ª£Á†ÅÂíåÁ±ªÂà´ÂàõÂª∫ Categorical„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊúâÂ∫èÁ±ªÂà´-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊúâÂ∫èÁ±ªÂà´-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊúâÂ∫èÁ±ªÂà´ (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊúâÂ∫èÁ±ªÂà´ (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nordered_cat = pd.Categorical.from_codes(codes, categories,\n                                        ordered=True) # ‰ΩøÁî® ordered=True ÂèÇÊï∞ÂàõÂª∫ÊúâÂ∫è Categorical ÂØπË±°\nordered_cat # ÊòæÁ§∫ÊúâÂ∫è Categorical ÂØπË±°\n\n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo' &lt; 'bar' &lt; 'baz']"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊúâÂ∫èÁ±ªÂà´-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊúâÂ∫èÁ±ªÂà´-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊúâÂ∫èÁ±ªÂà´ (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊúâÂ∫èÁ±ªÂà´ (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nmy_cats_2.as_ordered() # ‰ΩøÁî® .as_ordered() ÊñπÊ≥ïÂ∞ÜÊó†Â∫è Categorical ÂØπË±°ËΩ¨Êç¢‰∏∫ÊúâÂ∫è\n\n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo' &lt; 'bar' &lt; 'baz']\n\n\n\nordered=True: ÊåáÁ§∫Á±ªÂà´ÂÖ∑ÊúâÊúâÊÑè‰πâÁöÑÈ°∫Â∫è„ÄÇ\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÁ±ªÂà´ÊòØÊó†Â∫èÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ‰ΩøÁî®-categorical-ËøõË°åËÆ°ÁÆó-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆ‰ΩøÁî®-categorical-ËøõË°åËÆ°ÁÆó-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºö‰ΩøÁî® Categorical ËøõË°åËÆ°ÁÆó (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºö‰ΩøÁî® Categorical ËøõË°åËÆ°ÁÆó (Á¨¨ 1 ÈÉ®ÂàÜ)\n\n‰ΩøÁî® Categorical ÁöÑË°å‰∏∫ÈÄöÂ∏∏‰∏éÈùûÁºñÁ†ÅÁâàÊú¨ (‰æãÂ¶ÇÔºåÂ≠óÁ¨¶‰∏≤Êï∞ÁªÑ) Áõ∏Âêå„ÄÇ\nÊüê‰∫õ pandas ÂáΩÊï∞ (Â¶Ç groupby) Âú®‰ΩøÁî®ÂàÜÁ±ªÊó∂ÊÄßËÉΩÊõ¥Â•Ω„ÄÇ\n\n\nrng = np.random.default_rng(seed=12345) # ÂàõÂª∫‰∏Ä‰∏™ÈöèÊú∫Êï∞ÁîüÊàêÂô®\ndraws = rng.standard_normal(1000) # ÁîüÊàê 1000 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞\ndraws[:5] # ÊòæÁ§∫Ââç 5 ‰∏™ÈöèÊú∫Êï∞\n\narray([-1.42382504,  1.26372846, -0.87066174, -0.25917323, -0.07534331])"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆqcut-Âíå-categorical-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆqcut-Âíå-categorical-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöqcut() Âíå Categorical (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöqcut() Âíå Categorical (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nbins = pd.qcut(draws, 4) # ‰ΩøÁî® pd.qcut() Â∞ÜÊï∞ÊçÆÂàÜÊàêÂõõÂàÜ‰ΩçÊï∞\nbins # ÊòæÁ§∫ÂàÜÁÆ±ÁªìÊûúÔºåËøîÂõû‰∏Ä‰∏™ Categorical ÂØπË±°\n\n[(-3.121, -0.675], (0.687, 3.211], (-3.121, -0.675], (-0.675, 0.0134], (-0.675, 0.0134], ..., (0.0134, 0.687], (0.0134, 0.687], (-0.675, 0.0134], (0.0134, 0.687], (-0.675, 0.0134]]\nLength: 1000\nCategories (4, interval[float64, right]): [(-3.121, -0.675] &lt; (-0.675, 0.0134] &lt; (0.0134, 0.687] &lt; (0.687, 3.211]]"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆqcut-Âíå-categorical-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆqcut-Âíå-categorical-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöqcut() Âíå Categorical (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöqcut() Âíå Categorical (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nbins = pd.qcut(draws, 4, labels=['Q1', 'Q2', 'Q3', 'Q4']) # ‰ΩøÁî® labels ÂèÇÊï∞‰∏∫ÂõõÂàÜ‰ΩçÊï∞Ê∑ªÂä†Ê†áÁ≠æ\nbins # ÊòæÁ§∫Â∏¶ÊúâÊ†áÁ≠æÁöÑÂàÜÁÆ±ÁªìÊûú\n\n['Q1', 'Q4', 'Q1', 'Q2', 'Q2', ..., 'Q3', 'Q3', 'Q2', 'Q3', 'Q2']\nLength: 1000\nCategories (4, object): ['Q1' &lt; 'Q2' &lt; 'Q3' &lt; 'Q4']\n\n\n\nbins.codes[:10] # Êü•ÁúãÂâç 10 ‰∏™Êï∞ÊçÆÂØπÂ∫îÁöÑÂàÜ‰ΩçÊï∞‰ª£Á†Å\n\narray([0, 3, 0, 1, 1, 0, 0, 2, 2, 0], dtype=int8)\n\n\n\npd.qcut() ËøîÂõû‰∏Ä‰∏™ Categorical ÂØπË±°„ÄÇ\nlabels ÂèÇÊï∞Áî®‰∫éÊèê‰æõÂêçÁß∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂ∏¶Êúâ-categorical-ÁöÑ-groupby-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂ∏¶Êúâ-categorical-ÁöÑ-groupby-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂ∏¶Êúâ Categorical ÁöÑ groupby() (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂ∏¶Êúâ Categorical ÁöÑ groupby() (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nbins = pd.Series(bins, name='quartile') # Â∞ÜÂàÜÁÆ±ÁªìÊûúËΩ¨Êç¢‰∏∫ SeriesÔºåÂπ∂ÂëΩÂêç‰∏∫ \"quartile\"\nresults = (pd.Series(draws) # Â∞ÜÂéüÂßãÊï∞ÊçÆËΩ¨Êç¢‰∏∫ Series\n           .groupby(bins) # ‰ΩøÁî®ÂàÜÁÆ±ÁªìÊûúËøõË°åÂàÜÁªÑ\n           .agg(['count', 'min', 'max']) # ÂØπÊØè‰∏™ÂàÜÁªÑËÆ°ÁÆóÊï∞Èáè„ÄÅÊúÄÂ∞èÂÄºÂíåÊúÄÂ§ßÂÄº\n           .reset_index()) # ÈáçÁΩÆÁ¥¢Âºï\nresults # ÊòæÁ§∫ÁªìÊûú\n\n/tmp/ipykernel_2752/1809551870.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  .groupby(bins) # ‰ΩøÁî®ÂàÜÁÆ±ÁªìÊûúËøõË°åÂàÜÁªÑ\n\n\n\n\n\n\n\n\n\nquartile\ncount\nmin\nmax\n\n\n\n\n0\nQ1\n250\n-3.119609\n-0.678494\n\n\n1\nQ2\n250\n-0.673305\n0.008009\n\n\n2\nQ3\n250\n0.018753\n0.686183\n\n\n3\nQ4\n250\n0.688282\n3.211418"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂ∏¶Êúâ-categorical-ÁöÑ-groupby-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂ∏¶Êúâ-categorical-ÁöÑ-groupby-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂ∏¶Êúâ Categorical ÁöÑ groupby() (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂ∏¶Êúâ Categorical ÁöÑ groupby() (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nresults['quartile'] # Êü•ÁúãÁªìÊûú‰∏≠ÁöÑ \"quartile\" ÂàóÔºå‰øùÁïô‰∫ÜÂéüÂßãÁöÑ Categorical ‰ø°ÊÅØ\n\n0    Q1\n1    Q2\n2    Q3\n3    Q4\nName: quartile, dtype: category\nCategories (4, object): ['Q1' &lt; 'Q2' &lt; 'Q3' &lt; 'Q4']\n\n\n\nÁªìÊûú‰∏≠ÁöÑ ‚Äòquartile‚Äô Âàó‰øùÁïôÂéüÂßãÂàÜÁ±ª‰ø°ÊÅØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊÄßËÉΩ‰ºòÂäø-Á¨¨-1-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊÄßËÉΩ‰ºòÂäø-Á¨¨-1-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊÄßËÉΩ‰ºòÂäø (Á¨¨ 1 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊÄßËÉΩ‰ºòÂäø (Á¨¨ 1 ÈÉ®ÂàÜ)\n\nN = 10_000_000 # ÂÆö‰πâÊï∞ÊçÆÈáè\nlabels = pd.Series(['foo', 'bar', 'baz', 'qux'] * (N // 4)) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÈáçÂ§çÂ≠óÁ¨¶‰∏≤ÁöÑ Series\ncategories = labels.astype('category') # Â∞Ü Series ËΩ¨Êç¢‰∏∫ Categorical Á±ªÂûã"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊÄßËÉΩ‰ºòÂäø-Á¨¨-2-ÈÉ®ÂàÜ",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÊÄßËÉΩ‰ºòÂäø-Á¨¨-2-ÈÉ®ÂàÜ",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊÄßËÉΩ‰ºòÂäø (Á¨¨ 2 ÈÉ®ÂàÜ)",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÊÄßËÉΩ‰ºòÂäø (Á¨¨ 2 ÈÉ®ÂàÜ)\n\nlabels.memory_usage(deep=True) # Êü•ÁúãÂéüÂßã Series ÁöÑÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ\n\n520000132\n\n\n\ncategories.memory_usage(deep=True) # Êü•Áúã Categorical Á±ªÂûãÁöÑ Series ÁöÑÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ\n\n10000512\n\n\n\nCategorical ‰ΩøÁî®ÁöÑÂÜÖÂ≠òÊòéÊòæÂ∞ë‰∫éÂ≠óÁ¨¶‰∏≤„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂàÜÁ±ªÊñπÊ≥ï",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂàÜÁ±ªÊñπÊ≥ï",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂàÜÁ±ªÊñπÊ≥ï",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂàÜÁ±ªÊñπÊ≥ï\n\nÂåÖÂê´ÂàÜÁ±ªÊï∞ÊçÆÁöÑ Series ÂÖ∑ÊúâÁâπÊÆäÊñπÊ≥ï (Á±ª‰ºº‰∫é Series.str)„ÄÇ\nÈÄöËøá cat ËÆøÈóÆÂô®ËÆøÈóÆ„ÄÇ\n\n\ns = pd.Series(['a', 'b', 'c', 'd'] * 2) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÈáçÂ§çÂ≠óÁ¨¶‰∏≤ÁöÑ Series\ncat_s = s.astype('category') # Â∞Ü Series ËΩ¨Êç¢‰∏∫ Categorical Á±ªÂûã\ncat_s # ÊòæÁ§∫ Categorical Series\n\n0    a\n1    b\n2    c\n3    d\n4    a\n5    b\n6    c\n7    d\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆcat-ËÆøÈóÆÂô®",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆcat-ËÆøÈóÆÂô®",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöcat ËÆøÈóÆÂô®",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöcat ËÆøÈóÆÂô®\n\ncat_s.cat.codes # ‰ΩøÁî® .cat.codes ËÆøÈóÆ Categorical ÂØπË±°ÁöÑ‰ª£Á†Å\n\n0    0\n1    1\n2    2\n3    3\n4    0\n5    1\n6    2\n7    3\ndtype: int8\n\n\n\ncat_s.cat.categories # ‰ΩøÁî® .cat.categories ËÆøÈóÆ Categorical ÂØπË±°ÁöÑÁ±ªÂà´\n\nIndex(['a', 'b', 'c', 'd'], dtype='object')\n\n\n\ncat ËÆøÈóÆÂô®Êèê‰æõÂØπÂàÜÁ±ªÊñπÊ≥ïÂíåÂ±ûÊÄßÁöÑËÆøÈóÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆset_categories",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆset_categories",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöset_categories()",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöset_categories()\n\nactual_categories = ['a', 'b', 'c', 'd', 'e'] # ÂÆö‰πâÊñ∞ÁöÑÁ±ªÂà´\ncat_s2 = cat_s.cat.set_categories(actual_categories) # ‰ΩøÁî® .cat.set_categories() ÊñπÊ≥ïËÆæÁΩÆÊñ∞ÁöÑÁ±ªÂà´\ncat_s2 # ÊòæÁ§∫Êñ∞ÁöÑ Categorical Series\n\n0    a\n1    b\n2    c\n3    d\n4    a\n5    b\n6    c\n7    d\ndtype: category\nCategories (5, object): ['a', 'b', 'c', 'd', 'e']\n\n\n\nset_categories(): Êõ¥ÊîπÁ±ªÂà´ÈõÜ„ÄÇ\nÂΩìÊï∞ÊçÆ‰∏çÂåÖÂê´ÊâÄÊúâÂèØËÉΩÁöÑÁ±ªÂà´Êó∂ÂæàÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂ∏¶Êúâ-set_categories-ÁöÑ-value_counts",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂ∏¶Êúâ-set_categories-ÁöÑ-value_counts",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂ∏¶Êúâ set_categories() ÁöÑ value_counts()",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂ∏¶Êúâ set_categories() ÁöÑ value_counts()\n\ncat_s.value_counts() # ÁªüËÆ°ÂéüÂßã Categorical Series ‰∏≠ÊØè‰∏™Á±ªÂà´ÁöÑÂá∫Áé∞Ê¨°Êï∞\n\na    2\nb    2\nc    2\nd    2\nName: count, dtype: int64\n\n\n\ncat_s2.value_counts() # ÁªüËÆ°Êñ∞ÁöÑ Categorical Series ‰∏≠ÊØè‰∏™Á±ªÂà´ÁöÑÂá∫Áé∞Ê¨°Êï∞ÔºåÂç≥‰ΩøÊüê‰∫õÁ±ªÂà´Âú®Êï∞ÊçÆ‰∏≠‰∏çÂ≠òÂú®‰πü‰ºöÊòæÁ§∫\n\na    2\nb    2\nc    2\nd    2\ne    0\nName: count, dtype: int64\n\n\n\nvalue_counts() Â∞äÈáçÂÆö‰πâÁöÑÁ±ªÂà´ÔºåÂç≥‰ΩøÊüê‰∫õÁ±ªÂà´Âú®Êï∞ÊçÆ‰∏≠‰∏çÂ≠òÂú®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆremove_unused_categories",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆremove_unused_categories",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöremove_unused_categories()",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöremove_unused_categories()\n\ncat_s3 = cat_s[cat_s.isin(['a', 'b'])] # Á≠õÈÄâÂá∫Âè™ÂåÖÂê´Á±ªÂà´ \"a\" Âíå \"b\" ÁöÑÊï∞ÊçÆ\ncat_s3 # ÊòæÁ§∫Á≠õÈÄâÂêéÁöÑ Categorical Series\n\n0    a\n1    b\n4    a\n5    b\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\n\n\ncat_s3.cat.remove_unused_categories() # ‰ΩøÁî® .cat.remove_unused_categories() ÊñπÊ≥ïÂà†Èô§Êú™‰ΩøÁî®ÁöÑÁ±ªÂà´\n\n0    a\n1    b\n4    a\n5    b\ndtype: category\nCategories (2, object): ['a', 'b']\n\n\n\nremove_unused_categories(): Âà†Èô§Êï∞ÊçÆ‰∏≠Êú™Âá∫Áé∞ÁöÑÁ±ªÂà´„ÄÇ\nÁ≠õÈÄâÂêéËäÇÁúÅÂÜÖÂ≠òÂæàÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂàÜÁ±ªÊñπÊ≥ï---ÊÄªÁªì",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂàÜÁ±ªÊñπÊ≥ï---ÊÄªÁªì",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂàÜÁ±ªÊñπÊ≥ï - ÊÄªÁªì",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂàÜÁ±ªÊñπÊ≥ï - ÊÄªÁªì\n\n\n\n\n\n\n\nÊñπÊ≥ï\nÊèèËø∞\n\n\n\n\nadd_categories\nÂú®Áé∞ÊúâÁ±ªÂà´Êú´Â∞æËøΩÂä†Êñ∞ÁöÑ (Êú™‰ΩøÁî®ÁöÑ) Á±ªÂà´\n\n\nas_ordered\nÂ∞ÜÁ±ªÂà´ËÆæÁΩÆ‰∏∫ÊúâÂ∫è\n\n\nas_unordered\nÂ∞ÜÁ±ªÂà´ËÆæÁΩÆ‰∏∫Êó†Â∫è\n\n\nremove_categories\nÂà†Èô§Á±ªÂà´ÔºåÂ∞ÜÊâÄÊúâÂ∑≤Âà†Èô§ÁöÑÂÄºËÆæÁΩÆ‰∏∫ null\n\n\nremove_unused_categories\nÂà†Èô§Êï∞ÊçÆ‰∏≠Êú™Âá∫Áé∞ÁöÑ‰ªª‰ΩïÁ±ªÂà´ÂÄº\n\n\nrename_categories\n‰ΩøÁî®ÊåáÂÆöÁöÑÊñ∞Á±ªÂà´ÂêçÁß∞ÈõÜÊõøÊç¢Á±ªÂà´Ôºõ‰∏çËÉΩÊõ¥ÊîπÁ±ªÂà´ÁöÑÊï∞Èáè\n\n\nreorder_categories\nÁ±ª‰ºº‰∫é rename_categoriesÔºå‰ΩÜ‰πüÂèØ‰ª•Êõ¥ÊîπÁªìÊûú‰ª•‰ΩøÁ±ªÂà´ÊúâÂ∫è\n\n\nset_categories\n‰ΩøÁî®ÊåáÂÆöÁöÑÊñ∞Á±ªÂà´ÈõÜÊõøÊç¢Á±ªÂà´ÔºõÂèØ‰ª•Ê∑ªÂä†ÊàñÂà†Èô§Á±ªÂà´"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂàõÂª∫ËôöÊãüÂèòÈáè",
    "href": "qmd/pandas3ed7cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂàõÂª∫ËôöÊãüÂèòÈáè",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂàõÂª∫ËôöÊãüÂèòÈáè",
    "text": "7.5 ÂàÜÁ±ªÊï∞ÊçÆÔºöÂàõÂª∫ËôöÊãüÂèòÈáè\n\nÂ∞ÜÂàÜÁ±ªÊï∞ÊçÆËΩ¨Êç¢‰∏∫ËôöÊãüÂèòÈáè (one-hot ÁºñÁ†Å)„ÄÇ\nÁî®‰∫éÁªüËÆ°ÂíåÊú∫Âô®Â≠¶‰π†„ÄÇ\n\n\ncat_s = pd.Series(['a', 'b', 'c', 'd'] * 2, dtype='category') # ÂàõÂª∫‰∏Ä‰∏™ Categorical Series\npd.get_dummies(cat_s) # ‰ΩøÁî® pd.get_dummies() ÂáΩÊï∞Â∞Ü Categorical Series ËΩ¨Êç¢‰∏∫ËôöÊãüÂèòÈáè\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\n\n\n0\nTrue\nFalse\nFalse\nFalse\n\n\n1\nFalse\nTrue\nFalse\nFalse\n\n\n2\nFalse\nFalse\nTrue\nFalse\n\n\n3\nFalse\nFalse\nFalse\nTrue\n\n\n4\nTrue\nFalse\nFalse\nFalse\n\n\n5\nFalse\nTrue\nFalse\nFalse\n\n\n6\nFalse\nFalse\nTrue\nFalse\n\n\n7\nFalse\nFalse\nFalse\nTrue\n\n\n\n\n\n\n\n\npd.get_dummies(categorical_series) ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ËôöÊãüÂèòÈáèÁöÑ DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÁªìËÆ∫",
    "href": "qmd/pandas3ed7cn.html#ÁªìËÆ∫",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "7.6 ÁªìËÆ∫",
    "text": "7.6 ÁªìËÆ∫\n\nÊúâÊïàÁöÑÊï∞ÊçÆÂáÜÂ§áÂØπ‰∫éÈ´òÊïàÁöÑÊï∞ÊçÆÂàÜÊûêËá≥ÂÖ≥ÈáçË¶Å„ÄÇ\nÊú¨Á´†Ê∂µÁõñ‰∫ÜËÆ∏Â§öÊï∞ÊçÆÊ∏ÖÊ¥óÂíåËΩ¨Êç¢ÊäÄÊúØ„ÄÇ\n‰∏ã‰∏ÄÁ´†Â∞ÜÊé¢ËÆ® pandas ‰∏≠ÁöÑËøûÊé•ÂíåÂàÜÁªÑÂäüËÉΩ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed7cn.html#ÊÄªÁªì",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nÊï∞ÊçÆÊ∏ÖÊ¥óÊòØÊï∞ÊçÆÂàÜÊûêÁöÑÈáçË¶ÅÁªÑÊàêÈÉ®ÂàÜÔºåÈÄöÂ∏∏Âç†ÂàÜÊûêÂ∏àÊó∂Èó¥ÁöÑ 80% ÊàñÊõ¥Â§ö„ÄÇ\nPandas Êèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÂ∑•ÂÖ∑Êù•Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ (NaN„ÄÅNone)ÔºåÂåÖÊã¨ dropna„ÄÅfillna„ÄÅisna Âíå notna„ÄÇ\nÊï∞ÊçÆËΩ¨Êç¢Êìç‰ΩúÂåÖÊã¨Âà†Èô§ÈáçÂ§çÈ°π (duplicated„ÄÅdrop_duplicates)„ÄÅÊò†Â∞ÑÂÄº (map)„ÄÅÊõøÊç¢ÂÄº (replace)„ÄÅÈáçÂëΩÂêçÁ¥¢Âºï (rename)„ÄÅÂàÜÁÆ± (cut„ÄÅqcut)„ÄÅÂºÇÂ∏∏ÂÄºÊ£ÄÊµã„ÄÅÊéíÂàó„ÄÅÈááÊ†∑ (sample) ÂíåÂàõÂª∫ËôöÊãüÂèòÈáè (get_dummies)„ÄÇ\nÊâ©Â±ïÊï∞ÊçÆÁ±ªÂûã (Int64Dtype„ÄÅStringDtype„ÄÅCategoricalDtype Á≠â) Êèê‰æõ‰∫ÜÂØπÁâπÂÆöÊï∞ÊçÆÁ±ªÂûãÂíåÁº∫Â§±ÂÄºÁöÑÊîπËøõÂ§ÑÁêÜ„ÄÇ\nÂèØ‰ª•‰ΩøÁî® Python ÁöÑÂÜÖÁΩÆÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ï„ÄÅÊ≠£ÂàôË°®ËææÂºè (re Ê®°Âùó) Âíå pandas ÁöÑ str ËÆøÈóÆÂô®È´òÊïàÂú∞ËøõË°åÂ≠óÁ¨¶‰∏≤Êìç‰Ωú„ÄÇ\nCategorical Á±ªÂûã‰∏∫ÂÖ∑ÊúâÈáçÂ§çÂÄºÁöÑÊï∞ÊçÆÊèê‰æõ‰∫ÜÂÜÖÂ≠òÂíåÊÄßËÉΩ‰ºòÂäøÔºåÊèê‰æõ‰∫ÜËØ∏Â¶Ç cat.codes„ÄÅcat.categories„ÄÅset_categories Âíå remove_unused_categories ‰πãÁ±ªÁöÑÊñπÊ≥ï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed7cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed7cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ Python Â∫îÁî®",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î\n\nÂõûÊÉ≥‰∏Ä‰∏ãÊÇ®ÈÅáÂà∞ËÑèÊï∞ÊçÆÁöÑÁªèÂéÜ„ÄÇÊú¨Á´†ËÆ®ËÆ∫ÁöÑÂì™‰∫õÊäÄÊúØÊúÄÊúâÁî®Ôºü\n‰∏∫‰ªÄ‰πàÊ≠£Á°ÆÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂæàÈáçË¶ÅÔºüÂøΩÁï•ÊàñÈîôËØØÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÂèØËÉΩÊúâ‰ªÄ‰πàÂêéÊûúÔºü\n‰∏éÂ∞ÜÊï∞ÊçÆÂ≠òÂÇ®‰∏∫Â≠óÁ¨¶‰∏≤Áõ∏ÊØîÔºåCategorical Á±ªÂûãÂ¶Ç‰ΩïÊèêÈ´òÊïàÁéáÔºüÊÇ®‰ºöÂú®‰ªÄ‰πàÊÉÖÂÜµ‰∏ãÈÄâÊã©‰ΩøÁî® Categorical Êï∞ÊçÆÔºü\nÊÇ®ËÉΩÊÉ≥Âà∞Âì™‰∫õÊÉÖÂÜµ‰∏ãÊÇ®ÂèØËÉΩ‰∏çÊÉ≥Âà†Èô§ÈáçÂ§çÊï∞ÊçÆÔºü\nÊµèËßà re Ê®°ÂùóÂíå pandas ÁöÑ str ËÆøÈóÆÂô®ÁöÑÊñáÊ°£„ÄÇÊÇ®ËøòËÉΩÊâæÂà∞Âì™‰∫õÂÖ∂‰ªñÊúâÁî®ÁöÑÂáΩÊï∞Ôºü\nËÄÉËôë cut() Âíå qcut() ‰πãÈó¥ÁöÑÊùÉË°°„ÄÇÊÇ®‰ºöÂú®‰ªÄ‰πàÊÉÖÂÜµ‰∏ã‰ΩøÁî®ÂÖ∂‰∏≠‰∏Ä‰∏™ËÄå‰∏çÊòØÂè¶‰∏Ä‰∏™Ôºü\nËÆ®ËÆ∫‰ΩøÁî®ÊúâÂ∫è‰∏éÊó†Â∫èÂàÜÁ±ªÊï∞ÊçÆÁöÑÂú∫ÊôØ„ÄÇ\n‰∏∫‰ªÄ‰πàÊÇ®ÂèØËÉΩÂ∏åÊúõÂ∞ÜÂºÇÂ∏∏ÂÄºÈôêÂà∂Âú®‰∏ÄÂÆöËåÉÂõ¥ÂÜÖÔºåËÄå‰∏çÊòØÁÆÄÂçïÂú∞Âà†Èô§ÊâÄÊúâÂºÇÂ∏∏ÂÄºÔºü"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html",
    "href": "qmd/pandas3ed6cn.html",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "",
    "text": "Ê¨¢ËøéÊù•Âà∞Êï∞ÊçÆÂàÜÊûêÁöÑ‰∏ñÁïåÔºÅüåç Âú®Êàë‰ª¨‰ªéÊï∞ÊçÆ‰∏≠Ëß£ÈîÅÊ¥ûÂØüÂäõ‰πãÂâçÔºåÊàë‰ª¨ÈúÄË¶ÅÂÖàÂ∞ÜÊï∞ÊçÆÂØºÂÖ•Âà∞Êàë‰ª¨ÁöÑ Python ÁéØÂ¢É‰∏≠„ÄÇÊú¨Á´†ÈáçÁÇπÂÖ≥Ê≥®ËøôÂÖ≥ÈîÆÁöÑÁ¨¨‰∏ÄÊ≠•ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÇ\nÂèØ‰ª•ËøôÊ†∑ÁêÜËß£ÔºöÂú®‰Ω†ÁÉπÈ•™‰∏ÄÈÅìÁæéÂë≥‰Ω≥ËÇ¥ üç≥ ‰πãÂâçÔºå‰Ω†È¶ñÂÖàÈúÄË¶ÅÊî∂ÈõÜ‰Ω†ÁöÑÈ£üÊùê üçÖü•ïü•¶„ÄÇÊï∞ÊçÆÂä†ËΩΩÂ∞±ÂÉèÊòØ‰∏∫‰Ω†ÁöÑÊï∞ÊçÆÂàÜÊûêÈ£üË∞±Êî∂ÈõÜÈ£üÊùê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÁÆÄ‰ªã‰∏∫‰ªÄ‰πàÊï∞ÊçÆÂä†ËΩΩÂæàÈáçË¶Å",
    "href": "qmd/pandas3ed6cn.html#ÁÆÄ‰ªã‰∏∫‰ªÄ‰πàÊï∞ÊçÆÂä†ËΩΩÂæàÈáçË¶Å",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "",
    "text": "Ê¨¢ËøéÊù•Âà∞Êï∞ÊçÆÂàÜÊûêÁöÑ‰∏ñÁïåÔºÅüåç Âú®Êàë‰ª¨‰ªéÊï∞ÊçÆ‰∏≠Ëß£ÈîÅÊ¥ûÂØüÂäõ‰πãÂâçÔºåÊàë‰ª¨ÈúÄË¶ÅÂÖàÂ∞ÜÊï∞ÊçÆÂØºÂÖ•Âà∞Êàë‰ª¨ÁöÑ Python ÁéØÂ¢É‰∏≠„ÄÇÊú¨Á´†ÈáçÁÇπÂÖ≥Ê≥®ËøôÂÖ≥ÈîÆÁöÑÁ¨¨‰∏ÄÊ≠•ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÇ\nÂèØ‰ª•ËøôÊ†∑ÁêÜËß£ÔºöÂú®‰Ω†ÁÉπÈ•™‰∏ÄÈÅìÁæéÂë≥‰Ω≥ËÇ¥ üç≥ ‰πãÂâçÔºå‰Ω†È¶ñÂÖàÈúÄË¶ÅÊî∂ÈõÜ‰Ω†ÁöÑÈ£üÊùê üçÖü•ïü•¶„ÄÇÊï∞ÊçÆÂä†ËΩΩÂ∞±ÂÉèÊòØ‰∏∫‰Ω†ÁöÑÊï∞ÊçÆÂàÜÊûêÈ£üË∞±Êî∂ÈõÜÈ£üÊùê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÁÆÄ‰ªãÊàë‰ª¨Â∞ÜÊ∂µÁõñÁöÑÂÜÖÂÆπ",
    "href": "qmd/pandas3ed6cn.html#ÁÆÄ‰ªãÊàë‰ª¨Â∞ÜÊ∂µÁõñÁöÑÂÜÖÂÆπ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÁÆÄ‰ªãÔºöÊàë‰ª¨Â∞ÜÊ∂µÁõñÁöÑÂÜÖÂÆπ",
    "text": "ÁÆÄ‰ªãÔºöÊàë‰ª¨Â∞ÜÊ∂µÁõñÁöÑÂÜÖÂÆπ\nÊàë‰ª¨Â∞ÜÊ∂µÁõñÂêÑÁßçÂä†ËΩΩÊï∞ÊçÆÁöÑÊñπÊ≥ïÔºåÂåÖÊã¨Ôºö\n\nÊñáÊú¨Êñá‰ª∂ÔºàÂ¶Ç CSVÔºâ\n‰∫åËøõÂà∂Ê†ºÂºè\nÊï∞ÊçÆÂ∫ì\nWeb API"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê",
    "href": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÂàÜÊûê",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üìä",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÂàÜÊûê üìä\nÊï∞ÊçÆÂàÜÊûêÊòØÂØπÊï∞ÊçÆËøõË°åÊ£ÄÊü•„ÄÅÊ∏ÖÁêÜ„ÄÅËΩ¨Êç¢ÂíåÂª∫Ê®°ÁöÑËøáÁ®ãÔºå‰ª•ÂèëÁé∞ÊúâÁî®ÁöÑ‰ø°ÊÅØ„ÄÅÂæóÂá∫ÁªìËÆ∫Âπ∂ÊîØÊåÅÂÜ≥Á≠ñ„ÄÇËøôÂ∞±ÂÉèÊàê‰∏∫‰∏ÄÂêç‰æ¶Êé¢ üïµÔ∏è‚Äç‚ôÄÔ∏èÔºå‰ΩÜ‰Ω†‰∏çÊòØÂú®Á†¥Ê°àÔºåËÄåÊòØÂú®Ëß£ÂÜ≥ÈöêËóèÂú®Êï∞ÊçÆ‰∏≠ÁöÑÈöæÈ¢ò„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†",
    "href": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊú∫Âô®Â≠¶‰π†",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊú∫Âô®Â≠¶‰π† ü§ñ\nÊú∫Âô®Â≠¶‰π†ÊòØ‰∫∫Â∑•Êô∫ËÉΩ (AI) ÁöÑ‰∏Ä‰∏™Â≠êÈ¢ÜÂüüÔºå‰∏ìÊ≥®‰∫é‰ΩøËÆ°ÁÆóÊú∫ËÉΩÂ§ü‰ªéÊï∞ÊçÆ‰∏≠Â≠¶‰π†ÔºåËÄåÊó†ÈúÄËøõË°åÊòæÂºèÁºñÁ®ã„ÄÇÂèØ‰ª•ÊääÂÆÉÊÉ≥Ë±°ÊàêÊïôËÆ°ÁÆóÊú∫ÂÉèÂ≠©Â≠ê‰∏ÄÊ†∑Â≠¶‰π† üë∂ÔºåÈÄöËøáÂêëÂÆÉÂ±ïÁ§∫Á§∫‰æãËÄå‰∏çÊòØÁªôÂÆÉ‰∏•Ê†ºÁöÑËßÑÂàô„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython",
    "href": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµpython",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöPython üêç\nPython ÊòØ‰∏ÄÁßçÈÄöÁî®ÁöÑÈ´òÁ∫ßÁºñÁ®ãËØ≠Ë®ÄÔºåÂπøÊ≥õÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÂíåÊú∫Âô®Â≠¶‰π†„ÄÇÂÆÉ‰ª•ÂÖ∂ÂèØËØªÊÄßÂíåÂπøÊ≥õÁöÑÂ∫ìËÄåÈóªÂêçÔºåËøô‰ΩøÂæóÊâßË°åÂ§çÊùÇ‰ªªÂä°ÂèòÂæóÊõ¥Âä†ÂÆπÊòì„ÄÇËøôÂ∞±ÂÉèÊã•Êúâ‰∏Ä‰∏™Êï∞ÊçÆÂàÜÊûêÁöÑÁëûÂ£´ÂÜõÂàÄ üõ†Ô∏è„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÁßëÂ≠¶Áª¥ÊÅ©Âõæ",
    "href": "qmd/pandas3ed6cn.html#Ê†∏ÂøÉÊ¶ÇÂøµÊï∞ÊçÆÁßëÂ≠¶Áª¥ÊÅ©Âõæ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÁßëÂ≠¶Áª¥ÊÅ©Âõæ",
    "text": "Ê†∏ÂøÉÊ¶ÇÂøµÔºöÊï∞ÊçÆÁßëÂ≠¶Áª¥ÊÅ©Âõæ\n\n\n\nÊï∞ÊçÆÁßëÂ≠¶Áª¥ÊÅ©Âõæ„ÄÇÊù•Ê∫êÔºöDrew Conway"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-pandas-ËøõË°åÊï∞ÊçÆËæìÂÖ•ËæìÂá∫",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-pandas-ËøõË°åÊï∞ÊçÆËæìÂÖ•ËæìÂá∫",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® Pandas ËøõË°åÊï∞ÊçÆËæìÂÖ•/ËæìÂá∫",
    "text": "‰ΩøÁî® Pandas ËøõË°åÊï∞ÊçÆËæìÂÖ•/ËæìÂá∫\npandas Â∫ìÊòØ‰Ω†Âú® Python ‰∏≠Â§ÑÁêÜË°®Ê†ºÊï∞ÊçÆÁöÑÊúÄÂ•ΩÊúãÂèã„ÄÇÂÆÉÊèê‰æõ‰∫Ü DataFrame ÂØπË±°ÔºåËøôÊòØ‰∏Ä‰∏™Áî®‰∫éÂ≠òÂÇ®ÂíåÊìç‰ΩúË°åÂíåÂàó‰∏≠Êï∞ÊçÆÔºàÂ¶ÇÁîµÂ≠êË°®Ê†ºÔºâÁöÑÂº∫Â§ßÁªìÊûÑ„ÄÇpandas Êèê‰æõ‰∫ÜÂá†‰∏™Áî®‰∫éËØªÂèñÂíåÂÜôÂÖ•ÂêÑÁßçÊ†ºÂºèÊï∞ÊçÆÁöÑÂáΩÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Êï∞ÊçÆËß£Êûê",
    "href": "qmd/pandas3ed6cn.html#Êï∞ÊçÆËß£Êûê",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Êï∞ÊçÆËß£Êûê",
    "text": "Êï∞ÊçÆËß£Êûê\n\n\n\n\n\n\nÊï∞ÊçÆËß£ÊûêÔºåÈÄöÂ∏∏Áß∞‰∏∫Êï∞ÊçÆÂä†ËΩΩÔºåÂåÖÊã¨‰ªéÊñá‰ª∂ÊàñÂÖ∂‰ªñÊù•Ê∫êËØªÂèñÊï∞ÊçÆÔºåÂπ∂Â∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫ÂèØÁî®ÁöÑÊ†ºÂºèÔºàÂ¶Ç DataFrameÔºâ„ÄÇÂÆÉÈÄöÂ∏∏ËøòÂåÖÊã¨ÂØπÊï∞ÊçÆ‰∏≠Êï∞ÊçÆÁ±ªÂûãÁöÑÂàùÊ≠•Ëß£Èáä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â∏∏Áî®ÁöÑ-pandas-Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞-12",
    "href": "qmd/pandas3ed6cn.html#Â∏∏Áî®ÁöÑ-pandas-Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞-12",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â∏∏Áî®ÁöÑ pandas Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞ (1/2)",
    "text": "Â∏∏Áî®ÁöÑ pandas Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞ (1/2)\n‰∏ãË°®ÂàóÂá∫‰∫Ü pandas ‰∏≠‰∏Ä‰∫õÊúÄÂ∏∏Áî®ÁöÑÊï∞ÊçÆÂä†ËΩΩÂáΩÊï∞„ÄÇÂú®Êú¨ËäÇ‰∏≠ÔºåÊàë‰ª¨Â∞ÜÈáçÁÇπÂÖ≥Ê≥® read_csv„ÄÇ\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nread_csv\n‰ªéÊñá‰ª∂„ÄÅURL ÊàñÁ±ªÊñá‰ª∂ÂØπË±°Âä†ËΩΩÂàÜÈöîÊï∞ÊçÆÔºõÈªòËÆ§‰ΩøÁî®ÈÄóÂè∑‰Ωú‰∏∫ÂàÜÈöîÁ¨¶„ÄÇ\n\n\nread_fwf\nËØªÂèñÂõ∫ÂÆöÂÆΩÂ∫¶ÂàóÊ†ºÂºèÁöÑÊï∞ÊçÆÔºàÂç≥ÔºåÊ≤°ÊúâÂàÜÈöîÁ¨¶Ôºâ„ÄÇ\n\n\nread_clipboard\nread_csv ÁöÑÂèò‰ΩìÔºå‰ªéÂâ™Ë¥¥ÊùøËØªÂèñÊï∞ÊçÆÔºõÁî®‰∫éËΩ¨Êç¢ÁΩëÈ°µ‰∏≠ÁöÑË°®Ê†º„ÄÇ\n\n\nread_excel\n‰ªé Excel XLS Êàñ XLSX Êñá‰ª∂ËØªÂèñË°®Ê†ºÊï∞ÊçÆ„ÄÇ\n\n\nread_hdf\nËØªÂèñÁî± pandas ÂÜôÂÖ•ÁöÑ HDF5 Êñá‰ª∂„ÄÇ\n\n\nread_html\nËØªÂèñÁªôÂÆö HTML ÊñáÊ°£‰∏≠ÁöÑÊâÄÊúâË°®Ê†º„ÄÇ\n\n\nread_json\n‰ªé JSONÔºàJavaScript ÂØπË±°Ë°®Á§∫Ê≥ïÔºâÂ≠óÁ¨¶‰∏≤Ë°®Á§∫„ÄÅÊñá‰ª∂„ÄÅURL ÊàñÁ±ªÊñá‰ª∂ÂØπË±°ËØªÂèñÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â∏∏Áî®ÁöÑ-pandas-Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞-22",
    "href": "qmd/pandas3ed6cn.html#Â∏∏Áî®ÁöÑ-pandas-Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞-22",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â∏∏Áî®ÁöÑ pandas Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞ (2/2)",
    "text": "Â∏∏Áî®ÁöÑ pandas Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞ (2/2)\n\n\n\n\n\n\n\nÂáΩÊï∞\nÊèèËø∞\n\n\n\n\nread_feather\nËØªÂèñ Feather ‰∫åËøõÂà∂Êñá‰ª∂Ê†ºÂºè„ÄÇ\n\n\nread_orc\nËØªÂèñ Apache ORC ‰∫åËøõÂà∂Êñá‰ª∂Ê†ºÂºè„ÄÇ\n\n\nread_parquet\nËØªÂèñ Apache Parquet ‰∫åËøõÂà∂Êñá‰ª∂Ê†ºÂºè„ÄÇ\n\n\nread_pickle\nËØªÂèñ‰ΩøÁî® Python pickle Ê†ºÂºèÂ≠òÂÇ®ÁöÑ pandas ÂØπË±°„ÄÇ\n\n\nread_sas\nËØªÂèñ‰ª• SAS Á≥ªÁªüËá™ÂÆö‰πâÊ†ºÂºè‰πã‰∏ÄÂ≠òÂÇ®ÁöÑ SAS Êï∞ÊçÆÈõÜ„ÄÇ\n\n\nread_spss\nËØªÂèñÁî± SPSS ÂàõÂª∫ÁöÑÊï∞ÊçÆÊñá‰ª∂„ÄÇ\n\n\nread_sql\nËØªÂèñ SQL Êü•ËØ¢ÁöÑÁªìÊûúÔºà‰ΩøÁî® SQLAlchemyÔºâ„ÄÇ\n\n\nread_sql_table\nËØªÂèñÊï¥‰∏™ SQL Ë°®Ôºà‰ΩøÁî® SQLAlchemyÔºâ„ÄÇ\n\n\nread_stata\n‰ªé Stata Êñá‰ª∂Ê†ºÂºèËØªÂèñÊï∞ÊçÆÈõÜ„ÄÇ\n\n\nread_xml\n‰ªéXMLÊñá‰ª∂‰∏≠ËØªÂèñÊï∞ÊçÆË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÈáçÁÇπread_csv",
    "href": "qmd/pandas3ed6cn.html#ÈáçÁÇπread_csv",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÈáçÁÇπÔºöread_csv",
    "text": "ÈáçÁÇπÔºöread_csv\nread_csv ÊòØÂ§ÑÁêÜÈÄóÂè∑ÂàÜÈöîÂÄºÊñá‰ª∂ÁöÑÂü∫Áü≥Ôºå‰πüÊòØÊúÄÂ∏∏Áî®ÁöÑÂáΩÊï∞‰πã‰∏Ä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂèØÈÄâÂèÇÊï∞Ê¶ÇËø∞",
    "href": "qmd/pandas3ed6cn.html#ÂèØÈÄâÂèÇÊï∞Ê¶ÇËø∞",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂèØÈÄâÂèÇÊï∞ÔºöÊ¶ÇËø∞",
    "text": "ÂèØÈÄâÂèÇÊï∞ÔºöÊ¶ÇËø∞\nÊï∞ÊçÆÂä†ËΩΩÂáΩÊï∞ÊúâËÆ∏Â§öÂèØÈÄâÂèÇÊï∞Êù•Ëá™ÂÆö‰πâÂä†ËΩΩËøáÁ®ã„ÄÇÂÆÉ‰ª¨ÈÄöÂ∏∏ÂàÜ‰∏∫‰ª•‰∏ãÂá†Á±ªÔºö\n\nÁ¥¢ÂºïÔºö ÈÄâÊã©Á¥¢ÂºïÂàóÂíåÂ§ÑÁêÜÂàóÂêç„ÄÇ\nÁ±ªÂûãÊé®Êñ≠ÂíåÊï∞ÊçÆËΩ¨Êç¢Ôºö Ëá™ÂÆö‰πâÊï∞ÊçÆÁ±ªÂûãÊ£ÄÊµãÂíåÁº∫Â§±ÂÄºË°®Á§∫„ÄÇ\nÊó•ÊúüÂíåÊó∂Èó¥Ëß£ÊûêÔºö ÂêàÂπ∂ÂíåËΩ¨Êç¢Êó•Êúü/Êó∂Èó¥‰ø°ÊÅØ„ÄÇ\nËø≠‰ª£Ôºö ÂàÜÂùóÂ§ÑÁêÜÂ§ßÊñá‰ª∂„ÄÇ\n‰∏çÂπ≤ÂáÄÁöÑÊï∞ÊçÆÈóÆÈ¢òÔºö Ë∑≥ËøáË°å„ÄÅÂ§ÑÁêÜÊ≥®ÈáäÁ≠â„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#pandas-ÊñáÊ°£",
    "href": "qmd/pandas3ed6cn.html#pandas-ÊñáÊ°£",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "pandas ÊñáÊ°£",
    "text": "pandas ÊñáÊ°£\n\n\n\n\n\n\n‰∏çË¶ÅË¢´ÂêìÂÄíÔºÅpandas Âú®Á∫øÊñáÊ°£ÊúâÂæàÂ§öÂæàÊ£íÁöÑ‰æãÂ≠ê„ÄÇÂÉè ‚Äúpandas read_csv skip header‚Äù ËøôÊ†∑ÁöÑ Google ÊêúÁ¥¢ÈÄöÂ∏∏‰ºöÊúâÂ∏ÆÂä©„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-read_csv-ËØªÂèñ-csv-Êñá‰ª∂---Âü∫Êú¨Á§∫‰æã",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-read_csv-ËØªÂèñ-csv-Êñá‰ª∂---Âü∫Êú¨Á§∫‰æã",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® read_csv ËØªÂèñ CSV Êñá‰ª∂ - Âü∫Êú¨Á§∫‰æã",
    "text": "‰ΩøÁî® read_csv ËØªÂèñ CSV Êñá‰ª∂ - Âü∫Êú¨Á§∫‰æã\nËÆ©Êàë‰ª¨‰ªéËØªÂèñÈÄóÂè∑ÂàÜÈöîÂÄº (CSV) Êñá‰ª∂ÂºÄÂßã„ÄÇ\n\n# ÂØºÂÖ• pandas\nimport pandas as pd\n\n# ËØªÂèñ CSV Êñá‰ª∂\ndf = pd.read_csv(\"examples/ex1.csv\")\n\n# ÊòæÁ§∫ DataFrame\ndf\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\npd.read_csv() Ê£ÄÊµãÊ†áÈ¢òË°åÂπ∂‰ΩøÁî®ÈÄóÂè∑‰Ωú‰∏∫ÂàÜÈöîÁ¨¶„ÄÇÁ¥¢ÂºïÊòØËá™Âä®ÁîüÊàêÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÊåáÂÆöÊ†áÈ¢òË°åÊó†Ê†áÈ¢ò",
    "href": "qmd/pandas3ed6cn.html#ÊåáÂÆöÊ†áÈ¢òË°åÊó†Ê†áÈ¢ò",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÊåáÂÆöÊ†áÈ¢òË°åÔºöÊó†Ê†áÈ¢ò",
    "text": "ÊåáÂÆöÊ†áÈ¢òË°åÔºöÊó†Ê†áÈ¢ò\nÊúâÊó∂Ôºå‰Ω†ÁöÑ CSV Êñá‰ª∂ÂèØËÉΩÊ≤°ÊúâÊ†áÈ¢òË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÊåáÂÆöÊ†áÈ¢òË°åÈªòËÆ§ÂàóÂêç",
    "href": "qmd/pandas3ed6cn.html#ÊåáÂÆöÊ†áÈ¢òË°åÈªòËÆ§ÂàóÂêç",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÊåáÂÆöÊ†áÈ¢òË°åÔºöÈªòËÆ§ÂàóÂêç",
    "text": "ÊåáÂÆöÊ†áÈ¢òË°åÔºöÈªòËÆ§ÂàóÂêç\nÂëäËØâ pandas ‰ΩøÁî®ÈªòËÆ§ÂàóÂêçÔºö\n\n# ËÆ© pandas ÂàÜÈÖçÈªòËÆ§ÁöÑÂàóÂêç\npd.read_csv(\"examples/ex2.csv\", header=None)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÊåáÂÆöÊ†áÈ¢òË°åËá™ÂÆö‰πâÂàóÂêç",
    "href": "qmd/pandas3ed6cn.html#ÊåáÂÆöÊ†áÈ¢òË°åËá™ÂÆö‰πâÂàóÂêç",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÊåáÂÆöÊ†áÈ¢òË°åÔºöËá™ÂÆö‰πâÂàóÂêç",
    "text": "ÊåáÂÆöÊ†áÈ¢òË°åÔºöËá™ÂÆö‰πâÂàóÂêç\nÊàñËÄÖÔºåÊèê‰æõ‰Ω†Ëá™Â∑±ÁöÑÂàóÂêçÔºö\n\n# Êèê‰æõ‰Ω†Ëá™Â∑±ÁöÑÂàóÂêç\ncolumn_names = [\"a\", \"b\", \"c\", \"d\", \"message\"]\npd.read_csv(\"examples/ex2.csv\", names=column_names)\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ËÆæÁΩÆÁ¥¢ÂºïÂàó",
    "href": "qmd/pandas3ed6cn.html#ËÆæÁΩÆÁ¥¢ÂºïÂàó",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ËÆæÁΩÆÁ¥¢ÂºïÂàó",
    "text": "ËÆæÁΩÆÁ¥¢ÂºïÂàó\n‰ΩøÁî® index_col ÂèÇÊï∞Â∞Ü‰∏ÄÂàóÁî®‰ΩúÁ¥¢ÂºïÔºö\n\n# ‰ΩøÁî® 'message' Âàó‰Ωú‰∏∫Á¥¢Âºï\ncolumn_names = [\"a\", \"b\", \"c\", \"d\", \"message\"]\npd.read_csv(\"examples/ex2.csv\", names=column_names, index_col=\"message\")\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\nmessage\n\n\n\n\n\n\n\n\nhello\n1\n2\n3\n4\n\n\nworld\n5\n6\n7\n8\n\n\nfoo\n9\n10\n11\n12\n\n\n\n\n\n\n\n\n\n\n\n\n\nÁé∞Âú®Ë°åÊ†áÁ≠æÊòØ ‚Äòhello‚Äô„ÄÅ‚Äòworld‚Äô Âíå ‚Äòfoo‚Äô„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂàÜÂ±ÇÁ¥¢Âºï",
    "href": "qmd/pandas3ed6cn.html#ÂàÜÂ±ÇÁ¥¢Âºï",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂàÜÂ±ÇÁ¥¢Âºï",
    "text": "ÂàÜÂ±ÇÁ¥¢Âºï\nÈÄöËøáÊåáÂÆöÂ§ö‰∏™ÂàóÊù•ÂàõÂª∫ÂàÜÂ±ÇÁ¥¢ÂºïÔºö\n\n# ÂàõÂª∫‰∏Ä‰∏™ÂàÜÂ±ÇÁ¥¢Âºï\nparsed = pd.read_csv(\"examples/csv_mindex.csv\", index_col=[\"key1\", \"key2\"])\nparsed\n\n\n\n\n\n\n\n\n\nvalue1\nvalue2\n\n\nkey1\nkey2\n\n\n\n\n\n\none\na\n1\n2\n\n\nb\n3\n4\n\n\nc\n5\n6\n\n\nd\n7\n8\n\n\ntwo\na\n9\n10\n\n\nb\n11\n12\n\n\nc\n13\n14\n\n\nd\n15\n16\n\n\n\n\n\n\n\n\n\n\n\n\n\nÂàÜÂ±ÇÁ¥¢ÂºïÂØπ‰∫éÊõ¥È´òÁª¥Â∫¶ÁöÑÊï∞ÊçÆÂæàÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶",
    "href": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶",
    "text": "Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶\nÊñá‰ª∂ÊúâÊó∂‰ΩøÁî®ÈÄóÂè∑‰ª•Â§ñÁöÑÂàÜÈöîÁ¨¶„ÄÇÁ©∫Ê†ºÁ§∫‰æãÔºö"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶Ê≠£ÂàôË°®ËææÂºè",
    "href": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶Ê≠£ÂàôË°®ËææÂºè",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶ÔºöÊ≠£ÂàôË°®ËææÂºè",
    "text": "Â§ÑÁêÜÈùûÊ†áÂáÜÂàÜÈöîÁ¨¶ÔºöÊ≠£ÂàôË°®ËææÂºè\nÂ∞Ü sep ÂèÇÊï∞‰∏éÊ≠£ÂàôË°®ËææÂºè‰∏ÄËµ∑‰ΩøÁî®Ôºö\n\n# ‰ΩøÁî®Ê≠£ÂàôË°®ËææÂºèÂåπÈÖçÁ©∫Ê†º\nresult = pd.read_csv(\"examples/ex3.txt\", sep=r\"\\s+\")\nresult\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\naaa\n-0.264438\n-1.026059\n-0.619500\n\n\nbbb\n0.927272\n0.302904\n-0.032399\n\n\nccc\n-0.264273\n-0.386314\n-0.217601\n\n\nddd\n-0.871858\n-0.348382\n1.100491\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\s+ ÂåπÈÖç‰∏Ä‰∏™ÊàñÂ§ö‰∏™Á©∫Ê†ºÂ≠óÁ¨¶„ÄÇpandas Êé®Êñ≠Á¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Ë∑≥ËøáË°å",
    "href": "qmd/pandas3ed6cn.html#Ë∑≥ËøáË°å",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Ë∑≥ËøáË°å",
    "text": "Ë∑≥ËøáË°å\n‰ΩøÁî® skiprows ÂøΩÁï•ÁâπÂÆöË°åÔºö\n\n# Ë∑≥ËøáÊåáÂÆöÁöÑË°å\npd.read_csv(\"examples/ex4.csv\", skiprows=[0, 2, 3])\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÁº∫Â§±ÂÄºÈªòËÆ§Ê†áËÆ∞",
    "href": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÁº∫Â§±ÂÄºÈªòËÆ§Ê†áËÆ∞",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â§ÑÁêÜÁº∫Â§±ÂÄºÔºöÈªòËÆ§Ê†áËÆ∞",
    "text": "Â§ÑÁêÜÁº∫Â§±ÂÄºÔºöÈªòËÆ§Ê†áËÆ∞\nÁº∫Â§±Êï∞ÊçÆÂæàÂ∏∏ËßÅ„ÄÇpandas ÂèØ‰ª•ËØÜÂà´ÂÉè ‚ÄúNA‚Äù ËøôÊ†∑ÁöÑÊ†áËÆ∞Ôºö\n\n# ËØªÂèñÊñá‰ª∂ÔºåÊ£ÄÊµã 'NA'\nresult = pd.read_csv(\"examples/ex5.csv\")\nresult\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\nthree\n9\n10\n11.0\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÁº∫Â§±ÂÄºÊ£ÄÊü•Áº∫Â§±ÊÄß",
    "href": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÁº∫Â§±ÂÄºÊ£ÄÊü•Áº∫Â§±ÊÄß",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â§ÑÁêÜÁº∫Â§±ÂÄºÔºöÊ£ÄÊü•Áº∫Â§±ÊÄß",
    "text": "Â§ÑÁêÜÁº∫Â§±ÂÄºÔºöÊ£ÄÊü•Áº∫Â§±ÊÄß\nÊ£ÄÊü•Áº∫Â§±ÂÄºÔºö\n\n# Ê£ÄÊü•Áº∫Â§±ÂÄº\npd.isna(result)\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n1\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n2\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÁº∫Â§±ÂÄºËá™ÂÆö‰πâÊ†áËÆ∞",
    "href": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÁº∫Â§±ÂÄºËá™ÂÆö‰πâÊ†áËÆ∞",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â§ÑÁêÜÁº∫Â§±ÂÄºÔºöËá™ÂÆö‰πâÊ†áËÆ∞",
    "text": "Â§ÑÁêÜÁº∫Â§±ÂÄºÔºöËá™ÂÆö‰πâÊ†áËÆ∞\n‰ΩøÁî® na_values ÊåáÂÆöÂÖ∂‰ªñÁº∫Â§±ÂÄºÂ≠óÁ¨¶‰∏≤Ôºö\n\n# Â∞Ü 'NULL' ËßÜ‰∏∫Áº∫Â§±ÂÄº\nresult = pd.read_csv(\"examples/ex5.csv\", na_values=[\"NULL\"])\nresult\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\nthree\n9\n10\n11.0\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Á¶ÅÁî®ÈªòËÆ§ÁöÑ-na-ÂÄº",
    "href": "qmd/pandas3ed6cn.html#Á¶ÅÁî®ÈªòËÆ§ÁöÑ-na-ÂÄº",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Á¶ÅÁî®ÈªòËÆ§ÁöÑ NA ÂÄº",
    "text": "Á¶ÅÁî®ÈªòËÆ§ÁöÑ NA ÂÄº\n‰ΩøÁî® keep_default_na=False Á¶ÅÁî®ÈªòËÆ§ÁöÑ NA Â§ÑÁêÜÔºö\n\n# Á¶ÅÁî®ÈªòËÆ§ÁöÑ NA Â§ÑÁêÜ\nresult2 = pd.read_csv(\"examples/ex5.csv\", keep_default_na=False)\nresult2\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3\n4\nNA\n\n\n1\ntwo\n5\n6\n\n8\nworld\n\n\n2\nthree\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\n# Ê£ÄÊü•ÊòØÂê¶ÊúâÁº∫Â§±ÂÄºÔºåÊ≠§Êó∂'NA'‰∏ç‰ºöË¢´ËØÜÂà´‰∏∫Áº∫Â§±ÂÄº\nresult2.isna()\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n2\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Á¶ÅÁî®ÈªòËÆ§-na-ÂÄºÊØèÂàóÁöÑÊ†áËÆ∞",
    "href": "qmd/pandas3ed6cn.html#Á¶ÅÁî®ÈªòËÆ§-na-ÂÄºÊØèÂàóÁöÑÊ†áËÆ∞",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Á¶ÅÁî®ÈªòËÆ§ NA ÂÄºÔºöÊØèÂàóÁöÑÊ†áËÆ∞",
    "text": "Á¶ÅÁî®ÈªòËÆ§ NA ÂÄºÔºöÊØèÂàóÁöÑÊ†áËÆ∞\n‰∏∫ÊØè‰∏ÄÂàóÊåáÂÆö‰∏çÂêåÁöÑ NA ÂÄºÔºö\n\n# ‰∏∫ÊØè‰∏ÄÂàóÊåáÂÆö‰∏çÂêåÁöÑ NA ÂÄº\nsentinels = {\"message\": [\"foo\", \"NA\"], \"something\": [\"two\"]}\npd.read_csv(\"examples/ex5.csv\", na_values=sentinels, keep_default_na=False)\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3\n4\nNaN\n\n\n1\nNaN\n5\n6\n\n8\nworld\n\n\n2\nthree\n9\n10\n11\n12\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#read_csvread_table-ÂáΩÊï∞ÂèÇÊï∞ÊëòË¶Å-13",
    "href": "qmd/pandas3ed6cn.html#read_csvread_table-ÂáΩÊï∞ÂèÇÊï∞ÊëòË¶Å-13",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "read_csv/read_table ÂáΩÊï∞ÂèÇÊï∞ÔºöÊëòË¶Å (1/3)",
    "text": "read_csv/read_table ÂáΩÊï∞ÂèÇÊï∞ÔºöÊëòË¶Å (1/3)\n‰ª•‰∏ãÊòØÂÖ≥ÈîÆÂèÇÊï∞ÁöÑÊëòË¶ÅÔºö\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\npath\nÂ≠óÁ¨¶‰∏≤ÔºöÊñá‰ª∂Ë∑ØÂæÑ„ÄÅURL ÊàñÁ±ªÊñá‰ª∂ÂØπË±°„ÄÇ\n\n\nsep Êàñ delimiter\nÁî®‰∫éÂàÜÈöîÂ≠óÊÆµÁöÑÂ≠óÁ¨¶Â∫èÂàóÊàñÊ≠£ÂàôË°®ËææÂºè„ÄÇ\n\n\nheader\nÂàóÂêçÁöÑË°åÂè∑ÔºàÈªòËÆ§‰∏∫ 0Ôºâ„ÄÇÂ¶ÇÊûúÊ≤°ÊúâÊ†áÈ¢òÔºåÂàô‰∏∫ None„ÄÇ\n\n\nindex_col\nÁî®‰ΩúË°åÁ¥¢ÂºïÁöÑÂàó„ÄÇ\n\n\nnames\nÂ¶ÇÊûúÊ≤°ÊúâÊ†áÈ¢òÔºåÂàô‰∏∫ÂàóÂêçÂàóË°®„ÄÇ\n\n\nskiprows\nË¶ÅË∑≥ËøáÁöÑË°åÂè∑ÂàóË°®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#read_csvread_table-ÂáΩÊï∞ÂèÇÊï∞ÊëòË¶Å-23",
    "href": "qmd/pandas3ed6cn.html#read_csvread_table-ÂáΩÊï∞ÂèÇÊï∞ÊëòË¶Å-23",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "read_csv/read_table ÂáΩÊï∞ÂèÇÊï∞ÔºöÊëòË¶Å (2/3)",
    "text": "read_csv/read_table ÂáΩÊï∞ÂèÇÊï∞ÔºöÊëòË¶Å (2/3)\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\nna_values\nË¶ÅÊõøÊç¢‰∏∫ NaN ÁöÑÂÄº„ÄÇ\n\n\nkeep_default_na\n‰ΩøÁî®ÈªòËÆ§ÁöÑ NaN ÂÄºÔºàÈªòËÆ§‰∏∫ TrueÔºâ„ÄÇ\n\n\ncomment\nÁî®‰∫éÂàÜÂâ≤Ë°åÂ∞æÊ≥®ÈáäÁöÑÂ≠óÁ¨¶„ÄÇ\n\n\nparse_dates\nÂ∞ùËØïÂ∞ÜÊï∞ÊçÆËß£Êûê‰∏∫ datetime„ÄÇ\n\n\nkeep_date_col\nÂ¶ÇÊûúËøûÊé•Âàó‰ª•Ëß£ÊûêÊó•ÊúüÔºåÂàô‰øùÁïôËøûÊé•ÁöÑÂàó„ÄÇ\n\n\nconverters\nÂ∞ÜÂàóÂè∑/ÂêçÁß∞Êò†Â∞ÑÂà∞ÂáΩÊï∞ÁöÑÂ≠óÂÖ∏„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#read_csvread_table-ÂáΩÊï∞ÂèÇÊï∞ÊëòË¶Å-33",
    "href": "qmd/pandas3ed6cn.html#read_csvread_table-ÂáΩÊï∞ÂèÇÊï∞ÊëòË¶Å-33",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "read_csv/read_table ÂáΩÊï∞ÂèÇÊï∞ÔºöÊëòË¶Å (3/3)",
    "text": "read_csv/read_table ÂáΩÊï∞ÂèÇÊï∞ÔºöÊëòË¶Å (3/3)\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\ndayfirst\nËß£ÊûêÊúâÊ≠ß‰πâÁöÑÊó•ÊúüÊó∂ÔºåÂ∞ÜÂÖ∂ËßÜ‰∏∫ÂõΩÈôÖÊ†ºÂºè„ÄÇ\n\n\ndate_parser\nÁî®‰∫éËß£ÊûêÊó•ÊúüÁöÑÂáΩÊï∞„ÄÇ\n\n\nnrows\n‰ªéÂ§¥ÂºÄÂßãËØªÂèñÁöÑË°åÊï∞„ÄÇ\n\n\niterator\nËøîÂõû‰∏Ä‰∏™ TextFileReader ‰ª•ËøõË°åÂàÜÊÆµËØªÂèñ„ÄÇ\n\n\nchunksize\nÂØπ‰∫éËø≠‰ª£ÔºåÊñá‰ª∂ÂùóÁöÑÂ§ßÂ∞è„ÄÇ\n\n\nskip_footer\nË¶ÅÂøΩÁï•ÁöÑÊú´Â∞æË°åÊï∞„ÄÇ\n\n\nverbose\nÊâìÂç∞Ëß£Êûê‰ø°ÊÅØ„ÄÇ\n\n\nencoding\nÊñáÊú¨ÁºñÁ†Å„ÄÇ\n\n\nsqueeze\nÂ¶ÇÊûúÂè™Êúâ‰∏ÄÂàóÔºåÂàôËøîÂõû‰∏Ä‰∏™ Series„ÄÇ\n\n\nthousands\nÂçÉ‰ΩçÂàÜÈöîÁ¨¶„ÄÇ\n\n\ndecimal\nÂ∞èÊï∞ÁÇπÂàÜÈöîÁ¨¶„ÄÇ\n\n\nengine\nËß£ÊûêÂºïÊìé: c, python, Êàñ pyarrow."
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂nrows",
    "href": "qmd/pandas3ed6cn.html#ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂nrows",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂Ôºönrows",
    "text": "ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂Ôºönrows\nÂØπ‰∫éÂ§ßÊñá‰ª∂ÔºåËØªÂèñ‰∏ÄÂ∞èÈÉ®ÂàÜÊàñÂàÜÂùóÂ§ÑÁêÜ„ÄÇ\n\n# Âè™ËØªÂèñÂâç 5 Ë°å\npd.read_csv(\"examples/ex6.csv\", nrows=5)\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\nkey\n\n\n\n\n0\n0.467976\n-0.038649\n-0.295344\n-1.824726\nL\n\n\n1\n-0.358893\n1.404453\n0.704965\n-0.200638\nB\n\n\n2\n-0.501840\n0.659254\n-0.421691\n-0.057688\nG\n\n\n3\n0.204886\n1.074134\n1.388361\n-0.982404\nR\n\n\n4\n0.354628\n-0.133116\n0.283763\n-0.837063\nQ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂chunksize",
    "href": "qmd/pandas3ed6cn.html#ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂chunksize",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂Ôºöchunksize",
    "text": "ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂Ôºöchunksize\n‰ΩøÁî® chunksize ÂàÜÂùóËØªÂèñÊñá‰ª∂Ôºö\n\n# ‰ª• 1000 Ë°å‰∏∫‰∏ÄÂùóËØªÂèñÊñá‰ª∂\nchunker = pd.read_csv(\"examples/ex6.csv\", chunksize=1000)\ntype(chunker)\n\npandas.io.parsers.readers.TextFileReader"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂Ëø≠‰ª£",
    "href": "qmd/pandas3ed6cn.html#ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂Ëø≠‰ª£",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂ÔºöËø≠‰ª£",
    "text": "ÂàÜÂùóËØªÂèñÂ§ßÊñá‰ª∂ÔºöËø≠‰ª£\nchunker ÊòØ‰∏Ä‰∏™ TextFileReader„ÄÇÈÅçÂéÜÂÆÉÔºö\n\n# ÈÄêÂùóÂ§ÑÁêÜ\nchunker = pd.read_csv(\"examples/ex6.csv\", chunksize=1000)\n\n# ÂàõÂª∫‰∏Ä‰∏™Á©∫ÁöÑ Series Êù•Â≠òÂÇ®ÁªìÊûú, ÊåáÂÆöÊï∞ÊçÆÁ±ªÂûã‰∏∫ int64\ntot = pd.Series([], dtype='int64')\nfor piece in chunker:\n    # ÁªüËÆ°ÊØè‰∏™Êï∞ÊçÆÂùó‰∏≠ 'key' ÂàóÁöÑÂÄºÔºåÂπ∂Â∞ÜÁªìÊûúÁ¥ØÂä†Âà∞ tot ‰∏≠ÔºåÁº∫Â§±ÂÄºÂ°´ÂÖÖ‰∏∫ 0\n    tot = tot.add(piece[\"key\"].value_counts(), fill_value=0)\n\n# ÂØπÁªìÊûúËøõË°åÈôçÂ∫èÊéíÂ∫è\ntot = tot.sort_values(ascending=False)\n# ÊòæÁ§∫Ââç 10 ‰∏™ÁªìÊûú\ntot[:10]\n\nkey\nE    368.0\nX    364.0\nL    346.0\nO    343.0\nQ    340.0\nM    338.0\nJ    337.0\nF    335.0\nK    334.0\nH    330.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â∞ÜÊï∞ÊçÆÂÜôÂÖ•ÊñáÊú¨Ê†ºÂºèto_csv",
    "href": "qmd/pandas3ed6cn.html#Â∞ÜÊï∞ÊçÆÂÜôÂÖ•ÊñáÊú¨Ê†ºÂºèto_csv",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â∞ÜÊï∞ÊçÆÂÜôÂÖ•ÊñáÊú¨Ê†ºÂºèÔºöto_csv",
    "text": "Â∞ÜÊï∞ÊçÆÂÜôÂÖ•ÊñáÊú¨Ê†ºÂºèÔºöto_csv\nÂ∞ÜÊï∞ÊçÆÂÜôÂÖ•ÂêÑÁßçÊ†ºÂºè„ÄÇto_csv ÊòØ read_csv ÁöÑÂØπÂ∫îÂáΩÊï∞„ÄÇ\n\n# ‰ªé CSV Êñá‰ª∂ËØªÂèñÊï∞ÊçÆ\ndata = pd.read_csv(\"examples/ex5.csv\")\ndata\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\nthree\n9\n10\n11.0\n12\nfoo\n\n\n\n\n\n\n\n\n# ÂÜôÂÖ• CSV Êñá‰ª∂\ndata.to_csv(\"out.csv\")\n\n#‰∏∫‰∫ÜËØÅÊòéÊï∞ÊçÆË¢´ÊàêÂäüÂÜôÂÖ•ÔºåÂÜçÊ¨°ËØªÂèñÊü•Áúã„ÄÇ\npd.read_csv(\"out.csv\")\n\n\n\n\n\n\n\n\nUnnamed: 0\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\n2\nthree\n9\n10\n11.0\n12\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\nÈªòËÆ§ÊÉÖÂÜµ‰∏ã‰ºöÂÜôÂÖ•Ë°åÂíåÂàóÊ†áÁ≠æ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆ‰∏çÂêåÁöÑÂàÜÈöîÁ¨¶",
    "href": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆ‰∏çÂêåÁöÑÂàÜÈöîÁ¨¶",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂÜôÂÖ•Êï∞ÊçÆÔºö‰∏çÂêåÁöÑÂàÜÈöîÁ¨¶",
    "text": "ÂÜôÂÖ•Êï∞ÊçÆÔºö‰∏çÂêåÁöÑÂàÜÈöîÁ¨¶\nÊåáÂÆö‰∏çÂêåÁöÑÂàÜÈöîÁ¨¶Ôºö\n\n# ÂØºÂÖ• sys Ê®°Âùó‰ª•ÂÜôÂÖ•ÊéßÂà∂Âè∞\nimport sys\n# ‰ΩøÁî® '|' ÂàÜÈöîÁ¨¶ÂÜôÂÖ•ÊéßÂà∂Âè∞\ndata.to_csv(sys.stdout, sep=\"|\")\n\n|something|a|b|c|d|message\n0|one|1|2|3.0|4|\n1|two|5|6||8|world\n2|three|9|10|11.0|12|foo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆË°®Á§∫Áº∫Â§±ÂÄº",
    "href": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆË°®Á§∫Áº∫Â§±ÂÄº",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂÜôÂÖ•Êï∞ÊçÆÔºöË°®Á§∫Áº∫Â§±ÂÄº",
    "text": "ÂÜôÂÖ•Êï∞ÊçÆÔºöË°®Á§∫Áº∫Â§±ÂÄº\n‰ª•‰∏çÂêåÁöÑÊñπÂºèË°®Á§∫Áº∫Â§±ÂÄºÔºö\n\n# Â∞ÜÁº∫Â§±ÂÄºË°®Á§∫‰∏∫ 'NULL'\ndata.to_csv(sys.stdout, na_rep=\"NULL\")\n\n,something,a,b,c,d,message\n0,one,1,2,3.0,4,NULL\n1,two,5,6,NULL,8,world\n2,three,9,10,11.0,12,foo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆÁ¶ÅÁî®Ê†áÁ≠æ",
    "href": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆÁ¶ÅÁî®Ê†áÁ≠æ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂÜôÂÖ•Êï∞ÊçÆÔºöÁ¶ÅÁî®Ê†áÁ≠æ",
    "text": "ÂÜôÂÖ•Êï∞ÊçÆÔºöÁ¶ÅÁî®Ê†áÁ≠æ\nÁ¶ÅÁî®Ë°åÂíåÂàóÊ†áÁ≠æÔºö\n\n# ‰∏çÂÜôÂÖ•Ê†áÁ≠æ\ndata.to_csv(sys.stdout, index=False, header=False)\n\none,1,2,3.0,4,\ntwo,5,6,,8,world\nthree,9,10,11.0,12,foo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆÂ≠êÈõÜÂàó",
    "href": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•Êï∞ÊçÆÂ≠êÈõÜÂàó",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂÜôÂÖ•Êï∞ÊçÆÔºöÂ≠êÈõÜÂàó",
    "text": "ÂÜôÂÖ•Êï∞ÊçÆÔºöÂ≠êÈõÜÂàó\nÊåâÁâπÂÆöÈ°∫Â∫èÂÜôÂÖ•ÂàóÁöÑÂ≠êÈõÜÔºö\n\n# Âè™ÂÜôÂÖ• 'a'„ÄÅ'b'„ÄÅ'c' Âàó\ndata.to_csv(sys.stdout, index=False, columns=[\"a\", \"b\", \"c\"])\n\na,b,c\n1,2,3.0\n5,6,\n9,10,11.0"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºècsv-Ê®°Âùó",
    "href": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºècsv-Ê®°Âùó",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºèÔºöcsv Ê®°Âùó",
    "text": "Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºèÔºöcsv Ê®°Âùó\nÂØπ‰∫éÂçïÂ≠óÁ¨¶ÂàÜÈöîÁ¨¶Ôºå‰ΩøÁî® Python ÁöÑ csv Ê®°ÂùóÔºö\n\nimport csv\n\n# ÊâìÂºÄ CSV Êñá‰ª∂\nf = open(\"examples/ex7.csv\")\n# ÂàõÂª∫ csv ËØªÂèñÂô®\nreader = csv.reader(f)\n\n# ÈÄêË°åÊâìÂç∞\nfor line in reader:\n    print(line)\n# ÂÖ≥Èó≠Êñá‰ª∂\nf.close()\n\n['a', 'b', 'c']\n['1', '2', '3']\n['1', '2', '3']"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºèÂ§ÑÁêÜÊï∞ÊçÆ",
    "href": "qmd/pandas3ed6cn.html#Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºèÂ§ÑÁêÜÊï∞ÊçÆ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºèÔºöÂ§ÑÁêÜÊï∞ÊçÆ",
    "text": "Â§ÑÁêÜÂÖ∂‰ªñÂàÜÈöîÊ†ºÂºèÔºöÂ§ÑÁêÜÊï∞ÊçÆ\nÂ∞ÜÊï∞ÊçÆÂ§ÑÁêÜÊàêÂèØÁî®ÁöÑÂΩ¢ÂºèÔºö\n\n# ÊâìÂºÄ CSV Êñá‰ª∂\nwith open(\"examples/ex7.csv\") as f:\n    # Â∞Ü csv.reader ÁöÑÁªìÊûúËΩ¨Êç¢‰∏∫ÂàóË°®\n    lines = list(csv.reader(f))\n\n# Â∞ÜÁ¨¨‰∏ÄË°å‰Ωú‰∏∫Ê†áÈ¢òÔºåÂÖ∂‰ΩôË°å‰Ωú‰∏∫ÂÄº\nheader, values = lines[0], lines[1:]\n\n# ÂàõÂª∫‰∏Ä‰∏™Êï∞ÊçÆÂàóÁöÑÂ≠óÂÖ∏\ndata_dict = {h: v for h, v in zip(header, zip(*values))}\ndata_dict\n\n{'a': ('1', '1'), 'b': ('2', '2'), 'c': ('3', '3')}\n\n\nÂØπ‰∫éÂ§çÊùÇÁöÑÊñá‰ª∂Ôºå‰ΩøÁî®Â≠óÁ¨¶‰∏≤Êìç‰ΩúÊàñÊ≠£ÂàôË°®ËææÂºè„ÄÇpandas.read_csv ÈÄöÂ∏∏Â∞±Ë∂≥Â§ü‰∫Ü„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#csv-ÊñπË®ÄÈÄâÈ°π",
    "href": "qmd/pandas3ed6cn.html#csv-ÊñπË®ÄÈÄâÈ°π",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "CSV ÊñπË®ÄÈÄâÈ°π",
    "text": "CSV ÊñπË®ÄÈÄâÈ°π\ncsv Ê®°ÂùóÊúâÊñπË®ÄÈÄâÈ°πÊù•Ëá™ÂÆö‰πâËß£ÊûêÔºö\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\ndelimiter\nÁî®‰∫éÂàÜÈöîÂ≠óÊÆµÁöÑÂçïÂ≠óÁ¨¶Â≠óÁ¨¶‰∏≤ÔºàÈªòËÆ§‰∏∫ ‚Äò,‚ÄôÔºâ„ÄÇ\n\n\nlineterminator\nÂÜôÂÖ•Êó∂ÁöÑË°åÁªàÊ≠¢Á¨¶ÔºàÈªòËÆ§‰∏∫ ‚Äò‚ÄôÔºâ„ÄÇËØªÂèñÂô®‰ºöÂøΩÁï•Âπ∂ËØÜÂà´Ë∑®Âπ≥Âè∞„ÄÇ\n\n\nquotechar\nÂåÖÂê´ÁâπÊÆäÂ≠óÁ¨¶ÁöÑÂ≠óÊÆµÁöÑÂºïÁî®Â≠óÁ¨¶ÔºàÈªòËÆ§‰∏∫ ‚Äò‚Äú‚ÄôÔºâ„ÄÇ\n\n\nquoting\nÂºïÁî®Á∫¶ÂÆö„ÄÇ\n\n\nskipinitialspace\nÂøΩÁï•ÂàÜÈöîÁ¨¶ÂêéÁöÑÁ©∫Ê†ºÔºàÈªòËÆ§‰∏∫ FalseÔºâ„ÄÇ\n\n\ndoublequote\nÂ§ÑÁêÜÂ≠óÊÆµÂÜÖÁöÑÂºïÁî®Â≠óÁ¨¶„ÄÇ\n\n\nescapechar\nÂ¶ÇÊûú quoting ‰∏∫ csv.QUOTE_NONEÔºåÂàôÁî®‰∫éËΩ¨‰πâÂàÜÈöîÁ¨¶ÁöÑÂ≠óÁ¨¶‰∏≤„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#csv-ÊñπË®ÄËá™ÂÆö‰πâÂ≠êÁ±ª",
    "href": "qmd/pandas3ed6cn.html#csv-ÊñπË®ÄËá™ÂÆö‰πâÂ≠êÁ±ª",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "CSV ÊñπË®ÄÔºöËá™ÂÆö‰πâÂ≠êÁ±ª",
    "text": "CSV ÊñπË®ÄÔºöËá™ÂÆö‰πâÂ≠êÁ±ª\nÂÆö‰πâ‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑÊñπË®ÄÂ≠êÁ±ªÔºö\n\n# ÂÆö‰πâ‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑÊñπË®ÄÂ≠êÁ±ª\nclass MyDialect(csv.Dialect):\n    lineterminator = \"\\n\"  # Ë°åÁªàÊ≠¢Á¨¶\n    delimiter = \";\"       # ÂàÜÈöîÁ¨¶\n    quotechar = '\"'        # ÂºïÁî®Â≠óÁ¨¶\n    quoting = csv.QUOTE_MINIMAL  # ÂºïÁî®Á∫¶ÂÆö\n\n# ‰ΩøÁî®Ëá™ÂÆö‰πâÊñπË®ÄÂàõÂª∫ csv ËØªÂèñÂô®\n#reader = csv.reader(f, dialect=my_dialect)"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#csv-ÊñπË®ÄÁõ¥Êé•ÈÄâÈ°π",
    "href": "qmd/pandas3ed6cn.html#csv-ÊñπË®ÄÁõ¥Êé•ÈÄâÈ°π",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "CSV ÊñπË®ÄÔºöÁõ¥Êé•ÈÄâÈ°π",
    "text": "CSV ÊñπË®ÄÔºöÁõ¥Êé•ÈÄâÈ°π\nÊàñËÄÖÁõ¥Êé•‰º†ÈÄíÊñπË®ÄÈÄâÈ°πÔºö\n\n# ‰ΩøÁî® '|' ‰Ωú‰∏∫ÂàÜÈöîÁ¨¶ÂàõÂª∫ csv ËØªÂèñÂô®\n#reader = csv.reader(f, delimiter=\"|\")"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#json-Êï∞ÊçÆ",
    "href": "qmd/pandas3ed6cn.html#json-Êï∞ÊçÆ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "JSON Êï∞ÊçÆ",
    "text": "JSON Êï∞ÊçÆ\nJSON ÊòØ‰∏ÄÁßçÁÅµÊ¥ªÁöÑÊ†ºÂºèÔºåÁî®‰∫éÂú® Web ‰∏äËøõË°åÊï∞ÊçÆ‰∫§Êç¢„ÄÇ\n\n# Á§∫‰æã JSON Â≠óÁ¨¶‰∏≤\nobj = \"\"\"\n{\"name\": \"Wes\",\n \"cities_lived\": [\"Akron\", \"Nashville\", \"New York\", \"San Francisco\"],\n \"pet\": null,\n \"siblings\": [{\"name\": \"Scott\", \"age\": 34, \"hobbies\": [\"guitars\", \"soccer\"]},\n              {\"name\": \"Katie\", \"age\": 42, \"hobbies\": [\"diving\", \"art\"]}]\n}\n\"\"\"\n\n\n\n\n\n\n\nJSON Êé•ËøëÊúâÊïàÁöÑ Python ‰ª£Á†ÅÔºà‰æãÂ¶ÇÔºå‰ΩøÁî® null ËÄå‰∏çÊòØ NoneÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#jsonjson.loads-Âíå-json.dumps",
    "href": "qmd/pandas3ed6cn.html#jsonjson.loads-Âíå-json.dumps",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "JSONÔºöjson.loads Âíå json.dumps",
    "text": "JSONÔºöjson.loads Âíå json.dumps\n\nimport json\n\n# Â∞Ü JSON Â≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫ Python ÂØπË±°\nresult = json.loads(obj)\nresult\n\n{'name': 'Wes',\n 'cities_lived': ['Akron', 'Nashville', 'New York', 'San Francisco'],\n 'pet': None,\n 'siblings': [{'name': 'Scott', 'age': 34, 'hobbies': ['guitars', 'soccer']},\n  {'name': 'Katie', 'age': 42, 'hobbies': ['diving', 'art']}]}\n\n\n\n# Â∞Ü Python ÂØπË±°ËΩ¨Êç¢‰∏∫ JSON Â≠óÁ¨¶‰∏≤\nasjson = json.dumps(result)\nasjson\n\n'{\"name\": \"Wes\", \"cities_lived\": [\"Akron\", \"Nashville\", \"New York\", \"San Francisco\"], \"pet\": null, \"siblings\": [{\"name\": \"Scott\", \"age\": 34, \"hobbies\": [\"guitars\", \"soccer\"]}, {\"name\": \"Katie\", \"age\": 42, \"hobbies\": [\"diving\", \"art\"]}]}'"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-pandas-ËØªÂèñ-json‰ªéÂ≠óÂÖ∏ÂàóË°®",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-pandas-ËØªÂèñ-json‰ªéÂ≠óÂÖ∏ÂàóË°®",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® Pandas ËØªÂèñ JSONÔºö‰ªéÂ≠óÂÖ∏ÂàóË°®",
    "text": "‰ΩøÁî® Pandas ËØªÂèñ JSONÔºö‰ªéÂ≠óÂÖ∏ÂàóË°®\n‰ªéÂ≠óÂÖ∏ÂàóË°®ÂàõÂª∫‰∏Ä‰∏™ DataFrameÔºö\n\n# ÊèêÂèñ 'siblings' Êï∞ÊçÆ\nsiblings = pd.DataFrame(result[\"siblings\"], columns=[\"name\", \"age\"])\nsiblings\n\n\n\n\n\n\n\n\nname\nage\n\n\n\n\n0\nScott\n34\n\n\n1\nKatie\n42"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-pandas-ËØªÂèñ-jsonread_json",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-pandas-ËØªÂèñ-jsonread_json",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® Pandas ËØªÂèñ JSONÔºöread_json",
    "text": "‰ΩøÁî® Pandas ËØªÂèñ JSONÔºöread_json\npandas.read_json Â∞Ü JSON ËΩ¨Êç¢‰∏∫ Series/DataFrameÔºö\n\n# ËØªÂèñ JSON Êñá‰ª∂\ndata = pd.read_json(\"examples/example.json\")\ndata\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\n1\n2\n3\n\n\n1\n4\n5\n6\n\n\n2\n7\n8\n9"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂØºÂá∫Âà∞-jsonto_json",
    "href": "qmd/pandas3ed6cn.html#ÂØºÂá∫Âà∞-jsonto_json",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂØºÂá∫Âà∞ JSONÔºöto_json",
    "text": "ÂØºÂá∫Âà∞ JSONÔºöto_json\n‰ΩøÁî® to_json ‰ªé pandas ÂØºÂá∫Âà∞ JSONÔºö\n\n# ÂØºÂá∫Âà∞ JSONÔºàÈù¢ÂêëÂàóÔºâ\nprint(data.to_json())\n\n{\"a\":{\"0\":1,\"1\":4,\"2\":7},\"b\":{\"0\":2,\"1\":5,\"2\":8},\"c\":{\"0\":3,\"1\":6,\"2\":9}}\n\n\n\n# ÂØºÂá∫Âà∞ JSONÔºàÈù¢ÂêëË°åÔºâ\nprint(data.to_json(orient=\"records\"))\n\n[{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}]"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#xml-Âíå-htmlweb-ÊäìÂèñ",
    "href": "qmd/pandas3ed6cn.html#xml-Âíå-htmlweb-ÊäìÂèñ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "XML Âíå HTMLÔºöWeb ÊäìÂèñ",
    "text": "XML Âíå HTMLÔºöWeb ÊäìÂèñ\nÂÉè lxml„ÄÅBeautiful Soup„ÄÅhtml5lib ËøôÊ†∑ÁöÑÂ∫ìÂèØ‰ª•Â§ÑÁêÜ HTML/XML„ÄÇpandas ‰ΩøÁî® read_html Êù•Â§ÑÁêÜ HTML Ë°®Ê†º„ÄÇ\nÂÆâË£ÖÔºö\n\nconda install lxml beautifulsoup4 html5lib\n# Êàñ\npip install lxml beautifulsoup4 html5lib"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#web-ÊäìÂèñÁ§∫‰æã",
    "href": "qmd/pandas3ed6cn.html#web-ÊäìÂèñÁ§∫‰æã",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Web ÊäìÂèñÁ§∫‰æã",
    "text": "Web ÊäìÂèñÁ§∫‰æã\n\n# ‰ªé HTML Ëß£ÊûêË°®Ê†º\ntables = pd.read_html(\"examples/fdic_failed_bank_list.html\")\nlen(tables)\nfailures = tables[0]\nfailures.head()\n\nÂõ†‰∏∫ notebook Êñá‰ª∂‰∏çËÉΩÁõ¥Êé•ËÆøÈóÆÊú¨Âú∞Êñá‰ª∂ÔºåÊâÄ‰ª•‰∏äÈù¢ËøôÊÆµ‰ª£Á†ÅÂú®ÊâßË°åÊó∂‰ºöÊä•ÈîôÔºå‰ΩÜÂú®ÂÆûÈôÖÊÉÖÊôØ‰∏≠ÔºåÊòØÂèØ‰ª•Ê≠£Â∏∏ËøêË°åÁöÑ„ÄÇ\nËøôÈáåÊàë‰ª¨ÊäìÂèñ‰∫ÜÁΩëÁ´ôÂÜÖÂÆπÔºåÊâÄ‰ª•‰æùÁÑ∂ÂèØ‰ª•Áî®Ëøô‰∏™ÁΩëÂùÄÂÅöÊºîÁ§∫„ÄÇ\n\n# ‰ªé FDIC ÁΩëÁ´ôËØªÂèñ HTML Ë°®Ê†º\ntables = pd.read_html(\"https://www.fdic.gov/resources/resolutions/bank-failures/failed-bank-list/\")\n# Ê£ÄÊü•ÊâæÂà∞‰∫ÜÂ§öÂ∞ë‰∏™Ë°®Ê†º\nlen(tables)\n# Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™Ë°®Ê†º\nfailures = tables[0]\n# ÊòæÁ§∫Á¨¨‰∏Ä‰∏™Ë°®Ê†ºÁöÑÂâçÂá†Ë°å\nfailures.head()\n\n\n\n\n\n\n\n\nBank Name\nCity\nState\nCert\nAquiring Institution\nClosing Date\nFund Sort ascending\n\n\n\n\n0\nPulaski Savings Bank\nChicago\nIllinois\n28611\nMillennium Bank\nJanuary 17, 2025\n10548\n\n\n1\nThe First National Bank of Lindsay\nLindsay\nOklahoma\n4134\nFirst Bank & Trust Co., Duncan, OK\nOctober 18, 2024\n10547\n\n\n2\nRepublic First Bank dba Republic Bank\nPhiladelphia\nPennsylvania\n27332\nFulton Bank, National Association\nApril 26, 2024\n10546\n\n\n3\nCitizens Bank\nSac City\nIowa\n8758\nIowa Trust & Savings Bank\nNovember 3, 2023\n10545\n\n\n4\nHeartland Tri-State Bank\nElkhart\nKansas\n25851\nDream First Bank, N.A.\nJuly 28, 2023\n10544"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#web-ÊäìÂèñÂêéÁöÑÊï∞ÊçÆÊ∏ÖÁêÜÂíåÂàÜÊûê",
    "href": "qmd/pandas3ed6cn.html#web-ÊäìÂèñÂêéÁöÑÊï∞ÊçÆÊ∏ÖÁêÜÂíåÂàÜÊûê",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Web ÊäìÂèñÂêéÁöÑÊï∞ÊçÆÊ∏ÖÁêÜÂíåÂàÜÊûê",
    "text": "Web ÊäìÂèñÂêéÁöÑÊï∞ÊçÆÊ∏ÖÁêÜÂíåÂàÜÊûê\nÊ∏ÖÁêÜÂíåÂàÜÊûêÂä†ËΩΩÁöÑÊï∞ÊçÆÔºö\n\n# Â∞Ü \"Closing Date\" ÂàóËΩ¨Êç¢‰∏∫Êó•ÊúüÊó∂Èó¥Á±ªÂûã\nclose_timestamps = pd.to_datetime(failures[\"Closing Date\"])\n\n# ÊåâÂπ¥‰ªΩÁªüËÆ°ÂÄíÈó≠Èì∂Ë°åÁöÑÊï∞Èáè\nclose_timestamps.dt.year.value_counts()\n\nClosing Date\n2023    5\n2024    2\n2020    2\n2025    1\nName: count, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-lxml.objectify-Ëß£Êûê-xml",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-lxml.objectify-Ëß£Êûê-xml",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® lxml.objectify Ëß£Êûê XML",
    "text": "‰ΩøÁî® lxml.objectify Ëß£Êûê XML\nXML ÊØî HTML Êõ¥ÈÄöÁî®„ÄÇ‰ª• MTA Êï∞ÊçÆ‰∏∫‰æãÔºö\n\nfrom lxml import objectify\n\n# XML Êñá‰ª∂Ë∑ØÂæÑ\npath = \"datasets/mta_perf/Performance_MNR.xml\"\n# ÊâìÂºÄÊñá‰ª∂Âπ∂Ëß£Êûê XML\nwith open(path) as f:\n    parsed = objectify.parse(f)\n# Ëé∑ÂèñÊ†πÂÖÉÁ¥†\nroot = parsed.getroot()\n\ndata = []\n# Ë¶ÅË∑≥ËøáÁöÑÂ≠óÊÆµ\nskip_fields = [\"PARENT_SEQ\", \"INDICATOR_SEQ\", \"DESIRED_CHANGE\", \"DECIMAL_PLACES\"]\n\n# ÈÅçÂéÜÊ†πÂÖÉÁ¥†ÁöÑ INDICATOR Â≠êÂÖÉÁ¥†\nfor elt in root.INDICATOR:\n    el_data = {}\n    # ÈÅçÂéÜ INDICATOR ÂÖÉÁ¥†ÁöÑÂ≠êÂÖÉÁ¥†\n    for child in elt.getchildren():\n        # Ë∑≥ËøáÊåáÂÆöÂ≠óÊÆµ\n        if child.tag in skip_fields:\n            continue\n        # Â∞ÜÂ≠êÂÖÉÁ¥†ÁöÑÊ†áÁ≠æÂíåÂÄºÊ∑ªÂä†Âà∞Â≠óÂÖ∏‰∏≠\n        el_data[child.tag] = child.pyval\n    # Â∞ÜÂ≠óÂÖ∏Ê∑ªÂä†Âà∞ÂàóË°®‰∏≠\n    data.append(el_data)\n\n# ‰ªéÂàóË°®ÂàõÂª∫ DataFrame\nperf = pd.DataFrame(data)\nperf.head()\n\nÂõ†‰∏∫ notebook Êñá‰ª∂‰∏çËÉΩÁõ¥Êé•ËÆøÈóÆÊú¨Âú∞Êñá‰ª∂ÔºåÊâÄ‰ª•‰∏äÈù¢ËøôÊÆµ‰ª£Á†ÅÂú®ÊâßË°åÊó∂‰ºöÊä•ÈîôÔºå‰ΩÜÂú®ÂÆûÈôÖÊÉÖÊôØ‰∏≠ÔºåÊòØÂèØ‰ª•Ê≠£Â∏∏ËøêË°åÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Ëß£Êûê-xmlpandas.read_xml",
    "href": "qmd/pandas3ed6cn.html#Ëß£Êûê-xmlpandas.read_xml",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Ëß£Êûê XMLÔºöpandas.read_xml",
    "text": "Ëß£Êûê XMLÔºöpandas.read_xml\npandas ‰πüÊúâ read_xmlÔºö\n\nperf2 = pd.read_xml(path)\nperf2.head()"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰∫åËøõÂà∂Êï∞ÊçÆÊ†ºÂºè",
    "href": "qmd/pandas3ed6cn.html#‰∫åËøõÂà∂Êï∞ÊçÆÊ†ºÂºè",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰∫åËøõÂà∂Êï∞ÊçÆÊ†ºÂºè",
    "text": "‰∫åËøõÂà∂Êï∞ÊçÆÊ†ºÂºè\n‰∫åËøõÂà∂Ê†ºÂºèÂèØËÉΩÊØîÊñáÊú¨Ê†ºÂºèÊõ¥ÊúâÊïà„ÄÇ\n\nPickle\nPython ÁöÑ pickle Ê®°ÂùóÂèØ‰ª•Â∫èÂàóÂåñ/ÂèçÂ∫èÂàóÂåñÂØπË±°„ÄÇ‰ΩøÁî® to_pickleÔºö\n\n# ‰ªé CSV Êñá‰ª∂ËØªÂèñÊï∞ÊçÆ\nframe = pd.read_csv(\"examples/ex1.csv\")\nframe\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\n# Â∞Ü DataFrame ‰øùÂ≠ò‰∏∫ pickle Êñá‰ª∂\nframe.to_pickle(\"frame_pickle\")"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#pickleread_pickle",
    "href": "qmd/pandas3ed6cn.html#pickleread_pickle",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "PickleÔºöread_pickle",
    "text": "PickleÔºöread_pickle\n‰ΩøÁî® pandas.read_pickle ËØªÂèñ pickled ÂØπË±°Ôºö\n\npd.read_pickle(\"frame_pickle\")\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\npickle ‰ªÖÁî®‰∫éÁü≠ÊúüÂ≠òÂÇ®„ÄÇ\n\n\n\n\nHDF5\nHDF5 Â≠òÂÇ®Â§ßÂûãÊï∞ÁªÑÔºåÊîØÊåÅÂéãÁº©ÔºåÈ´òÊïàÁöÑÂ≠êÈõÜ„ÄÇ\nÂÆâË£Ö PyTablesÔºö\n\nconda install pytables\n# Êàñ\npip install tables"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-hdf5-Ê†ºÂºè",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-hdf5-Ê†ºÂºè",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® HDF5 Ê†ºÂºè",
    "text": "‰ΩøÁî® HDF5 Ê†ºÂºè\nHDF5 Â≠òÂÇ®Â§ö‰∏™Â∏¶ÊúâÂÖÉÊï∞ÊçÆÁöÑÊï∞ÊçÆÈõÜ„ÄÇHDFStore Â∞±ÂÉè‰∏Ä‰∏™Â≠óÂÖ∏Ôºö\n\nimport numpy as np\n# ÂàõÂª∫‰∏Ä‰∏™ DataFrame\nframe = pd.DataFrame({\"a\": np.random.standard_normal(100)})\n# ÂàõÂª∫‰∏Ä‰∏™ HDFStore ÂØπË±°\nstore = pd.HDFStore(\"mydata.h5\")\n# Â∞Ü DataFrame Â≠òÂÇ®‰∏∫ 'obj1'\nstore[\"obj1\"] = frame\n# Â∞Ü DataFrame ÁöÑ 'a' ÂàóÂ≠òÂÇ®‰∏∫ 'obj1_col'\nstore[\"obj1_col\"] = frame[\"a\"]\nstore"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-hdf5ËÆøÈóÆÊï∞ÊçÆ",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-hdf5ËÆøÈóÆÊï∞ÊçÆ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® HDF5ÔºöËÆøÈóÆÊï∞ÊçÆ",
    "text": "‰ΩøÁî® HDF5ÔºöËÆøÈóÆÊï∞ÊçÆ\n\n# ËÆøÈóÆÂ≠òÂÇ®ÁöÑ 'obj1'\nstore[\"obj1\"]"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#hdf5Â≠òÂÇ®Ê®°Âºè",
    "href": "qmd/pandas3ed6cn.html#hdf5Â≠òÂÇ®Ê®°Âºè",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "HDF5ÔºöÂ≠òÂÇ®Ê®°Âºè",
    "text": "HDF5ÔºöÂ≠òÂÇ®Ê®°Âºè\n‚Äúfixed‚ÄùÔºàÈªòËÆ§ÔºâÂíå ‚Äútable‚Äù„ÄÇ‚Äútable‚Äù ËæÉÊÖ¢ÔºåÊîØÊåÅÊü•ËØ¢Ôºö\n\n# ‰ΩøÁî® \"table\" Ê†ºÂºèÂ≠òÂÇ® 'obj2'\nstore.put(\"obj2\", frame, format=\"table\")\n# Êü•ËØ¢ 'obj2' ‰∏≠Á¥¢ÂºïÂú® 10 Âà∞ 15 ‰πãÈó¥ÁöÑË°å\nstore.select(\"obj2\", where=[\"index &gt;= 10 and index &lt;= 15\"])"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#hdf5pandas.read_hdf",
    "href": "qmd/pandas3ed6cn.html#hdf5pandas.read_hdf",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "HDF5Ôºöpandas.read_hdf",
    "text": "HDF5Ôºöpandas.read_hdf\npandas.read_hdf ÊòØ‰∏Ä‰∏™Âø´Êç∑ÊñπÂºèÔºö\n\n# Â∞Ü DataFrame ‰ª• \"table\" Ê†ºÂºè‰øùÂ≠òÂà∞ HDF5 Êñá‰ª∂‰∏≠ÁöÑ 'obj3'\nframe.to_hdf(\"mydata.h5\", \"obj3\", format=\"table\")\n# ‰ªé HDF5 Êñá‰ª∂‰∏≠ËØªÂèñ 'obj3'ÔºåÂπ∂Êü•ËØ¢Á¥¢ÂºïÂ∞è‰∫é 5 ÁöÑË°å\npd.read_hdf(\"mydata.h5\", \"obj3\", where=[\"index &lt; 5\"])\n\n\n\n\n\n\n\nHDF5 ‰∏çÊòØÊï∞ÊçÆÂ∫ì„ÄÇ‰∏ÄÊ¨°ÂÜôÂÖ•ÔºåÂ§öÊ¨°ËØªÂèñ„ÄÇÂπ∂ÂèëÂÜôÂÖ•‰ºöÊçüÂùèÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ËØªÂèñ-microsoft-excel-Êñá‰ª∂",
    "href": "qmd/pandas3ed6cn.html#ËØªÂèñ-microsoft-excel-Êñá‰ª∂",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ËØªÂèñ Microsoft Excel Êñá‰ª∂",
    "text": "ËØªÂèñ Microsoft Excel Êñá‰ª∂\npandas ‰ΩøÁî® ExcelFile Êàñ read_excel„ÄÇÈúÄË¶Å xlrd„ÄÅopenpyxlÔºö\n\nconda install openpyxl xlrd\n# Êàñ\npip install openpyxl xlrd"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#excelexcelfile",
    "href": "qmd/pandas3ed6cn.html#excelexcelfile",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ExcelÔºöExcelFile",
    "text": "ExcelÔºöExcelFile\n\n# ÂàõÂª∫ ExcelFile ÂØπË±°\nxlsx = pd.ExcelFile(\"examples/ex1.xlsx\")\n\nÂõ†‰∏∫ notebook Êñá‰ª∂‰∏çËÉΩÁõ¥Êé•ËÆøÈóÆÊú¨Âú∞Êñá‰ª∂ÔºåÊâÄ‰ª•‰∏äÈù¢ËøôÊÆµ‰ª£Á†ÅÂú®ÊâßË°åÊó∂‰ºöÊä•ÈîôÔºå‰ΩÜÂú®ÂÆûÈôÖÊÉÖÊôØ‰∏≠ÔºåÊòØÂèØ‰ª•Ê≠£Â∏∏ËøêË°åÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#excel-Á§∫‰æãÂáÜÂ§á",
    "href": "qmd/pandas3ed6cn.html#excel-Á§∫‰æãÂáÜÂ§á",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Excel Á§∫‰æãÂáÜÂ§á",
    "text": "Excel Á§∫‰æãÂáÜÂ§á"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#excelÂ∑•‰ΩúË°®ÂêçÁß∞",
    "href": "qmd/pandas3ed6cn.html#excelÂ∑•‰ΩúË°®ÂêçÁß∞",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ExcelÔºöÂ∑•‰ΩúË°®ÂêçÁß∞",
    "text": "ExcelÔºöÂ∑•‰ΩúË°®ÂêçÁß∞\n\n# ÊòæÁ§∫Â∑•‰ΩúË°®ÂêçÁß∞\nxlsx = pd.ExcelFile(\"ex1.xlsx\") # ËØªÂèñÊú¨Âú∞ excel Êñá‰ª∂\nxlsx.sheet_names\n\n['Sheet1']"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#excelËØªÂèñÂ∑•‰ΩúË°®",
    "href": "qmd/pandas3ed6cn.html#excelËØªÂèñÂ∑•‰ΩúË°®",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ExcelÔºöËØªÂèñÂ∑•‰ΩúË°®",
    "text": "ExcelÔºöËØªÂèñÂ∑•‰ΩúË°®\n\n# ËØªÂèñ‰∏Ä‰∏™Â∑•‰ΩúË°®\nxlsx.parse(sheet_name=\"Sheet1\")\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#excelÊåáÂÆöÁ¥¢Âºï",
    "href": "qmd/pandas3ed6cn.html#excelÊåáÂÆöÁ¥¢Âºï",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ExcelÔºöÊåáÂÆöÁ¥¢Âºï",
    "text": "ExcelÔºöÊåáÂÆöÁ¥¢Âºï\n\n# ÊåáÂÆöÁ¥¢ÂºïÂàó\nxlsx.parse(sheet_name=\"Sheet1\", index_col=0)\n\n\n\n\n\n\n\n\nb\nc\nd\nmessage\n\n\na\n\n\n\n\n\n\n\n\n1\n2\n3\n4\nhello\n\n\n5\n6\n7\n8\nworld\n\n\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#excelread_excel",
    "href": "qmd/pandas3ed6cn.html#excelread_excel",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ExcelÔºöread_excel",
    "text": "ExcelÔºöread_excel\nÂØπ‰∫éÂ§ö‰∏™Â∑•‰ΩúË°®ÔºåExcelFile Êõ¥Âø´„ÄÇÊàñËÄÖ‰ΩøÁî® read_excelÔºö\n\n# ËØªÂèñ Excel Êñá‰ª∂‰∏≠ÁöÑ 'Sheet1' Â∑•‰ΩúË°®\nframe = pd.read_excel(\"ex1.xlsx\", sheet_name=\"Sheet1\")\nframe\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•-excelexcelwriter",
    "href": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•-excelexcelwriter",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂÜôÂÖ• ExcelÔºöExcelWriter",
    "text": "ÂÜôÂÖ• ExcelÔºöExcelWriter\nÂàõÂª∫ ExcelWriterÔºåÁÑ∂ÂêéÂÜôÂÖ•Ôºö\n\n# ÂàõÂª∫ ExcelWriter ÂØπË±°\nwriter = pd.ExcelWriter(\"ex2.xlsx\")\n# Â∞Ü DataFrame ÂÜôÂÖ•Âà∞ 'Sheet1' Â∑•‰ΩúË°®\nframe.to_excel(writer, \"Sheet1\")\n# ÂÖ≥Èó≠ÂÜôÂÖ•Âô®\nwriter.close()"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•-excelto_excel",
    "href": "qmd/pandas3ed6cn.html#ÂÜôÂÖ•-excelto_excel",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÂÜôÂÖ• ExcelÔºöto_excel",
    "text": "ÂÜôÂÖ• ExcelÔºöto_excel\nÊàñËÄÖÔºåÊõ¥ÁÆÄÊ¥ÅÂú∞Ôºö\n\n# Â∞Ü DataFrame ÂÜôÂÖ•Âà∞ Excel Êñá‰ª∂\nframe.to_excel(\"ex2.xlsx\")"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰∏é-web-api-‰∫§‰∫í",
    "href": "qmd/pandas3ed6cn.html#‰∏é-web-api-‰∫§‰∫í",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰∏é Web API ‰∫§‰∫í",
    "text": "‰∏é Web API ‰∫§‰∫í\nÁΩëÁ´ôÈÄöËøá API Êèê‰æõÊï∞ÊçÆÔºåÈÄöÂ∏∏ÊòØ JSON Ê†ºÂºè„ÄÇrequests Â∫ìÂæàÊñπ‰æø„ÄÇ\nÂÆâË£ÖÔºö\n\nconda install requests\n# Êàñ\npip install requests"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#web-apirequests-Á§∫‰æã",
    "href": "qmd/pandas3ed6cn.html#web-apirequests-Á§∫‰æã",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Web APIÔºörequests Á§∫‰æã",
    "text": "Web APIÔºörequests Á§∫‰æã\n\nimport requests\n\n# GitHub API ÁöÑ URLÔºåÁî®‰∫éËé∑Âèñ pandas È°πÁõÆÁöÑÈóÆÈ¢ò\nurl = \"https://api.github.com/repos/pandas-dev/pandas/issues\"\n# ÂèëÈÄÅ GET ËØ∑Ê±Ç\nresp = requests.get(url)\n# Ê£ÄÊü• HTTP ÈîôËØØ\nresp.raise_for_status()\n# ÊòæÁ§∫ÂìçÂ∫îÂØπË±°\nresp\n\n&lt;Response [200]&gt;"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#web-apiËß£Êûê-json-ÂìçÂ∫î",
    "href": "qmd/pandas3ed6cn.html#web-apiËß£Êûê-json-ÂìçÂ∫î",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Web APIÔºöËß£Êûê JSON ÂìçÂ∫î",
    "text": "Web APIÔºöËß£Êûê JSON ÂìçÂ∫î\n\n# Â∞Ü JSON ÂìçÂ∫îËß£Êûê‰∏∫ Python ÂØπË±°\ndata = resp.json()\n# ÊòæÁ§∫Á¨¨‰∏Ä‰∏™ÈóÆÈ¢òÁöÑÊ†áÈ¢ò\ndata[0][\"title\"]\n\n'DEPS: Revert SQLAlchemy minimum version back to 1.4.36'"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#web-apiÂàõÂª∫-dataframe",
    "href": "qmd/pandas3ed6cn.html#web-apiÂàõÂª∫-dataframe",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Web APIÔºöÂàõÂª∫ DataFrame",
    "text": "Web APIÔºöÂàõÂª∫ DataFrame\n\n# ‰ªéÈóÆÈ¢òÊï∞ÊçÆÂàõÂª∫ DataFrameÔºåÈÄâÊã© 'number'„ÄÅ'title'„ÄÅ'labels'„ÄÅ'state' Âàó\nissues = pd.DataFrame(data, columns=[\"number\", \"title\", \"labels\", \"state\"])\n#ÊòæÁ§∫Êï∞ÊçÆÁöÑÂâçÂá†Ë°å\nissues.head()\n\n\n\n\n\n\n\n\nnumber\ntitle\nlabels\nstate\n\n\n\n\n0\n60977\nDEPS: Revert SQLAlchemy minimum version back t...\n[]\nopen\n\n\n1\n60976\nDOC: Clarify the magnitude for truncation\n[]\nopen\n\n\n2\n60975\nGH60942 Update docs and overload for Series.re...\n[]\nopen\n\n\n3\n60973\nDOC: No warning in set_index() that previous i...\n[{'id': 134699, 'node_id': 'MDU6TGFiZWwxMzQ2OT...\nopen\n\n\n4\n60972\nBUG: `import pandas` failed in Python 3.13.2 f...\n[{'id': 76811, 'node_id': 'MDU6TGFiZWw3NjgxMQ=...\nopen\n\n\n\n\n\n\n\nÊûÑÂª∫Êõ¥È´òÁ∫ßÂà´ÁöÑÊé•Âè£‰ª•ËøîÂõû DataFrame„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰∏éÊï∞ÊçÆÂ∫ì‰∫§‰∫í",
    "href": "qmd/pandas3ed6cn.html#‰∏éÊï∞ÊçÆÂ∫ì‰∫§‰∫í",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰∏éÊï∞ÊçÆÂ∫ì‰∫§‰∫í",
    "text": "‰∏éÊï∞ÊçÆÂ∫ì‰∫§‰∫í\nSQL Êï∞ÊçÆÂ∫ìÂæàÂ∏∏ËßÅ„ÄÇpandas ÁÆÄÂåñ‰∫Ü‰ªéÊü•ËØ¢‰∏≠Âä†ËΩΩÊï∞ÊçÆÁöÑËøáÁ®ã„ÄÇ\nSQLite3 Á§∫‰æãÔºàÂÜÖÁΩÆÔºâÔºö\n\nimport sqlite3\n\n# ÂàõÂª∫Ë°®ÁöÑ SQL Êü•ËØ¢\nquery = \"\"\"\nCREATE TABLE test\n(a VARCHAR(20), b VARCHAR(20),\n c REAL,        d INTEGER\n);\"\"\"\n\n# ËøûÊé•Âà∞ SQLite Êï∞ÊçÆÂ∫ìÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôÂàõÂª∫Ôºâ\ncon = sqlite3.connect(\"mydata.sqlite\")\n# ÊâßË°å SQL Êü•ËØ¢\ncon.execute(query)\n# Êèê‰∫§Êõ¥Êîπ\ncon.commit()"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÊèíÂÖ•Êï∞ÊçÆ",
    "href": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÊèíÂÖ•Êï∞ÊçÆ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Êï∞ÊçÆÂ∫ìÔºöÊèíÂÖ•Êï∞ÊçÆ",
    "text": "Êï∞ÊçÆÂ∫ìÔºöÊèíÂÖ•Êï∞ÊçÆ\n\n# Ë¶ÅÊèíÂÖ•ÁöÑÊï∞ÊçÆ\ndata = [(\"Atlanta\", \"Georgia\", 1.25, 6),\n        (\"Tallahassee\", \"Florida\", 2.6, 3),\n        (\"Sacramento\", \"California\", 1.7, 5)]\n# ÊèíÂÖ•Êï∞ÊçÆÁöÑ SQL ËØ≠Âè•\nstmt = \"INSERT INTO test VALUES(?, ?, ?, ?)\"\n# ÊâßË°åÂ§öË°åÊèíÂÖ•\ncon.executemany(stmt, data)\n# Êèê‰∫§Êõ¥Êîπ\ncon.commit()"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÊ£ÄÁ¥¢Êï∞ÊçÆ",
    "href": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÊ£ÄÁ¥¢Êï∞ÊçÆ",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Êï∞ÊçÆÂ∫ìÔºöÊ£ÄÁ¥¢Êï∞ÊçÆ",
    "text": "Êï∞ÊçÆÂ∫ìÔºöÊ£ÄÁ¥¢Êï∞ÊçÆ\n\n# ÊâßË°å SELECT Êü•ËØ¢\ncursor = con.execute(\"SELECT * FROM test\")\n# Ëé∑ÂèñÊâÄÊúâÁªìÊûú\nrows = cursor.fetchall()\nrows"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÂàóÂêç",
    "href": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÂàóÂêç",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Êï∞ÊçÆÂ∫ìÔºöÂàóÂêç",
    "text": "Êï∞ÊçÆÂ∫ìÔºöÂàóÂêç\n\n# Ëé∑ÂèñÂàóÂêç\ncursor.description"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÂàõÂª∫-dataframe",
    "href": "qmd/pandas3ed6cn.html#Êï∞ÊçÆÂ∫ìÂàõÂª∫-dataframe",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "Êï∞ÊçÆÂ∫ìÔºöÂàõÂª∫ DataFrame",
    "text": "Êï∞ÊçÆÂ∫ìÔºöÂàõÂª∫ DataFrame\n\n# ‰ªéÊü•ËØ¢ÁªìÊûúÂàõÂª∫ DataFrame\npd.DataFrame(rows, columns=[x[0] for x in cursor.description])"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#‰ΩøÁî®-sqlalchemy",
    "href": "qmd/pandas3ed6cn.html#‰ΩøÁî®-sqlalchemy",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "‰ΩøÁî® SQLAlchemy",
    "text": "‰ΩøÁî® SQLAlchemy\nSQLAlchemy Êèê‰æõ‰∫ÜÊõ¥È´òÁ∫ßÂà´ÁöÑÊäΩË±°„ÄÇpandas ÁöÑ read_sql ÂáΩÊï∞ÂèØ‰ª•‰ΩøÁî®ÂÆÉ„ÄÇ\nÂÆâË£ÖÔºö\n\nconda install sqlalchemy"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#sqlalchemy-Á§∫‰æã",
    "href": "qmd/pandas3ed6cn.html#sqlalchemy-Á§∫‰æã",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "SQLAlchemy Á§∫‰æã",
    "text": "SQLAlchemy Á§∫‰æã\n\nimport sqlalchemy as sqla\n\n# ÂàõÂª∫ SQLAlchemy ÂºïÊìéÔºåËøûÊé•Âà∞ SQLite Êï∞ÊçÆÂ∫ì\ndb = sqla.create_engine(\"sqlite:///mydata.sqlite\")\n# ‰ΩøÁî® pandas ÁöÑ read_sql ÂáΩÊï∞ÊâßË°å SQL Êü•ËØ¢\npd.read_sql(\"SELECT * FROM test\", db)"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÁªìËÆ∫",
    "href": "qmd/pandas3ed6cn.html#ÁªìËÆ∫",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÁªìËÆ∫",
    "text": "ÁªìËÆ∫\nËÆøÈóÆÊï∞ÊçÆÊòØÁ¨¨‰∏ÄÊ≠•„ÄÇÊú¨Á´†‰ªãÁªç‰∫ÜÂä†ËΩΩ/Â≠òÂÇ®Êï∞ÊçÆÁöÑÂ∑•ÂÖ∑ÔºöÊñáÊú¨„ÄÅ‰∫åËøõÂà∂„ÄÅÊï∞ÊçÆÂ∫ì„ÄÅAPI„ÄÇ‰∏ã‰∏ÄÊ≠•ÔºöÊ∏ÖÁêÜ„ÄÅËΩ¨Êç¢„ÄÅÂàÜÊûê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed6cn.html#ÊÄªÁªì",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nÊï∞ÊçÆÂä†ËΩΩËá≥ÂÖ≥ÈáçË¶ÅÔºö Â∞ÜÊï∞ÊçÆÂä†ËΩΩÂà∞ Python ‰∏≠„ÄÇ\npandas ÊòØ‰Ω†ÁöÑÊúãÂèãÔºö Áî®‰∫éËØªÂèñ/ÂÜôÂÖ•Êï∞ÊçÆ„ÄÇ\nread_csv ÊòØÂÖ≥ÈîÆÔºö Áî®‰∫éÈÄóÂè∑ÂàÜÈöîÂÄºÊñá‰ª∂„ÄÇ\nÂ§ÑÁêÜÊ∑∑‰π±ÁöÑÊï∞ÊçÆÔºö Áº∫Â§±ÂÄº„ÄÅË∑≥ËøáË°å„ÄÅÂàÜÈöîÁ¨¶„ÄÇ\n‰∫åËøõÂà∂Ê†ºÂºèÈ´òÊïàÔºö Pickle„ÄÅHDF5„ÄÇ\nWeb API ÊòØ‰∏Ä‰∏™Êù•Ê∫êÔºö requests Â∫ì„ÄÇ\nÊï∞ÊçÆÂ∫ìÂæàÂ∏∏ËßÅÔºö pandas„ÄÅSQLAlchemy„ÄÇ\nÂÆûË∑µÊòØÂÖ≥ÈîÆÔºö ÁªÉ‰π†Âä†ËΩΩ‰∏çÂêåÁöÑÊï∞ÊçÆÊ∫ê„ÄÇü•≥"
  },
  {
    "objectID": "qmd/pandas3ed6cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed6cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Á¨¨6Á´†ÔºöÊï∞ÊçÆÂä†ËΩΩ„ÄÅÂ≠òÂÇ®‰∏éÊñá‰ª∂Ê†ºÂºè",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î\n\n‰Ω†ÈÅáÂà∞ËøáÂì™‰∫õÊï∞ÊçÆÁ±ªÂûãÔºüÊ†ºÂºèÔºü\nÂ§ÑÁêÜÊ∑∑‰π±/‰∏çÂÆåÊï¥Êï∞ÊçÆÁöÑÁªèÈ™åÔºü\n‰∏çÂêåÂ≠òÂÇ®Ê†ºÂºè‰πãÈó¥ÁöÑÊùÉË°°Ôºü\nÊé¢Á¥¢ pandas ÊñáÊ°£„ÄÇ\nÂ∞ùËØï SQL Êï∞ÊçÆÂ∫ìËøûÊé•„ÄÇ\nÊâæÂà∞‰∏Ä‰∏™ÂÖ¨ÂÖ± APIÔºå‰ΩøÁî® Python ËÆøÈóÆÂÆÉ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed6.html",
    "href": "qmd/pandas3ed6.html",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "",
    "text": "Welcome to the world of data analysis! üåç Before we can unlock insights from data, we need to get it into our Python environment. This chapter focuses on that crucial first step: data loading.\nThink of it like this: before you can cook a delicious meal üç≥, you first need to gather your ingredients üçÖü•ïü•¶. Data loading is like gathering the ingredients for your data analysis recipe."
  },
  {
    "objectID": "qmd/pandas3ed6.html#introduction-why-data-loading-matters",
    "href": "qmd/pandas3ed6.html#introduction-why-data-loading-matters",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "",
    "text": "Welcome to the world of data analysis! üåç Before we can unlock insights from data, we need to get it into our Python environment. This chapter focuses on that crucial first step: data loading.\nThink of it like this: before you can cook a delicious meal üç≥, you first need to gather your ingredients üçÖü•ïü•¶. Data loading is like gathering the ingredients for your data analysis recipe."
  },
  {
    "objectID": "qmd/pandas3ed6.html#introduction-what-well-cover",
    "href": "qmd/pandas3ed6.html#introduction-what-well-cover",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Introduction: What We‚Äôll Cover",
    "text": "Introduction: What We‚Äôll Cover\nWe‚Äôll cover various ways to load data, including:\n\nText files (like CSV)\nBinary formats\nDatabases\nWeb APIs"
  },
  {
    "objectID": "qmd/pandas3ed6.html#core-concepts-data-analysis",
    "href": "qmd/pandas3ed6.html#core-concepts-data-analysis",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Core Concepts: Data Analysis üìä",
    "text": "Core Concepts: Data Analysis üìä\nData analysis is the process of inspecting, cleaning, transforming, and modeling data to discover useful information, draw conclusions, and support decision-making. It‚Äôs like being a detective üïµÔ∏è‚Äç‚ôÄÔ∏è, but instead of solving crimes, you‚Äôre solving puzzles hidden within data."
  },
  {
    "objectID": "qmd/pandas3ed6.html#core-concepts-machine-learning",
    "href": "qmd/pandas3ed6.html#core-concepts-machine-learning",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Core Concepts: Machine Learning ü§ñ",
    "text": "Core Concepts: Machine Learning ü§ñ\nMachine learning is a subfield of artificial intelligence (AI) that focuses on enabling computers to learn from data without being explicitly programmed. Think of it as teaching a computer to learn like a child üë∂, by showing it examples instead of giving it strict rules."
  },
  {
    "objectID": "qmd/pandas3ed6.html#core-concepts-python",
    "href": "qmd/pandas3ed6.html#core-concepts-python",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Core Concepts: Python üêç",
    "text": "Core Concepts: Python üêç\nPython is a versatile, high-level programming language popular for data analysis and machine learning. It‚Äôs known for its readability and extensive libraries, which makes it easier to perform complex tasks. It‚Äôs like having a Swiss Army knife üõ†Ô∏è for data analysis."
  },
  {
    "objectID": "qmd/pandas3ed6.html#core-concepts-data-science-venn-diagram",
    "href": "qmd/pandas3ed6.html#core-concepts-data-science-venn-diagram",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Core Concepts: Data Science Venn Diagram",
    "text": "Core Concepts: Data Science Venn Diagram\n\n\n\nData Science Venn Diagram. Source: Drew Conway"
  },
  {
    "objectID": "qmd/pandas3ed6.html#pandas-for-data-inputoutput",
    "href": "qmd/pandas3ed6.html#pandas-for-data-inputoutput",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Pandas for Data Input/Output",
    "text": "Pandas for Data Input/Output\nThe pandas library is your best friend in Python for handling tabular data. It provides the DataFrame object, a powerful structure for storing and manipulating data in rows and columns (like a spreadsheet!). pandas offers several functions for reading and writing data in various formats."
  },
  {
    "objectID": "qmd/pandas3ed6.html#data-parsing",
    "href": "qmd/pandas3ed6.html#data-parsing",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Data Parsing",
    "text": "Data Parsing\n\n\n\n\n\n\nData parsing, often called data loading, involves reading data from a file or other source and converting it into a usable format (like a DataFrame). It also often includes the initial interpretation of data types within the data."
  },
  {
    "objectID": "qmd/pandas3ed6.html#common-pandas-data-loading-functions-12",
    "href": "qmd/pandas3ed6.html#common-pandas-data-loading-functions-12",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Common pandas Data Loading Functions (1/2)",
    "text": "Common pandas Data Loading Functions (1/2)\nThe following table lists some of the most commonly used data loading functions in pandas. We‚Äôll focus on read_csv in this section.\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nread_csv\nLoad delimited data from a file, URL, or file-like object; uses comma as the default delimiter.\n\n\nread_fwf\nRead data in fixed-width column format (i.e., no delimiters).\n\n\nread_clipboard\nVariation of read_csv that reads data from clipboard; useful for converting tables from web pages.\n\n\nread_excel\nRead tabular data from an Excel XLS or XLSX file.\n\n\nread_hdf\nRead HDF5 files written by pandas.\n\n\nread_html\nRead all tables found in the given HTML document.\n\n\nread_json\nRead data from a JSON (JavaScript Object Notation) string representation, file, URL, or file-like object."
  },
  {
    "objectID": "qmd/pandas3ed6.html#common-pandas-data-loading-functions-22",
    "href": "qmd/pandas3ed6.html#common-pandas-data-loading-functions-22",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Common pandas Data Loading Functions (2/2)",
    "text": "Common pandas Data Loading Functions (2/2)\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nread_feather\nRead the Feather binary file format.\n\n\nread_orc\nRead the Apache ORC binary file format.\n\n\nread_parquet\nRead the Apache Parquet binary file format.\n\n\nread_pickle\nRead an object stored by pandas using the Python pickle format.\n\n\nread_sas\nRead a SAS dataset stored in one of the SAS system‚Äôs custom formats.\n\n\nread_spss\nRead a data file created by SPSS.\n\n\nread_sql\nRead the results of a SQL query (using SQLAlchemy).\n\n\nread_sql_table\nRead a whole SQL table (using SQLAlchemy).\n\n\nread_stata\nRead a dataset from Stata file format.\n\n\nread_xml\nRead a table of data from an XML file."
  },
  {
    "objectID": "qmd/pandas3ed6.html#focus-read_csv",
    "href": "qmd/pandas3ed6.html#focus-read_csv",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Focus: read_csv",
    "text": "Focus: read_csv\nread_csv is a cornerstone for handling comma-separated value files, and it‚Äôs one of the most frequently used functions."
  },
  {
    "objectID": "qmd/pandas3ed6.html#optional-arguments-overview",
    "href": "qmd/pandas3ed6.html#optional-arguments-overview",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Optional Arguments: Overview",
    "text": "Optional Arguments: Overview\nData loading functions have many optional arguments to customize the process. They generally fall into these categories:\n\nIndexing: Choosing index columns and handling column names.\nType inference and data conversion: Customizing data type detection and missing value representation.\nDate and time parsing: Combining and converting date/time information.\nIterating: Handling large files in chunks.\nUnclean data issues: Skipping rows, handling comments, etc."
  },
  {
    "objectID": "qmd/pandas3ed6.html#pandas-documentation",
    "href": "qmd/pandas3ed6.html#pandas-documentation",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "pandas Documentation",
    "text": "pandas Documentation\n\n\n\n\n\n\nDon‚Äôt be overwhelmed! The pandas online documentation has great examples. A Google search like ‚Äúpandas read_csv skip header‚Äù often helps."
  },
  {
    "objectID": "qmd/pandas3ed6.html#reading-csv-files-with-read_csv---basic-example",
    "href": "qmd/pandas3ed6.html#reading-csv-files-with-read_csv---basic-example",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Reading CSV Files with read_csv - Basic Example",
    "text": "Reading CSV Files with read_csv - Basic Example\nLet‚Äôs start with reading a comma-separated values (CSV) file.\n\n# Import pandas\nimport pandas as pd\n\n# Read the CSV file\ndf = pd.read_csv(\"examples/ex1.csv\")\n\n# Display the DataFrame\ndf\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\npd.read_csv() detects the header row and uses commas as the delimiter. The index is auto-generated."
  },
  {
    "objectID": "qmd/pandas3ed6.html#specifying-the-header-row-no-header",
    "href": "qmd/pandas3ed6.html#specifying-the-header-row-no-header",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Specifying the Header Row: No Header",
    "text": "Specifying the Header Row: No Header\nSometimes, your CSV file might not have a header row."
  },
  {
    "objectID": "qmd/pandas3ed6.html#specifying-the-header-row-default-column-names",
    "href": "qmd/pandas3ed6.html#specifying-the-header-row-default-column-names",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Specifying the Header Row: Default Column Names",
    "text": "Specifying the Header Row: Default Column Names\nTell pandas to use default column names:\n\n# Let pandas assign default column names\npd.read_csv(\"examples/ex2.csv\", header=None)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#specifying-the-header-row-custom-column-names",
    "href": "qmd/pandas3ed6.html#specifying-the-header-row-custom-column-names",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Specifying the Header Row: Custom Column Names",
    "text": "Specifying the Header Row: Custom Column Names\nOr, provide your own column names:\n\n# Provide your own column names\ncolumn_names = [\"a\", \"b\", \"c\", \"d\", \"message\"]\npd.read_csv(\"examples/ex2.csv\", names=column_names)\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#setting-the-index-column",
    "href": "qmd/pandas3ed6.html#setting-the-index-column",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Setting the Index Column",
    "text": "Setting the Index Column\nUse the index_col argument to use a column as the index:\n\n# Use 'message' column as index\ncolumn_names = [\"a\", \"b\", \"c\", \"d\", \"message\"]\npd.read_csv(\"examples/ex2.csv\", names=column_names, index_col=\"message\")\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\nmessage\n\n\n\n\n\n\n\n\nhello\n1\n2\n3\n4\n\n\nworld\n5\n6\n7\n8\n\n\nfoo\n9\n10\n11\n12\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow the row labels are ‚Äòhello‚Äô, ‚Äòworld‚Äô, and ‚Äòfoo‚Äô."
  },
  {
    "objectID": "qmd/pandas3ed6.html#hierarchical-indexing",
    "href": "qmd/pandas3ed6.html#hierarchical-indexing",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Hierarchical Indexing",
    "text": "Hierarchical Indexing\nCreate a hierarchical index by specifying multiple columns:\n\n# Create a hierarchical index\nparsed = pd.read_csv(\"examples/csv_mindex.csv\", index_col=[\"key1\", \"key2\"])\nparsed\n\n\n\n\n\n\n\n\n\nvalue1\nvalue2\n\n\nkey1\nkey2\n\n\n\n\n\n\none\na\n1\n2\n\n\nb\n3\n4\n\n\nc\n5\n6\n\n\nd\n7\n8\n\n\ntwo\na\n9\n10\n\n\nb\n11\n12\n\n\nc\n13\n14\n\n\nd\n15\n16\n\n\n\n\n\n\n\n\n\n\n\n\n\nHierarchical indexing is useful for higher-dimensional data."
  },
  {
    "objectID": "qmd/pandas3ed6.html#handling-non-standard-delimiters",
    "href": "qmd/pandas3ed6.html#handling-non-standard-delimiters",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Handling Non-Standard Delimiters",
    "text": "Handling Non-Standard Delimiters\nFiles sometimes use delimiters other than commas. Whitespace example:"
  },
  {
    "objectID": "qmd/pandas3ed6.html#handling-non-standard-delimiters-regular-expressions",
    "href": "qmd/pandas3ed6.html#handling-non-standard-delimiters-regular-expressions",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Handling Non-Standard Delimiters: Regular Expressions",
    "text": "Handling Non-Standard Delimiters: Regular Expressions\nUse the sep argument with a regular expression:\n\n# Use a regex for whitespace\nresult = pd.read_csv(\"examples/ex3.txt\", sep=r\"\\s+\")\nresult\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\naaa\n-0.264438\n-1.026059\n-0.619500\n\n\nbbb\n0.927272\n0.302904\n-0.032399\n\n\nccc\n-0.264273\n-0.386314\n-0.217601\n\n\nddd\n-0.871858\n-0.348382\n1.100491\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\s+ matches one or more whitespace characters. pandas infers the index."
  },
  {
    "objectID": "qmd/pandas3ed6.html#skipping-rows",
    "href": "qmd/pandas3ed6.html#skipping-rows",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Skipping Rows",
    "text": "Skipping Rows\nUse skiprows to ignore specific rows:\n\n# Skip rows\npd.read_csv(\"examples/ex4.csv\", skiprows=[0, 2, 3])\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#handling-missing-values-default-sentinels",
    "href": "qmd/pandas3ed6.html#handling-missing-values-default-sentinels",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Handling Missing Values: Default Sentinels",
    "text": "Handling Missing Values: Default Sentinels\nMissing data is common. pandas recognizes sentinels like ‚ÄúNA‚Äù:\n\n# Read, detecting 'NA'\nresult = pd.read_csv(\"examples/ex5.csv\")\nresult\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\nthree\n9\n10\n11.0\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#handling-missing-values-checking-for-missingness",
    "href": "qmd/pandas3ed6.html#handling-missing-values-checking-for-missingness",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Handling Missing Values: Checking for Missingness",
    "text": "Handling Missing Values: Checking for Missingness\nCheck for missing values:\n\n# Check for missing values\npd.isna(result)\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n1\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n2\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed6.html#handling-missing-values-custom-sentinels",
    "href": "qmd/pandas3ed6.html#handling-missing-values-custom-sentinels",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Handling Missing Values: Custom Sentinels",
    "text": "Handling Missing Values: Custom Sentinels\nSpecify additional missing value strings with na_values:\n\n# Treat 'NULL' as missing\nresult = pd.read_csv(\"examples/ex5.csv\", na_values=[\"NULL\"])\nresult\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\nthree\n9\n10\n11.0\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#disabling-default-na-values",
    "href": "qmd/pandas3ed6.html#disabling-default-na-values",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Disabling Default NA Values",
    "text": "Disabling Default NA Values\nDisable default NA handling with keep_default_na=False:\n\n# Disable default NA handling\nresult2 = pd.read_csv(\"examples/ex5.csv\", keep_default_na=False)\nresult2\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3\n4\nNA\n\n\n1\ntwo\n5\n6\n\n8\nworld\n\n\n2\nthree\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\nresult2.isna()\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n2\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed6.html#disabling-default-na-values-per-column-sentinels",
    "href": "qmd/pandas3ed6.html#disabling-default-na-values-per-column-sentinels",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Disabling Default NA Values: Per-Column Sentinels",
    "text": "Disabling Default NA Values: Per-Column Sentinels\nSpecify different NA values for each column:\n\n# Different NA values per column\nsentinels = {\"message\": [\"foo\", \"NA\"], \"something\": [\"two\"]}\npd.read_csv(\"examples/ex5.csv\", na_values=sentinels, keep_default_na=False)\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3\n4\nNaN\n\n\n1\nNaN\n5\n6\n\n8\nworld\n\n\n2\nthree\n9\n10\n11\n12\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed6.html#read_csvread_table-function-arguments-a-summary-13",
    "href": "qmd/pandas3ed6.html#read_csvread_table-function-arguments-a-summary-13",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "read_csv/read_table Function Arguments: A Summary (1/3)",
    "text": "read_csv/read_table Function Arguments: A Summary (1/3)\nHere‚Äôs a summary of key arguments:\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\npath\nString: file path, URL, or file-like object.\n\n\nsep or delimiter\nCharacter sequence or regular expression to split fields.\n\n\nheader\nRow number for column names (default 0). None if no header.\n\n\nindex_col\nColumn(s) for row index.\n\n\nnames\nList of column names if no header.\n\n\nskiprows\nList of row numbers to skip."
  },
  {
    "objectID": "qmd/pandas3ed6.html#read_csvread_table-function-arguments-a-summary-23",
    "href": "qmd/pandas3ed6.html#read_csvread_table-function-arguments-a-summary-23",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "read_csv/read_table Function Arguments: A Summary (2/3)",
    "text": "read_csv/read_table Function Arguments: A Summary (2/3)\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nna_values\nValues to replace with NaN.\n\n\nkeep_default_na\nUse default NaN values (default True).\n\n\ncomment\nCharacter(s) to split comments off the end of lines.\n\n\nparse_dates\nAttempt to parse data to datetime.\n\n\nkeep_date_col\nIf joining columns to parse date, keep the joined columns.\n\n\nconverters\nDictionary mapping column number/name to functions."
  },
  {
    "objectID": "qmd/pandas3ed6.html#read_csvread_table-function-arguments-a-summary-33",
    "href": "qmd/pandas3ed6.html#read_csvread_table-function-arguments-a-summary-33",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "read_csv/read_table Function Arguments: A Summary (3/3)",
    "text": "read_csv/read_table Function Arguments: A Summary (3/3)\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\ndayfirst\nWhen parsing ambiguous dates, treat as international format.\n\n\ndate_parser\nFunction to parse dates.\n\n\nnrows\nNumber of rows to read from the beginning.\n\n\niterator\nReturn a TextFileReader for piecemeal reading.\n\n\nchunksize\nFor iteration, size of file chunks.\n\n\nskip_footer\nNumber of lines to ignore at the end.\n\n\nverbose\nPrint parsing information.\n\n\nencoding\nText encoding.\n\n\nsqueeze\nIf only one column, return a Series.\n\n\nthousands\nSeparator for thousands.\n\n\ndecimal\nDecimal separator.\n\n\nengine\nParsing engine: c, python, or pyarrow."
  },
  {
    "objectID": "qmd/pandas3ed6.html#reading-large-files-in-chunks-nrows",
    "href": "qmd/pandas3ed6.html#reading-large-files-in-chunks-nrows",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Reading Large Files in Chunks: nrows",
    "text": "Reading Large Files in Chunks: nrows\nFor large files, read a small portion or process in chunks.\n\n# Read only first 5 rows\npd.read_csv(\"examples/ex6.csv\", nrows=5)\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\nkey\n\n\n\n\n0\n0.467976\n-0.038649\n-0.295344\n-1.824726\nL\n\n\n1\n-0.358893\n1.404453\n0.704965\n-0.200638\nB\n\n\n2\n-0.501840\n0.659254\n-0.421691\n-0.057688\nG\n\n\n3\n0.204886\n1.074134\n1.388361\n-0.982404\nR\n\n\n4\n0.354628\n-0.133116\n0.283763\n-0.837063\nQ"
  },
  {
    "objectID": "qmd/pandas3ed6.html#reading-large-files-in-chunks-chunksize",
    "href": "qmd/pandas3ed6.html#reading-large-files-in-chunks-chunksize",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Reading Large Files in Chunks: chunksize",
    "text": "Reading Large Files in Chunks: chunksize\nRead a file in chunks with chunksize:\n\n# Read in chunks of 1000 rows\nchunker = pd.read_csv(\"examples/ex6.csv\", chunksize=1000)\ntype(chunker)\n\npandas.io.parsers.readers.TextFileReader"
  },
  {
    "objectID": "qmd/pandas3ed6.html#reading-large-files-in-chunks-iterating",
    "href": "qmd/pandas3ed6.html#reading-large-files-in-chunks-iterating",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Reading Large Files in Chunks: Iterating",
    "text": "Reading Large Files in Chunks: Iterating\nchunker is a TextFileReader. Iterate through it:\n\n# Process chunk by chunk\nchunker = pd.read_csv(\"examples/ex6.csv\", chunksize=1000)\n\ntot = pd.Series([], dtype='int64')\nfor piece in chunker:\n    tot = tot.add(piece[\"key\"].value_counts(), fill_value=0)\n\ntot = tot.sort_values(ascending=False)\ntot[:10]\n\nkey\nE    368.0\nX    364.0\nL    346.0\nO    343.0\nQ    340.0\nM    338.0\nJ    337.0\nF    335.0\nK    334.0\nH    330.0\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed6.html#writing-data-to-text-format-to_csv",
    "href": "qmd/pandas3ed6.html#writing-data-to-text-format-to_csv",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Writing Data to Text Format: to_csv",
    "text": "Writing Data to Text Format: to_csv\nWrite data to various formats. to_csv is the counterpart to read_csv.\n\ndata = pd.read_csv(\"examples/ex5.csv\")\ndata\n\n\n\n\n\n\n\n\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\nthree\n9\n10\n11.0\n12\nfoo\n\n\n\n\n\n\n\n\n# Write to CSV\ndata.to_csv(\"out.csv\")\n\n#To prove that the data was successfully written.\npd.read_csv(\"out.csv\")\n\n\n\n\n\n\n\n\nUnnamed: 0\nsomething\na\nb\nc\nd\nmessage\n\n\n\n\n0\n0\none\n1\n2\n3.0\n4\nNaN\n\n\n1\n1\ntwo\n5\n6\nNaN\n8\nworld\n\n\n2\n2\nthree\n9\n10\n11.0\n12\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\nRow and column labels are written by default."
  },
  {
    "objectID": "qmd/pandas3ed6.html#writing-data-different-delimiter",
    "href": "qmd/pandas3ed6.html#writing-data-different-delimiter",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Writing Data: Different Delimiter",
    "text": "Writing Data: Different Delimiter\nSpecify a different delimiter:\n\n# Import sys to write to console\nimport sys\n# Write to console with '|' delimiter\ndata.to_csv(sys.stdout, sep=\"|\")\n\n|something|a|b|c|d|message\n0|one|1|2|3.0|4|\n1|two|5|6||8|world\n2|three|9|10|11.0|12|foo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#writing-data-representing-missing-values",
    "href": "qmd/pandas3ed6.html#writing-data-representing-missing-values",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Writing Data: Representing Missing Values",
    "text": "Writing Data: Representing Missing Values\nRepresent missing values differently:\n\n# Represent missing values as 'NULL'\ndata.to_csv(sys.stdout, na_rep=\"NULL\")\n\n,something,a,b,c,d,message\n0,one,1,2,3.0,4,NULL\n1,two,5,6,NULL,8,world\n2,three,9,10,11.0,12,foo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#writing-data-disabling-labels",
    "href": "qmd/pandas3ed6.html#writing-data-disabling-labels",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Writing Data: Disabling Labels",
    "text": "Writing Data: Disabling Labels\nDisable row and column labels:\n\n# Don't write labels\ndata.to_csv(sys.stdout, index=False, header=False)\n\none,1,2,3.0,4,\ntwo,5,6,,8,world\nthree,9,10,11.0,12,foo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#writing-data-subsetting-columns",
    "href": "qmd/pandas3ed6.html#writing-data-subsetting-columns",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Writing Data: Subsetting Columns",
    "text": "Writing Data: Subsetting Columns\nWrite a subset of columns, in a specific order:\n\n# Write only columns 'a', 'b', 'c'\ndata.to_csv(sys.stdout, index=False, columns=[\"a\", \"b\", \"c\"])\n\na,b,c\n1,2,3.0\n5,6,\n9,10,11.0"
  },
  {
    "objectID": "qmd/pandas3ed6.html#working-with-other-delimited-formats-csv-module",
    "href": "qmd/pandas3ed6.html#working-with-other-delimited-formats-csv-module",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Working with Other Delimited Formats: csv Module",
    "text": "Working with Other Delimited Formats: csv Module\nFor single-character delimiters, use Python‚Äôs csv module:\n\nimport csv\n\nf = open(\"examples/ex7.csv\")\nreader = csv.reader(f)\n\nfor line in reader:\n    print(line)\nf.close()\n\n['a', 'b', 'c']\n['1', '2', '3']\n['1', '2', '3']"
  },
  {
    "objectID": "qmd/pandas3ed6.html#working-with-other-delimited-formats-processing-data",
    "href": "qmd/pandas3ed6.html#working-with-other-delimited-formats-processing-data",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Working with Other Delimited Formats: Processing Data",
    "text": "Working with Other Delimited Formats: Processing Data\nProcess the data into a usable form:\n\nwith open(\"examples/ex7.csv\") as f:\n    lines = list(csv.reader(f))\n\nheader, values = lines[0], lines[1:]\n\n# Create a dictionary of data columns\ndata_dict = {h: v for h, v in zip(header, zip(*values))}\ndata_dict\n\n{'a': ('1', '1'), 'b': ('2', '2'), 'c': ('3', '3')}\n\n\nFor complex files, use string manipulation or regular expressions. pandas.read_csv often suffices."
  },
  {
    "objectID": "qmd/pandas3ed6.html#csv-dialect-options",
    "href": "qmd/pandas3ed6.html#csv-dialect-options",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "CSV Dialect Options",
    "text": "CSV Dialect Options\nThe csv module has dialect options to customize parsing:\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\ndelimiter\nOne-character string to separate fields (default ‚Äò,‚Äô).\n\n\nlineterminator\nLine terminator for writing (default ‚Äò‚Äô). Reader ignores and recognizes cross-platform.\n\n\nquotechar\nQuote character for fields with special characters (default ‚Äò‚Äú‚Äô).\n\n\nquoting\nQuoting convention.\n\n\nskipinitialspace\nIgnore whitespace after delimiter (default False).\n\n\ndoublequote\nHandle quoting character inside a field.\n\n\nescapechar\nString to escape delimiter if quoting is csv.QUOTE_NONE."
  },
  {
    "objectID": "qmd/pandas3ed6.html#csv-dialect-custom-subclass",
    "href": "qmd/pandas3ed6.html#csv-dialect-custom-subclass",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "CSV Dialect: Custom Subclass",
    "text": "CSV Dialect: Custom Subclass\nDefine a custom dialect subclass:\n\nclass MyDialect(csv.Dialect):\n    lineterminator = \"\\n\"\n    delimiter = \";\"\n    quotechar = '\"'\n    quoting = csv.QUOTE_MINIMAL\n\n#reader = csv.reader(f, dialect=my_dialect)"
  },
  {
    "objectID": "qmd/pandas3ed6.html#csv-dialect-direct-options",
    "href": "qmd/pandas3ed6.html#csv-dialect-direct-options",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "CSV Dialect: Direct Options",
    "text": "CSV Dialect: Direct Options\nOr pass dialect options directly:\n\n#reader = csv.reader(f, delimiter=\"|\")"
  },
  {
    "objectID": "qmd/pandas3ed6.html#json-data",
    "href": "qmd/pandas3ed6.html#json-data",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "JSON Data",
    "text": "JSON Data\nJSON is a flexible format for data exchange on the web.\n\n# Example JSON string\nobj = \"\"\"\n{\"name\": \"Wes\",\n \"cities_lived\": [\"Akron\", \"Nashville\", \"New York\", \"San Francisco\"],\n \"pet\": null,\n \"siblings\": [{\"name\": \"Scott\", \"age\": 34, \"hobbies\": [\"guitars\", \"soccer\"]},\n              {\"name\": \"Katie\", \"age\": 42, \"hobbies\": [\"diving\", \"art\"]}]\n}\n\"\"\"\n\n\n\n\n\n\n\nJSON is close to valid Python code (e.g., null instead of None)."
  },
  {
    "objectID": "qmd/pandas3ed6.html#json-json.loads-and-json.dumps",
    "href": "qmd/pandas3ed6.html#json-json.loads-and-json.dumps",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "JSON: json.loads and json.dumps",
    "text": "JSON: json.loads and json.dumps\n\nimport json\n\n# JSON string to Python object\nresult = json.loads(obj)\nresult\n\n{'name': 'Wes',\n 'cities_lived': ['Akron', 'Nashville', 'New York', 'San Francisco'],\n 'pet': None,\n 'siblings': [{'name': 'Scott', 'age': 34, 'hobbies': ['guitars', 'soccer']},\n  {'name': 'Katie', 'age': 42, 'hobbies': ['diving', 'art']}]}\n\n\n\n# Python object to JSON\nasjson = json.dumps(result)\nasjson\n\n'{\"name\": \"Wes\", \"cities_lived\": [\"Akron\", \"Nashville\", \"New York\", \"San Francisco\"], \"pet\": null, \"siblings\": [{\"name\": \"Scott\", \"age\": 34, \"hobbies\": [\"guitars\", \"soccer\"]}, {\"name\": \"Katie\", \"age\": 42, \"hobbies\": [\"diving\", \"art\"]}]}'"
  },
  {
    "objectID": "qmd/pandas3ed6.html#reading-json-with-pandas-from-list-of-dicts",
    "href": "qmd/pandas3ed6.html#reading-json-with-pandas-from-list-of-dicts",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Reading JSON with Pandas: From List of Dicts",
    "text": "Reading JSON with Pandas: From List of Dicts\nCreate a DataFrame from a list of dictionaries:\n\n# Extract 'siblings' data\nsiblings = pd.DataFrame(result[\"siblings\"], columns=[\"name\", \"age\"])\nsiblings\n\n\n\n\n\n\n\n\nname\nage\n\n\n\n\n0\nScott\n34\n\n\n1\nKatie\n42"
  },
  {
    "objectID": "qmd/pandas3ed6.html#reading-json-with-pandas-read_json",
    "href": "qmd/pandas3ed6.html#reading-json-with-pandas-read_json",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Reading JSON with Pandas: read_json",
    "text": "Reading JSON with Pandas: read_json\npandas.read_json converts JSON to Series/DataFrame:\n\n# Read JSON file\ndata = pd.read_json(\"examples/example.json\")\ndata\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\n1\n2\n3\n\n\n1\n4\n5\n6\n\n\n2\n7\n8\n9"
  },
  {
    "objectID": "qmd/pandas3ed6.html#exporting-to-json-to_json",
    "href": "qmd/pandas3ed6.html#exporting-to-json-to_json",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Exporting to JSON: to_json",
    "text": "Exporting to JSON: to_json\nExport from pandas to JSON with to_json:\n\n# Export to JSON (column-oriented)\nprint(data.to_json())\n\n{\"a\":{\"0\":1,\"1\":4,\"2\":7},\"b\":{\"0\":2,\"1\":5,\"2\":8},\"c\":{\"0\":3,\"1\":6,\"2\":9}}\n\n\n\n# Export to JSON (row-oriented)\nprint(data.to_json(orient=\"records\"))\n\n[{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}]"
  },
  {
    "objectID": "qmd/pandas3ed6.html#xml-and-html-web-scraping",
    "href": "qmd/pandas3ed6.html#xml-and-html-web-scraping",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "XML and HTML: Web Scraping",
    "text": "XML and HTML: Web Scraping\nLibraries like lxml, Beautiful Soup, html5lib handle HTML/XML. pandas uses read_html for HTML tables.\nInstall:\n\nconda install lxml beautifulsoup4 html5lib\n# or\npip install lxml beautifulsoup4 html5lib"
  },
  {
    "objectID": "qmd/pandas3ed6.html#web-scraping-example",
    "href": "qmd/pandas3ed6.html#web-scraping-example",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Web Scraping Example",
    "text": "Web Scraping Example\n\n# Parse tables from HTML\ntables = pd.read_html(\"examples/fdic_failed_bank_list.html\")\nlen(tables)\nfailures = tables[0]\nfailures.head()\n\nBecause the notebook file cannot directly access local files, the above code will report an error when executed, but in a practical scenario, it can run normally.\nHere, we fetched the content from the website, so we can still use this network address for demonstration.\n\ntables = pd.read_html(\"https://www.fdic.gov/resources/resolutions/bank-failures/failed-bank-list/\")\nlen(tables)  # Check how many tables were found\nfailures = tables[0]\nfailures.head()  # Display the first few rows of the first table\n\n\n\n\n\n\n\n\nBank Name\nCity\nState\nCert\nAquiring Institution\nClosing Date\nFund Sort ascending\n\n\n\n\n0\nPulaski Savings Bank\nChicago\nIllinois\n28611\nMillennium Bank\nJanuary 17, 2025\n10548\n\n\n1\nThe First National Bank of Lindsay\nLindsay\nOklahoma\n4134\nFirst Bank & Trust Co., Duncan, OK\nOctober 18, 2024\n10547\n\n\n2\nRepublic First Bank dba Republic Bank\nPhiladelphia\nPennsylvania\n27332\nFulton Bank, National Association\nApril 26, 2024\n10546\n\n\n3\nCitizens Bank\nSac City\nIowa\n8758\nIowa Trust & Savings Bank\nNovember 3, 2023\n10545\n\n\n4\nHeartland Tri-State Bank\nElkhart\nKansas\n25851\nDream First Bank, N.A.\nJuly 28, 2023\n10544"
  },
  {
    "objectID": "qmd/pandas3ed6.html#data-cleaning-and-analysis-after-web-scraping",
    "href": "qmd/pandas3ed6.html#data-cleaning-and-analysis-after-web-scraping",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Data Cleaning and Analysis after Web Scraping",
    "text": "Data Cleaning and Analysis after Web Scraping\nClean and analyze the loaded data:\n\n# Convert to datetime\nclose_timestamps = pd.to_datetime(failures[\"Closing Date\"])\n\n# Count failures per year\nclose_timestamps.dt.year.value_counts()\n\nClosing Date\n2023    5\n2024    2\n2020    2\n2025    1\nName: count, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed6.html#parsing-xml-with-lxml.objectify",
    "href": "qmd/pandas3ed6.html#parsing-xml-with-lxml.objectify",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Parsing XML with lxml.objectify",
    "text": "Parsing XML with lxml.objectify\nXML is more general than HTML. Example with MTA data:\n\nfrom lxml import objectify\n\npath = \"datasets/mta_perf/Performance_MNR.xml\"\nwith open(path) as f:\n    parsed = objectify.parse(f)\nroot = parsed.getroot()\n\ndata = []\nskip_fields = [\"PARENT_SEQ\", \"INDICATOR_SEQ\", \"DESIRED_CHANGE\", \"DECIMAL_PLACES\"]\n\nfor elt in root.INDICATOR:\n    el_data = {}\n    for child in elt.getchildren():\n        if child.tag in skip_fields:\n            continue\n        el_data[child.tag] = child.pyval\n    data.append(el_data)\n\nperf = pd.DataFrame(data)\nperf.head()\n\nBecause the notebook file cannot directly access local files, the above code will report an error when executed, but in a practical scenario, it can run normally."
  },
  {
    "objectID": "qmd/pandas3ed6.html#parsing-xml-pandas.read_xml",
    "href": "qmd/pandas3ed6.html#parsing-xml-pandas.read_xml",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Parsing XML: pandas.read_xml",
    "text": "Parsing XML: pandas.read_xml\npandas also has read_xml:\n\nperf2 = pd.read_xml(path)\nperf2.head()"
  },
  {
    "objectID": "qmd/pandas3ed6.html#binary-data-formats",
    "href": "qmd/pandas3ed6.html#binary-data-formats",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Binary Data Formats",
    "text": "Binary Data Formats\nBinary formats can be more efficient than text.\n\nPickle\nPython‚Äôs pickle serializes/deserializes objects. to_pickle:\n\nframe = pd.read_csv(\"examples/ex1.csv\")\nframe\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\nframe.to_pickle(\"frame_pickle\")"
  },
  {
    "objectID": "qmd/pandas3ed6.html#pickle-read_pickle",
    "href": "qmd/pandas3ed6.html#pickle-read_pickle",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Pickle: read_pickle",
    "text": "Pickle: read_pickle\nRead pickled objects with pandas.read_pickle:\n\npd.read_pickle(\"frame_pickle\")\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo\n\n\n\n\n\n\n\n\n\n\n\n\n\npickle is for short-term storage only.\n\n\n\n\nHDF5\nHDF5 stores large arrays, supports compression, efficient subsets.\nInstall PyTables:\n\nconda install pytables\n# or\npip install tables"
  },
  {
    "objectID": "qmd/pandas3ed6.html#using-hdf5-format",
    "href": "qmd/pandas3ed6.html#using-hdf5-format",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Using HDF5 Format",
    "text": "Using HDF5 Format\nHDF5 stores multiple datasets with metadata. HDFStore is like a dict:\n\nimport numpy as np\nframe = pd.DataFrame({\"a\": np.random.standard_normal(100)})\nstore = pd.HDFStore(\"mydata.h5\")\nstore[\"obj1\"] = frame\nstore[\"obj1_col\"] = frame[\"a\"]\nstore"
  },
  {
    "objectID": "qmd/pandas3ed6.html#using-hdf5-accessing-data",
    "href": "qmd/pandas3ed6.html#using-hdf5-accessing-data",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Using HDF5: Accessing Data",
    "text": "Using HDF5: Accessing Data\n\nstore[\"obj1\"]"
  },
  {
    "objectID": "qmd/pandas3ed6.html#hdf5-storage-schemas",
    "href": "qmd/pandas3ed6.html#hdf5-storage-schemas",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "HDF5: Storage Schemas",
    "text": "HDF5: Storage Schemas\n‚Äúfixed‚Äù (default) and ‚Äútable.‚Äù ‚Äútable‚Äù is slower, supports queries:\n\nstore.put(\"obj2\", frame, format=\"table\")\nstore.select(\"obj2\", where=[\"index &gt;= 10 and index &lt;= 15\"])"
  },
  {
    "objectID": "qmd/pandas3ed6.html#hdf5-pandas.read_hdf",
    "href": "qmd/pandas3ed6.html#hdf5-pandas.read_hdf",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "HDF5: pandas.read_hdf",
    "text": "HDF5: pandas.read_hdf\npandas.read_hdf is a shortcut:\n\nframe.to_hdf(\"mydata.h5\", \"obj3\", format=\"table\")\npd.read_hdf(\"mydata.h5\", \"obj3\", where=[\"index &lt; 5\"])\n\n\n\n\n\n\n\nHDF5 is not a database. Write-once, read-many. Concurrent writes corrupt."
  },
  {
    "objectID": "qmd/pandas3ed6.html#reading-microsoft-excel-files",
    "href": "qmd/pandas3ed6.html#reading-microsoft-excel-files",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Reading Microsoft Excel Files",
    "text": "Reading Microsoft Excel Files\npandas uses ExcelFile or read_excel. Needs xlrd, openpyxl:\n\nconda install openpyxl xlrd\n# or\npip install openpyxl xlrd"
  },
  {
    "objectID": "qmd/pandas3ed6.html#excel-excelfile",
    "href": "qmd/pandas3ed6.html#excel-excelfile",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Excel: ExcelFile",
    "text": "Excel: ExcelFile\n\n# Create ExcelFile\nxlsx = pd.ExcelFile(\"examples/ex1.xlsx\")\n\nBecause the notebook file cannot directly access local files, the above code will report an error when executed, but in a practical scenario, it can run normally."
  },
  {
    "objectID": "qmd/pandas3ed6.html#excel-example-preparation",
    "href": "qmd/pandas3ed6.html#excel-example-preparation",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Excel Example preparation",
    "text": "Excel Example preparation"
  },
  {
    "objectID": "qmd/pandas3ed6.html#excel-sheet-names",
    "href": "qmd/pandas3ed6.html#excel-sheet-names",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Excel: Sheet Names",
    "text": "Excel: Sheet Names\n\n# Show sheet names\nxlsx = pd.ExcelFile(\"ex1.xlsx\") # read local excel file\nxlsx.sheet_names\n\n['Sheet1']"
  },
  {
    "objectID": "qmd/pandas3ed6.html#excel-reading-a-sheet",
    "href": "qmd/pandas3ed6.html#excel-reading-a-sheet",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Excel: Reading a Sheet",
    "text": "Excel: Reading a Sheet\n\n# Read a sheet\nxlsx.parse(sheet_name=\"Sheet1\")\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#excel-specifying-index",
    "href": "qmd/pandas3ed6.html#excel-specifying-index",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Excel: Specifying Index",
    "text": "Excel: Specifying Index\n\n# Specify index column\nxlsx.parse(sheet_name=\"Sheet1\", index_col=0)\n\n\n\n\n\n\n\n\nb\nc\nd\nmessage\n\n\na\n\n\n\n\n\n\n\n\n1\n2\n3\n4\nhello\n\n\n5\n6\n7\n8\nworld\n\n\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#excel-read_excel",
    "href": "qmd/pandas3ed6.html#excel-read_excel",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Excel: read_excel",
    "text": "Excel: read_excel\nFor multiple sheets, ExcelFile is faster. Or use read_excel:\n\nframe = pd.read_excel(\"ex1.xlsx\", sheet_name=\"Sheet1\")\nframe\n\n\n\n\n\n\n\n\na\nb\nc\nd\nmessage\n\n\n\n\n0\n1\n2\n3\n4\nhello\n\n\n1\n5\n6\n7\n8\nworld\n\n\n2\n9\n10\n11\n12\nfoo"
  },
  {
    "objectID": "qmd/pandas3ed6.html#writing-to-excel-excelwriter",
    "href": "qmd/pandas3ed6.html#writing-to-excel-excelwriter",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Writing to Excel: ExcelWriter",
    "text": "Writing to Excel: ExcelWriter\nCreate ExcelWriter, then write:\n\nwriter = pd.ExcelWriter(\"ex2.xlsx\")\nframe.to_excel(writer, \"Sheet1\")\nwriter.close()"
  },
  {
    "objectID": "qmd/pandas3ed6.html#writing-to-excel-to_excel",
    "href": "qmd/pandas3ed6.html#writing-to-excel-to_excel",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Writing to Excel: to_excel",
    "text": "Writing to Excel: to_excel\nOr, more concisely:\n\nframe.to_excel(\"ex2.xlsx\")"
  },
  {
    "objectID": "qmd/pandas3ed6.html#interacting-with-web-apis",
    "href": "qmd/pandas3ed6.html#interacting-with-web-apis",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Interacting with Web APIs",
    "text": "Interacting with Web APIs\nWebsites provide data via APIs, often JSON. requests is convenient.\nInstall:\n\nconda install requests\n# or\npip install requests"
  },
  {
    "objectID": "qmd/pandas3ed6.html#web-apis-requests-example",
    "href": "qmd/pandas3ed6.html#web-apis-requests-example",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Web APIs: requests Example",
    "text": "Web APIs: requests Example\n\nimport requests\n\nurl = \"https://api.github.com/repos/pandas-dev/pandas/issues\"\nresp = requests.get(url)\nresp.raise_for_status() # Check for HTTP errors.\nresp\n\n&lt;Response [200]&gt;"
  },
  {
    "objectID": "qmd/pandas3ed6.html#web-apis-parsing-json-response",
    "href": "qmd/pandas3ed6.html#web-apis-parsing-json-response",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Web APIs: Parsing JSON Response",
    "text": "Web APIs: Parsing JSON Response\n\ndata = resp.json()\ndata[0][\"title\"]\n\n'DEPS: Revert SQLAlchemy minimum version back to 1.4.36'"
  },
  {
    "objectID": "qmd/pandas3ed6.html#web-apis-creating-dataframe",
    "href": "qmd/pandas3ed6.html#web-apis-creating-dataframe",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Web APIs: Creating DataFrame",
    "text": "Web APIs: Creating DataFrame\n\n# Create DataFrame from issue data\nissues = pd.DataFrame(data, columns=[\"number\", \"title\", \"labels\", \"state\"])\nissues.head()\n\n\n\n\n\n\n\n\nnumber\ntitle\nlabels\nstate\n\n\n\n\n0\n60977\nDEPS: Revert SQLAlchemy minimum version back t...\n[]\nopen\n\n\n1\n60976\nDOC: Clarify the magnitude for truncation\n[]\nopen\n\n\n2\n60975\nGH60942 Update docs and overload for Series.re...\n[]\nopen\n\n\n3\n60973\nDOC: No warning in set_index() that previous i...\n[{'id': 134699, 'node_id': 'MDU6TGFiZWwxMzQ2OT...\nopen\n\n\n4\n60972\nBUG: `import pandas` failed in Python 3.13.2 f...\n[{'id': 76811, 'node_id': 'MDU6TGFiZWw3NjgxMQ=...\nopen\n\n\n\n\n\n\n\nBuild higher-level interfaces to return DataFrames."
  },
  {
    "objectID": "qmd/pandas3ed6.html#interacting-with-databases",
    "href": "qmd/pandas3ed6.html#interacting-with-databases",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Interacting with Databases",
    "text": "Interacting with Databases\nSQL databases are common. pandas simplifies loading from queries.\nSQLite3 example (built-in):\n\nimport sqlite3\n\n# Create a table\nquery = \"\"\"\nCREATE TABLE test\n(a VARCHAR(20), b VARCHAR(20),\n c REAL,        d INTEGER\n);\"\"\"\n\ncon = sqlite3.connect(\"mydata.sqlite\")\ncon.execute(query)\ncon.commit()"
  },
  {
    "objectID": "qmd/pandas3ed6.html#databases-inserting-data",
    "href": "qmd/pandas3ed6.html#databases-inserting-data",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Databases: Inserting Data",
    "text": "Databases: Inserting Data\n\n# Insert data\ndata = [(\"Atlanta\", \"Georgia\", 1.25, 6),\n        (\"Tallahassee\", \"Florida\", 2.6, 3),\n        (\"Sacramento\", \"California\", 1.7, 5)]\nstmt = \"INSERT INTO test VALUES(?, ?, ?, ?)\"\ncon.executemany(stmt, data)\ncon.commit()"
  },
  {
    "objectID": "qmd/pandas3ed6.html#databases-retrieving-data",
    "href": "qmd/pandas3ed6.html#databases-retrieving-data",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Databases: Retrieving Data",
    "text": "Databases: Retrieving Data\n\n# Retrieve data\ncursor = con.execute(\"SELECT * FROM test\")\nrows = cursor.fetchall()\nrows"
  },
  {
    "objectID": "qmd/pandas3ed6.html#databases-column-names",
    "href": "qmd/pandas3ed6.html#databases-column-names",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Databases: Column Names",
    "text": "Databases: Column Names\n\n# Get column names\ncursor.description"
  },
  {
    "objectID": "qmd/pandas3ed6.html#databases-creating-dataframe",
    "href": "qmd/pandas3ed6.html#databases-creating-dataframe",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Databases: Creating DataFrame",
    "text": "Databases: Creating DataFrame\n\n# Create DataFrame\npd.DataFrame(rows, columns=[x[0] for x in cursor.description])"
  },
  {
    "objectID": "qmd/pandas3ed6.html#using-sqlalchemy",
    "href": "qmd/pandas3ed6.html#using-sqlalchemy",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Using SQLAlchemy",
    "text": "Using SQLAlchemy\nSQLAlchemy provides higher-level abstraction. pandas read_sql.\nInstall:\n\nconda install sqlalchemy"
  },
  {
    "objectID": "qmd/pandas3ed6.html#sqlalchemy-example",
    "href": "qmd/pandas3ed6.html#sqlalchemy-example",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "SQLAlchemy Example",
    "text": "SQLAlchemy Example\n\nimport sqlalchemy as sqla\n\ndb = sqla.create_engine(\"sqlite:///mydata.sqlite\")\npd.read_sql(\"SELECT * FROM test\", db)"
  },
  {
    "objectID": "qmd/pandas3ed6.html#conclusion",
    "href": "qmd/pandas3ed6.html#conclusion",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Conclusion",
    "text": "Conclusion\nAccessing data is the first step. This chapter covered tools for loading/storing data: text, binary, databases, APIs. Next: cleaning, transforming, analyzing."
  },
  {
    "objectID": "qmd/pandas3ed6.html#summary",
    "href": "qmd/pandas3ed6.html#summary",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Summary",
    "text": "Summary\n\nData loading is essential: Load data into Python.\npandas is your friend: For reading/writing data.\nread_csv is key: For comma-separated value files.\nHandle messy data: Missing values, skipping rows, delimiters.\nBinary formats are efficient: Pickle, HDF5.\nWeb APIs are a source: requests library.\nDatabases are common: pandas, SQLAlchemy.\nPractice is key: Practice loading different data sources. ü•≥"
  },
  {
    "objectID": "qmd/pandas3ed6.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed6.html#thoughts-and-discussion",
    "title": "Chapter 6: Data Loading, Storage, and File Formats",
    "section": "Thoughts and Discussion ü§î",
    "text": "Thoughts and Discussion ü§î\n\nData types you encounter? Formats?\nMessy/incomplete data experiences?\nTrade-offs between storage formats?\nExplore pandas documentation.\nTry SQL database connection.\nFind a public API, access with Python."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pythonËØ≠Ë®Ä‰∏éÊï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "ÊïôÊùêÈááÁî®„ÄäPython for Data Analysis: Data Wrangling with pandas, NumPy, and Jupyter 3rd Edition„Äã\n\n\n\nPython for Data Analysis: Data Wrangling with pandas, NumPy, and Jupyter 3rd Edition\n\n\nÊïôÊùêÂÆòÁΩëÔºöPython for Data Analysis"
  },
  {
    "objectID": "index.html#ÊïôÊùê",
    "href": "index.html#ÊïôÊùê",
    "title": "pythonËØ≠Ë®Ä‰∏éÊï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "ÊïôÊùêÈááÁî®„ÄäPython for Data Analysis: Data Wrangling with pandas, NumPy, and Jupyter 3rd Edition„Äã\n\n\n\nPython for Data Analysis: Data Wrangling with pandas, NumPy, and Jupyter 3rd Edition\n\n\nÊïôÊùêÂÆòÁΩëÔºöPython for Data Analysis"
  },
  {
    "objectID": "index.html#ppt",
    "href": "index.html#ppt",
    "title": "pythonËØ≠Ë®Ä‰∏éÊï∞ÊçÆÂàÜÊûê",
    "section": "ppt",
    "text": "ppt\n Á¨¨‰∏ÄÁ´† \n Á¨¨‰∫åÁ´† \n Á¨¨‰∏âÁ´† \n Á¨¨ÂõõÁ´† \n Á¨¨‰∫îÁ´† \n Á¨¨ÂÖ≠Á´† \n Á¨¨‰∏ÉÁ´† \n Á¨¨ÂÖ´Á´† \n Á¨¨‰πùÁ´† \n Á¨¨ÂçÅÁ´† \n Á¨¨ÂçÅ‰∏ÄÁ´† \n Á¨¨ÂçÅ‰∫åÁ´† \n Á¨¨ÂçÅ‰∏âÁ´†"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "ÁÆÄ‰ªã",
    "section": "",
    "text": "ÊàëÊòØÈÇ±È£ûÔºåËøôÊòØÊàëÁöÑ‰∏™‰∫∫ÁΩëÁ´ôÔºå\nÁî®‰∫éÂàÜ‰∫´‰∏Ä‰∫õÊï∞ÊçÆÂàÜÊûêÊñáÁ´†ÔºåËøòÊúâ‰∏™‰∫∫ÁöÑËÆ∞ÂΩïÂíåËµÑÊñô„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html",
    "href": "qmd/pandas3ed11cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "# SETUP (Êèê‰æõÁöÑ‰ª£Á†Å - ÈúÄË¶ÅÊîæÂú® notebook ÁöÑÈ°∂ÈÉ®)\nimport numpy as np  # ÂØºÂÖ• NumPy Â∫ìÔºåÁî®‰∫éÊï∞ÂÄºËÆ°ÁÆóÔºåÂπ∂ÁÆÄÂÜô‰∏∫ np\nimport pandas as pd  # ÂØºÂÖ• pandas Â∫ìÔºåÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÔºåÂπ∂ÁÆÄÂÜô‰∏∫ pd\nfrom datetime import datetime, timedelta  # ‰ªé datetime Ê®°ÂùóÂØºÂÖ• datetime Âíå timedelta Á±ª\nimport pytz  # ÂØºÂÖ• pytz Â∫ìÔºåÁî®‰∫éÂ§ÑÁêÜÊó∂Âå∫\nfrom pandas.tseries.offsets import Hour, Minute, Day, MonthEnd  # ‰ªé pandas ÂØºÂÖ•Êó∂Èó¥ÂÅèÁßªÂØπË±°\n\n# ‰∏∫‰∫ÜÊºîÁ§∫ÔºåÂú®Ê≠§ÁâπÂÆö notebook ‰∏≠ÊäëÂà∂ FutureWarnings\nimport warnings  # ÂØºÂÖ• warnings Ê®°Âùó\nwarnings.simplefilter(action='ignore', category=FutureWarning)  # ÂøΩÁï• FutureWarnings\n\n# Áî®‰∫éÁªòÂõæ\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• matplotlib.pyplot Ê®°ÂùóÔºåÁî®‰∫éÁªòÂõæÔºåÂπ∂ÁÆÄÂÜô‰∏∫ plt"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁÆÄ‰ªã",
    "href": "qmd/pandas3ed11cn.html#Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁÆÄ‰ªã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁÆÄ‰ªã",
    "text": "Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁÆÄ‰ªã\nÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆÊòØÊåâÊó∂Èó¥Èó¥ÈöîÊî∂ÈõÜÁöÑ‰∏ÄÁ≥ªÂàóÊï∞ÊçÆÁÇπ„ÄÇ‚è±Ô∏è ÂÆÉÂú®ÂêÑ‰∏™È¢ÜÂüüÈÉΩÊòØËá≥ÂÖ≥ÈáçË¶ÅÁöÑÊï∞ÊçÆÁ±ªÂûãÔºö\n\nÈáëËûç: ËÇ°Á•®‰ª∑Ê†º„ÄÅ‰∫§ÊòìÈáè„ÄÅÂà©Áéá üí∞\nÁªèÊµé: GDP„ÄÅÈÄöË¥ßËÜ®ËÉÄÁéá„ÄÅÂ§±‰∏öÁéá üìà\nÁîüÊÄÅ: ÁßçÁæ§ËßÑÊ®°„ÄÅÊ∏©Â∫¶ÂèòÂåñ üå°Ô∏è\nÁ•ûÁªèÁßëÂ≠¶: ËÑëÁîµÊ≥¢Ê¥ªÂä®„ÄÅÁ•ûÁªè‰ø°Âè∑ üß†\nÁâ©ÁêÜ: ËøêÂä®„ÄÅÈÄüÂ∫¶„ÄÅÂä†ÈÄüÂ∫¶ üöÄ\n\nÊú¨Ë¥®‰∏äÔºå‰ªª‰ΩïÈöèÊó∂Èó¥ÈáçÂ§çËÆ∞ÂΩïÁöÑÂÜÖÂÆπÈÉΩÊûÑÊàêÊó∂Èó¥Â∫èÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁöÑÁ±ªÂûã",
    "href": "qmd/pandas3ed11cn.html#Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁöÑÁ±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁöÑÁ±ªÂûã",
    "text": "Êó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁöÑÁ±ªÂûã\nÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆÂèØ‰ª•Ê†πÊçÆÊï∞ÊçÆÁÇπÁõ∏ÂØπ‰∫éÊó∂Èó¥ÁöÑÂ∫¶ÈáèÊñπÂºèËøõË°åÂàÜÁ±ªÔºö\n\nÊó∂Èó¥Êà≥ (Timestamps): Êó∂Èó¥‰∏äÁöÑÁâπÂÆöÊó∂Âàª (‰æãÂ¶ÇÔºå2024-10-27 09:30:00)„ÄÇ\nÂõ∫ÂÆöÂë®Êúü (Fixed Periods): Ë°®Á§∫Êï¥‰∏™ÊåÅÁª≠Êó∂Èó¥ (‰æãÂ¶ÇÔºå2017 Âπ¥ 1 ÊúàÔºå2020 Âπ¥)„ÄÇ\nÊó∂Èó¥Èó¥Èöî (Intervals of Time): Áî±ÂºÄÂßãÂíåÁªìÊùüÊó∂Èó¥Êà≥ÊåáÁ§∫ (‰æãÂ¶ÇÔºå‰ªé‰∏ãÂçà 2:00 Âà∞ 2:30 ÁöÑÁî®Êà∑‰ºöËØù)„ÄÇ\nÂÆûÈ™åÊàñÁªèËøáÊó∂Èó¥ (Experiment or Elapsed Time): Áõ∏ÂØπ‰∫éËµ∑ÂßãÁÇπÁöÑÊó∂Èó¥ (‰æãÂ¶ÇÔºåÈ•ºÂπ≤ÊîæÂÖ•ÁÉ§ÁÆ±ÂêéÁöÑÁßíÊï∞)„ÄÇ\n\nÊú¨Á´†‰∏ªË¶ÅÂÖ≥Ê≥®Ââç‰∏âÁßçÁ±ªÂûã (Êó∂Èó¥Êà≥„ÄÅÂõ∫ÂÆöÂë®ÊúüÂíåÊó∂Èó¥Èó¥Èöî)„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êó∂Èó¥Â∫èÂàóËßÑÂàô‰∏é‰∏çËßÑÂàô",
    "href": "qmd/pandas3ed11cn.html#Êó∂Èó¥Â∫èÂàóËßÑÂàô‰∏é‰∏çËßÑÂàô",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó∂Èó¥Â∫èÂàóÔºöËßÑÂàô‰∏é‰∏çËßÑÂàô",
    "text": "Êó∂Èó¥Â∫èÂàóÔºöËßÑÂàô‰∏é‰∏çËßÑÂàô\nÊó∂Èó¥Â∫èÂàó‰πüÂèØ‰ª•ÊòØÔºö\n\nÂõ∫ÂÆöÈ¢ëÁéá (ËßÑÂàô): Êï∞ÊçÆÁÇπ‰ª•Âõ∫ÂÆöÁöÑÊó∂Èó¥Èó¥ÈöîÂá∫Áé∞ (‰æãÂ¶ÇÔºåÊØè 15 Áßí„ÄÅÊØè 5 ÂàÜÈíü„ÄÅÊØèÊúà)„ÄÇüóìÔ∏è\n‰∏çËßÑÂàô: Êï∞ÊçÆÁÇπ‰∏çÈÅµÂæ™Âõ∫ÂÆöÁöÑÊó∂Èó¥Âçï‰Ωç (‰æãÂ¶ÇÔºåÁΩëÁ´ôËÆøÈóÆÁöÑÊó∂Èó¥Êà≥)„ÄÇüö∂\n\nË°®Á§∫ÊñπÂºèÁöÑÈÄâÊã©ÂèñÂÜ≥‰∫éÂÖ∑‰ΩìÁöÑÂ∫îÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàó",
    "href": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas ‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàó",
    "text": "pandas ‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàó\npandas ÊòØ‰∏Ä‰∏™Âº∫Â§ßÁöÑ Python Â∫ìÔºå‰∏∫Êó∂Èó¥Â∫èÂàóÂàÜÊûêÊèê‰æõ‰∫ÜÂπøÊ≥õÁöÑÂ∑•ÂÖ∑„ÄÇÂÆÉÂÖÅËÆ∏‰Ω†Ôºö\n\nÈ´òÊïàÂ§ÑÁêÜÂ§ßÂûãÊó∂Èó¥Â∫èÂàó„ÄÇüóÇÔ∏è\nÂàáÁâá„ÄÅÂàáÂùóÂíåËÅöÂêàÊï∞ÊçÆ„ÄÇüî™\nÂØπ‰∏çËßÑÂàôÂíåÂõ∫ÂÆöÈ¢ëÁéáÁöÑÊó∂Èó¥Â∫èÂàóËøõË°åÈáçÈááÊ†∑„ÄÇüîÑ\nÂ§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÇ‚ùì\n\nËøô‰∫õÂäüËÉΩÂØπ‰∫éÈáëËûçÂíåÁªèÊµéÂ∫îÁî®Ëá≥ÂÖ≥ÈáçË¶ÅÔºå‰ΩÜÂÆÉ‰ª¨ÂêåÊ†∑ÈÄÇÁî®‰∫éÂàÜÊûêÂêÑÁßçÊï∞ÊçÆÈõÜÔºåÂ¶ÇÊúçÂä°Âô®Êó•Âøó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂØºÂÖ•ÂøÖË¶ÅÁöÑÂ∫ì",
    "href": "qmd/pandas3ed11cn.html#ÂØºÂÖ•ÂøÖË¶ÅÁöÑÂ∫ì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºÂÖ•ÂøÖË¶ÅÁöÑÂ∫ì",
    "text": "ÂØºÂÖ•ÂøÖË¶ÅÁöÑÂ∫ì\nÂú®Ê∑±ÂÖ•Á†îÁ©∂Êó∂Èó¥Â∫èÂàóÊìç‰Ωú‰πãÂâçÔºåËÆ©Êàë‰ª¨ÂØºÂÖ•ÂøÖË¶ÅÁöÑÂ∫ìÔºöÁî®‰∫éÊï∞ÂÄºËøêÁÆóÁöÑ NumPy ÂíåÁî®‰∫éÊï∞ÊçÆÂàÜÊûêÁöÑ pandas„ÄÇ\n\nimport numpy as np  # ÂØºÂÖ• NumPy Â∫ìÔºåÁî®‰∫éÊï∞ÂÄºËÆ°ÁÆó\nimport pandas as pd  # ÂØºÂÖ• pandas Â∫ìÔºåÁî®‰∫éÊï∞ÊçÆÂàÜÊûê"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êó•ÊúüÂíåÊó∂Èó¥Êï∞ÊçÆÁ±ªÂûãÂèäÂ∑•ÂÖ∑",
    "href": "qmd/pandas3ed11cn.html#Êó•ÊúüÂíåÊó∂Èó¥Êï∞ÊçÆÁ±ªÂûãÂèäÂ∑•ÂÖ∑",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó•ÊúüÂíåÊó∂Èó¥Êï∞ÊçÆÁ±ªÂûãÂèäÂ∑•ÂÖ∑",
    "text": "Êó•ÊúüÂíåÊó∂Èó¥Êï∞ÊçÆÁ±ªÂûãÂèäÂ∑•ÂÖ∑\nPython ÁöÑÊ†áÂáÜÂ∫ìÊèê‰æõ‰∫ÜÁî®‰∫éÂ§ÑÁêÜÊó•ÊúüÂíåÊó∂Èó¥ÁöÑÊ®°ÂùóÔºö\n\ndatetime: Êèê‰æõÁî®‰∫éÊìç‰ΩúÊó•ÊúüÂíåÊó∂Èó¥ÁöÑÁ±ª (‰æãÂ¶ÇÔºådatetime„ÄÅdate„ÄÅtime„ÄÅtimedelta)„ÄÇ\ntime: Êèê‰æõ‰∏éÊó∂Èó¥Áõ∏ÂÖ≥ÁöÑÂáΩÊï∞„ÄÇ\ncalendar: ‰∏éÊó•ÂéÜÁõ∏ÂÖ≥ÁöÑÂáΩÊï∞„ÄÇ\n\ndatetime.datetime Á±ªÂûã (ÊàñÁÆÄÁß∞‰∏∫ datetime) ÊòØÂ∏∏Áî®ÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#datetime-ÂØπË±°",
    "href": "qmd/pandas3ed11cn.html#datetime-ÂØπË±°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "datetime ÂØπË±°",
    "text": "datetime ÂØπË±°\nËÆ©Êàë‰ª¨ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°Êù•Ë°®Á§∫ÂΩìÂâçÊó∂Èó¥Ôºö\n\nfrom datetime import datetime  # ‰ªé datetime Ê®°ÂùóÂØºÂÖ• datetime Á±ª\n\nnow = datetime.now()  # Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÂíåÊó∂Èó¥\nprint(now)  # ÊâìÂç∞ÂΩìÂâçÊó•ÊúüÂíåÊó∂Èó¥\n\n2025-02-21 10:11:12.471511\n\n\nÊ≠§‰ª£Á†ÅÁâáÊÆµÊ£ÄÁ¥¢ÂΩìÂâçÊó•ÊúüÂíåÊó∂Èó¥„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#datetime-ÂØπË±°-Áª≠",
    "href": "qmd/pandas3ed11cn.html#datetime-ÂØπË±°-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "datetime ÂØπË±° (Áª≠)",
    "text": "datetime ÂØπË±° (Áª≠)\nÊàë‰ª¨‰πüÂèØ‰ª•ÊâãÂä®ÊûÑÂª∫‰∏Ä‰∏™ datetime ÂØπË±°Ôºö\n\nfrom datetime import datetime  # Á°Æ‰øùÂØºÂÖ•‰∫Ü datetime Á±ª\n\nmy_date = datetime(2024, 10, 27, 10, 30, 0)  # Âπ¥„ÄÅÊúà„ÄÅÊó•„ÄÅÊó∂„ÄÅÂàÜ„ÄÅÁßí\nprint(my_date)  # ÊâìÂç∞ÊâãÂä®ÂàõÂª∫ÁöÑ datetime ÂØπË±°\n\n2024-10-27 10:30:00\n\n\nËÆøÈóÆÂêÑ‰∏™ÁªÑÊàêÈÉ®ÂàÜÔºö\n\nfrom datetime import datetime # Á°Æ‰øùÂØºÂÖ•‰∫Üdatetime\n\nnow = datetime.now()  # Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÂíåÊó∂Èó¥\nprint(f\"Year: {now.year}, Month: {now.month}, Day: {now.day}\")  # ÊâìÂç∞Âπ¥„ÄÅÊúà„ÄÅÊó•\n\nYear: 2025, Month: 2, Day: 21"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#timedelta-ÂØπË±°",
    "href": "qmd/pandas3ed11cn.html#timedelta-ÂØπË±°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "timedelta ÂØπË±°",
    "text": "timedelta ÂØπË±°\ntimedelta ÂØπË±°Ë°®Á§∫‰∏§‰∏™ datetime ÂØπË±°‰πãÈó¥ÁöÑÂ∑ÆÔºö\n\nfrom datetime import datetime  # Á°Æ‰øùÂØºÂÖ•‰∫Ü datetime\n\ndelta = datetime(2011, 1, 7) - datetime(2008, 6, 24, 8, 15)  # ËÆ°ÁÆó‰∏§‰∏™ datetime ÂØπË±°‰πãÈó¥ÁöÑÂ∑Æ\nprint(delta)  # ÊâìÂç∞Êó∂Èó¥Â∑Æ\nprint(f\"Days: {delta.days}, Seconds: {delta.seconds}\")  # ÊâìÂç∞Â§©Êï∞ÂíåÁßíÊï∞\n\n926 days, 15:45:00\nDays: 926, Seconds: 56700"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#timedelta-ÂØπË±°-Áª≠",
    "href": "qmd/pandas3ed11cn.html#timedelta-ÂØπË±°-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "timedelta ÂØπË±° (Áª≠)",
    "text": "timedelta ÂØπË±° (Áª≠)\n\ndelta.days: ËøîÂõûÁõ∏Â∑ÆÁöÑÂ§©Êï∞„ÄÇ\ndelta.seconds: ËøîÂõûÁõ∏Â∑ÆÁöÑÁßíÊï∞ (Âú®ÊúÄÂêé‰∏ÄÂ§©ÂÜÖ)„ÄÇÂÆÉ‰∏çÂåÖÊã¨ÂåÖÂê´Âú® days Â∑ÆÂºÇ‰∏≠ÁöÑÁßíÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#timedelta-ÂØπË±°-Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#timedelta-ÂØπË±°-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "timedelta ÂØπË±° (Áª≠)",
    "text": "timedelta ÂØπË±° (Áª≠)\nÊÇ®ÂèØ‰ª•Â∞Ü timedelta ÂØπË±°‰∏é datetime ÂØπË±°Áõ∏Âä†ÊàñÁõ∏ÂáèÔºö\n\nfrom datetime import datetime, timedelta  # Á°Æ‰øùÂØºÂÖ•‰∫Ü datetime Âíå timedelta\n\nstart = datetime(2011, 1, 7)  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°\nprint(start + timedelta(12))  # Âä†‰∏ä 12 Â§©\nprint(start - 2 * timedelta(12))  # ÂáèÂéª 24 Â§©\n\n2011-01-19 00:00:00\n2010-12-14 00:00:00"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#datetime-Ê®°Âùó‰∏≠ÁöÑÁ±ªÂûã",
    "href": "qmd/pandas3ed11cn.html#datetime-Ê®°Âùó‰∏≠ÁöÑÁ±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "datetime Ê®°Âùó‰∏≠ÁöÑÁ±ªÂûã",
    "text": "datetime Ê®°Âùó‰∏≠ÁöÑÁ±ªÂûã\n\n\n\n\n\n\n\nÁ±ªÂûã\nÊèèËø∞\n\n\n\n\ndate\nÂ≠òÂÇ®Êó•ÂéÜÊó•Êúü (Âπ¥„ÄÅÊúà„ÄÅÊó•)„ÄÇ\n\n\ntime\nÂ≠òÂÇ®‰∏ÄÂ§©‰∏≠ÁöÑÊó∂Èó¥ (Â∞èÊó∂„ÄÅÂàÜÈíü„ÄÅÁßí„ÄÅÂæÆÁßí)„ÄÇ\n\n\ndatetime\nÂêåÊó∂Â≠òÂÇ®Êó•ÊúüÂíåÊó∂Èó¥„ÄÇ\n\n\ntimedelta\nË°®Á§∫‰∏§‰∏™ datetime ÂÄº‰πãÈó¥ÁöÑÂ∑Æ„ÄÇ\n\n\ntzinfo\nÁî®‰∫éÂ≠òÂÇ®Êó∂Âå∫‰ø°ÊÅØÁöÑÂü∫Á±ªÂûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Â≠óÁ¨¶‰∏≤Âíå-datetime-‰πãÈó¥ÁöÑËΩ¨Êç¢",
    "href": "qmd/pandas3ed11cn.html#Â≠óÁ¨¶‰∏≤Âíå-datetime-‰πãÈó¥ÁöÑËΩ¨Êç¢",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤Âíå Datetime ‰πãÈó¥ÁöÑËΩ¨Êç¢",
    "text": "Â≠óÁ¨¶‰∏≤Âíå Datetime ‰πãÈó¥ÁöÑËΩ¨Êç¢\n\nstrftime(): Â∞Ü datetime ÂØπË±°Ê†ºÂºèÂåñ‰∏∫Â≠óÁ¨¶‰∏≤„ÄÇ\nstrptime(): Â∞ÜÂ≠óÁ¨¶‰∏≤Ëß£Êûê‰∏∫ datetime ÂØπË±°„ÄÇ\npd.to_datetime(): Âú® pandas ‰∏≠Â∞ÜÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫ DatetimeIndex„ÄÇ\n\n\nfrom datetime import datetime  # Á°Æ‰øùÂØºÂÖ•‰∫Ü datetime\n\nstamp = datetime(2011, 1, 3)  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°\n\n# datetime to string\nprint(str(stamp))  # Â∞Ü datetime ÂØπË±°ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤ (‰ΩøÁî®ÈªòËÆ§Ê†ºÂºè)\nprint(stamp.strftime('%Y-%m-%d'))  # ‰ΩøÁî® strftime() Ê†ºÂºèÂåñÊó•Êúü (Âπ¥-Êúà-Êó•)\n\n2011-01-03 00:00:00\n2011-01-03"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Â≠óÁ¨¶‰∏≤Âíå-datetime-‰πãÈó¥ÁöÑËΩ¨Êç¢-Áª≠",
    "href": "qmd/pandas3ed11cn.html#Â≠óÁ¨¶‰∏≤Âíå-datetime-‰πãÈó¥ÁöÑËΩ¨Êç¢-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤Âíå Datetime ‰πãÈó¥ÁöÑËΩ¨Êç¢ (Áª≠)",
    "text": "Â≠óÁ¨¶‰∏≤Âíå Datetime ‰πãÈó¥ÁöÑËΩ¨Êç¢ (Áª≠)\n\nfrom datetime import datetime  # Á°Æ‰øùÂØºÂÖ•‰∫Ü datetime\n\n# string to datetime\nvalue = '2011-01-03'  # ÂÆö‰πâ‰∏Ä‰∏™Êó•ÊúüÂ≠óÁ¨¶‰∏≤\nprint(datetime.strptime(value, '%Y-%m-%d'))  # ‰ΩøÁî® strptime() Â∞ÜÂ≠óÁ¨¶‰∏≤Ëß£Êûê‰∏∫ datetime ÂØπË±°\n\ndatestrs = ['7/6/2011', '8/6/2011']  # ÂÆö‰πâ‰∏Ä‰∏™Êó•ÊúüÂ≠óÁ¨¶‰∏≤ÂàóË°®\ndt_list = [datetime.strptime(x, '%m/%d/%Y') for x in datestrs]  # ÂàóË°®Êé®ÂØºÂºèÔºåÂ∞ÜÂ≠óÁ¨¶‰∏≤ÂàóË°®ËΩ¨Êç¢‰∏∫ datetime ÂØπË±°ÂàóË°®\nprint(dt_list)  # ÊâìÂç∞ datetime ÂØπË±°ÂàóË°®\n\n2011-01-03 00:00:00\n[datetime.datetime(2011, 7, 6, 0, 0), datetime.datetime(2011, 8, 6, 0, 0)]"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Â∏∏Áî®-strftime-Âíå-strptime-Ê†ºÂºè‰ª£Á†Å",
    "href": "qmd/pandas3ed11cn.html#Â∏∏Áî®-strftime-Âíå-strptime-Ê†ºÂºè‰ª£Á†Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî® strftime Âíå strptime Ê†ºÂºè‰ª£Á†Å",
    "text": "Â∏∏Áî® strftime Âíå strptime Ê†ºÂºè‰ª£Á†Å\n‰ª£Á†Å | ÊèèËø∞ |\n: | :- |\n%Y | 4 ‰ΩçÊï∞ÁöÑÂπ¥‰ªΩ |\n%y | 2 ‰ΩçÊï∞ÁöÑÂπ¥‰ªΩ |\n%m | 2 ‰ΩçÊï∞ÁöÑÊúà‰ªΩ [01, 12] |\n%d | 2 ‰ΩçÊï∞ÁöÑÊó•Êúü [01, 31] |\n%H | Â∞èÊó∂ (24 Â∞èÊó∂Âà∂) [00, 23] |\n%I | Â∞èÊó∂ (12 Â∞èÊó∂Âà∂) [01, 12] |\n%M | 2 ‰ΩçÊï∞ÁöÑÂàÜÈíü [00, 59] |\n%S | Áßí [00, 61] (60 Âíå 61 Áî®‰∫éÈó∞Áßí) |\n%f | ÂæÆÁßíÔºåÊï¥Êï∞ÔºåÈõ∂Â°´ÂÖÖ (‰ªé 000000 Âà∞ 999999) |\n%j | ‰∏ÄÂπ¥‰∏≠ÁöÑÁ¨¨Âá†Â§©ÔºåÈõ∂Â°´ÂÖÖÊï¥Êï∞ (‰ªé 001 Âà∞ 366) |"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êõ¥Â§ö-strftime-Âíå-strptime-Ê†ºÂºè‰ª£Á†Å",
    "href": "qmd/pandas3ed11cn.html#Êõ¥Â§ö-strftime-Âíå-strptime-Ê†ºÂºè‰ª£Á†Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êõ¥Â§ö strftime Âíå strptime Ê†ºÂºè‰ª£Á†Å",
    "text": "Êõ¥Â§ö strftime Âíå strptime Ê†ºÂºè‰ª£Á†Å\n‰ª£Á†Å | ÊèèËø∞ |\n:- | : |\n%w | ÊòüÊúüÂá†ÔºåÊï¥Êï∞ [0 (ÊòüÊúüÊó•), 6] |\n%u | ÊòüÊúüÂá†Ôºå‰ªé 1 ÂºÄÂßãÁöÑÊï¥Êï∞Ôºå1 ‰ª£Ë°®ÊòüÊúü‰∏Ä„ÄÇ |\n%U | ‰∏ÄÂπ¥‰∏≠ÁöÑÂë®Êï∞ [00, 53]; ÊòüÊúüÊó•ÊòØÁ¨¨‰∏ÄÂ§©ÔºåÁ¨¨‰∏Ä‰∏™ÊòüÊúüÊó•‰πãÂâçÁöÑÊó•Â≠êÊòØ ‚ÄúÁ¨¨ 0 Âë®‚Äù |\n%W | ‰∏ÄÂπ¥‰∏≠ÁöÑÂë®Êï∞ [00, 53]; ÊòüÊúü‰∏ÄË¢´ËÆ§‰∏∫ÊòØÊØèÂë®ÁöÑÁ¨¨‰∏ÄÂ§©Ôºå‰∏ÄÂπ¥‰∏≠Á¨¨‰∏Ä‰∏™ÊòüÊúü‰∏Ä‰πãÂâçÁöÑÊó•Â≠êÊòØ ‚ÄúÁ¨¨ 0 Âë®‚Äù |\n%z | UTC Êó∂Âå∫ÂÅèÁßªÈáèÔºå+HHMM Êàñ -HHMM; Â¶ÇÊûúÊòØ naive Âàô‰∏∫Á©∫ |\n|%Z |Êó∂Âå∫ÂêçÁß∞‰Ωú‰∏∫Â≠óÁ¨¶‰∏≤ÔºåÂ¶ÇÊûúÊ≤°ÊúâÊó∂Âå∫ÔºåÂàô‰∏∫Á©∫Â≠óÁ¨¶‰∏≤ | | %F | %Y-%m-%d ÁöÑÂø´Êç∑ÊñπÂºè (‰æãÂ¶ÇÔºå2012-4-18) | | %D | %m/%d/%y ÁöÑÂø´Êç∑ÊñπÂºè (‰æãÂ¶ÇÔºå04/18/12) |"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑ-pd.to_datetime",
    "href": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑ-pd.to_datetime",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas ‰∏≠ÁöÑ pd.to_datetime()",
    "text": "pandas ‰∏≠ÁöÑ pd.to_datetime()\npandas ‰∏ì‰∏∫Â§ÑÁêÜÊó•ÊúüÊï∞ÁªÑËÄåËÆæËÆ°„ÄÇpd.to_datetime() ÊñπÊ≥ïÈùûÂ∏∏ÈÄöÁî®Ôºö\n\nimport pandas as pd  # Á°Æ‰øùÂØºÂÖ•‰∫Ü pandas\n\ndatestrs = ['2011-07-06 12:00:00', '2011-08-06 00:00:00']  # ÂÆö‰πâ‰∏Ä‰∏™Êó•ÊúüÂ≠óÁ¨¶‰∏≤ÂàóË°®\ndt_index = pd.to_datetime(datestrs)  # ‰ΩøÁî® pd.to_datetime() Â∞ÜÂ≠óÁ¨¶‰∏≤ÂàóË°®ËΩ¨Êç¢‰∏∫ DatetimeIndex\nprint(dt_index)  # ÊâìÂç∞ DatetimeIndex\n\nDatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00'], dtype='datetime64[ns]', freq=None)"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑ-pd.to_datetime-Áª≠",
    "href": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑ-pd.to_datetime-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas ‰∏≠ÁöÑ pd.to_datetime() (Áª≠)",
    "text": "pandas ‰∏≠ÁöÑ pd.to_datetime() (Áª≠)\nÂÆÉ‰ºöËá™Âä®Â§ÑÁêÜÂêÑÁßçÊó•ÊúüÊ†ºÂºèÔºåËøòÂèØ‰ª•ËØÜÂà´Áº∫Â§±ÂÄºÔºö\n\nimport pandas as pd  # Á°Æ‰øùÂØºÂÖ•‰∫Ü pandas\n\nidx = pd.to_datetime(datestrs + [None])  # Â∞ÜÂåÖÂê´ None ÁöÑÂàóË°®ËΩ¨Êç¢‰∏∫ DatetimeIndex\nprint(idx)  # ÊâìÂç∞ DatetimeIndex\nprint(idx[2])  # NaT (Not a Time)  # ÊâìÂç∞Á¨¨‰∏â‰∏™ÂÖÉÁ¥† (NaT)\nprint(pd.isna(idx))  # Ê£ÄÊü• DatetimeIndex ‰∏≠ÁöÑÁº∫Â§±ÂÄº (NaT)\n\nDatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00', 'NaT'], dtype='datetime64[ns]', freq=None)\nNaT\n[False False  True]\n\n\nNaT ÊòØ pandas ‰∏≠Ë°®Á§∫Á©∫Êó∂Èó¥Êà≥ÁöÑÊñπÂºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁâπÂÆö‰∫éÂå∫ÂüüËÆæÁΩÆÁöÑÊó•ÊúüÊ†ºÂºè",
    "href": "qmd/pandas3ed11cn.html#ÁâπÂÆö‰∫éÂå∫ÂüüËÆæÁΩÆÁöÑÊó•ÊúüÊ†ºÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁâπÂÆö‰∫éÂå∫ÂüüËÆæÁΩÆÁöÑÊó•ÊúüÊ†ºÂºè",
    "text": "ÁâπÂÆö‰∫éÂå∫ÂüüËÆæÁΩÆÁöÑÊó•ÊúüÊ†ºÂºè\ndatetime ÂØπË±°ÂÖ∑ÊúâÁâπÂÆö‰∫éÂå∫ÂüüËÆæÁΩÆÁöÑÊ†ºÂºèÂåñÈÄâÈ°π„ÄÇ\nÁ±ªÂûã | ÊèèËø∞ |\n: | :- |\n%a | Áº©ÂÜôÁöÑÊòüÊúüÂá†ÂêçÁß∞„ÄÇ |\n%A | ÂÆåÊï¥ÁöÑÊòüÊúüÂá†ÂêçÁß∞„ÄÇ |\n%b | Áº©ÂÜôÁöÑÊúà‰ªΩÂêçÁß∞„ÄÇ |\n%B | ÂÆåÊï¥ÁöÑÊúà‰ªΩÂêçÁß∞„ÄÇ |\n%c | ÂÆåÊï¥ÁöÑÊó•ÊúüÂíåÊó∂Èó¥ (‰æãÂ¶ÇÔºå‚ÄòTue 01 May 2012 04:20:57 PM‚Äô)„ÄÇ |\n%p | Âå∫ÂüüËÆæÁΩÆ‰∏≠Áõ∏ÂΩì‰∫é AM Êàñ PM ÁöÑÂÄº„ÄÇ |\n%x | Âå∫ÂüüËÆæÁΩÆÁöÑÊ†ºÂºèÂåñÊó•Êúü (‰æãÂ¶ÇÔºåÂú®ÁæéÂõΩÔºå2012 Âπ¥ 5 Êúà 1 Êó•‰ºö‰∫ßÁîü ‚Äò05/01/2012‚Äô)„ÄÇ |\n%X | Âå∫ÂüüËÆæÁΩÆÁöÑÊó∂Èó¥ (‰æãÂ¶ÇÔºå‚Äò04:24:12 PM‚Äô)„ÄÇ |"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä",
    "href": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas ‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä",
    "text": "pandas ‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä\npandas ‰∏≠‰∏Ä‰∏™Âü∫Êú¨ÁöÑÊó∂Èó¥Â∫èÂàóÂØπË±°ÊòØ‰∏Ä‰∏™‰ª•Êó∂Èó¥Êà≥‰∏∫Á¥¢ÂºïÁöÑ SeriesÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\n\ndates = [datetime(2011, 1, 2), datetime(2011, 1, 5),\n         datetime(2011, 1, 7), datetime(2011, 1, 8),\n         datetime(2011, 1, 10), datetime(2011, 1, 12)]  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°ÂàóË°®\nts = pd.Series(np.random.randn(6), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™ SeriesÔºå‰ª• datetime ÂØπË±°ÂàóË°®‰Ωú‰∏∫Á¥¢Âºï\nprint(ts)  # ÊâìÂç∞Êó∂Èó¥Â∫èÂàó\nprint(type(ts))  # ÊâìÂç∞ ts ÁöÑÁ±ªÂûã\n\n2011-01-02    0.861587\n2011-01-05   -0.858717\n2011-01-07   -1.917160\n2011-01-08   -0.388154\n2011-01-10   -2.434067\n2011-01-12   -0.307086\ndtype: float64\n&lt;class 'pandas.core.series.Series'&gt;\n\n\n\nÁ¥¢ÂºïÊòØ‰∏Ä‰∏™ DatetimeIndex„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä-Áª≠",
    "href": "qmd/pandas3ed11cn.html#pandas-‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas ‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä (Áª≠)",
    "text": "pandas ‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÂü∫Á°Ä (Áª≠)\n‰∏çÂêåÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó‰πãÈó¥ÁöÑÁÆóÊúØËøêÁÆó‰ºöËá™Âä®ÊåâÊó•ÊúüÂØπÈΩê„ÄÇ\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\n\ndates = [datetime(2011, 1, 2), datetime(2011, 1, 5),\n         datetime(2011, 1, 7), datetime(2011, 1, 8),\n         datetime(2011, 1, 10), datetime(2011, 1, 12)]  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°ÂàóË°®\nts = pd.Series(np.random.randn(6), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™ SeriesÔºå‰ª• datetime ÂØπË±°ÂàóË°®‰Ωú‰∏∫Á¥¢Âºï\n\nprint(ts.index) #ÊâìÂç∞Êó∂Èó¥Â∫èÂàóÁöÑÁ¥¢Âºï\nprint(ts + ts[::2])  # [::2] ÈÄâÊã©ÊØèÁ¨¨‰∫å‰∏™ÂÖÉÁ¥†„ÄÇÊ≥®ÊÑè NaN ÂÄº„ÄÇ\n\nDatetimeIndex(['2011-01-02', '2011-01-05', '2011-01-07', '2011-01-08',\n               '2011-01-10', '2011-01-12'],\n              dtype='datetime64[ns]', freq=None)\n2011-01-02   -3.678911\n2011-01-05         NaN\n2011-01-07    1.160229\n2011-01-08         NaN\n2011-01-10   -0.422919\n2011-01-12         NaN\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êó∂Èó¥Êà≥ÂØπË±°",
    "href": "qmd/pandas3ed11cn.html#Êó∂Èó¥Êà≥ÂØπË±°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó∂Èó¥Êà≥ÂØπË±°",
    "text": "Êó∂Èó¥Êà≥ÂØπË±°\nDatetimeIndex ‰∏≠ÁöÑÊ†áÈáèÂÄºÊòØ pandas Timestamp ÂØπË±°Ôºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\n\ndates = [datetime(2011, 1, 2), datetime(2011, 1, 5),\n         datetime(2011, 1, 7), datetime(2011, 1, 8),\n         datetime(2011, 1, 10), datetime(2011, 1, 12)]  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°ÂàóË°®\nts = pd.Series(np.random.randn(6), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™ SeriesÔºå‰ª• datetime ÂØπË±°ÂàóË°®‰Ωú‰∏∫Á¥¢Âºï\n\nstamp = ts.index[0] #Ëé∑ÂèñÊó∂Èó¥Â∫èÂàóÁ¥¢ÂºïÁöÑÁ¨¨‰∏Ä‰∏™ÂÄº\nprint(stamp) #ÊâìÂç∞Ëøô‰∏™ÂÄº\nprint(type(stamp)) #ÊâìÂç∞ÂÄºÁöÑÁ±ªÂûã\n\n2011-01-02 00:00:00\n&lt;class 'pandas._libs.tslibs.timestamps.Timestamp'&gt;\n\n\npandas.Timestamp ÂèØ‰ª•Âú®Â§ßÂ§öÊï∞‰ΩøÁî® datetime ÂØπË±°ÁöÑÂú∞Êñπ‰ΩøÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ",
    "href": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ\nÊÇ®ÂèØ‰ª•‰ΩøÁî®ÂêÑÁßçÊñπÂºè‰ΩøÁî®Ê†áÁ≠æ (Êó•Êúü) ÂØπÊó∂Èó¥Â∫èÂàóËøõË°åÁ¥¢ÂºïÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\n\ndates = [datetime(2011, 1, 2), datetime(2011, 1, 5),\n         datetime(2011, 1, 7), datetime(2011, 1, 8),\n         datetime(2011, 1, 10), datetime(2011, 1, 12)]  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°ÂàóË°®\nts = pd.Series(np.random.randn(6), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™ SeriesÔºå‰ª• datetime ÂØπË±°ÂàóË°®‰Ωú‰∏∫Á¥¢Âºï\nstamp = ts.index[2]  # Ëé∑ÂèñÊó∂Èó¥Â∫èÂàóÁ¥¢ÂºïÁöÑÁ¨¨‰∏â‰∏™ÂÖÉÁ¥†\nprint(ts[stamp])  # ‰ΩøÁî®Êó∂Èó¥Êà≥Á¥¢Âºï\nprint(ts['2011-01-10'])  # ‰ΩøÁî®Êó•ÊúüÂ≠óÁ¨¶‰∏≤Á¥¢Âºï\n\n-0.6757153480196619\n0.5955423482905937"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠",
    "href": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)\nÂØπ‰∫éËæÉÈïøÁöÑÊó∂Èó¥Â∫èÂàóÔºåÊÇ®ÂèØ‰ª•‰ΩøÁî®Âπ¥‰ªΩÊàñÂπ¥ÊúàÊù•ÈÄâÊã©ÂàáÁâáÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nlonger_ts = pd.Series(np.random.randn(1000),\n                      index=pd.date_range('1/1/2000', periods=1000))  # ÂàõÂª∫‰∏Ä‰∏™ËæÉÈïøÁöÑÊó∂Èó¥Â∫èÂàó\nprint(longer_ts['2001'])  # ÈÄâÊã© 2001 Âπ¥ÁöÑÊâÄÊúâÊï∞ÊçÆ\nprint(longer_ts['2001-05'])  # ÈÄâÊã© 2001 Âπ¥ 5 ÊúàÁöÑÊâÄÊúâÊï∞ÊçÆ\n\n2001-01-01   -1.335503\n2001-01-02    0.377472\n2001-01-03   -0.902539\n2001-01-04   -0.576141\n2001-01-05    1.719074\n                ...   \n2001-12-27   -0.628212\n2001-12-28    1.158959\n2001-12-29    0.438549\n2001-12-30    0.189347\n2001-12-31   -0.631932\nFreq: D, Length: 365, dtype: float64\n2001-05-01    1.387104\n2001-05-02   -1.246153\n2001-05-03   -1.177663\n2001-05-04   -0.742300\n2001-05-05   -0.206399\n2001-05-06   -0.322846\n2001-05-07    0.677135\n2001-05-08   -1.041466\n2001-05-09   -2.715694\n2001-05-10   -0.676658\n2001-05-11    1.493104\n2001-05-12   -0.410157\n2001-05-13    0.259768\n2001-05-14    2.783165\n2001-05-15   -0.178865\n2001-05-16   -1.292425\n2001-05-17    1.213440\n2001-05-18   -0.318389\n2001-05-19    0.040051\n2001-05-20    0.090165\n2001-05-21   -0.293464\n2001-05-22   -0.091107\n2001-05-23   -0.366591\n2001-05-24   -0.801118\n2001-05-25    1.037353\n2001-05-26   -0.105787\n2001-05-27   -2.664305\n2001-05-28   -0.134179\n2001-05-29    0.471620\n2001-05-30    0.551817\n2001-05-31    0.387424\nFreq: D, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)\n‰ΩøÁî® datetime ÂØπË±°ËøõË°åÂàáÁâá‰πüÊúâÊïàÔºåÂåÖÊã¨ËåÉÂõ¥Êü•ËØ¢Ôºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\n\ndates = [datetime(2011, 1, 2), datetime(2011, 1, 5),\n         datetime(2011, 1, 7), datetime(2011, 1, 8),\n         datetime(2011, 1, 10), datetime(2011, 1, 12)]  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°ÂàóË°®\nts = pd.Series(np.random.randn(6), index=dates)\nprint(ts[datetime(2011, 1, 7):])  # ‰ΩøÁî® datetime ÂØπË±°ËøõË°åÂàáÁâá (ËåÉÂõ¥Êü•ËØ¢)\nprint(ts['2011-01-06':'2011-01-11'])  # ‰ΩøÁî®Êó•ÊúüÂ≠óÁ¨¶‰∏≤ËøõË°åÂàáÁâá (ËåÉÂõ¥Êü•ËØ¢)\n\n2011-01-07    0.355962\n2011-01-08   -1.926071\n2011-01-10   -0.146438\n2011-01-12   -0.072075\ndtype: float64\n2011-01-07    0.355962\n2011-01-08   -1.926071\n2011-01-10   -0.146438\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠-2",
    "href": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)\ntruncate() ÊñπÊ≥ïÂú®‰∏§‰∏™Êó•Êúü‰πãÈó¥ÂØπ Series ËøõË°åÂàáÁâáÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\n\ndates = [datetime(2011, 1, 2), datetime(2011, 1, 5),\n         datetime(2011, 1, 7), datetime(2011, 1, 8),\n         datetime(2011, 1, 10), datetime(2011, 1, 12)]  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°ÂàóË°®\nts = pd.Series(np.random.randn(6), index=dates)\nprint(ts.truncate(after='2011-01-09'))  # Âú® 2011-01-09 ‰πãÂêéÊà™Êñ≠\n\n2011-01-02   -1.644881\n2011-01-05   -0.927946\n2011-01-07    0.904099\n2011-01-08    0.615941\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠-3",
    "href": "qmd/pandas3ed11cn.html#Á¥¢ÂºïÈÄâÊã©ÂíåÂ≠êÈõÜ-Áª≠-3",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)",
    "text": "Á¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜ (Áª≠)\nÊâÄÊúâËøô‰∫õÂàáÁâáÊìç‰ΩúÈÉΩÈÄÇÁî®‰∫é DataFrameÔºåÂú®Ë°å‰∏äËøõË°åÁ¥¢ÂºïÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('1/1/2000', periods=100, freq='W-WED')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÂë®‰∏â)\nlong_df = pd.DataFrame(np.random.randn(100, 4),\n                       index=dates,\n                       columns=['Colorado', 'Texas', 'New York', 'Ohio'])  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\nprint(long_df.loc['2001-05'])  # ‰ΩøÁî® .loc ÊåâÊ†áÁ≠æÈÄâÊã© 2001 Âπ¥ 5 ÊúàÁöÑÊâÄÊúâË°å\n\n            Colorado     Texas  New York      Ohio\n2001-05-02 -1.156319 -0.268464  0.395750 -0.662778\n2001-05-09  1.274707 -0.532286 -0.508506 -0.452835\n2001-05-16  0.369304 -0.442903 -0.936141 -0.273763\n2001-05-23  2.542679 -0.244747  0.413134 -0.871010\n2001-05-30  0.801122 -0.778807 -1.130611  0.814741"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó",
    "href": "qmd/pandas3ed11cn.html#ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó",
    "text": "ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó\nÂØπ‰∫éÂêå‰∏ÄÊó∂Èó¥Êà≥ÔºåÂèØËÉΩÂ≠òÂú®Â§ö‰∏™Êï∞ÊçÆËßÇÂØüÂÄºÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.DatetimeIndex(['1/1/2000', '1/2/2000', '1/2/2000', '1/2/2000',\n                        '1/3/2000'])  # ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÈáçÂ§çÊó•ÊúüÁöÑ DatetimeIndex\ndup_ts = pd.Series(np.arange(5), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑ Series\nprint(dup_ts)  # ÊâìÂç∞ Series\nprint(dup_ts.index.is_unique)  # Ê£ÄÊü•Á¥¢ÂºïÊòØÂê¶ÂîØ‰∏Ä\n\n2000-01-01    0\n2000-01-02    1\n2000-01-02    2\n2000-01-02    3\n2000-01-03    4\ndtype: int64\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó-Áª≠",
    "href": "qmd/pandas3ed11cn.html#ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó (Áª≠)",
    "text": "ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó (Áª≠)\nÁ¥¢ÂºïÁé∞Âú®Â∞Ü‰∫ßÁîüÊ†áÈáèÂÄºÊàñÂàáÁâáÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.DatetimeIndex(['1/1/2000', '1/2/2000', '1/2/2000', '1/2/2000',\n                        '1/3/2000'])  # ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÈáçÂ§çÊó•ÊúüÁöÑ DatetimeIndex\ndup_ts = pd.Series(np.arange(5), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑ Series\nprint(dup_ts['1/3/2000'])  # Êú™ÈáçÂ§çÁöÑÊó•ÊúüÔºåËøîÂõûÊ†áÈáèÂÄº\nprint(dup_ts['1/2/2000'])  # ÈáçÂ§çÁöÑÊó•ÊúüÔºåËøîÂõûÂàáÁâá\n\n4\n2000-01-02    1\n2000-01-02    2\n2000-01-02    3\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó-Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó (Áª≠)",
    "text": "ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑÊó∂Èó¥Â∫èÂàó (Áª≠)\nË¶ÅËÅöÂêàÂÖ∑ÊúâÈùûÂîØ‰∏ÄÊó∂Èó¥Êà≥ÁöÑÊï∞ÊçÆÔºåËØ∑‰ΩøÁî® groupby Âíå level=0Ôºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.DatetimeIndex(['1/1/2000', '1/2/2000', '1/2/2000', '1/2/2000',\n                        '1/3/2000'])  # ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÈáçÂ§çÊó•ÊúüÁöÑ DatetimeIndex\ndup_ts = pd.Series(np.arange(5), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™ÂÖ∑ÊúâÈáçÂ§çÁ¥¢ÂºïÁöÑ Series\ngrouped = dup_ts.groupby(level=0)  # ÊåâÁ¥¢ÂºïÁ∫ßÂà´ 0 (Êó•Êúü) ÂàÜÁªÑ\nprint(grouped.mean())  # ËÆ°ÁÆóÊØè‰∏™Êó•ÊúüÁöÑÂπ≥ÂùáÂÄº\nprint(grouped.count())  # ËÆ°ÁÆóÊØè‰∏™Êó•ÊúüÁöÑËÆ°Êï∞\n\n2000-01-01    0.0\n2000-01-02    2.0\n2000-01-03    4.0\ndtype: float64\n2000-01-01    1\n2000-01-02    3\n2000-01-03    1\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êó•ÊúüËåÉÂõ¥È¢ëÁéáÂíåÁßª‰Ωç",
    "href": "qmd/pandas3ed11cn.html#Êó•ÊúüËåÉÂõ¥È¢ëÁéáÂíåÁßª‰Ωç",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó•ÊúüËåÉÂõ¥„ÄÅÈ¢ëÁéáÂíåÁßª‰Ωç",
    "text": "Êó•ÊúüËåÉÂõ¥„ÄÅÈ¢ëÁéáÂíåÁßª‰Ωç\n\nÁîüÊàêÊó•ÊúüËåÉÂõ¥\npandas.date_range() Áî®‰∫éÁîüÊàêÂÖ∑ÊúâÁâπÂÆöÈïøÂ∫¶ÂíåÈ¢ëÁéáÁöÑ DatetimeIndexÔºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nindex = pd.date_range('2012-04-01', '2012-06-01')  # ÂàõÂª∫‰∏Ä‰∏™‰ªé 2012-04-01 Âà∞ 2012-06-01 ÁöÑÊØèÊó•Êó•ÊúüËåÉÂõ¥\nprint(index)  # ÊâìÂç∞ DatetimeIndex\n\nDatetimeIndex(['2012-04-01', '2012-04-02', '2012-04-03', '2012-04-04',\n               '2012-04-05', '2012-04-06', '2012-04-07', '2012-04-08',\n               '2012-04-09', '2012-04-10', '2012-04-11', '2012-04-12',\n               '2012-04-13', '2012-04-14', '2012-04-15', '2012-04-16',\n               '2012-04-17', '2012-04-18', '2012-04-19', '2012-04-20',\n               '2012-04-21', '2012-04-22', '2012-04-23', '2012-04-24',\n               '2012-04-25', '2012-04-26', '2012-04-27', '2012-04-28',\n               '2012-04-29', '2012-04-30', '2012-05-01', '2012-05-02',\n               '2012-05-03', '2012-05-04', '2012-05-05', '2012-05-06',\n               '2012-05-07', '2012-05-08', '2012-05-09', '2012-05-10',\n               '2012-05-11', '2012-05-12', '2012-05-13', '2012-05-14',\n               '2012-05-15', '2012-05-16', '2012-05-17', '2012-05-18',\n               '2012-05-19', '2012-05-20', '2012-05-21', '2012-05-22',\n               '2012-05-23', '2012-05-24', '2012-05-25', '2012-05-26',\n               '2012-05-27', '2012-05-28', '2012-05-29', '2012-05-30',\n               '2012-05-31', '2012-06-01'],\n              dtype='datetime64[ns]', freq='D')"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁîüÊàêÊó•ÊúüËåÉÂõ¥Áª≠",
    "href": "qmd/pandas3ed11cn.html#ÁîüÊàêÊó•ÊúüËåÉÂõ¥Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁîüÊàêÊó•ÊúüËåÉÂõ¥(Áª≠)",
    "text": "ÁîüÊàêÊó•ÊúüËåÉÂõ¥(Áª≠)\nÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºådate_range ÁîüÊàêÊØèÊó•Êó∂Èó¥Êà≥„ÄÇÊÇ®ÂèØ‰ª•ÊåáÂÆöÂºÄÂßãÊàñÁªìÊùüÊó•Êúü‰ª•ÂèäÂë®ÊúüÊï∞Ôºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nprint(pd.date_range(start='2012-04-01', periods=20))  # ‰ªé 2012-04-01 ÂºÄÂßãÔºåÁîüÊàê 20 ‰∏™ÊØèÊó•Êó•Êúü\nprint(pd.date_range(end='2012-06-01', periods=20))  # Âà∞ 2012-06-01 ÁªìÊùüÔºåÁîüÊàê 20 ‰∏™ÊØèÊó•Êó•Êúü\n\nDatetimeIndex(['2012-04-01', '2012-04-02', '2012-04-03', '2012-04-04',\n               '2012-04-05', '2012-04-06', '2012-04-07', '2012-04-08',\n               '2012-04-09', '2012-04-10', '2012-04-11', '2012-04-12',\n               '2012-04-13', '2012-04-14', '2012-04-15', '2012-04-16',\n               '2012-04-17', '2012-04-18', '2012-04-19', '2012-04-20'],\n              dtype='datetime64[ns]', freq='D')\nDatetimeIndex(['2012-05-13', '2012-05-14', '2012-05-15', '2012-05-16',\n               '2012-05-17', '2012-05-18', '2012-05-19', '2012-05-20',\n               '2012-05-21', '2012-05-22', '2012-05-23', '2012-05-24',\n               '2012-05-25', '2012-05-26', '2012-05-27', '2012-05-28',\n               '2012-05-29', '2012-05-30', '2012-05-31', '2012-06-01'],\n              dtype='datetime64[ns]', freq='D')"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁîüÊàêÊó•ÊúüËåÉÂõ¥Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#ÁîüÊàêÊó•ÊúüËåÉÂõ¥Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁîüÊàêÊó•ÊúüËåÉÂõ¥(Áª≠)",
    "text": "ÁîüÊàêÊó•ÊúüËåÉÂõ¥(Áª≠)\nÊÇ®ËøòÂèØ‰ª•ÊåáÂÆöÈ¢ëÁéá„ÄÇ‰æãÂ¶ÇÔºåËé∑ÂèñÊØè‰∏™ÊúàÁöÑÊúÄÂêé‰∏Ä‰∏™Â∑•‰ΩúÊó•Ôºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nprint(pd.date_range('2000-01-01', '2000-12-01', freq='BM'))  # 'BM' = Business Month end (ÊØèÊúàÊúÄÂêé‰∏Ä‰∏™Â∑•‰ΩúÊó•)\n\nDatetimeIndex(['2000-01-31', '2000-02-29', '2000-03-31', '2000-04-28',\n               '2000-05-31', '2000-06-30', '2000-07-31', '2000-08-31',\n               '2000-09-29', '2000-10-31', '2000-11-30'],\n              dtype='datetime64[ns]', freq='BME')\n\n\n\nÈ¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª\npandas ‰∏≠ÁöÑÈ¢ëÁéáÁî±Âü∫Êú¨È¢ëÁéáÂíå‰πòÊï∞ÁªÑÊàê„ÄÇÂü∫Êú¨È¢ëÁéáÈÄöÂ∏∏ÊòØÂ≠óÁ¨¶‰∏≤Âà´Âêç (‰æãÂ¶ÇÔºå‚ÄòM‚Äô Ë°®Á§∫ÊØèÊúàÔºå‚ÄòH‚Äô Ë°®Á§∫ÊØèÂ∞èÊó∂)„ÄÇ\n\n\n\n\n\n\n\n\nÂà´Âêç\nÂÅèÁßªÁ±ªÂûã\nÊèèËø∞\n\n\n\n\nD\nDay\nÊó•ÂéÜÊó•\n\n\nB\nBusinessDay\nÂ∑•‰ΩúÊó•\n\n\nH\nHour\nÊØèÂ∞èÊó∂\n\n\nT Êàñ min\nMinute\nÊØèÂàÜÈíü\n\n\nS\nSecond\nÊØèÁßí\n\n\nL Êàñ ms\nMilli\nÊØ´Áßí (1/1,000 Áßí)\n\n\nU\nMicro\nÂæÆÁßí (1/1,000,000 Áßí)\n\n\nM\nMonthEnd\nÊØèÊúàÊúÄÂêé‰∏Ä‰∏™Êó•ÂéÜÊó•"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßªÁª≠",
    "href": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßªÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª(Áª≠)",
    "text": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª(Áª≠)\n\n\n\n\n\n\n\n\nÂà´Âêç\nÂÅèÁßªÁ±ªÂûã\nÊèèËø∞\n\n\n\n\nBM\nBusinessMonthEnd\nÊØèÊúàÊúÄÂêé‰∏Ä‰∏™Â∑•‰ΩúÊó•\n\n\nMS\nMonthBegin\nÊØèÊúàÁ¨¨‰∏Ä‰∏™Êó•ÂéÜÊó•\n\n\nBMS\nBusinessMonthBegin\nÊØèÊúàÁ¨¨‰∏Ä‰∏™Â∑•‰ΩúÊó•\n\n\nW-MON, W-TUE, ‚Ä¶\nWeek\nÊØèÂë®ÁöÑÊåáÂÆöÊòüÊúüÂá† (MON, TUE, WED, THU,FRI, SAT, or SUN)\n\n\nWOM-1MON, WOM-2MON, ‚Ä¶\nWeekOfMonth\nÁîüÊàêÊØèÊúàÁ¨¨‰∏Ä„ÄÅÁ¨¨‰∫å„ÄÅÁ¨¨‰∏âÊàñÁ¨¨ÂõõÂë®ÁöÑÊØèÂë®Êó•Êúü (‰æãÂ¶ÇÔºåWOM-3FRI Ë°®Á§∫ÊØèÊúàÁ¨¨‰∏â‰∏™ÊòüÊúü‰∫î)"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßªÁª≠-1",
    "href": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßªÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª(Áª≠)",
    "text": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª(Áª≠)\n\n\n\n\n\n\n\n\nÂà´Âêç\nÂÅèÁßªÁ±ªÂûã\nÊèèËø∞\n\n\n\n\nQ-JAN, Q-FEB, ‚Ä¶\nQuarterEnd\nÂ≠£Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÊØè‰∏™ÊúàÁöÑÊúÄÂêé‰∏Ä‰∏™Êó•ÂéÜÊó•ÔºåÂπ¥‰ªΩ‰ª•ÊåáÂÆöÊúà‰ªΩÁªìÊùü (JAN, FEB,MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, or DEC)\n\n\nBQ-JAN, BQ-FEB, ‚Ä¶\nBusinessQuarterEnd\nÂ≠£Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÊØè‰∏™ÊúàÁöÑÊúÄÂêé‰∏Ä‰∏™Â∑•‰ΩúÊó•ÔºåÂπ¥‰ªΩ‰ª•ÊåáÂÆöÊúà‰ªΩÁªìÊùü\n\n\nQS-JAN, QS-FEB, ‚Ä¶\nQuarterBegin\nÂ≠£Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÊØè‰∏™ÊúàÁöÑÁ¨¨‰∏Ä‰∏™Êó•ÂéÜÊó•ÔºåÂπ¥‰ªΩ‰ª•ÊåáÂÆöÊúà‰ªΩÁªìÊùü\n\n\nBQS-JAN, BQS-FEB, ‚Ä¶\nBusinessQuarterBegin\nÂ≠£Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÊØè‰∏™ÊúàÁöÑÁ¨¨‰∏Ä‰∏™Â∑•‰ΩúÊó•ÔºåÂπ¥‰ªΩ‰ª•ÊåáÂÆöÊúà‰ªΩÁªìÊùü\n\n\nA-JAN, A-FEB, ‚Ä¶\nYearEnd\nÂπ¥Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÁªôÂÆöÊúà‰ªΩÁöÑÊúÄÂêé‰∏Ä‰∏™Êó•ÂéÜÊó• (JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP,OCT, NOV, or DEC)\n\n\nBA-JAN, BA-FEB, ‚Ä¶\nBusinessYearEnd\nÂπ¥Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÁªôÂÆöÊúà‰ªΩÁöÑÊúÄÂêé‰∏Ä‰∏™Â∑•‰ΩúÊó•\n\n\nAS-JAN, AS-FEB, ‚Ä¶\nYearBegin\nÂπ¥Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÁªôÂÆöÊúà‰ªΩÁöÑÁ¨¨‰∏ÄÂ§©\n\n\nBAS-JAN, BAS-FEB, ‚Ä¶\nBusinessYearBegin\nÂπ¥Â∫¶Êó•ÊúüÈîöÂÆöÂú®ÁªôÂÆöÊúà‰ªΩÁöÑÁ¨¨‰∏Ä‰∏™Â∑•‰ΩúÊó•"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª---Á§∫‰æã",
    "href": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª---Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª - Á§∫‰æã",
    "text": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª - Á§∫‰æã\n\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom pandas.tseries.offsets import Hour, Minute  # ÂØºÂÖ• Hour Âíå Minute ÂÅèÁßª\n\nprint(Hour())  # ÈªòËÆ§ 1 Â∞èÊó∂\nprint(Hour(4))  # 4 Â∞èÊó∂\nprint(pd.date_range('2000-01-01', '2000-01-03 23:59', freq='4H'))  # ÊØè 4 Â∞èÊó∂\n\n&lt;Hour&gt;\n&lt;4 * Hours&gt;\nDatetimeIndex(['2000-01-01 00:00:00', '2000-01-01 04:00:00',\n               '2000-01-01 08:00:00', '2000-01-01 12:00:00',\n               '2000-01-01 16:00:00', '2000-01-01 20:00:00',\n               '2000-01-02 00:00:00', '2000-01-02 04:00:00',\n               '2000-01-02 08:00:00', '2000-01-02 12:00:00',\n               '2000-01-02 16:00:00', '2000-01-02 20:00:00',\n               '2000-01-03 00:00:00', '2000-01-03 04:00:00',\n               '2000-01-03 08:00:00', '2000-01-03 12:00:00',\n               '2000-01-03 16:00:00', '2000-01-03 20:00:00'],\n              dtype='datetime64[ns]', freq='4h')"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª---Á§∫‰æãÁª≠",
    "href": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª---Á§∫‰æãÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª - Á§∫‰æã(Áª≠)",
    "text": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª - Á§∫‰æã(Áª≠)\n\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom pandas.tseries.offsets import Hour, Minute  # ÂØºÂÖ• Hour Âíå Minute\n\nprint(Hour(2) + Minute(30))  # 2 Â∞èÊó∂ 30 ÂàÜÈíü\nprint(pd.date_range('2000-01-01', periods=10, freq='1h30min'))  # ÊØè 1 Â∞èÊó∂ 30 ÂàÜÈíü\n\n&lt;150 * Minutes&gt;\nDatetimeIndex(['2000-01-01 00:00:00', '2000-01-01 01:30:00',\n               '2000-01-01 03:00:00', '2000-01-01 04:30:00',\n               '2000-01-01 06:00:00', '2000-01-01 07:30:00',\n               '2000-01-01 09:00:00', '2000-01-01 10:30:00',\n               '2000-01-01 12:00:00', '2000-01-01 13:30:00'],\n              dtype='datetime64[ns]', freq='90min')"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª---week-of-month",
    "href": "qmd/pandas3ed11cn.html#È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª---week-of-month",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª - ‚ÄúWeek of Month‚Äù",
    "text": "È¢ëÁéáÂíåÊó•ÊúüÂÅèÁßª - ‚ÄúWeek of Month‚Äù\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nrng = pd.date_range('2012-01-01', '2012-09-01', freq='WOM-3FRI')  # ÊØèÊúàÁ¨¨‰∏â‰∏™ÊòüÊúü‰∫î\nprint(list(rng))  # ÊâìÂç∞Êó•ÊúüÂàóË°®\n\n[Timestamp('2012-01-20 00:00:00'), Timestamp('2012-02-17 00:00:00'), Timestamp('2012-03-16 00:00:00'), Timestamp('2012-04-20 00:00:00'), Timestamp('2012-05-18 00:00:00'), Timestamp('2012-06-15 00:00:00'), Timestamp('2012-07-20 00:00:00'), Timestamp('2012-08-17 00:00:00')]\n\n\n\nÁßª‰Ωç (Ë∂ÖÂâçÂíåÊªûÂêé) Êï∞ÊçÆ\nÁßª‰ΩçÂ∞ÜÊï∞ÊçÆÂú®Êó∂Èó¥‰∏äÂêëÂêéÊàñÂêëÂâçÁßªÂä®„ÄÇ‰ΩøÁî® shift() ÊñπÊ≥ïÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nts = pd.Series(np.random.randn(4),\n               index=pd.date_range('1/1/2000', periods=4, freq='M'))  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó (ÊØèÊúà)\nprint(ts)  # ÊâìÂç∞ÂéüÂßãÊó∂Èó¥Â∫èÂàó\nprint(ts.shift(2))  # ÂêëÂêéÁßªÂä® 2 ‰∏™Âë®Êúü (ÊªûÂêé)\nprint(ts.shift(-2))  # ÂêëÂâçÁßªÂä® 2 ‰∏™Âë®Êúü (Ë∂ÖÂâç)\n\n2000-01-31   -1.009393\n2000-02-29   -0.054792\n2000-03-31    0.747390\n2000-04-30   -0.998162\nFreq: ME, dtype: float64\n2000-01-31         NaN\n2000-02-29         NaN\n2000-03-31   -1.009393\n2000-04-30   -0.054792\nFreq: ME, dtype: float64\n2000-01-31    0.747390\n2000-02-29   -0.998162\n2000-03-31         NaN\n2000-04-30         NaN\nFreq: ME, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Áßª‰Ωç-Ë∂ÖÂâçÂíåÊªûÂêé-Êï∞ÊçÆ-Áª≠",
    "href": "qmd/pandas3ed11cn.html#Áßª‰Ωç-Ë∂ÖÂâçÂíåÊªûÂêé-Êï∞ÊçÆ-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áßª‰Ωç (Ë∂ÖÂâçÂíåÊªûÂêé) Êï∞ÊçÆ (Áª≠)",
    "text": "Áßª‰Ωç (Ë∂ÖÂâçÂíåÊªûÂêé) Êï∞ÊçÆ (Áª≠)\n‰∏Ä‰∏™Â∏∏ËßÅÁöÑÁî®ÈÄîÊòØËÆ°ÁÆóÁôæÂàÜÊØîÂèòÂåñÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nts = pd.Series(np.random.randn(4),\n               index=pd.date_range('1/1/2000', periods=4, freq='M'))  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó (ÊØèÊúà)\nprint(ts / ts.shift(1) - 1)  # ËÆ°ÁÆóÁôæÂàÜÊØîÂèòÂåñ\n\n2000-01-31          NaN\n2000-02-29   -19.980363\n2000-03-31    -0.529899\n2000-04-30    -0.617730\nFreq: ME, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Áßª‰Ωç-Ë∂ÖÂâçÂíåÊªûÂêé-Êï∞ÊçÆ-Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#Áßª‰Ωç-Ë∂ÖÂâçÂíåÊªûÂêé-Êï∞ÊçÆ-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áßª‰Ωç (Ë∂ÖÂâçÂíåÊªûÂêé) Êï∞ÊçÆ (Áª≠)",
    "text": "Áßª‰Ωç (Ë∂ÖÂâçÂíåÊªûÂêé) Êï∞ÊçÆ (Áª≠)\nÊÇ®ËøòÂèØ‰ª•ÁßªÂä®Êó∂Èó¥Êà≥Ôºå‰øùÊåÅÊï∞ÊçÆ‰∏çÂèòÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nts = pd.Series(np.random.randn(4),\n               index=pd.date_range('1/1/2000', periods=4, freq='M'))  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó (ÊØèÊúà)\nprint(ts.shift(2, freq='M'))  # Â∞ÜÊó∂Èó¥Êà≥ÂêëÂêéÁßªÂä® 2 ‰∏™Êúà\nprint(ts.shift(3, freq='D'))  # Â∞ÜÊó∂Èó¥Êà≥ÂêëÂêéÁßªÂä® 3 Â§©\nprint(ts.shift(1, freq='90T'))  # Â∞ÜÊó∂Èó¥Êà≥ÂêëÂêéÁßªÂä® 90 ÂàÜÈíü ('T' Ë°®Á§∫ÂàÜÈíü)\n\n2000-03-31   -1.282300\n2000-04-30    0.953737\n2000-05-31   -0.144512\n2000-06-30   -0.054130\nFreq: ME, dtype: float64\n2000-02-03   -1.282300\n2000-03-03    0.953737\n2000-04-03   -0.144512\n2000-05-03   -0.054130\ndtype: float64\n2000-01-31 01:30:00   -1.282300\n2000-02-29 01:30:00    0.953737\n2000-03-31 01:30:00   -0.144512\n2000-04-30 01:30:00   -0.054130\ndtype: float64\n\n\n\n‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•Êúü\npandas Êó•ÊúüÂÅèÁßªÈáèÂèØ‰ª•‰∏é datetime Êàñ Timestamp ÂØπË±°‰∏ÄËµ∑‰ΩøÁî®Ôºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\nfrom pandas.tseries.offsets import Day, MonthEnd  # ÂØºÂÖ• Day Âíå MonthEnd ÂÅèÁßª\n\nnow = datetime(2011, 11, 17)  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°\nprint(now + 3 * Day())  # Âä†‰∏ä 3 Â§©\nprint(now + MonthEnd())  # ÊªöÂä®Âà∞ÊúàÂ∫ï\nprint(now + MonthEnd(2))  # ÊªöÂä®Âà∞‰∏ã‰∏™ÊúàÂ∫ï\n\n2011-11-20 00:00:00\n2011-11-30 00:00:00\n2011-12-31 00:00:00"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•ÊúüÁª≠",
    "href": "qmd/pandas3ed11cn.html#‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•ÊúüÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•Êúü(Áª≠)",
    "text": "‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•Êúü(Áª≠)\n\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom datetime import datetime  # ÂØºÂÖ• datetime\nfrom pandas.tseries.offsets import  MonthEnd  # ÂØºÂÖ• MonthEnd ÂÅèÁßª\n\nnow = datetime(2011, 11, 17)  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°\noffset = MonthEnd()  # ÂàõÂª∫ MonthEnd ÂÅèÁßªÂØπË±°\nprint(offset.rollforward(now))  # ÊòæÂºèÂêëÂâçÊªöÂä®\nprint(offset.rollback(now))  # ÊòæÂºèÂêëÂêéÊªöÂä®\n\n2011-11-30 00:00:00\n2011-10-31 00:00:00"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•ÊúüÁª≠-1",
    "href": "qmd/pandas3ed11cn.html#‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•ÊúüÁª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•Êúü(Áª≠)",
    "text": "‰ΩøÁî®ÂÅèÁßªÈáèÁßªÂä®Êó•Êúü(Áª≠)\nÂ∞ÜÊó•ÊúüÂÅèÁßªÈáè‰∏é groupby ÁªìÂêà‰ΩøÁî®ÁöÑ‰∏ÄÁßçÂ∑ßÂ¶ôÊñπÊ≥ïÊòØ ‚ÄúÊªöÂä®‚Äù Êó•ÊúüÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom pandas.tseries.offsets import MonthEnd  # ÂØºÂÖ• MonthEnd\n\nts = pd.Series(np.random.randn(20),\n                index=pd.date_range('1/15/2000', periods=20, freq='4D'))  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó (ÊØè 4 Â§©)\nprint(ts.groupby(MonthEnd().rollforward).mean())  # ÊåâÊúàÂ∫ïÂàÜÁªÑÂπ∂ËÆ°ÁÆóÂπ≥ÂùáÂÄº\nprint(ts.resample('M').mean())  # Á≠âÊïàÔºå‰∏îÈÄüÂ∫¶Êõ¥Âø´ (ÊåâÊúàÈáçÈááÊ†∑)\n\n2000-01-31    0.423288\n2000-02-29    0.973823\n2000-03-31   -0.074456\ndtype: float64\n2000-01-31    0.423288\n2000-02-29    0.973823\n2000-03-31   -0.074456\nFreq: ME, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Êó∂Âå∫Â§ÑÁêÜ",
    "href": "qmd/pandas3ed11cn.html#Êó∂Âå∫Â§ÑÁêÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó∂Âå∫Â§ÑÁêÜ",
    "text": "Êó∂Âå∫Â§ÑÁêÜ\nÂ§ÑÁêÜÊó∂Âå∫ÂèØËÉΩÂæàÂ§çÊùÇ„ÄÇpandas ‰ΩøÁî® pytz Â∫ì„ÄÇÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåpandas ‰∏≠ÁöÑÊó∂Èó¥Â∫èÂàóÊòØÊó∂Âå∫Êú¥Á¥†ÁöÑ(Ê≤°ÊúâÊó∂Âå∫‰ø°ÊÅØ)„ÄÇ\n\nimport pytz  # ÂØºÂÖ• pytz\n\nprint(pytz.common_timezones[-5:])  # ÊâìÂç∞ÊúÄÂêé 5 ‰∏™Â∏∏ËßÅÊó∂Âå∫\ntz = pytz.timezone('America/New_York')  # Ëé∑ÂèñÁ∫ΩÁ∫¶Êó∂Âå∫\nprint(tz)  # ÊâìÂç∞Êó∂Âå∫ÂØπË±°\n\n['US/Eastern', 'US/Hawaii', 'US/Mountain', 'US/Pacific', 'UTC']\nAmerica/New_York\n\n\n\nÊó∂Âå∫Êú¨Âú∞ÂåñÂíåËΩ¨Êç¢\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('3/9/2012 9:30', periods=6, freq='D')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÊó•)\nts = pd.Series(np.random.randn(len(dates)), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\nprint(ts)  # ÊâìÂç∞Êó∂Èó¥Â∫èÂàó\nprint(ts.index.tz)  # Êó∂Âå∫Êú¥Á¥† (None)\n\n2012-03-09 09:30:00    0.308118\n2012-03-10 09:30:00   -0.127274\n2012-03-11 09:30:00   -1.089446\n2012-03-12 09:30:00   -0.245161\n2012-03-13 09:30:00    1.363810\n2012-03-14 09:30:00    0.797744\nFreq: D, dtype: float64\nNone\n\n\n\n\nÊó∂Âå∫Êú¨Âú∞ÂåñÂíåËΩ¨Êç¢(Áª≠)\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\n# ÁîüÊàê‰∏Ä‰∏™Â∏¶ÊúâÊó∂Âå∫ÁöÑÊó∂Èó¥ËåÉÂõ¥\ndate_rng = pd.date_range('3/9/2012 9:30', periods=10, freq='D', tz='UTC')  # ÂàõÂª∫‰∏Ä‰∏™Â∏¶ÊúâÊó∂Âå∫ (UTC) ÁöÑÊó•ÊúüËåÉÂõ¥\nprint(date_rng.tz)  # ÊâìÂç∞Êó∂Âå∫\n\n# Êú¨Âú∞ÂåñÂà∞Êó∂Âå∫„ÄÇ\nts_utc = ts.tz_localize('UTC')  # Â∞ÜÊó∂Èó¥Â∫èÂàóÊú¨Âú∞ÂåñÂà∞ UTC\nprint(ts_utc)  # ÊâìÂç∞Êú¨Âú∞ÂåñÂêéÁöÑÊó∂Èó¥Â∫èÂàó\nprint(ts_utc.index)  # ÊâìÂç∞Â∏¶ÊúâÊó∂Âå∫ÁöÑÁ¥¢Âºï\n\nUTC\n2012-03-09 09:30:00+00:00    0.308118\n2012-03-10 09:30:00+00:00   -0.127274\n2012-03-11 09:30:00+00:00   -1.089446\n2012-03-12 09:30:00+00:00   -0.245161\n2012-03-13 09:30:00+00:00    1.363810\n2012-03-14 09:30:00+00:00    0.797744\nFreq: D, dtype: float64\nDatetimeIndex(['2012-03-09 09:30:00+00:00', '2012-03-10 09:30:00+00:00',\n               '2012-03-11 09:30:00+00:00', '2012-03-12 09:30:00+00:00',\n               '2012-03-13 09:30:00+00:00', '2012-03-14 09:30:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq='D')\n\n\n\n\nÊó∂Âå∫Êú¨Âú∞ÂåñÂíåËΩ¨Êç¢(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('3/9/2012 9:30', periods=6, freq='D')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÊó•)\nts = pd.Series(np.random.randn(len(dates)), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\nts_utc = ts.tz_localize('UTC')  # Â∞ÜÊó∂Èó¥Â∫èÂàóÊú¨Âú∞ÂåñÂà∞ UTC\n# ËΩ¨Êç¢‰∏∫Âè¶‰∏Ä‰∏™Êó∂Âå∫„ÄÇ\nts_eastern = ts_utc.tz_convert('America/New_York')  # Â∞ÜÊó∂Èó¥Â∫èÂàóËΩ¨Êç¢‰∏∫Á∫ΩÁ∫¶Êó∂Âå∫\nprint(ts_eastern)  # ÊâìÂç∞ËΩ¨Êç¢ÂêéÁöÑÊó∂Èó¥Â∫èÂàó\n\n2012-03-09 04:30:00-05:00    0.830877\n2012-03-10 04:30:00-05:00    2.356732\n2012-03-11 05:30:00-04:00   -1.302401\n2012-03-12 05:30:00-04:00    0.897200\n2012-03-13 05:30:00-04:00   -0.514878\n2012-03-14 05:30:00-04:00    0.065773\nFreq: D, dtype: float64\n\n\n\n\n‰ΩøÁî®Â∏¶ÊúâÊó∂Âå∫ÊÑèËØÜÁöÑ Timestamp ÂØπË±°ËøõË°åÊìç‰Ωú\nTimestamp ÂØπË±°‰πüÊîØÊåÅÊó∂Âå∫Êú¨Âú∞ÂåñÂíåËΩ¨Êç¢Ôºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nstamp = pd.Timestamp('2011-03-12 04:00')  # ÂàõÂª∫‰∏Ä‰∏™ Timestamp ÂØπË±°\nstamp_utc = stamp.tz_localize('utc')  # Êú¨Âú∞ÂåñÂà∞ UTC\nprint(stamp_utc.tz_convert('America/New_York'))  # ËΩ¨Êç¢‰∏∫Á∫ΩÁ∫¶Êó∂Âå∫\n\n2011-03-11 23:00:00-05:00\n\n\n\n\n‰ΩøÁî®Â∏¶ÊúâÊó∂Âå∫ÊÑèËØÜÁöÑ Timestamp ÂØπË±°ËøõË°åÊìç‰Ωú(Áª≠)\nÂú®‰∏çÂêåÊó∂Âå∫‰πãÈó¥ÊâßË°åÊìç‰ΩúÊó∂ÔºåÁªìÊûúÂ∞ÜÈááÁî® UTC„ÄÇ\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('3/7/2012 9:30', periods=10, freq='B')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (Â∑•‰ΩúÊó•)\nts = pd.Series(np.random.randn(len(dates)), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\nts1 = ts[:7].tz_localize('Europe/London')  # Êú¨Âú∞ÂåñÂà∞‰º¶Êï¶Êó∂Âå∫\nts2 = ts1[2:].tz_convert('Europe/Moscow')  # ËΩ¨Êç¢‰∏∫Ëé´ÊñØÁßëÊó∂Âå∫\nresult = ts1 + ts2  # ‰∏çÂêåÊó∂Âå∫ÁöÑÊó∂Èó¥Â∫èÂàóÁõ∏Âä†\nprint(result.index)  # ÁªìÊûúÁöÑÁ¥¢ÂºïÂ∞ÜÊòØ UTC\n\nDatetimeIndex(['2012-03-07 09:30:00+00:00', '2012-03-08 09:30:00+00:00',\n               '2012-03-09 09:30:00+00:00', '2012-03-12 09:30:00+00:00',\n               '2012-03-13 09:30:00+00:00', '2012-03-14 09:30:00+00:00',\n               '2012-03-15 09:30:00+00:00'],\n              dtype='datetime64[ns, UTC]', freq=None)"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ",
    "href": "qmd/pandas3ed11cn.html#Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ",
    "text": "Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ\nÂë®Êúü (Periods) Ë°®Á§∫Êó∂Èó¥Ë∑®Â∫¶ (‰æãÂ¶ÇÔºåÂ§©„ÄÅÊúà„ÄÅÂ≠£Â∫¶„ÄÅÂπ¥)„ÄÇPeriod Á±ªÔºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\np = pd.Period(2011, freq='A-DEC')  # ÂàõÂª∫‰∏Ä‰∏™Âπ¥Â∫¶Âë®Êúü (‰ª• 12 ÊúàÁªìÊùü)\nprint(p)  # ÊâìÂç∞Âë®Êúü\nprint(p + 5)  # Âä†‰∏ä 5 Âπ¥\nprint(p - 2)  # ÂáèÂéª 2 Âπ¥\nprint(pd.Period('2014', freq='A-DEC') - p)  # ËÆ°ÁÆó‰∏§‰∏™Âë®Êúü‰πãÈó¥ÁöÑÂ∑Æ (Âπ¥Êï∞)\n\n2011\n2016\n2009\n&lt;3 * YearEnds: month=12&gt;"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ-Áª≠",
    "href": "qmd/pandas3ed11cn.html#Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ (Áª≠)",
    "text": "Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ (Áª≠)\nperiod_range ÂàõÂª∫Âë®ÊúüÁöÑËßÑÂàôËåÉÂõ¥Ôºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nrng = pd.period_range('2000-01-01', '2000-06-30', freq='M')  # ÂàõÂª∫‰∏Ä‰∏™ÊØèÊúàÂë®ÊúüËåÉÂõ¥\nprint(rng)  # ÊâìÂç∞ PeriodIndex\nprint(pd.Series(np.random.randn(6), index=rng))  # ÂàõÂª∫‰∏Ä‰∏™‰ª• PeriodIndex ‰∏∫Á¥¢ÂºïÁöÑ Series\n\nPeriodIndex(['2000-01', '2000-02', '2000-03', '2000-04', '2000-05', '2000-06'], dtype='period[M]')\n2000-01    1.172247\n2000-02   -0.529734\n2000-03    0.654521\n2000-04   -1.033596\n2000-05    0.047506\n2000-06    0.557574\nFreq: M, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ-Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ-Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ (Áª≠)",
    "text": "Âë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ (Áª≠)\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nvalues = ['2001Q3', '2002Q2', '2003Q1']  # ÂÆö‰πâ‰∏Ä‰∏™Â≠£Â∫¶Â≠óÁ¨¶‰∏≤ÂàóË°®\nindex = pd.PeriodIndex(values, freq='Q-DEC')  # ‰ªéÂ≠óÁ¨¶‰∏≤ÂàóË°®ÂàõÂª∫‰∏Ä‰∏™ PeriodIndex (‰ª• 12 ÊúàÁªìÊùüÁöÑÂ≠£Â∫¶)\nprint(index)  # ÊâìÂç∞ PeriodIndex\n\nPeriodIndex(['2001Q3', '2002Q2', '2003Q1'], dtype='period[Q-DEC]')\n\n\n\nÂë®ÊúüÈ¢ëÁéáËΩ¨Êç¢\nÂèØ‰ª•‰ΩøÁî® asfreq ËΩ¨Êç¢Âë®ÊúüÂíå PeriodIndex ÂØπË±°Ôºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\np = pd.Period('2011', freq='A-DEC')  # ÂàõÂª∫‰∏Ä‰∏™Âπ¥Â∫¶Âë®Êúü (‰ª• 12 ÊúàÁªìÊùü)\nprint(p.asfreq('M', how='start'))  # ËΩ¨Êç¢‰∏∫ÊØèÊúàÂë®Êúü (ÂºÄÂßã)\nprint(p.asfreq('M', how='end'))  # ËΩ¨Êç¢‰∏∫ÊØèÊúàÂë®Êúü (ÁªìÊùü)\n\np = pd.Period('Aug-2011', 'M') # ÂàõÂª∫‰∏Ä‰∏™ÊúàÁöÑÂë®Êúü\nprint(p.asfreq('A-JUN')) # ËΩ¨Êç¢‰∏∫‰ª•ÂÖ≠ÊúàÁªìÊùüÁöÑÂπ¥Â∫¶Âë®Êúü\n\n2011-01\n2011-12\n2012\n\n\n\n\nÂë®ÊúüÈ¢ëÁéáËΩ¨Êç¢(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nperiods = pd.period_range('2006', '2009', freq='A-DEC')  # ÂàõÂª∫‰∏Ä‰∏™Âπ¥Â∫¶Âë®ÊúüËåÉÂõ¥ (‰ª• 12 ÊúàÁªìÊùü)\nts = pd.Series(np.random.randn(len(periods)), index=periods)  # ÂàõÂª∫‰∏Ä‰∏™‰ª• PeriodIndex ‰∏∫Á¥¢ÂºïÁöÑ Series\nprint(ts.asfreq('M', how='start'))   # ËΩ¨Êç¢‰∏∫ÊØèÊúàÂë®Êúü (ÂºÄÂßã)\nprint(ts.asfreq('B', how='end'))  # ËΩ¨Êç¢‰∏∫Â∑•‰ΩúÊó•Âë®Êúü (ÁªìÊùü)\n\n2006-01    0.696659\n2007-01   -0.132214\n2008-01   -0.666495\n2009-01    0.288164\nFreq: M, dtype: float64\n2006-12-29    0.696659\n2007-12-31   -0.132214\n2008-12-31   -0.666495\n2009-12-31    0.288164\nFreq: B, dtype: float64\n\n\n\n\nÂ≠£Â∫¶Âë®ÊúüÈ¢ëÁéá\nÂ≠£Â∫¶Êï∞ÊçÆÂú®Ë¥¢Âä°‰∏≠ÂæàÂ∏∏ËßÅ„ÄÇpandas ÊîØÊåÅÂ≠£Â∫¶È¢ëÁéá (Q-JAN Âà∞ Q-DEC)Ôºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n#Âú®Ë¥¢ÊîøÂπ¥Â∫¶‰∫é 1 ÊúàÁªìÊùüÁöÑÊÉÖÂÜµ‰∏ãÔºå2012Q4 ÁöÑÊó∂Èó¥ËåÉÂõ¥ÊòØ‰ªé 2011 Âπ¥ 11 ÊúàÂà∞ 2012 Âπ¥ 1 Êúà\np = pd.Period('2012Q4', freq='Q-JAN')  # ÂàõÂª∫‰∏Ä‰∏™Â≠£Â∫¶Âë®Êúü (‰ª• 1 ÊúàÁªìÊùü)\nprint(p)  # ÊâìÂç∞Âë®Êúü\nprint(p.asfreq('D', how='start'))  # ËΩ¨Êç¢‰∏∫ÊØèÊó•Âë®Êúü (ÂºÄÂßã)\nprint(p.asfreq('D', how='end'))  # ËΩ¨Êç¢‰∏∫ÊØèÊó•Âë®Êúü (ÁªìÊùü)\n\n2012Q4\n2011-11-01\n2012-01-31\n\n\n\n\nÂ≠£Â∫¶Âë®ÊúüÈ¢ëÁéá(Áª≠)\nËé∑ÂèñÂ≠£Â∫¶ÂÄíÊï∞Á¨¨‰∫å‰∏™Â∑•‰ΩúÊó•‰∏ãÂçà 4 ÁÇπÁöÑÊó∂Èó¥Êà≥\n\nimport pandas as pd  # ÂØºÂÖ• pandas\np = pd.Period('2012Q4', freq='Q-JAN')  # ÂàõÂª∫‰∏Ä‰∏™Â≠£Â∫¶Âë®Êúü (‰ª• 1 ÊúàÁªìÊùü)\np4pm = (p.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60 #ËΩ¨Êç¢‰∏∫‰∫§ÊòìÊó•ÔºåÂèñÂâç‰∏ÄÂ§©„ÄÇËΩ¨Êç¢‰∏∫ÂàÜÈíüÔºåÂèñÂΩìÂ§©ÁöÑÂºÄÂßãÊó∂Èó¥„ÄÇÁÑ∂ÂêéÂÜçÂä†‰∏ä16*60ÂàÜÈíü\nprint(p4pm)  # ÊâìÂç∞Âë®Êúü\nprint(p4pm.to_timestamp())  # ËΩ¨Êç¢‰∏∫ Timestamp\n\n2012-01-30 16:00\n2012-01-30 16:00:00\n\n\n\n\nÂ≠£Â∫¶Âë®ÊúüÈ¢ëÁéá(Áª≠)\n‰ΩøÁî® pandas.period_range ÁîüÊàêÂ≠£Â∫¶ËåÉÂõ¥\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nperiods = pd.period_range('2011Q3', '2012Q4', freq='Q-JAN')  # ÂàõÂª∫‰∏Ä‰∏™Â≠£Â∫¶Âë®ÊúüËåÉÂõ¥ (‰ª• 1 ÊúàÁªìÊùü)\nts = pd.Series(np.arange(len(periods)), index=periods)  # ÂàõÂª∫‰∏Ä‰∏™‰ª• PeriodIndex ‰∏∫Á¥¢ÂºïÁöÑ Series\nprint(ts)  # ÊâìÂç∞Êó∂Èó¥Â∫èÂàó\nnew_periods = (periods.asfreq('B', 'e') - 1).asfreq('H', 's') + 16  # ËÆ°ÁÆó‰∏ãÂçà 4 ÁÇπÁöÑÊó∂Èó¥Êà≥\nts.index = new_periods.to_timestamp()  # Â∞ÜÁ¥¢ÂºïËΩ¨Êç¢‰∏∫ Timestamp\nprint(ts)  # ÊâìÂç∞ËΩ¨Êç¢ÂêéÁöÑÊó∂Èó¥Â∫èÂàó\n\n2011Q3    0\n2011Q4    1\n2012Q1    2\n2012Q2    3\n2012Q3    4\n2012Q4    5\nFreq: Q-JAN, dtype: int64\n2010-10-28 16:00:00    0\n2011-01-28 16:00:00    1\n2011-04-28 16:00:00    2\n2011-07-28 16:00:00    3\n2011-10-28 16:00:00    4\n2012-01-30 16:00:00    5\ndtype: int64\n\n\n\n\nÂ∞ÜÊó∂Èó¥Êà≥ËΩ¨Êç¢‰∏∫Âë®Êúü (ÂèäËøîÂõû)\nto_period() Â∞ÜÊó∂Èó¥Êà≥ËΩ¨Êç¢‰∏∫Âë®ÊúüÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('1/1/2000', periods=3, freq='M')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÊúà)\nts = pd.Series(np.random.randn(3), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™‰ª• DatetimeIndex ‰∏∫Á¥¢ÂºïÁöÑ Series\npts = ts.to_period()  # ËΩ¨Êç¢‰∏∫ PeriodIndex\nprint(ts)  # ÊâìÂç∞ÂéüÂßãÊó∂Èó¥Â∫èÂàó\nprint(pts)  # ÊâìÂç∞ËΩ¨Êç¢‰∏∫Âë®ÊúüÁöÑÊó∂Èó¥Â∫èÂàó\n\n2000-01-31    0.032885\n2000-02-29   -0.472993\n2000-03-31   -2.110774\nFreq: ME, dtype: float64\n2000-01    0.032885\n2000-02   -0.472993\n2000-03   -2.110774\nFreq: M, dtype: float64\n\n\n\n\nÂ∞ÜÊó∂Èó¥Êà≥ËΩ¨Êç¢‰∏∫Âë®Êúü (ÂèäËøîÂõû)(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('1/29/2000', periods=6, freq='D')   # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÊó•)\nts2 = pd.Series(np.random.randn(6), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™‰ª• DatetimeIndex ‰∏∫Á¥¢ÂºïÁöÑ Series\nprint(ts2.to_period('M'))  # ËΩ¨Êç¢‰∏∫ÊØèÊúàÂë®Êúü\nprint(ts2.to_period('M').to_timestamp(how='end'))  # ËΩ¨Êç¢Âõû Timestamp (ÊúàÊú´)\n\n2000-01   -1.006614\n2000-01    2.431288\n2000-01    1.428516\n2000-02    1.593605\n2000-02    0.836637\n2000-02    1.806877\nFreq: M, dtype: float64\n2000-01-31 23:59:59.999999999   -1.006614\n2000-01-31 23:59:59.999999999    2.431288\n2000-01-31 23:59:59.999999999    1.428516\n2000-02-29 23:59:59.999999999    1.593605\n2000-02-29 23:59:59.999999999    0.836637\n2000-02-29 23:59:59.999999999    1.806877\ndtype: float64\n\n\n\n\n‰ªéÊï∞ÁªÑÂàõÂª∫ PeriodIndex\nÊÇ®ÂèØ‰ª•ÁªÑÂêàÂπ¥‰ªΩÂíåÂ≠£Â∫¶ÂàóÊù•ÂàõÂª∫ PeriodIndexÔºö\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndata = pd.read_csv('examples/macrodata.csv')  # ËØªÂèñ CSV Êñá‰ª∂\nprint(data.head(5))  # ÊâìÂç∞Ââç 5 Ë°å\n\n   year  quarter   realgdp  realcons  realinv  realgovt  realdpi    cpi  \\\n0  1959        1  2710.349    1707.4  286.898   470.045   1886.9  28.98   \n1  1959        2  2778.801    1733.7  310.859   481.301   1919.7  29.15   \n2  1959        3  2775.488    1751.8  289.226   491.260   1916.4  29.35   \n3  1959        4  2785.204    1753.7  299.356   484.052   1931.3  29.37   \n4  1960        1  2847.699    1770.5  331.722   462.199   1955.5  29.54   \n\n      m1  tbilrate  unemp      pop  infl  realint  \n0  139.7      2.82    5.8  177.146  0.00     0.00  \n1  141.7      3.08    5.1  177.830  2.34     0.74  \n2  140.5      3.82    5.3  178.657  2.74     1.09  \n3  140.0      4.33    5.6  179.386  0.27     4.06  \n4  139.6      3.50    5.2  180.007  2.31     1.19  \n\n\n\n\n‰ªéÊï∞ÁªÑÂàõÂª∫ PeriodIndex (Áª≠)\n\nimport pandas as pd  # ÂØºÂÖ• pandas\ndata = pd.read_csv('examples/macrodata.csv')  # ËØªÂèñ CSV Êñá‰ª∂\nindex = pd.PeriodIndex(year=data['year'], quarter=data['quarter'],freq='Q-DEC')  # ‰ªé year Âíå quarter ÂàóÂàõÂª∫ PeriodIndex\ndata.index = index  # ËÆæÁΩÆ DataFrame ÁöÑÁ¥¢Âºï\nprint(data['infl'].head())  # ÊâìÂç∞ 'infl' ÂàóÁöÑÂâçÂá†Ë°å\n\n1959Q1    0.00\n1959Q2    2.34\n1959Q3    2.74\n1959Q4    0.27\n1960Q1    2.31\nFreq: Q-DEC, Name: infl, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÈáçÈááÊ†∑ÂíåÈ¢ëÁéáËΩ¨Êç¢",
    "href": "qmd/pandas3ed11cn.html#ÈáçÈááÊ†∑ÂíåÈ¢ëÁéáËΩ¨Êç¢",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÈááÊ†∑ÂíåÈ¢ëÁéáËΩ¨Êç¢",
    "text": "ÈáçÈááÊ†∑ÂíåÈ¢ëÁéáËΩ¨Êç¢\nÈáçÈááÊ†∑Â∞ÜÊó∂Èó¥Â∫èÂàó‰ªé‰∏Ä‰∏™È¢ëÁéáËΩ¨Êç¢‰∏∫Âè¶‰∏Ä‰∏™È¢ëÁéá„ÄÇ\n\nÈôçÈááÊ†∑: Â∞ÜËæÉÈ´òÈ¢ëÁéáÁöÑÊï∞ÊçÆËÅöÂêàÂà∞ËæÉ‰ΩéÈ¢ëÁéá (‰æãÂ¶ÇÔºåÊØèÊó•Âà∞ÊØèÊúà)„ÄÇ\nÂçáÈááÊ†∑: Â∞ÜËæÉ‰ΩéÈ¢ëÁéáÁöÑÊï∞ÊçÆËΩ¨Êç¢‰∏∫ËæÉÈ´òÈ¢ëÁéá (‰æãÂ¶ÇÔºåÊØèÊó•Âà∞ÊØèÂ∞èÊó∂)„ÄÇ\n\n‰ΩøÁî® resample() ÊñπÊ≥ï„ÄÇÂÆÉÁ±ª‰ºº‰∫é groupby„ÄÇ\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('1/1/2000', periods=100, freq='D')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÊó•)\nts = pd.Series(np.random.randn(len(dates)), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\nprint(ts.resample('M').mean())  # ÊØèÊúàÂπ≥ÂùáÂÄº (ÈôçÈááÊ†∑)\nprint(ts.resample('M', kind='period').mean())  # ÊØèÊúàÂπ≥ÂùáÂÄº (ÈôçÈááÊ†∑Ôºå‰ΩøÁî®Âë®Êúü)\n\n2000-01-31    0.008237\n2000-02-29   -0.067492\n2000-03-31    0.058281\n2000-04-30   -0.271339\nFreq: ME, dtype: float64\n2000-01    0.008237\n2000-02   -0.067492\n2000-03    0.058281\n2000-04   -0.271339\nFreq: M, dtype: float64\n\n\n\nResample ÊñπÊ≥ïÂèÇÊï∞\nÂèÇÊï∞ | ÊèèËø∞ |\n: | :‚Äì |\nrule | Â≠óÁ¨¶‰∏≤„ÄÅDateOffset Êàñ timedeltaÔºåÊåáÁ§∫ÊâÄÈúÄÁöÑÈáçÈááÊ†∑È¢ëÁéá (‰æãÂ¶ÇÔºå‚ÄòM‚Äô„ÄÅ‚Äò5min‚Äô Êàñ Second(15)) |\naxis | Ë¶ÅÈáçÈááÊ†∑ÁöÑËΩ¥ÔºõÈªòËÆ§ axis=0 |\n|fill_method|ÂçáÈááÊ†∑Êó∂Â¶Ç‰ΩïÊèíÂÄºÔºåÂ¶Ç ‚Äúffill‚Äù Êàñ ‚Äúbfill‚ÄùÔºõÈªòËÆ§‰∏çÊèíÂÄº| |closed|Âú®ÈôçÈááÊ†∑‰∏≠ÔºåÊØè‰∏™Èó¥ÈöîÁöÑÂì™‰∏ÄÁ´ØÊòØÈó≠ÂêàÁöÑ (ÂåÖÂê´ÁöÑ)Ôºå‚Äúright‚Äù Êàñ ‚Äúleft‚Äù|\n\n\nResample ÊñπÊ≥ïÂèÇÊï∞(Áª≠)\nÂèÇÊï∞ | ÊèèËø∞ |\n: | :‚Äì |\n|label|Âú®ÈôçÈááÊ†∑‰∏≠ÔºåÂ¶Ç‰ΩïÊ†áËÆ∞ËÅöÂêàÁªìÊûúÔºå‰ΩøÁî® ‚Äúright‚Äù Êàñ ‚Äúleft‚Äù ÁÆ±Ëæπ (‰æãÂ¶ÇÔºå9:30 Âà∞ 9:35 ÁöÑ‰∫îÂàÜÈíüÈó¥ÈöîÂèØ‰ª•Ê†áËÆ∞‰∏∫ 9:30 Êàñ 9:35)| |limit|ÂêëÂâçÊàñÂêëÂêéÂ°´ÂÖÖÊó∂ÔºåË¶ÅÂ°´ÂÖÖÁöÑÊúÄÂ§ßÂë®ÊúüÊï∞| |kind|ËÅöÂêàÂà∞Âë®Êúü (‚Äúperiod‚Äù) ÊàñÊó∂Èó¥Êà≥ (‚Äútimestamp‚Äù)ÔºõÈªòËÆ§‰∏∫Êó∂Èó¥Â∫èÂàóÁöÑÁ¥¢ÂºïÁ±ªÂûã| |convention|ÈáçÈááÊ†∑Âë®ÊúüÊó∂ÔºåÂ∞Ü‰ΩéÈ¢ëÂë®ÊúüËΩ¨Êç¢‰∏∫È´òÈ¢ëÂë®ÊúüÁöÑÁ∫¶ÂÆö (‚Äústart‚Äù Êàñ ‚Äúend‚Äù)ÔºõÈªòËÆ§‰∏∫ ‚Äústart‚Äù| |origin|Áî®‰∫éÁ°ÆÂÆöÈáçÈááÊ†∑ÁÆ±ËæπÁºòÁöÑ‚ÄúÂü∫ÂáÜ‚ÄùÊó∂Èó¥Êà≥Ôºõ‰πüÂèØ‰ª•ÊòØ‚Äúepoch‚Äù„ÄÅ‚Äústart‚Äù„ÄÅ‚Äústart_day‚Äù„ÄÅ‚Äúend‚ÄùÊàñ‚Äúend_day‚Äù‰πã‰∏ÄÔºõÊúâÂÖ≥ÂÆåÊï¥ËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑ÂèÇÈòÖÈáçÈááÊ†∑ÊñáÊ°£Â≠óÁ¨¶‰∏≤| |offset|Ê∑ªÂä†Âà∞ÂéüÁÇπÁöÑÂÅèÁßª timedeltaÔºõÈªòËÆ§‰∏∫ None|\n\n\nÈôçÈááÊ†∑\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('1/1/2000', periods=12, freq='T')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÂàÜÈíü)\nts = pd.Series(np.arange(12), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\nprint(ts)  # ÊâìÂç∞ÂéüÂßãÊó∂Èó¥Â∫èÂàó\nprint(ts.resample('5min').sum())  # ÊØè 5 ÂàÜÈíüÊ±ÇÂíå (ÈôçÈááÊ†∑)\n\n2000-01-01 00:00:00     0\n2000-01-01 00:01:00     1\n2000-01-01 00:02:00     2\n2000-01-01 00:03:00     3\n2000-01-01 00:04:00     4\n2000-01-01 00:05:00     5\n2000-01-01 00:06:00     6\n2000-01-01 00:07:00     7\n2000-01-01 00:08:00     8\n2000-01-01 00:09:00     9\n2000-01-01 00:10:00    10\n2000-01-01 00:11:00    11\nFreq: min, dtype: int64\n2000-01-01 00:00:00    10\n2000-01-01 00:05:00    35\n2000-01-01 00:10:00    21\nFreq: 5min, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÈôçÈááÊ†∑Áª≠",
    "href": "qmd/pandas3ed11cn.html#ÈôçÈááÊ†∑Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈôçÈááÊ†∑(Áª≠)",
    "text": "ÈôçÈááÊ†∑(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('1/1/2000', periods=12, freq='T')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÂàÜÈíü)\nts = pd.Series(np.arange(12), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\n# closed='right', label='left'\nprint(ts.resample('5min', closed='right').sum())  # ÊØè 5 ÂàÜÈíüÊ±ÇÂíå (Âè≥Èó≠ÂêàÔºåÂ∑¶Ê†áÁ≠æ)\n\n# closed='right', label='right'\nprint(ts.resample('5min', closed='right', label='right').sum())  # ÊØè 5 ÂàÜÈíüÊ±ÇÂíå (Âè≥Èó≠ÂêàÔºåÂè≥Ê†áÁ≠æ)\n\n1999-12-31 23:55:00     0\n2000-01-01 00:00:00    15\n2000-01-01 00:05:00    40\n2000-01-01 00:10:00    11\nFreq: 5min, dtype: int64\n2000-01-01 00:00:00     0\n2000-01-01 00:05:00    15\n2000-01-01 00:10:00    40\n2000-01-01 00:15:00    11\nFreq: 5min, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÈôçÈááÊ†∑Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#ÈôçÈááÊ†∑Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈôçÈááÊ†∑(Áª≠)",
    "text": "ÈôçÈááÊ†∑(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom pandas.tseries.frequencies import to_offset\n\ndates = pd.date_range('1/1/2000', periods=12, freq='T')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÂàÜÈíü)\nts = pd.Series(np.arange(12), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\n# ÁßªÂä®ÁªìÊûúÁ¥¢Âºï\nresult = ts.resample('5min', closed='right', label='right').sum()  # ÊØè 5 ÂàÜÈíüÊ±ÇÂíå (Âè≥Èó≠ÂêàÔºåÂè≥Ê†áÁ≠æ)\nresult.index = result.index + to_offset(\"-1s\")   # Â∞ÜÁ¥¢ÂºïÂáèÂéª 1 Áßí\nprint(result)  # ÊâìÂç∞‰øÆÊîπÂêéÁöÑÊó∂Èó¥Â∫èÂàó\n\n1999-12-31 23:59:59     0\n2000-01-01 00:04:59    15\n2000-01-01 00:09:59    40\n2000-01-01 00:14:59    11\nFreq: 5min, dtype: int64\n\n\n\nÂºÄÁõò-ÊúÄÈ´ò-ÊúÄ‰Ωé-Êî∂Áõò (OHLC) ÈáçÈááÊ†∑\nÈáëËûçÊï∞ÊçÆÈáçÈááÊ†∑\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\ndates = pd.date_range('1/1/2000', periods=12, freq='T')  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÂàÜÈíü)\nts = pd.Series(np.arange(12), index=dates)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥Â∫èÂàó\nprint(ts.resample('5min').ohlc())  # ÊØè 5 ÂàÜÈíüÁöÑ OHLC (ÂºÄÁõò„ÄÅÊúÄÈ´ò„ÄÅÊúÄ‰Ωé„ÄÅÊî∂Áõò)\n\n                     open  high  low  close\n2000-01-01 00:00:00     0     4    0      4\n2000-01-01 00:05:00     5     9    5      9\n2000-01-01 00:10:00    10    11   10     11\n\n\n\n\nÂçáÈááÊ†∑ÂíåÊèíÂÄº\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nframe = pd.DataFrame(np.random.randn(2, 4),\n                    index=pd.date_range('1/1/2000', periods=2, freq='W-WED'),  # ÊØèÂë®‰∏â\n                    columns=['Colorado', 'Texas', 'New York', 'Ohio'])  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\nprint(frame)  # ÊâìÂç∞ DataFrame\n\n            Colorado     Texas  New York      Ohio\n2000-01-05 -0.119046  2.830369 -1.769164  1.541431\n2000-01-12 -0.601766 -0.473050  1.673675  0.122965"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂçáÈááÊ†∑ÂíåÊèíÂÄºÁª≠",
    "href": "qmd/pandas3ed11cn.html#ÂçáÈááÊ†∑ÂíåÊèíÂÄºÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂçáÈááÊ†∑ÂíåÊèíÂÄº(Áª≠)",
    "text": "ÂçáÈááÊ†∑ÂíåÊèíÂÄº(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nframe = pd.DataFrame(np.random.randn(2, 4),\n                    index=pd.date_range('1/1/2000', periods=2, freq='W-WED'),  # ÊØèÂë®‰∏â\n                    columns=['Colorado', 'Texas', 'New York', 'Ohio'])  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\ndf_daily = frame.resample('D').asfreq()  # ÂçáÈááÊ†∑Âà∞ÊØèÊó• (Áî® NaN Â°´ÂÖÖ)\nprint(df_daily)  # ÊâìÂç∞ÂçáÈááÊ†∑ÂêéÁöÑ DataFrame\nprint(frame.resample('D').ffill())  # ÂçáÈááÊ†∑Âà∞ÊØèÊó• (ÂêëÂâçÂ°´ÂÖÖ)\nprint(frame.resample('D').ffill(limit=2))  # ÂçáÈááÊ†∑Âà∞ÊØèÊó• (ÂêëÂâçÂ°´ÂÖÖÔºåÈôêÂà∂‰∏∫ 2 ‰∏™Âë®Êúü)\nprint(frame.resample('W-THU').ffill())   # ÂçáÈááÊ†∑Âà∞ÊØèÂë®Âõõ (ÂêëÂâçÂ°´ÂÖÖ)\n\n            Colorado     Texas  New York      Ohio\n2000-01-05 -1.235403  0.320551 -0.190728  0.194429\n2000-01-06       NaN       NaN       NaN       NaN\n2000-01-07       NaN       NaN       NaN       NaN\n2000-01-08       NaN       NaN       NaN       NaN\n2000-01-09       NaN       NaN       NaN       NaN\n2000-01-10       NaN       NaN       NaN       NaN\n2000-01-11       NaN       NaN       NaN       NaN\n2000-01-12 -1.428624 -0.183115  2.341178  0.740619\n            Colorado     Texas  New York      Ohio\n2000-01-05 -1.235403  0.320551 -0.190728  0.194429\n2000-01-06 -1.235403  0.320551 -0.190728  0.194429\n2000-01-07 -1.235403  0.320551 -0.190728  0.194429\n2000-01-08 -1.235403  0.320551 -0.190728  0.194429\n2000-01-09 -1.235403  0.320551 -0.190728  0.194429\n2000-01-10 -1.235403  0.320551 -0.190728  0.194429\n2000-01-11 -1.235403  0.320551 -0.190728  0.194429\n2000-01-12 -1.428624 -0.183115  2.341178  0.740619\n            Colorado     Texas  New York      Ohio\n2000-01-05 -1.235403  0.320551 -0.190728  0.194429\n2000-01-06 -1.235403  0.320551 -0.190728  0.194429\n2000-01-07 -1.235403  0.320551 -0.190728  0.194429\n2000-01-08       NaN       NaN       NaN       NaN\n2000-01-09       NaN       NaN       NaN       NaN\n2000-01-10       NaN       NaN       NaN       NaN\n2000-01-11       NaN       NaN       NaN       NaN\n2000-01-12 -1.428624 -0.183115  2.341178  0.740619\n            Colorado     Texas  New York      Ohio\n2000-01-06 -1.235403  0.320551 -0.190728  0.194429\n2000-01-13 -1.428624 -0.183115  2.341178  0.740619\n\n\n\n‰ΩøÁî®Âë®ÊúüËøõË°åÈáçÈááÊ†∑\nÈáçÈááÊ†∑‰ª•Âë®Êúü‰∏∫Á¥¢ÂºïÁöÑÊï∞ÊçÆÁ±ª‰ººÔºö\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nframe = pd.DataFrame(np.random.randn(24, 4),\n                     index=pd.period_range('1-2000', '12-2001', freq='M'),  # ÊØèÊúàÂë®Êúü\n                     columns=['Colorado', 'Texas', 'New York', 'Ohio'])  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\nprint(frame.head())  # ÊâìÂç∞ DataFrame ÁöÑÂâçÂá†Ë°å\n\n         Colorado     Texas  New York      Ohio\n2000-01 -1.295159  0.860683 -1.043693  0.562065\n2000-02 -1.063392  0.947760  0.128667  0.145346\n2000-03 -0.308100 -1.927342  0.964538  0.075638\n2000-04 -1.041177 -0.765766  1.900595 -0.794783\n2000-05 -1.011575 -0.554482 -1.121204  0.560699"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#‰ΩøÁî®Âë®ÊúüËøõË°åÈáçÈááÊ†∑Áª≠",
    "href": "qmd/pandas3ed11cn.html#‰ΩøÁî®Âë®ÊúüËøõË°åÈáçÈááÊ†∑Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®Âë®ÊúüËøõË°åÈáçÈááÊ†∑(Áª≠)",
    "text": "‰ΩøÁî®Âë®ÊúüËøõË°åÈáçÈááÊ†∑(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nframe = pd.DataFrame(np.random.randn(24, 4),\n                     index=pd.period_range('1-2000', '12-2001', freq='M'),  # ÊØèÊúàÂë®Êúü\n                     columns=['Colorado', 'Texas', 'New York', 'Ohio'])  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\nannual_frame = frame.resample('A-DEC').mean()  # ÈôçÈááÊ†∑Âà∞Âπ¥Â∫¶ (‰ª• 12 ÊúàÁªìÊùü)\nprint(annual_frame)  # ÊâìÂç∞ÈôçÈááÊ†∑ÂêéÁöÑ DataFrame\n\n# Q-DEC: Â≠£Â∫¶ÔºåÂπ¥‰ªΩ‰ª• 12 ÊúàÁªìÊùü\nprint(annual_frame.resample('Q-DEC', convention='end').asfreq())  # ÈôçÈááÊ†∑Âà∞Â≠£Â∫¶ (Âπ¥Â∫ïÔºåËΩ¨Êç¢‰∏∫È¢ëÁéá)\nprint(annual_frame.resample('Q-MAR').ffill())  # ÈôçÈááÊ†∑Âà∞Â≠£Â∫¶(‰ª•‰∏âÊúàÁªìÂ∞æÔºåÂπ∂ÂêëÂâçÂ°´ÂÖÖ)\n\n      Colorado     Texas  New York      Ohio\n2000 -0.293393 -0.614068  0.276103  0.339672\n2001 -0.489179  0.129512 -0.428786 -0.049860\n        Colorado     Texas  New York      Ohio\n2000Q4 -0.293393 -0.614068  0.276103  0.339672\n2001Q1       NaN       NaN       NaN       NaN\n2001Q2       NaN       NaN       NaN       NaN\n2001Q3       NaN       NaN       NaN       NaN\n2001Q4 -0.489179  0.129512 -0.428786 -0.049860\n        Colorado     Texas  New York      Ohio\n2000Q4 -0.293393 -0.614068  0.276103  0.339672\n2001Q1 -0.293393 -0.614068  0.276103  0.339672\n2001Q2 -0.293393 -0.614068  0.276103  0.339672\n2001Q3 -0.293393 -0.614068  0.276103  0.339672\n2001Q4 -0.489179  0.129512 -0.428786 -0.049860\n2002Q1 -0.489179  0.129512 -0.428786 -0.049860\n2002Q2 -0.489179  0.129512 -0.428786 -0.049860\n2002Q3 -0.489179  0.129512 -0.428786 -0.049860"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑",
    "href": "qmd/pandas3ed11cn.html#ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑",
    "text": "ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nN = 15  # ÂÆö‰πâÊó∂Èó¥Â∫èÂàóÁöÑÈïøÂ∫¶\ntimes = pd.date_range('2017-05-20 00:00', freq='1min', periods=N)  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥ËåÉÂõ¥ (ÊØèÂàÜÈíü)\ndf = pd.DataFrame({'time': times, 'value': np.arange(N)})  # ÂàõÂª∫‰∏Ä‰∏™ DataFrame\nprint(df)  # ÊâìÂç∞ DataFrame\nprint(df.set_index('time').resample('5min').count())  # ÊåâÊó∂Èó¥ÂàÜÁªÑÔºåÊØè 5 ÂàÜÈíüËÆ°Êï∞\n\n                  time  value\n0  2017-05-20 00:00:00      0\n1  2017-05-20 00:01:00      1\n2  2017-05-20 00:02:00      2\n3  2017-05-20 00:03:00      3\n4  2017-05-20 00:04:00      4\n5  2017-05-20 00:05:00      5\n6  2017-05-20 00:06:00      6\n7  2017-05-20 00:07:00      7\n8  2017-05-20 00:08:00      8\n9  2017-05-20 00:09:00      9\n10 2017-05-20 00:10:00     10\n11 2017-05-20 00:11:00     11\n12 2017-05-20 00:12:00     12\n13 2017-05-20 00:13:00     13\n14 2017-05-20 00:14:00     14\n                     value\ntime                      \n2017-05-20 00:00:00      5\n2017-05-20 00:05:00      5\n2017-05-20 00:10:00      5"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑Áª≠",
    "href": "qmd/pandas3ed11cn.html#ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑(Áª≠)",
    "text": "ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nN = 15\ntimes = pd.date_range('2017-05-20 00:00', freq='1min', periods=N)  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÂàÜÈíü)\ndf2 = pd.DataFrame({'time': times.repeat(3),  # time ÂàóÈáçÂ§ç 3 Ê¨°\n                    'key': np.tile(['a', 'b', 'c'], N),  # ÂàõÂª∫ key Âàó (a, b, c ÈáçÂ§ç)\n                    'value': np.arange(N * 3.)})  # ÂàõÂª∫ value Âàó\nprint(df2.head(7))  # ÊâìÂç∞ DataFrame ÁöÑÂâçÂá†Ë°å\n\n                 time key  value\n0 2017-05-20 00:00:00   a    0.0\n1 2017-05-20 00:00:00   b    1.0\n2 2017-05-20 00:00:00   c    2.0\n3 2017-05-20 00:01:00   a    3.0\n4 2017-05-20 00:01:00   b    4.0\n5 2017-05-20 00:01:00   c    5.0\n6 2017-05-20 00:02:00   a    6.0"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑(Áª≠)",
    "text": "ÂàÜÁªÑÊó∂Èó¥ÈáçÈááÊ†∑(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nN = 15\ntimes = pd.date_range('2017-05-20 00:00', freq='1min', periods=N)  # ÂàõÂª∫‰∏Ä‰∏™Êó•ÊúüËåÉÂõ¥ (ÊØèÂàÜÈíü)\ndf2 = pd.DataFrame({'time': times.repeat(3),\n                    'key': np.tile(['a', 'b', 'c'], N),\n                    'value': np.arange(N * 3.)})  # ÂàõÂª∫ DataFrame\ntime_key = pd.Grouper(freq='5min')  # ÂàõÂª∫‰∏Ä‰∏™Êó∂Èó¥ÂàÜÁªÑÂô® (ÊØè 5 ÂàÜÈíü)\nresampled = (df2.set_index('time')  # ËÆæÁΩÆ time Âàó‰∏∫Á¥¢Âºï\n             .groupby(['key', time_key])  # Êåâ key Âíå time_key ÂàÜÁªÑ\n             .sum())  # Ê±ÇÂíå\nprint(resampled)  # ÊâìÂç∞ÈáçÈááÊ†∑ÂêéÁöÑ DataFrame\n\n                         value\nkey time                      \na   2017-05-20 00:00:00   30.0\n    2017-05-20 00:05:00  105.0\n    2017-05-20 00:10:00  180.0\nb   2017-05-20 00:00:00   35.0\n    2017-05-20 00:05:00  110.0\n    2017-05-20 00:10:00  185.0\nc   2017-05-20 00:00:00   40.0\n    2017-05-20 00:05:00  115.0\n    2017-05-20 00:10:00  190.0"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞",
    "href": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞",
    "text": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞\nÁßªÂä®Á™óÂè£ÂáΩÊï∞ (‰πüÁß∞‰∏∫ÊªöÂä®Á™óÂè£ÂáΩÊï∞) ÂØπÊï∞ÊçÆÁöÑÊªëÂä®Á™óÂè£ËøõË°åÊìç‰Ωú„ÄÇÂÆÉ‰ª¨ÈÄöÂ∏∏Áî®‰∫éÂπ≥ÊªëÂòàÊùÇÁöÑÊó∂Èó¥Â∫èÂàó„ÄÇ\n\nimport numpy as np   # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠",
    "href": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)",
    "text": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)\n\nimport matplotlib.pyplot as plt #ÂØºÂÖ•ÁªòÂõæÊ®°Âùó\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\n\nclose_px['AAPL'].plot()  # ÁªòÂà∂ AAPL ÁöÑÊî∂Áõò‰ª∑\nclose_px['AAPL'].rolling(250).mean().plot()  # ÁªòÂà∂ AAPL ÁöÑ 250 Â§©ÁßªÂä®Âπ≥ÂùáÁ∫ø"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-1",
    "href": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)",
    "text": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nimport matplotlib.pyplot as plt #ÂØºÂÖ•ÁªòÂõæÊ®°Âùó\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\n\nstd250 = close_px['AAPL'].pct_change().rolling(250, min_periods=10).std()  # ËÆ°ÁÆó 250 Â§©ÊªöÂä®Ê†áÂáÜÂ∑Æ (Ëá≥Â∞ë 10 ‰∏™Âë®Êúü)\nprint(std250[5:12])  # ÊâìÂç∞‰∏ÄÈÉ®ÂàÜÊ†áÂáÜÂ∑Æ\nstd250.plot()  # ÁªòÂà∂Ê†áÂáÜÂ∑Æ\n\n2003-01-09         NaN\n2003-01-10         NaN\n2003-01-13         NaN\n2003-01-14         NaN\n2003-01-15         NaN\n2003-01-16    0.009628\n2003-01-17    0.013818\nFreq: B, Name: AAPL, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-2",
    "href": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-2",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)",
    "text": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)\n\nimport numpy as np  # ÂØºÂÖ• NumPy\nimport pandas as pd  # ÂØºÂÖ• pandas\nimport matplotlib.pyplot as plt #ÂØºÂÖ•ÁªòÂõæÊ®°Âùó\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\nstd250 = close_px['AAPL'].pct_change().rolling(250, min_periods=10).std()  # ËÆ°ÁÆó 250 Â§©ÊªöÂä®Ê†áÂáÜÂ∑Æ (Ëá≥Â∞ë 10 ‰∏™Âë®Êúü)\nexpanding_mean = std250.expanding().mean()  # ËÆ°ÁÆóÊâ©Â±ïÂπ≥ÂùáÂÄº"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-3",
    "href": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-3",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)",
    "text": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)\n\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• matplotlib.pyplot\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\n\nplt.style.use('grayscale')  # ‰ΩøÁî®ÁÅ∞Â∫¶Ê†∑Âºè\nclose_px.rolling(60).mean().plot(logy=True)  # ÁªòÂà∂ 60 Â§©ÊªöÂä®Âπ≥ÂùáÁ∫ø (ÂØπÊï∞ y ËΩ¥)"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-4",
    "href": "qmd/pandas3ed11cn.html#ÁßªÂä®Á™óÂè£ÂáΩÊï∞Áª≠-4",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)",
    "text": "ÁßªÂä®Á™óÂè£ÂáΩÊï∞(Áª≠)\n\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\nprint(close_px.rolling('20D').mean())  # ËÆ°ÁÆó 20 Â§©ÊªöÂä®Âπ≥ÂùáÁ∫ø\n\n                  AAPL       MSFT        XOM\n2003-01-02    7.400000  21.110000  29.220000\n2003-01-03    7.425000  21.125000  29.230000\n2003-01-06    7.433333  21.256667  29.473333\n2003-01-07    7.432500  21.425000  29.342500\n2003-01-08    7.402000  21.402000  29.240000\n...                ...        ...        ...\n2011-10-10  389.351429  25.602143  72.527857\n2011-10-11  388.505000  25.674286  72.835000\n2011-10-12  388.531429  25.810000  73.400714\n2011-10-13  388.826429  25.961429  73.905000\n2011-10-14  391.038000  26.048667  74.185333\n\n[2292 rows x 3 columns]\n\n\n\nÊåáÊï∞Âä†ÊùÉÂáΩÊï∞\n\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• matplotlib.pyplot\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\n\naapl_px = close_px['AAPL']['2006':'2007']  # ÈÄâÊã© 2006 Âπ¥Âíå 2007 Âπ¥ÁöÑ AAPL Êï∞ÊçÆ\nma30 = aapl_px.rolling(30, min_periods=20).mean()  # 30 Â§©ÁÆÄÂçïÁßªÂä®Âπ≥ÂùáÁ∫ø (Ëá≥Â∞ë 20 ‰∏™Âë®Êúü)\newma30 = aapl_px.ewm(span=30).mean()  # 30 Â§©ÊåáÊï∞Âä†ÊùÉÁßªÂä®Âπ≥ÂùáÁ∫ø\n\naapl_px.plot(style='k-', label='Price')  # ÁªòÂà∂ AAPL ‰ª∑Ê†º\nma30.plot(style='k--', label='Simple Moving Avg')  # ÁªòÂà∂ÁÆÄÂçïÁßªÂä®Âπ≥ÂùáÁ∫ø\newma30.plot(style='k-', label='EW MA')  # ÁªòÂà∂ÊåáÊï∞Âä†ÊùÉÁßªÂä®Âπ≥ÂùáÁ∫ø\nplt.legend()  # ÊòæÁ§∫Âõæ‰æã\n\n\n\n\n\n\n\n\n\n\n‰∫åÂÖÉÁßªÂä®Á™óÂè£ÂáΩÊï∞\n\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• matplotlib.pyplot\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\n\nspx_px = close_px_all['SPX']  # Ëé∑Âèñ S&P 500 ÊåáÊï∞\nspx_rets = spx_px.pct_change()  # ËÆ°ÁÆó S&P 500 ÊåáÊï∞ÁöÑÊî∂ÁõäÁéá\nreturns = close_px.pct_change()  # ËÆ°ÁÆóÊâÄÊúâËÇ°Á•®ÁöÑÊî∂ÁõäÁéá\n\n# AAPL Êî∂ÁõäÁéá‰∏é S&P 500 Êî∂ÁõäÁéáÁöÑÁõ∏ÂÖ≥ÊÄß\ncorr = returns['AAPL'].rolling(125, min_periods=100).corr(spx_rets)  # ËÆ°ÁÆó 125 Â§©ÊªöÂä®Áõ∏ÂÖ≥ÊÄß (Ëá≥Â∞ë 100 ‰∏™Âë®Êúü)\ncorr.plot()  # ÁªòÂà∂Áõ∏ÂÖ≥ÊÄß\n\n\n\n\n\n\n\n\n\n\n‰∫åÂÖÉÁßªÂä®Á™óÂè£ÂáΩÊï∞ (Áª≠)\n\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• matplotlib.pyplot\nimport pandas as pd  # ÂØºÂÖ• pandas\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\n\nspx_px = close_px_all['SPX']  # Ëé∑Âèñ S&P 500 ÊåáÊï∞\nspx_rets = spx_px.pct_change()  # ËÆ°ÁÆó S&P 500 ÊåáÊï∞ÁöÑÊî∂ÁõäÁéá\nreturns = close_px.pct_change()  # ËÆ°ÁÆóÊâÄÊúâËÇ°Á•®ÁöÑÊî∂ÁõäÁéá\n# ÊâÄÊúâËÇ°Á•®Êî∂ÁõäÁéá‰∏é S&P 500 ÁöÑÁõ∏ÂÖ≥ÊÄß\ncorr = returns.rolling(125, min_periods=100).corr(spx_rets)  # ËÆ°ÁÆó 125 Â§©ÊªöÂä®Áõ∏ÂÖ≥ÊÄß (Ëá≥Â∞ë 100 ‰∏™Âë®Êúü)\ncorr.plot()  # ÁªòÂà∂Áõ∏ÂÖ≥ÊÄß\n\n\n\n\n\n\n\n\n\n\nÁî®Êà∑ÂÆö‰πâÁöÑÁßªÂä®Á™óÂè£ÂáΩÊï∞\napply ÊñπÊ≥ïÂÖÅËÆ∏ÊÇ®Â∫îÁî®Ëá™ÂÆö‰πâÂáΩÊï∞Ôºö\n\nimport matplotlib.pyplot as plt  # ÂØºÂÖ• matplotlib.pyplot\nimport pandas as pd  # ÂØºÂÖ• pandas\nfrom scipy.stats import percentileofscore  # ÂØºÂÖ• percentileofscore\n\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)  # ËØªÂèñ CSV Êñá‰ª∂ÔºåËß£ÊûêÊó•ÊúüÔºåËÆæÁΩÆÁ¨¨‰∏ÄÂàó‰∏∫Á¥¢Âºï\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]  # ÈÄâÊã© AAPL, MSFT, XOM Âàó\nclose_px = close_px.resample('B').ffill()  # ÊåâÂ∑•‰ΩúÊó•ÈáçÈááÊ†∑ (ÂêëÂâçÂ°´ÂÖÖ)\nreturns = close_px.pct_change()  # ËÆ°ÁÆóÊâÄÊúâËÇ°Á•®ÁöÑÊî∂ÁõäÁéá\n\ndef score_at_2percent(x):\n    \"\"\"ËÆ°ÁÆó 0.02 Âú®Êï∞ÁªÑ x ‰∏≠ÁöÑÁôæÂàÜ‰ΩçÊï∞\"\"\"\n    return percentileofscore(x, 0.02)\n\nresult = returns['AAPL'].rolling(250).apply(score_at_2percent)  # ËÆ°ÁÆó 250 Â§©ÊªöÂä®ÁôæÂàÜ‰ΩçÊï∞\nresult.plot()  # ÁªòÂà∂ÁôæÂàÜ‰ΩçÊï∞"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed11cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\nÊú¨Á´†‰ªãÁªç‰∫ÜÂú® pandas ‰∏≠Â§ÑÁêÜÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆÁöÑÂü∫Êú¨ÊäÄÊúØÔºåÂåÖÊã¨Ôºö\n\nÊó•ÊúüÂíåÊó∂Èó¥Êï∞ÊçÆÁ±ªÂûã„ÄÇ\nÊó∂Èó¥Â∫èÂàóÁ¥¢Âºï„ÄÅÈÄâÊã©ÂíåÂ≠êÈõÜÂåñ„ÄÇ\nÁîüÊàêÊó•ÊúüËåÉÂõ¥ÂíåÈ¢ëÁéá„ÄÇ\nÁßªÂä®Êï∞ÊçÆ„ÄÇ\nÊó∂Âå∫Â§ÑÁêÜ„ÄÇ\nÂë®ÊúüÂíåÂë®ÊúüÁÆóÊúØ„ÄÇ\nÈáçÈááÊ†∑ (ÈôçÈááÊ†∑ÂíåÂçáÈááÊ†∑)„ÄÇ\nÁßªÂä®Á™óÂè£ÂáΩÊï∞„ÄÇ\n\nËøô‰∫õÂ∑•ÂÖ∑ÊòØÂàÜÊûêÂü∫‰∫éÊó∂Èó¥ÁöÑÊï∞ÊçÆÁöÑÂü∫Á°Ä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#Â∞èÁªì",
    "href": "qmd/pandas3ed11cn.html#Â∞èÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞èÁªì",
    "text": "Â∞èÁªì\n\nÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆ: ÊåâÊó∂Èó¥È°∫Â∫èÁ¥¢ÂºïÁöÑÊï∞ÊçÆÁÇπÂ∫èÂàó„ÄÇ\npandas ÂäüËÉΩ: pandas Êèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÂ∑•ÂÖ∑Êù•Êìç‰ΩúÊó∂Èó¥Â∫èÂàóÊï∞ÊçÆ„ÄÇ\nÂÖ≥ÈîÆÊìç‰Ωú: Â≠¶‰π†‰∫ÜÂ§ÑÁêÜÊó•Êúü/Êó∂Èó¥Á±ªÂûã„ÄÅÈáçÈááÊ†∑„ÄÅÁßª‰ΩçÂíåÂ∫îÁî®ÊªöÂä®ÂáΩÊï∞„ÄÇ\nÂ∫îÁî®: Ëøô‰∫õÊäÄÊúØÈÄÇÁî®‰∫éÈáëËûç„ÄÅÁªèÊµé„ÄÅÁîüÊÄÅÁ≠âÈ¢ÜÂüü„ÄÇ\nÊûÑÂª∫Âùó: È´òÁ∫ßÊó∂Èó¥Â∫èÂàóÂª∫Ê®°ÁöÑÂü∫Á°Ä„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed11cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫\n\nÊï∞ÊçÆÈ¢ëÁéáÈÄâÊã©: È¢ëÁéáÈÄâÊã©Â¶Ç‰ΩïÂΩ±ÂìçÊ¥ûÂØüÂäõÔºü\nÁº∫Â§±Êï∞ÊçÆÁ≠ñÁï•: ËÆ®ËÆ∫Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆÁöÑÁ≠ñÁï•„ÄÇ\nÁßªÂä®Á™óÂè£ÂáΩÊï∞ÈÄâÊã©: ‰∏çÂêåÁ±ªÂûãÁßªÂä®Âπ≥ÂùáÁ∫ø‰πãÈó¥ÁöÑÊùÉË°°„ÄÇ\nÊó∂Âå∫ÊÑèËØÜ: ‰∏∫‰ªÄ‰πàÊó∂Âå∫ÊÑèËØÜËá≥ÂÖ≥ÈáçË¶ÅÔºü\nÈáçÈááÊ†∑Â∫îÁî®: ÈáçÈááÊ†∑ÁöÑÂÖ∂‰ªñÂ∫îÁî®„ÄÇ\nÂë®Êúü‰∏éÊó∂Èó¥Êà≥: ‰ΩïÊó∂‰ΩøÁî®Âë®Êúü‰∏éÊó∂Èó¥Êà≥Ôºü"
  },
  {
    "objectID": "qmd/pandas3ed2.html",
    "href": "qmd/pandas3ed2.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This chapter introduces the fundamental concepts of Python, IPython, and Jupyter Notebooks, essential tools for data analysis. We‚Äôll cover:\n\nPython Language Basics: Core syntax and semantics.\nIPython: An enhanced interactive Python shell.\nJupyter Notebooks: Web-based interactive computing environments.\n\n\n\n\nThe evolution of Python‚Äôs data analysis capabilities is like a ‚Äúchicken-and-egg‚Äù scenario. Initially, libraries like pandas, scikit-learn, and statsmodels were less developed.\nToday, these libraries are mature, forming a robust ecosystem for data science, machine learning, and statistical computing. This makes Python an excellent tool for anyone working with data. üéâ\n\n\n\n\nIdeal for Data Wrangling: Python excels at transforming messy, unstructured data into a clean, tabular format. This is crucial for preparing datasets for analysis.\n\n\n\n\n\nRich Ecosystem of Libraries: Libraries like pandas, NumPy, scikit-learn, and Matplotlib provide powerful tools for data manipulation, analysis, and visualization.\nExpressive and Readable Syntax: Readability makes Python easy to learn and use, especially for beginners.\n\n\n\n\n\n\n\n\nThe best way to learn is by doing! We‚Äôll explore these concepts through live IPython or Jupyter sessions. Follow along with the examples to maximize your learning.\nFamiliarity with keyboard-driven, console-like development is also part of the learning process.\n\n\n\n\nPython is an interpreted language. The interpreter executes code line by line.\nLaunch the standard interpreter with the python command.\n\n$ python\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\n[GCC 10.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; print(a)\n5\n\n\n\n\n&gt;&gt;&gt; is the prompt where you type your code.\nExit with exit() or Ctrl-D (Linux/macOS).\n\n\n\n\n\nCreate a .py file (e.g., hello_world.py).\nRun it from the terminal: python hello_world.py. Make sure the file is in your current working directory.\n\n\n# hello_world.py\nprint(\"Hello world\")\n\nHello world\n\n\n\n\n\n$ python hello_world.py\nHello world\n\n\n\n\nIPython is an enhanced Python interpreter. It‚Äôs designed for interactive data analysis.\nJupyter Notebooks are web-based environments built on top of IPython. They provide a rich, interactive experience.\n\n\n\n\n\nLaunch IPython with the ipython command.\n\n$ ipython\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.31.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n\nNotice the In [1]: prompt, which is different from the standard &gt;&gt;&gt;.\n\n\n\n\n\nExecute code by typing it and pressing Enter.\nIPython displays a string representation of objects when you type their name.\n\n\nIn [1]: a = 5\n\nIn [2]: a\nOut[2]: 5\n\nIn [3]: import numpy as np\n\nIn [4]: data = [np.random.standard_normal() for i in range(7)]\n\n\n\n\n\nIn [5]: data\nOut[5]:\n[-0.20470765948471295,\n 0.47894333805754824,\n -0.5194387150567381,\n -0.55573030434749,\n 1.9657805725027142,\n 1.3934058329729904,\n 0.09290787674371767]\n\n\nIPython‚Äôs output is often more readable than standard Python‚Äôs print().\n\n\n\n\n\nJupyter Notebook is a powerful interactive document for code, text (with Markdown), visualizations, and more.\nLaunch with: jupyter notebook\n\n$ jupyter notebook\n[I 15:20:52.739 NotebookApp] Serving notebooks from local directory:\n/home/wesm/code/pydata-book\n...\n[I 15:20:52.740 NotebookApp] Use Control-C to stop this server and shut down\nall kernels...\n\n\n\n\nJupyter usually opens automatically in your web browser. If not, navigate to the address provided (e.g., http://localhost:8888).\n\n\n\n\n\n\nLanding Page: Shows files in the directory where you started Jupyter.\n\n\n\n\n\nNew Notebook: Click ‚ÄúNew‚Äù -&gt; ‚ÄúPython 3‚Äù to create a new notebook.\n\n\n\n\n\n\n\n\n\nCode Cells: Where you write and execute Python code. Press Shift-Enter to run a cell.\nMarkdown Cells: For text, explanations, and documentation (using Markdown syntax).\nSave the notebook. It will create a file with the extension .ipynb, a self-contained format containing all content.\n\n\n\n\n\n\n\n\nThis image shows a Jupyter notebook with code for data analysis and text:\n\nTitle: ‚ÄúIntroductory examples‚Äù.\nSection Heading: ‚Äú1.usa.gov data from bit.ly‚Äù.\nCode Cells:\n\n%pwd: Displays the current working directory.\nReading and processing data from a file.\nUsing the json library.\nAccessing specific data elements.\n\nText Cell: ‚ÄúCounting time zones in pure Python‚Äù.\n\n\n\n\n\nTab Completion: A huge time-saver! Press Tab while typing to:\n\nComplete variable names.\nShow object methods and attributes.\nComplete file paths.\nSee function keyword arguments.\n\n\n\nIn [1]: an_apple = 27\n\nIn [2]: an_example = 42\n\nIn [3]: an&lt;Tab&gt;  # Press Tab here\nan_apple  an_example  any\n\n\n\n\n\nIn [3]: b = [1, 2, 3]\n\nIn [4]: b.&lt;Tab&gt; # Press Tab after the dot\nappend()  count()   insert()  reverse()\nclear()   extend()  pop()     sort()\ncopy()    index()   remove()\n\n\n\n\n\nIn [1]: import datetime\n\nIn [2]: datetime.&lt;Tab&gt; # Press Tab after the dot\ndate       MAXYEAR    timedelta\ndatetime   MINYEAR    timezone\ndatetime_CAPI time      tzinfo\n\n\nIPython hides methods and attributes starting with underscores by default.\n\n\n\n\n\n\nTab completion also works for function keyword arguments, including the = sign!\n\n\n\n\n\nIntrospection: Get information about an object using ?.\n\n\nIn [1]: b = [1, 2, 3]\n\nIn [2]: b?\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:\nBuilt-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\n\n\n\n\ndef add_numbers(a, b):\n    \"\"\"\n    Add two numbers together\n\n    Returns\n    -\n    the_sum : type of arguments\n    \"\"\"\n    return a + b\n\nIn [6]: add_numbers?\nSignature: add_numbers(a, b)\nDocstring:\nAdd two numbers together\n\nReturns\n-\nthe_sum : type of arguments\nFile:      &lt;ipython-input-9-6a548a216e27&gt;\nType:      function\n\n\nThe ? operator displays the docstring, providing information about function.\nIntrospection also shows function or instance method and docstrings.\n\n\n\n\n\nUse * with ? to search the IPython namespace.\n\n\nIn [9]: import numpy as np\n\nIn [10]: np.*load*?\nnp.__loader__\nnp.load\nnp.loads\nnp.loadtxt\n\n\nThis shows all names in the NumPy namespace containing ‚Äúload‚Äù.\n\n\n\n\nNow, let‚Äôs dive into the core syntax and semantics of the Python language itself.\n\n\n\nPython emphasizes readability, simplicity, and explicitness. It‚Äôs often described as ‚Äúexecutable pseudocode.‚Äù\n\n\n\n\n\nPython uses indentation (spaces or tabs) to structure code, not curly braces {}.\n\n\nfor x in array:\n    if x &lt; pivot:\n        less.append(x)\n    else:\n        greater.append(x)\n\n\nA colon : indicates the start of an indented block.\nConsistent indentation is crucial! Use four spaces.\n\n\n\n\n\n\n\nNote\n\n\n\nIt is highly recommended to use four spaces as the default indent and to replace tabs with four spaces. Many text editors have settings that will automatically replace tab stops with spaces.\n\n\n\n\n\n\n\nPython statements generally do not need semicolons.\nSemicolons can separate multiple statements on a single line, but this is generally discouraged for readability.\n\n\na = 5; b = 6; c = 7  # Generally avoid this style\n\n\n\n\n\nIn Python, everything is an object: numbers, strings, lists, functions, classes, modules, etc.\nEach object has a type (e.g., int, str, list, function) and internal data.\nThis makes Python very flexible.\n\n\n\n\n\nUse the hash mark # to create comments. Anything after # on a line is ignored.\n\n\nresults = []\nfor line in file_handle:\n    # keep the empty lines for now\n    # if len(line) == 0:\n    #     continue\n    results.append(line.replace(\"foo\", \"bar\"))\n\nprint(\"Reached this line\")  # Simple status report\n\n\n\n\n\nCall functions with parentheses () and pass arguments (if any).\nObjects often have methods (functions attached to the object) that you call using the dot . syntax.\n\n\nresult = f(x, y, z)\ng()\n\nobj.some_method(x, y, z)\n\nresult = f(a, b, c, d=5, e=\"foo\")  # Positional and keyword arguments\n\n\n\n\n\nAssigning a variable creates a reference to the object on the right-hand side of the =.\n\n\na = [1, 2, 3]\nb = a  # b now refers to the *same* list as a\na.append(4)\nprint(b)  # Output: [1, 2, 3, 4]\n\n[1, 2, 3, 4]\n\n\n\nImportant: In Python, a and b point to the same object in memory, not copies.\n\n\n\n\n\n\nThis diagram illustrates that a and b are simply names that refer to the same list object in memory.\n\n\n\n\n\n\n\nNote\n\n\n\nAssignment is also known as binding because we are binding a name to an object. Assigned variable names are sometimes referred to as bound variables.\n\n\n\n\n\n\nVariables in Python don‚Äôt have an inherent type. The type is associated with the object the variable refers to.\n\n\na = 5\nprint(type(a))  # Output: &lt;class 'int'&gt;\n\na = \"foo\"\nprint(type(a))  # Output: &lt;class 'str'&gt;\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n\n\n\n\n\n\nPython is strongly typed: Objects have specific types, and implicit conversions are limited.\n\n\n# \"5\" + 5  # This would cause a TypeError\n\n\n\n\n\na = 4.5\nb = 2\nprint(f\"a is {type(a)}, b is {type(b)}\")  # String formatting\nprint(a / b)\n\na is &lt;class 'float'&gt;, b is &lt;class 'int'&gt;\n2.25\n\n\n\nEven though b is an integer, it‚Äôs implicitly converted to a float for the division.\n\n\n\n\n\nUse isinstance() to check if an object is an instance of a particular type (or one of several types).\n\n\na = 5\nprint(isinstance(a, int))  # Output: True\n\nb = 4.5\nprint(isinstance(a, (int, float)))  # Output: True\nprint(isinstance(b, (int, float)))  # Output: True\n\nTrue\nTrue\nTrue\n\n\n\n\n\n\nObjects have attributes (data stored ‚Äúinside‚Äù the object) and methods (functions associated with the object).\nAccess them using obj.attribute_name.\nWe use getattr function can get object‚Äôs attributes and methods by name.\n\n\na = \"foo\"\n# a.&lt;Press Tab&gt;  # See available attributes and methods\n\nprint(getattr(a, \"split\"))\n\n&lt;built-in method split of str object at 0x7f39c7de9530&gt;\n\n\n\n\n\n\n‚ÄúIf it walks like a duck and quacks like a duck, then it‚Äôs a duck.‚Äù\nCheck for specific behavior (e.g., iterability) rather than strict type.\n\n\ndef isiterable(obj):\n    try:\n        iter(obj)\n        return True\n    except TypeError:  # not iterable\n        return False\n\nprint(isiterable(\"a string\"))  # Output: True\nprint(isiterable([1, 2, 3]))  # Output: True\nprint(isiterable(5))  # Output: False\n\nTrue\nTrue\nFalse\n\n\n\n\n\n\nA module is a .py file containing Python code.\nUse import to access variables and functions from other modules.\n\n\n# some_module.py\nPI = 3.14159\n\ndef f(x):\n    return x + 2\n\ndef g(a, b):\n    return a + b\n\n\n\n\n\n# In another file:\nimport some_module\nresult = some_module.f(5)\npi = some_module.PI\n\n# Or:\nfrom some_module import g, PI\nresult = g(5, PI)\n\n# Or with different names:\nimport some_module as sm\nfrom some_module import PI as pi, g as gf\n\n\n\n\n\nPython uses standard mathematical syntax for binary operations and comparisons.\n\n\nprint(5 - 7)\nprint(12 + 21.5)\nprint(5 &lt;= 2)\n\n-2\n33.5\nFalse\n\n\n\n\n\nOperation | Description |\n‚Äì | |\na + b | Add a and b |\na - b | Subtract b from a |\na * b | Multiply a by b |\na / b | Divide a by b |\na // b | Floor-divide a by b, dropping any fractional remainder |\na ** b | Raise a to the b power |\n\n\n\nOperation | Description |\n‚Äì | |\na & b | True if both a and b are True; for integers, take the bitwise AND |\na \\| b | True if either a or b is True; for integers, take the bitwise OR |\na ^ b | For Booleans, True if a or b is True, but not both; for integers, take the bitwise EXCLUSIVE-OR |\na == b | True if a equals b |\na != b | True if a is not equal to b |\n\n\n\nOperation | Description |\n‚Äì | |\na &lt; b, a &lt;= b | True if a is less than (less than or equal to) b |\na &gt; b, a &gt;= b | True if a is greater than (greater than or equal to) b |\na is b | True if a and b reference the same Python object |\na is not b | True if a and b reference different Python objects |\n\n\n\n\nis checks if two variables refer to the same object.\nis not check if two objects are not the same\n== checks for equality of value.\n\n\na = [1, 2, 3]\nb = a\nc = list(a)  # Creates a *new* list (a copy)\n\nprint(a is b)      # Output: True\nprint(a is not c)  # Output: True\nprint(a == c)      # Output: True\n\nTrue\nTrue\nTrue\n\n\n\n\n\n\nMutable objects (lists, dicts, NumPy arrays, etc.) can be modified in place.\nImmutable objects (strings, tuples) cannot be changed after creation.\n\n\na_list = [\"foo\", 2, [4, 5]]\na_list[2] = (3, 4)\nprint(a_list)  # Output: ['foo', 2, (3, 4)]\n\n# a_tuple = (3, 5, (4, 5))\n# a_tuple[1] = \"four\"  # This would cause a TypeError\n\n['foo', 2, (3, 4)]\n\n\n\n\n\n\nPython has built-in types for handling numerical data, strings, Booleans, and dates/times. These are called scalar types.\n\nType | Description |\n:‚Äì | : |\nNone | The Python ‚Äúnull‚Äù value |\nstr | String type; holds Unicode strings |\nbytes| Raw binary data |\nfloat| Double-precision floating-point number |\n\n\n\nType | Description |\n:‚Äì | : |\nbool | A Boolean True or False value |\nint | Arbitrary precision integer |\n\n\n\n\nint: Can store arbitrarily large integers.\nfloat: Represents double-precision floating-point numbers (like double in C/C++).\n\n\nival = 17239871\nprint(ival ** 6)\n\nfval = 7.243\nfval2 = 6.78e-5  # Scientific notation\n\n26254519291092456596965462913230729701102721\n\n\n\n\n\n\nInteger division resulting in a non-whole number always yields a float. Use // for floor division.\n\n\n\n\n\nUse single quotes '...' or double quotes \"...\" to create string literals.\nTriple quotes '''...''' or \"\"\"...\"\"\" for multiline strings.\n\n\na = 'one way of writing a string'\nb = \"another way\"\nc = \"\"\"\nThis is a longer string that\nspans multiple lines\n\"\"\"\n\n\nPython strings are immutable.\n\n\n\n\n\nMany built-in string methods are available (e.g., count(), replace(), split()).\n\n\na = \"this is a string\"\n# a[10] = 'f'  # TypeError: 'str' object does not support item assignment\n\nb = a.replace(\"string\", \"longer string\")\nprint(b)\nprint(a)\n\nthis is a longer string\nthis is a string\n\n\n\nConvert other objects to strings using str().\n\n\n\n\n\nStrings are sequences of Unicode characters and can be treated like lists/tuples.\n\n\ns = \"python\"\nprint(list(s))\nprint(s[:3])\n\n['p', 'y', 't', 'h', 'o', 'n']\npyt\n\n\n\n\n\n\nBackslash \\ is an escape character. Use raw strings (prefix with r) to avoid escaping.\n\n\ns = \"12\\\\\\\\34\"  # String with two backslashes\nprint(s)\n\nraw_string = r\"this\\has\\no\\special\\characters\"\nprint(raw_string)\n\n12\\\\34\nthis\\has\\no\\special\\characters\n\n\n\n\n\n\nAdding strings together concatenates them.\n\n\na = \"this is the first half \"\nb = \"and this is the second half\"\nprint(a + b)\n\nthis is the first half and this is the second half\n\n\n\nUse string formatting (the format() method or f-strings) for more complex string construction.\n\n\n\n\n\namount = 10\nrate = 88.46\ncurrency = \"Pesos\"\nresult = f\"{amount} {currency} is worth US${amount / rate:.2f}\"\nprint(result)\n\n10 Pesos is worth US$0.11\n\n\n\nf-strings (formatted string literals) are a concise way to embed expressions inside strings.\n\n\n\n\n\nIn Python 3, Unicode is the first-class string type.\nencode() converts a Unicode string to bytes (e.g., UTF-8).\ndecode() converts bytes back to a Unicode string.\n\n\nval = \"espa√±ol\"\nval_utf8 = val.encode(\"utf-8\")\nprint(val_utf8)\nprint(type(val_utf8))\n\nprint(val_utf8.decode(\"utf-8\"))\n\nb'espa\\xc3\\xb1ol'\n&lt;class 'bytes'&gt;\nespa√±ol\n\n\n\n\n\n\nTrue and False are the Boolean values.\nComparisons and conditional expressions evaluate to True or False.\nCombine with and, or, and not.\n\n\nprint(True and True)\nprint(False or True)\n\nprint(int(False))  # Output: 0\nprint(int(True))   # Output: 1\n\nTrue\nTrue\n0\n1\n\n\n\n\n\n\nstr(), bool(), int(), and float() can be used to cast values to different types.\n\n\ns = \"3.14159\"\nfval = float(s)\nprint(type(fval))\nprint(int(fval))\nprint(bool(fval))\nprint(bool(0))  # 0 casts to False, other numbers to True\n\n&lt;class 'float'&gt;\n3\nTrue\nFalse\n\n\n\n\n\n\nNone is the Python null value type. It represents the absence of a value.\nIt is also the default return value of a function if there isn‚Äôt return statement in the function.\n\n\na = None\nprint(a is None)  # Output: True\n\nb = 5\nprint(b is not None)  # Output: True\n\nTrue\nTrue\n\n\n\nNone is often used as a default value for function arguments.\n\n\n\n\n\nThe datetime module provides datetime, date, and time types.\n\n\nfrom datetime import datetime, date, time\n\ndt = datetime(2011, 10, 29, 20, 30, 21)\nprint(dt.day)\nprint(dt.minute)\nprint(dt.date())\nprint(dt.time())\n\n29\n30\n2011-10-29\n20:30:21\n\n\n\n\n\n\nstrftime() formats a datetime object as a string.\nstrptime() parses a string into a datetime object.\n\n\nprint(dt.strftime(\"%Y-%m-%d %H:%M\"))\n\ndt2 = datetime.strptime(\"20091031\", \"%Y%m%d\")\nprint(dt2)\n\n2011-10-29 20:30\n2009-10-31 00:00:00\n\n\n\nRefer to Python‚Äôs documentation for a complete list of format codes.\nSince datetime.datetime is an immutable type, methods like strftime and strptime will always produce new objects.\n\n\n\n\n\nSubtracting two datetime objects produces a timedelta object.\nAdding a timedelta to a datetime produces a new, shifted datetime.\n\n\ndt2 = datetime(2011, 11, 15, 22, 30)\ndelta = dt2 - dt\nprint(delta)\nprint(type(delta))\nprint(dt + delta)\n\n17 days, 1:59:39\n&lt;class 'datetime.timedelta'&gt;\n2011-11-15 22:30:00\n\n\n\n\n\n\nif statements execute a block of code if a condition is true.\nelif (else if) provides additional conditions.\nelse is a catchall block.\n\n\nx = -5\nif x &lt; 0:\n    print(\"It's negative\")\nelif x == 0:\n    print(\"Equal to zero\")\nelif 0 &lt; x &lt; 5:\n    print(\"Positive but smaller than 5\")\nelse:\n    print(\"Positive and larger than or equal to 5\")\n\nIt's negative\n\n\n\nConditions with and and or are evaluated left to right and short-circuit.\n\n\n\n\n\nIterate over a collection (list, tuple, etc.) or an iterator.\n\n\nfor value in collection:\n    # do something with value\n\n\ncontinue skips the rest of the current iteration.\nbreak exits the loop entirely.\n\n\n\n\n\nsequence = [1, 2, None, 4, None, 5]\ntotal = 0\nfor value in sequence:\n    if value is None:\n        continue  # Skip None values\n    total += value\n\n\n\n\n\nsequence = [1, 2, 0, 4, 6, 5, 2, 1]\ntotal_until_5 = 0\nfor value in sequence:\n    if value == 5:\n        break  # Exit loop when we reach 5\n    total_until_5 += value\n\n\n\n\n\nfor i in range(4):\n    for j in range(4):\n        if j &gt; i:\n            break  # Only breaks out of the inner loop\n        print((i, j))\n\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n\n\n\n\n\n\nExecute a block of code repeatedly as long as a condition is true.\n\n\nx = 256\ntotal = 0\nwhile x &gt; 0:\n    if total &gt; 500:\n        break  # Exit loop if total exceeds 500\n    total += x\n    x = x // 2\n\n\n\n\n\npass is a ‚Äúno-op‚Äù statement. It does nothing. It‚Äôs used where a statement is syntactically required, but you don‚Äôt want to execute any code.\n\n\nif x &lt; 0:\n    print(\"negative!\")\nelif x == 0:\n    # TODO: put something smart here\n    pass\nelse:\n    print(\"positive!\")\n\npositive!\n\n\n\n\n\n\nrange() generates a sequence of evenly spaced integers.\nrange(stop): Generates integers from 0 up to (but not including) stop.\nrange(start, stop): Generates integers from start up to (but not including) stop.\nrange(start, stop, step): Generates integers with a specified step.\n\n\nprint(list(range(10)))\nprint(list(range(0, 20, 2)))\nprint(list(range(5, 0, -1)))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1]\n\n\n\n\n\n\nseq = [1, 2, 3, 4]\nfor i in range(len(seq)):\n    print(f\"element {i}: {seq[i]}\")\n\nelement 0: 1\nelement 1: 2\nelement 2: 3\nelement 3: 4\n\n\n\nA common use of range is for iterating through sequences by index.\n\n\n\n\n\nWe‚Äôve covered the core building blocks of Python: data types, operators, control flow, and basic usage of IPython and Jupyter Notebooks.\nThese concepts form the foundation for data analysis with Python.\nRemember to practice and experiment! üß™\n\n\n\n\n\nHow does Python‚Äôs ‚Äúeverything is an object‚Äù philosophy compare to other languages?\nWhat are the advantages of using Jupyter Notebooks for data analysis compared to writing scripts?\nCan you think of situations where duck typing would be particularly useful?\nHow might you use the datetime module in a real-world data analysis project?\nWhat are the differences between mutable and immutable objects? What are their pros and cons respectively?"
  },
  {
    "objectID": "qmd/pandas3ed2.html#introduction",
    "href": "qmd/pandas3ed2.html#introduction",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This chapter introduces the fundamental concepts of Python, IPython, and Jupyter Notebooks, essential tools for data analysis. We‚Äôll cover:\n\nPython Language Basics: Core syntax and semantics.\nIPython: An enhanced interactive Python shell.\nJupyter Notebooks: Web-based interactive computing environments."
  },
  {
    "objectID": "qmd/pandas3ed2.html#introduction-continued",
    "href": "qmd/pandas3ed2.html#introduction-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "The evolution of Python‚Äôs data analysis capabilities is like a ‚Äúchicken-and-egg‚Äù scenario. Initially, libraries like pandas, scikit-learn, and statsmodels were less developed.\nToday, these libraries are mature, forming a robust ecosystem for data science, machine learning, and statistical computing. This makes Python an excellent tool for anyone working with data. üéâ"
  },
  {
    "objectID": "qmd/pandas3ed2.html#why-python-for-data-analysis",
    "href": "qmd/pandas3ed2.html#why-python-for-data-analysis",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Ideal for Data Wrangling: Python excels at transforming messy, unstructured data into a clean, tabular format. This is crucial for preparing datasets for analysis."
  },
  {
    "objectID": "qmd/pandas3ed2.html#why-python-for-data-analysis-continued",
    "href": "qmd/pandas3ed2.html#why-python-for-data-analysis-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Rich Ecosystem of Libraries: Libraries like pandas, NumPy, scikit-learn, and Matplotlib provide powerful tools for data manipulation, analysis, and visualization.\nExpressive and Readable Syntax: Readability makes Python easy to learn and use, especially for beginners."
  },
  {
    "objectID": "qmd/pandas3ed2.html#getting-started-live-coding",
    "href": "qmd/pandas3ed2.html#getting-started-live-coding",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "The best way to learn is by doing! We‚Äôll explore these concepts through live IPython or Jupyter sessions. Follow along with the examples to maximize your learning.\nFamiliarity with keyboard-driven, console-like development is also part of the learning process."
  },
  {
    "objectID": "qmd/pandas3ed2.html#the-python-interpreter",
    "href": "qmd/pandas3ed2.html#the-python-interpreter",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Python is an interpreted language. The interpreter executes code line by line.\nLaunch the standard interpreter with the python command.\n\n$ python\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\n[GCC 10.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; print(a)\n5"
  },
  {
    "objectID": "qmd/pandas3ed2.html#the-python-interpreter-continued",
    "href": "qmd/pandas3ed2.html#the-python-interpreter-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "&gt;&gt;&gt; is the prompt where you type your code.\nExit with exit() or Ctrl-D (Linux/macOS)."
  },
  {
    "objectID": "qmd/pandas3ed2.html#running-python-programs",
    "href": "qmd/pandas3ed2.html#running-python-programs",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Create a .py file (e.g., hello_world.py).\nRun it from the terminal: python hello_world.py. Make sure the file is in your current working directory.\n\n\n# hello_world.py\nprint(\"Hello world\")\n\nHello world"
  },
  {
    "objectID": "qmd/pandas3ed2.html#running-python-programs-continued",
    "href": "qmd/pandas3ed2.html#running-python-programs-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "$ python hello_world.py\nHello world"
  },
  {
    "objectID": "qmd/pandas3ed2.html#ipython-basics",
    "href": "qmd/pandas3ed2.html#ipython-basics",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "IPython is an enhanced Python interpreter. It‚Äôs designed for interactive data analysis.\nJupyter Notebooks are web-based environments built on top of IPython. They provide a rich, interactive experience."
  },
  {
    "objectID": "qmd/pandas3ed2.html#ipython-basics-continued",
    "href": "qmd/pandas3ed2.html#ipython-basics-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Launch IPython with the ipython command.\n\n$ ipython\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.31.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n\nNotice the In [1]: prompt, which is different from the standard &gt;&gt;&gt;."
  },
  {
    "objectID": "qmd/pandas3ed2.html#ipython-running-code",
    "href": "qmd/pandas3ed2.html#ipython-running-code",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Execute code by typing it and pressing Enter.\nIPython displays a string representation of objects when you type their name.\n\n\nIn [1]: a = 5\n\nIn [2]: a\nOut[2]: 5\n\nIn [3]: import numpy as np\n\nIn [4]: data = [np.random.standard_normal() for i in range(7)]"
  },
  {
    "objectID": "qmd/pandas3ed2.html#ipython-running-code-continued",
    "href": "qmd/pandas3ed2.html#ipython-running-code-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "In [5]: data\nOut[5]:\n[-0.20470765948471295,\n 0.47894333805754824,\n -0.5194387150567381,\n -0.55573030434749,\n 1.9657805725027142,\n 1.3934058329729904,\n 0.09290787674371767]\n\n\nIPython‚Äôs output is often more readable than standard Python‚Äôs print()."
  },
  {
    "objectID": "qmd/pandas3ed2.html#running-the-jupyter-notebook",
    "href": "qmd/pandas3ed2.html#running-the-jupyter-notebook",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Jupyter Notebook is a powerful interactive document for code, text (with Markdown), visualizations, and more.\nLaunch with: jupyter notebook\n\n$ jupyter notebook\n[I 15:20:52.739 NotebookApp] Serving notebooks from local directory:\n/home/wesm/code/pydata-book\n...\n[I 15:20:52.740 NotebookApp] Use Control-C to stop this server and shut down\nall kernels..."
  },
  {
    "objectID": "qmd/pandas3ed2.html#running-the-jupyter-notebook-continued",
    "href": "qmd/pandas3ed2.html#running-the-jupyter-notebook-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Jupyter usually opens automatically in your web browser. If not, navigate to the address provided (e.g., http://localhost:8888)."
  },
  {
    "objectID": "qmd/pandas3ed2.html#jupyter-notebook-interface",
    "href": "qmd/pandas3ed2.html#jupyter-notebook-interface",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Landing Page: Shows files in the directory where you started Jupyter."
  },
  {
    "objectID": "qmd/pandas3ed2.html#jupyter-notebook-interface-continued",
    "href": "qmd/pandas3ed2.html#jupyter-notebook-interface-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "New Notebook: Click ‚ÄúNew‚Äù -&gt; ‚ÄúPython 3‚Äù to create a new notebook."
  },
  {
    "objectID": "qmd/pandas3ed2.html#jupyter-notebook-cells-continued",
    "href": "qmd/pandas3ed2.html#jupyter-notebook-cells-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Code Cells: Where you write and execute Python code. Press Shift-Enter to run a cell.\nMarkdown Cells: For text, explanations, and documentation (using Markdown syntax).\nSave the notebook. It will create a file with the extension .ipynb, a self-contained format containing all content."
  },
  {
    "objectID": "qmd/pandas3ed2.html#jupyter-notebook-example-view-description",
    "href": "qmd/pandas3ed2.html#jupyter-notebook-example-view-description",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This image shows a Jupyter notebook with code for data analysis and text:\n\nTitle: ‚ÄúIntroductory examples‚Äù.\nSection Heading: ‚Äú1.usa.gov data from bit.ly‚Äù.\nCode Cells:\n\n%pwd: Displays the current working directory.\nReading and processing data from a file.\nUsing the json library.\nAccessing specific data elements.\n\nText Cell: ‚ÄúCounting time zones in pure Python‚Äù."
  },
  {
    "objectID": "qmd/pandas3ed2.html#ipython-and-jupyter-tab-completion",
    "href": "qmd/pandas3ed2.html#ipython-and-jupyter-tab-completion",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Tab Completion: A huge time-saver! Press Tab while typing to:\n\nComplete variable names.\nShow object methods and attributes.\nComplete file paths.\nSee function keyword arguments.\n\n\n\nIn [1]: an_apple = 27\n\nIn [2]: an_example = 42\n\nIn [3]: an&lt;Tab&gt;  # Press Tab here\nan_apple  an_example  any"
  },
  {
    "objectID": "qmd/pandas3ed2.html#tab-completion-methods-and-modules",
    "href": "qmd/pandas3ed2.html#tab-completion-methods-and-modules",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "In [3]: b = [1, 2, 3]\n\nIn [4]: b.&lt;Tab&gt; # Press Tab after the dot\nappend()  count()   insert()  reverse()\nclear()   extend()  pop()     sort()\ncopy()    index()   remove()"
  },
  {
    "objectID": "qmd/pandas3ed2.html#tab-completion-methods-and-modules-continued",
    "href": "qmd/pandas3ed2.html#tab-completion-methods-and-modules-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "In [1]: import datetime\n\nIn [2]: datetime.&lt;Tab&gt; # Press Tab after the dot\ndate       MAXYEAR    timedelta\ndatetime   MINYEAR    timezone\ndatetime_CAPI time      tzinfo\n\n\nIPython hides methods and attributes starting with underscores by default."
  },
  {
    "objectID": "qmd/pandas3ed2.html#tab-completion-function-arguments",
    "href": "qmd/pandas3ed2.html#tab-completion-function-arguments",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Tab completion also works for function keyword arguments, including the = sign!"
  },
  {
    "objectID": "qmd/pandas3ed2.html#ipython-and-jupyter-introspection",
    "href": "qmd/pandas3ed2.html#ipython-and-jupyter-introspection",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Introspection: Get information about an object using ?.\n\n\nIn [1]: b = [1, 2, 3]\n\nIn [2]: b?\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:\nBuilt-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
  },
  {
    "objectID": "qmd/pandas3ed2.html#introspection-example-with-a-function",
    "href": "qmd/pandas3ed2.html#introspection-example-with-a-function",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "def add_numbers(a, b):\n    \"\"\"\n    Add two numbers together\n\n    Returns\n    -\n    the_sum : type of arguments\n    \"\"\"\n    return a + b\n\nIn [6]: add_numbers?\nSignature: add_numbers(a, b)\nDocstring:\nAdd two numbers together\n\nReturns\n-\nthe_sum : type of arguments\nFile:      &lt;ipython-input-9-6a548a216e27&gt;\nType:      function\n\n\nThe ? operator displays the docstring, providing information about function.\nIntrospection also shows function or instance method and docstrings."
  },
  {
    "objectID": "qmd/pandas3ed2.html#introspection-wildcard-searching",
    "href": "qmd/pandas3ed2.html#introspection-wildcard-searching",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Use * with ? to search the IPython namespace.\n\n\nIn [9]: import numpy as np\n\nIn [10]: np.*load*?\nnp.__loader__\nnp.load\nnp.loads\nnp.loadtxt\n\n\nThis shows all names in the NumPy namespace containing ‚Äúload‚Äù."
  },
  {
    "objectID": "qmd/pandas3ed2.html#python-language-basics",
    "href": "qmd/pandas3ed2.html#python-language-basics",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Now, let‚Äôs dive into the core syntax and semantics of the Python language itself.\n\n\n\nPython emphasizes readability, simplicity, and explicitness. It‚Äôs often described as ‚Äúexecutable pseudocode.‚Äù\n\n\n\n\n\nPython uses indentation (spaces or tabs) to structure code, not curly braces {}.\n\n\nfor x in array:\n    if x &lt; pivot:\n        less.append(x)\n    else:\n        greater.append(x)\n\n\nA colon : indicates the start of an indented block.\nConsistent indentation is crucial! Use four spaces.\n\n\n\n\n\n\n\nNote\n\n\n\nIt is highly recommended to use four spaces as the default indent and to replace tabs with four spaces. Many text editors have settings that will automatically replace tab stops with spaces."
  },
  {
    "objectID": "qmd/pandas3ed2.html#semicolons",
    "href": "qmd/pandas3ed2.html#semicolons",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Python statements generally do not need semicolons.\nSemicolons can separate multiple statements on a single line, but this is generally discouraged for readability.\n\n\na = 5; b = 6; c = 7  # Generally avoid this style"
  },
  {
    "objectID": "qmd/pandas3ed2.html#everything-is-an-object",
    "href": "qmd/pandas3ed2.html#everything-is-an-object",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "In Python, everything is an object: numbers, strings, lists, functions, classes, modules, etc.\nEach object has a type (e.g., int, str, list, function) and internal data.\nThis makes Python very flexible."
  },
  {
    "objectID": "qmd/pandas3ed2.html#comments",
    "href": "qmd/pandas3ed2.html#comments",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Use the hash mark # to create comments. Anything after # on a line is ignored.\n\n\nresults = []\nfor line in file_handle:\n    # keep the empty lines for now\n    # if len(line) == 0:\n    #     continue\n    results.append(line.replace(\"foo\", \"bar\"))\n\nprint(\"Reached this line\")  # Simple status report"
  },
  {
    "objectID": "qmd/pandas3ed2.html#function-and-object-method-calls",
    "href": "qmd/pandas3ed2.html#function-and-object-method-calls",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Call functions with parentheses () and pass arguments (if any).\nObjects often have methods (functions attached to the object) that you call using the dot . syntax.\n\n\nresult = f(x, y, z)\ng()\n\nobj.some_method(x, y, z)\n\nresult = f(a, b, c, d=5, e=\"foo\")  # Positional and keyword arguments"
  },
  {
    "objectID": "qmd/pandas3ed2.html#variables-and-argument-passing",
    "href": "qmd/pandas3ed2.html#variables-and-argument-passing",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Assigning a variable creates a reference to the object on the right-hand side of the =.\n\n\na = [1, 2, 3]\nb = a  # b now refers to the *same* list as a\na.append(4)\nprint(b)  # Output: [1, 2, 3, 4]\n\n[1, 2, 3, 4]\n\n\n\nImportant: In Python, a and b point to the same object in memory, not copies."
  },
  {
    "objectID": "qmd/pandas3ed2.html#variable-references-diagram",
    "href": "qmd/pandas3ed2.html#variable-references-diagram",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This diagram illustrates that a and b are simply names that refer to the same list object in memory.\n\n\n\n\n\n\n\nNote\n\n\n\nAssignment is also known as binding because we are binding a name to an object. Assigned variable names are sometimes referred to as bound variables."
  },
  {
    "objectID": "qmd/pandas3ed2.html#dynamic-references-strong-types",
    "href": "qmd/pandas3ed2.html#dynamic-references-strong-types",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Variables in Python don‚Äôt have an inherent type. The type is associated with the object the variable refers to.\n\n\na = 5\nprint(type(a))  # Output: &lt;class 'int'&gt;\n\na = \"foo\"\nprint(type(a))  # Output: &lt;class 'str'&gt;\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;"
  },
  {
    "objectID": "qmd/pandas3ed2.html#dynamic-references-strong-types-continued",
    "href": "qmd/pandas3ed2.html#dynamic-references-strong-types-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Python is strongly typed: Objects have specific types, and implicit conversions are limited.\n\n\n# \"5\" + 5  # This would cause a TypeError"
  },
  {
    "objectID": "qmd/pandas3ed2.html#strong-typing-example",
    "href": "qmd/pandas3ed2.html#strong-typing-example",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "a = 4.5\nb = 2\nprint(f\"a is {type(a)}, b is {type(b)}\")  # String formatting\nprint(a / b)\n\na is &lt;class 'float'&gt;, b is &lt;class 'int'&gt;\n2.25\n\n\n\nEven though b is an integer, it‚Äôs implicitly converted to a float for the division."
  },
  {
    "objectID": "qmd/pandas3ed2.html#checking-types-with-isinstance",
    "href": "qmd/pandas3ed2.html#checking-types-with-isinstance",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Use isinstance() to check if an object is an instance of a particular type (or one of several types).\n\n\na = 5\nprint(isinstance(a, int))  # Output: True\n\nb = 4.5\nprint(isinstance(a, (int, float)))  # Output: True\nprint(isinstance(b, (int, float)))  # Output: True\n\nTrue\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed2.html#attributes-and-methods",
    "href": "qmd/pandas3ed2.html#attributes-and-methods",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Objects have attributes (data stored ‚Äúinside‚Äù the object) and methods (functions associated with the object).\nAccess them using obj.attribute_name.\nWe use getattr function can get object‚Äôs attributes and methods by name.\n\n\na = \"foo\"\n# a.&lt;Press Tab&gt;  # See available attributes and methods\n\nprint(getattr(a, \"split\"))\n\n&lt;built-in method split of str object at 0x7f39c7de9530&gt;"
  },
  {
    "objectID": "qmd/pandas3ed2.html#duck-typing",
    "href": "qmd/pandas3ed2.html#duck-typing",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "‚ÄúIf it walks like a duck and quacks like a duck, then it‚Äôs a duck.‚Äù\nCheck for specific behavior (e.g., iterability) rather than strict type.\n\n\ndef isiterable(obj):\n    try:\n        iter(obj)\n        return True\n    except TypeError:  # not iterable\n        return False\n\nprint(isiterable(\"a string\"))  # Output: True\nprint(isiterable([1, 2, 3]))  # Output: True\nprint(isiterable(5))  # Output: False\n\nTrue\nTrue\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed2.html#imports",
    "href": "qmd/pandas3ed2.html#imports",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "A module is a .py file containing Python code.\nUse import to access variables and functions from other modules.\n\n\n# some_module.py\nPI = 3.14159\n\ndef f(x):\n    return x + 2\n\ndef g(a, b):\n    return a + b"
  },
  {
    "objectID": "qmd/pandas3ed2.html#imports-continued",
    "href": "qmd/pandas3ed2.html#imports-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "# In another file:\nimport some_module\nresult = some_module.f(5)\npi = some_module.PI\n\n# Or:\nfrom some_module import g, PI\nresult = g(5, PI)\n\n# Or with different names:\nimport some_module as sm\nfrom some_module import PI as pi, g as gf"
  },
  {
    "objectID": "qmd/pandas3ed2.html#binary-operators-and-comparisons",
    "href": "qmd/pandas3ed2.html#binary-operators-and-comparisons",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Python uses standard mathematical syntax for binary operations and comparisons.\n\n\nprint(5 - 7)\nprint(12 + 21.5)\nprint(5 &lt;= 2)\n\n-2\n33.5\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed2.html#binary-operators-table",
    "href": "qmd/pandas3ed2.html#binary-operators-table",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Operation | Description |\n‚Äì | |\na + b | Add a and b |\na - b | Subtract b from a |\na * b | Multiply a by b |\na / b | Divide a by b |\na // b | Floor-divide a by b, dropping any fractional remainder |\na ** b | Raise a to the b power |"
  },
  {
    "objectID": "qmd/pandas3ed2.html#binary-operators-table---continued",
    "href": "qmd/pandas3ed2.html#binary-operators-table---continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Operation | Description |\n‚Äì | |\na & b | True if both a and b are True; for integers, take the bitwise AND |\na \\| b | True if either a or b is True; for integers, take the bitwise OR |\na ^ b | For Booleans, True if a or b is True, but not both; for integers, take the bitwise EXCLUSIVE-OR |\na == b | True if a equals b |\na != b | True if a is not equal to b |"
  },
  {
    "objectID": "qmd/pandas3ed2.html#binary-operators-table---continued-1",
    "href": "qmd/pandas3ed2.html#binary-operators-table---continued-1",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Operation | Description |\n‚Äì | |\na &lt; b, a &lt;= b | True if a is less than (less than or equal to) b |\na &gt; b, a &gt;= b | True if a is greater than (greater than or equal to) b |\na is b | True if a and b reference the same Python object |\na is not b | True if a and b reference different Python objects |"
  },
  {
    "objectID": "qmd/pandas3ed2.html#is-and-is-not",
    "href": "qmd/pandas3ed2.html#is-and-is-not",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "is checks if two variables refer to the same object.\nis not check if two objects are not the same\n== checks for equality of value.\n\n\na = [1, 2, 3]\nb = a\nc = list(a)  # Creates a *new* list (a copy)\n\nprint(a is b)      # Output: True\nprint(a is not c)  # Output: True\nprint(a == c)      # Output: True\n\nTrue\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed2.html#mutable-and-immutable-objects",
    "href": "qmd/pandas3ed2.html#mutable-and-immutable-objects",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Mutable objects (lists, dicts, NumPy arrays, etc.) can be modified in place.\nImmutable objects (strings, tuples) cannot be changed after creation.\n\n\na_list = [\"foo\", 2, [4, 5]]\na_list[2] = (3, 4)\nprint(a_list)  # Output: ['foo', 2, (3, 4)]\n\n# a_tuple = (3, 5, (4, 5))\n# a_tuple[1] = \"four\"  # This would cause a TypeError\n\n['foo', 2, (3, 4)]"
  },
  {
    "objectID": "qmd/pandas3ed2.html#scalar-types",
    "href": "qmd/pandas3ed2.html#scalar-types",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Python has built-in types for handling numerical data, strings, Booleans, and dates/times. These are called scalar types.\n\nType | Description |\n:‚Äì | : |\nNone | The Python ‚Äúnull‚Äù value |\nstr | String type; holds Unicode strings |\nbytes| Raw binary data |\nfloat| Double-precision floating-point number |"
  },
  {
    "objectID": "qmd/pandas3ed2.html#scalar-types-continued",
    "href": "qmd/pandas3ed2.html#scalar-types-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Type | Description |\n:‚Äì | : |\nbool | A Boolean True or False value |\nint | Arbitrary precision integer |"
  },
  {
    "objectID": "qmd/pandas3ed2.html#numeric-types-int-and-float",
    "href": "qmd/pandas3ed2.html#numeric-types-int-and-float",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "int: Can store arbitrarily large integers.\nfloat: Represents double-precision floating-point numbers (like double in C/C++).\n\n\nival = 17239871\nprint(ival ** 6)\n\nfval = 7.243\nfval2 = 6.78e-5  # Scientific notation\n\n26254519291092456596965462913230729701102721"
  },
  {
    "objectID": "qmd/pandas3ed2.html#numberic-types-int-and-float-continued",
    "href": "qmd/pandas3ed2.html#numberic-types-int-and-float-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Integer division resulting in a non-whole number always yields a float. Use // for floor division."
  },
  {
    "objectID": "qmd/pandas3ed2.html#strings",
    "href": "qmd/pandas3ed2.html#strings",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Use single quotes '...' or double quotes \"...\" to create string literals.\nTriple quotes '''...''' or \"\"\"...\"\"\" for multiline strings.\n\n\na = 'one way of writing a string'\nb = \"another way\"\nc = \"\"\"\nThis is a longer string that\nspans multiple lines\n\"\"\"\n\n\nPython strings are immutable."
  },
  {
    "objectID": "qmd/pandas3ed2.html#string-operations",
    "href": "qmd/pandas3ed2.html#string-operations",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Many built-in string methods are available (e.g., count(), replace(), split()).\n\n\na = \"this is a string\"\n# a[10] = 'f'  # TypeError: 'str' object does not support item assignment\n\nb = a.replace(\"string\", \"longer string\")\nprint(b)\nprint(a)\n\nthis is a longer string\nthis is a string\n\n\n\nConvert other objects to strings using str()."
  },
  {
    "objectID": "qmd/pandas3ed2.html#string-slicing-and-raw-strings",
    "href": "qmd/pandas3ed2.html#string-slicing-and-raw-strings",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Strings are sequences of Unicode characters and can be treated like lists/tuples.\n\n\ns = \"python\"\nprint(list(s))\nprint(s[:3])\n\n['p', 'y', 't', 'h', 'o', 'n']\npyt"
  },
  {
    "objectID": "qmd/pandas3ed2.html#string-slicing-and-raw-strings-continued",
    "href": "qmd/pandas3ed2.html#string-slicing-and-raw-strings-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Backslash \\ is an escape character. Use raw strings (prefix with r) to avoid escaping.\n\n\ns = \"12\\\\\\\\34\"  # String with two backslashes\nprint(s)\n\nraw_string = r\"this\\has\\no\\special\\characters\"\nprint(raw_string)\n\n12\\\\34\nthis\\has\\no\\special\\characters"
  },
  {
    "objectID": "qmd/pandas3ed2.html#string-concatenation-and-formatting",
    "href": "qmd/pandas3ed2.html#string-concatenation-and-formatting",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Adding strings together concatenates them.\n\n\na = \"this is the first half \"\nb = \"and this is the second half\"\nprint(a + b)\n\nthis is the first half and this is the second half\n\n\n\nUse string formatting (the format() method or f-strings) for more complex string construction."
  },
  {
    "objectID": "qmd/pandas3ed2.html#string-formatting-f-strings",
    "href": "qmd/pandas3ed2.html#string-formatting-f-strings",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "amount = 10\nrate = 88.46\ncurrency = \"Pesos\"\nresult = f\"{amount} {currency} is worth US${amount / rate:.2f}\"\nprint(result)\n\n10 Pesos is worth US$0.11\n\n\n\nf-strings (formatted string literals) are a concise way to embed expressions inside strings."
  },
  {
    "objectID": "qmd/pandas3ed2.html#bytes-and-unicode",
    "href": "qmd/pandas3ed2.html#bytes-and-unicode",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "In Python 3, Unicode is the first-class string type.\nencode() converts a Unicode string to bytes (e.g., UTF-8).\ndecode() converts bytes back to a Unicode string.\n\n\nval = \"espa√±ol\"\nval_utf8 = val.encode(\"utf-8\")\nprint(val_utf8)\nprint(type(val_utf8))\n\nprint(val_utf8.decode(\"utf-8\"))\n\nb'espa\\xc3\\xb1ol'\n&lt;class 'bytes'&gt;\nespa√±ol"
  },
  {
    "objectID": "qmd/pandas3ed2.html#booleans",
    "href": "qmd/pandas3ed2.html#booleans",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "True and False are the Boolean values.\nComparisons and conditional expressions evaluate to True or False.\nCombine with and, or, and not.\n\n\nprint(True and True)\nprint(False or True)\n\nprint(int(False))  # Output: 0\nprint(int(True))   # Output: 1\n\nTrue\nTrue\n0\n1"
  },
  {
    "objectID": "qmd/pandas3ed2.html#type-casting",
    "href": "qmd/pandas3ed2.html#type-casting",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "str(), bool(), int(), and float() can be used to cast values to different types.\n\n\ns = \"3.14159\"\nfval = float(s)\nprint(type(fval))\nprint(int(fval))\nprint(bool(fval))\nprint(bool(0))  # 0 casts to False, other numbers to True\n\n&lt;class 'float'&gt;\n3\nTrue\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed2.html#none",
    "href": "qmd/pandas3ed2.html#none",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "None is the Python null value type. It represents the absence of a value.\nIt is also the default return value of a function if there isn‚Äôt return statement in the function.\n\n\na = None\nprint(a is None)  # Output: True\n\nb = 5\nprint(b is not None)  # Output: True\n\nTrue\nTrue\n\n\n\nNone is often used as a default value for function arguments."
  },
  {
    "objectID": "qmd/pandas3ed2.html#dates-and-times",
    "href": "qmd/pandas3ed2.html#dates-and-times",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "The datetime module provides datetime, date, and time types.\n\n\nfrom datetime import datetime, date, time\n\ndt = datetime(2011, 10, 29, 20, 30, 21)\nprint(dt.day)\nprint(dt.minute)\nprint(dt.date())\nprint(dt.time())\n\n29\n30\n2011-10-29\n20:30:21"
  },
  {
    "objectID": "qmd/pandas3ed2.html#formatting-dates-and-times",
    "href": "qmd/pandas3ed2.html#formatting-dates-and-times",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "strftime() formats a datetime object as a string.\nstrptime() parses a string into a datetime object.\n\n\nprint(dt.strftime(\"%Y-%m-%d %H:%M\"))\n\ndt2 = datetime.strptime(\"20091031\", \"%Y%m%d\")\nprint(dt2)\n\n2011-10-29 20:30\n2009-10-31 00:00:00\n\n\n\nRefer to Python‚Äôs documentation for a complete list of format codes.\nSince datetime.datetime is an immutable type, methods like strftime and strptime will always produce new objects."
  },
  {
    "objectID": "qmd/pandas3ed2.html#datetime-arithmetic",
    "href": "qmd/pandas3ed2.html#datetime-arithmetic",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Subtracting two datetime objects produces a timedelta object.\nAdding a timedelta to a datetime produces a new, shifted datetime.\n\n\ndt2 = datetime(2011, 11, 15, 22, 30)\ndelta = dt2 - dt\nprint(delta)\nprint(type(delta))\nprint(dt + delta)\n\n17 days, 1:59:39\n&lt;class 'datetime.timedelta'&gt;\n2011-11-15 22:30:00"
  },
  {
    "objectID": "qmd/pandas3ed2.html#control-flow-if-elif-else",
    "href": "qmd/pandas3ed2.html#control-flow-if-elif-else",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "if statements execute a block of code if a condition is true.\nelif (else if) provides additional conditions.\nelse is a catchall block.\n\n\nx = -5\nif x &lt; 0:\n    print(\"It's negative\")\nelif x == 0:\n    print(\"Equal to zero\")\nelif 0 &lt; x &lt; 5:\n    print(\"Positive but smaller than 5\")\nelse:\n    print(\"Positive and larger than or equal to 5\")\n\nIt's negative\n\n\n\nConditions with and and or are evaluated left to right and short-circuit."
  },
  {
    "objectID": "qmd/pandas3ed2.html#for-loops",
    "href": "qmd/pandas3ed2.html#for-loops",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Iterate over a collection (list, tuple, etc.) or an iterator.\n\n\nfor value in collection:\n    # do something with value\n\n\ncontinue skips the rest of the current iteration.\nbreak exits the loop entirely."
  },
  {
    "objectID": "qmd/pandas3ed2.html#for-loop-examples",
    "href": "qmd/pandas3ed2.html#for-loop-examples",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "sequence = [1, 2, None, 4, None, 5]\ntotal = 0\nfor value in sequence:\n    if value is None:\n        continue  # Skip None values\n    total += value"
  },
  {
    "objectID": "qmd/pandas3ed2.html#for-loop-examples-continued",
    "href": "qmd/pandas3ed2.html#for-loop-examples-continued",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "sequence = [1, 2, 0, 4, 6, 5, 2, 1]\ntotal_until_5 = 0\nfor value in sequence:\n    if value == 5:\n        break  # Exit loop when we reach 5\n    total_until_5 += value"
  },
  {
    "objectID": "qmd/pandas3ed2.html#nested-for-loops",
    "href": "qmd/pandas3ed2.html#nested-for-loops",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "for i in range(4):\n    for j in range(4):\n        if j &gt; i:\n            break  # Only breaks out of the inner loop\n        print((i, j))\n\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)"
  },
  {
    "objectID": "qmd/pandas3ed2.html#while-loops",
    "href": "qmd/pandas3ed2.html#while-loops",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Execute a block of code repeatedly as long as a condition is true.\n\n\nx = 256\ntotal = 0\nwhile x &gt; 0:\n    if total &gt; 500:\n        break  # Exit loop if total exceeds 500\n    total += x\n    x = x // 2"
  },
  {
    "objectID": "qmd/pandas3ed2.html#pass",
    "href": "qmd/pandas3ed2.html#pass",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "pass is a ‚Äúno-op‚Äù statement. It does nothing. It‚Äôs used where a statement is syntactically required, but you don‚Äôt want to execute any code.\n\n\nif x &lt; 0:\n    print(\"negative!\")\nelif x == 0:\n    # TODO: put something smart here\n    pass\nelse:\n    print(\"positive!\")\n\npositive!"
  },
  {
    "objectID": "qmd/pandas3ed2.html#range",
    "href": "qmd/pandas3ed2.html#range",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "range() generates a sequence of evenly spaced integers.\nrange(stop): Generates integers from 0 up to (but not including) stop.\nrange(start, stop): Generates integers from start up to (but not including) stop.\nrange(start, stop, step): Generates integers with a specified step.\n\n\nprint(list(range(10)))\nprint(list(range(0, 20, 2)))\nprint(list(range(5, 0, -1)))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1]"
  },
  {
    "objectID": "qmd/pandas3ed2.html#range-example",
    "href": "qmd/pandas3ed2.html#range-example",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "seq = [1, 2, 3, 4]\nfor i in range(len(seq)):\n    print(f\"element {i}: {seq[i]}\")\n\nelement 0: 1\nelement 1: 2\nelement 2: 3\nelement 3: 4\n\n\n\nA common use of range is for iterating through sequences by index."
  },
  {
    "objectID": "qmd/pandas3ed2.html#summary",
    "href": "qmd/pandas3ed2.html#summary",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "We‚Äôve covered the core building blocks of Python: data types, operators, control flow, and basic usage of IPython and Jupyter Notebooks.\nThese concepts form the foundation for data analysis with Python.\nRemember to practice and experiment! üß™"
  },
  {
    "objectID": "qmd/pandas3ed2.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed2.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "How does Python‚Äôs ‚Äúeverything is an object‚Äù philosophy compare to other languages?\nWhat are the advantages of using Jupyter Notebooks for data analysis compared to writing scripts?\nCan you think of situations where duck typing would be particularly useful?\nHow might you use the datetime module in a real-world data analysis project?\nWhat are the differences between mutable and immutable objects? What are their pros and cons respectively?"
  },
  {
    "objectID": "qmd/pandas3ed13.html",
    "href": "qmd/pandas3ed13.html",
    "title": "Python for Data Analysis üêç",
    "section": "",
    "text": "We‚Äôve reached the final chapter! ü•≥\nFocus: Applying data analysis techniques to real-world datasets.\nGoal: Extract meaningful insights from raw data.\nThe techniques demonstrated are widely applicable.\nDatasets are available in the book‚Äôs GitHub/Gitee repository."
  },
  {
    "objectID": "qmd/pandas3ed13.html#chapter-13---data-analysis-examples",
    "href": "qmd/pandas3ed13.html#chapter-13---data-analysis-examples",
    "title": "Python for Data Analysis üêç",
    "section": "",
    "text": "We‚Äôve reached the final chapter! ü•≥\nFocus: Applying data analysis techniques to real-world datasets.\nGoal: Extract meaningful insights from raw data.\nThe techniques demonstrated are widely applicable.\nDatasets are available in the book‚Äôs GitHub/Gitee repository."
  },
  {
    "objectID": "qmd/pandas3ed13.html#data-mining-machine-learning-and-statistical-learning",
    "href": "qmd/pandas3ed13.html#data-mining-machine-learning-and-statistical-learning",
    "title": "Python for Data Analysis üêç",
    "section": "Data Mining, Machine Learning, and Statistical Learning",
    "text": "Data Mining, Machine Learning, and Statistical Learning\n\nData mining, machine learning, and statistical learning share a common goal: to extract valuable insights and make predictions from data.\nThe core difference lies in how they achieve this goal.\n\n\n\n\n\n\ngraph LR\n    A[Data Mining] --&gt; C(Common Ground: Insights & Predictions)\n    B[Machine Learning] --&gt; C\n    D[Statistical Learning] --&gt; C"
  },
  {
    "objectID": "qmd/pandas3ed13.html#data-mining",
    "href": "qmd/pandas3ed13.html#data-mining",
    "title": "Python for Data Analysis üêç",
    "section": "Data Mining ‚õèÔ∏è",
    "text": "Data Mining ‚õèÔ∏è\n\nDefinition: Discovering patterns, anomalies, and relationships in large datasets to predict outcomes.\nFocus: Finding previously unknown patterns. Exploration and discovery!\nTechniques: Combines methods from machine learning, statistics, and database systems.\nExample: A supermarket finds that customers who buy diapers üß∑ often also buy beer üç∫. An unexpected association!"
  },
  {
    "objectID": "qmd/pandas3ed13.html#machine-learning",
    "href": "qmd/pandas3ed13.html#machine-learning",
    "title": "Python for Data Analysis üêç",
    "section": "Machine Learning ü§ñ",
    "text": "Machine Learning ü§ñ\n\nDefinition: Algorithms that improve automatically through experience (data). Focuses on prediction and decision-making.\nFocus: Systems that learn from and make decisions based on data, without explicit rules.\nTypes:\n\nSupervised Learning: Training on labeled data (e.g., spam/not spam email classification üìß).\nUnsupervised Learning: Finding hidden structures in unlabeled data (e.g., customer segmentation üë•).\nReinforcement Learning: Agents making decisions by interacting with an environment (e.g., a robot learning to walk üö∂).\n\nExample: Predicting house prices üè† based on features like size, location, and bedrooms. The algorithm learns the relationship."
  },
  {
    "objectID": "qmd/pandas3ed13.html#statistical-learning",
    "href": "qmd/pandas3ed13.html#statistical-learning",
    "title": "Python for Data Analysis üêç",
    "section": "Statistical Learning üìä",
    "text": "Statistical Learning üìä\n\nDefinition: Tools for modeling and understanding complex datasets. A framework for applying statistical methods to learn from data.\nFocus: Emphasis on models and their interpretability, precision, and uncertainty. Bridges statistics and machine learning.\nKey Concepts:\n\nBias-Variance Tradeoff: Balancing approximation error (bias) and sensitivity to training data (variance).\nModel Selection: Choosing the best model.\nRegularization: Preventing overfitting by penalizing complexity.\n\nExample: Using linear regression to understand the relationship between advertising spend üìà and sales, with confidence intervals."
  },
  {
    "objectID": "qmd/pandas3ed13.html#bitly-data-from-1.usa.gov",
    "href": "qmd/pandas3ed13.html#bitly-data-from-1.usa.gov",
    "title": "Python for Data Analysis üêç",
    "section": "13.1 Bitly Data from 1.USA.gov",
    "text": "13.1 Bitly Data from 1.USA.gov\n\nBackground:\n\nBitly (URL shortening service) and USA.gov partnered in 2011.\nAnonymized data from users shortening .gov or .mil links.\nHourly snapshots (text files).\nService discontinued, but data preserved.\n\nData Format:\n\nEach line is a JSON (JavaScript Object Notation) object.\nJSON is human-readable."
  },
  {
    "objectID": "qmd/pandas3ed13.html#json-data-example",
    "href": "qmd/pandas3ed13.html#json-data-example",
    "title": "Python for Data Analysis üêç",
    "section": "JSON Data Example",
    "text": "JSON Data Example\n{ \"a\": \"Mozilla\\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\\/535.11 (KHTML, like Gecko) Chrome\\/17.0.963.78 Safari\\/535.11\", \"c\": \"US\", \"nk\": 1, \"tz\": \"America\\/New_York\", \"gr\": \"MA\", \"g\": \"A6q0VH\", \"h\": \"wfLQtf\", \"l\": \"orofrog\", \"al\": \"en-US,en;q=0.8\", \"hh\": \"1.usa.gov\", \"r\": \"http:\\/\\/www.facebook.com\\/l\\/7AQEFzjSi\\/1.usa.gov\\/wfLQtf\", \"u\": \"http:\\/\\/www.ncbi.nlm.nih.gov\\/pubmed\\/22415991\", \"t\": 1331923247, \"hc\": 1331822918, \"cy\": \"Danvers\", \"ll\": [ 42.576698, -70.954903 ] }\n\nStructure: JSON objects are in curly braces {}.\nKey-Value Pairs: Data in key-value pairs (e.g., \"a\": \"Mozilla/...\").\nData Types: Values can be strings, numbers, arrays (like \"ll\"), or other JSON objects.\nPython and JSON: Python‚Äôs json library easily converts JSON strings to Python dictionaries."
  },
  {
    "objectID": "qmd/pandas3ed13.html#reading-json-data-in-python",
    "href": "qmd/pandas3ed13.html#reading-json-data-in-python",
    "title": "Python for Data Analysis üêç",
    "section": "Reading JSON Data in Python",
    "text": "Reading JSON Data in Python\nimport json\n\npath = \"datasets/bitly_usagov/example.txt\"\n\nwith open(path) as f:\n    records = [json.loads(line) for line in f]  # List comprehension\n\nprint(records[0]) # Print the first record\n\nimport json: Imports the JSON library.\nopen(path): Opens the file.\njson.loads(line): Parses a JSON line into a Python dictionary.\nList Comprehension: [... for line in f] creates a list of dictionaries.\nrecords: Now a list of Python dictionaries."
  },
  {
    "objectID": "qmd/pandas3ed13.html#accessing-data-in-the-dictionary",
    "href": "qmd/pandas3ed13.html#accessing-data-in-the-dictionary",
    "title": "Python for Data Analysis üêç",
    "section": "Accessing Data in the Dictionary",
    "text": "Accessing Data in the Dictionary\nprint(records[0]['tz'])  # Accessing the 'tz' (time zone) field\n\nUse dictionary key access (square brackets) to get values.\nrecords[0] gets the first dictionary.\n['tz'] accesses the value for the key ‚Äútz‚Äù."
  },
  {
    "objectID": "qmd/pandas3ed13.html#counting-time-zones-pure-python",
    "href": "qmd/pandas3ed13.html#counting-time-zones-pure-python",
    "title": "Python for Data Analysis üêç",
    "section": "Counting Time Zones (Pure Python)",
    "text": "Counting Time Zones (Pure Python)\n\nObjective: Find the most frequent time zones (tz field).\nApproach 1: Dictionary and Loop (Basic, but less efficient)\n\n# Not shown in original slides, but a good comparison\ndef get_counts(sequence):\n    counts = {}\n    for x in sequence:\n        if x in counts:\n            counts[x] += 1\n        else:\n            counts[x] = 1\n    return counts\n\nApproach 2: defaultdict (More efficient and Pythonic)\n\nfrom collections import defaultdict\n\ndef get_counts2(sequence):\n    counts = defaultdict(int)  # Values initialize to 0\n    for x in sequence:\n        counts[x] += 1\n    return counts\n\ndefaultdict(int): If a key is not found, it‚Äôs added with a default value of 0. Avoids the if x in counts check."
  },
  {
    "objectID": "qmd/pandas3ed13.html#counting-time-zones-pure-python---handling-missing-keys",
    "href": "qmd/pandas3ed13.html#counting-time-zones-pure-python---handling-missing-keys",
    "title": "Python for Data Analysis üêç",
    "section": "Counting Time Zones (Pure Python) - Handling Missing Keys",
    "text": "Counting Time Zones (Pure Python) - Handling Missing Keys\n#Original Code (causes KeyError)\n# time_zones = [rec[\"tz\"] for rec in records]\n\n#Corrected with if condition\ntime_zones = [rec[\"tz\"] for rec in records if \"tz\" in rec]\nprint(time_zones[:10])\n\nKeyError Explanation: If a record doesn‚Äôt have a ‚Äòtz‚Äô key, accessing rec[\"tz\"] raises a KeyError.\nSolution: if \"tz\" in rec checks if the key exists before accessing it. This prevents the error."
  },
  {
    "objectID": "qmd/pandas3ed13.html#counting-time-zones-pure-python---getting-top-counts",
    "href": "qmd/pandas3ed13.html#counting-time-zones-pure-python---getting-top-counts",
    "title": "Python for Data Analysis üêç",
    "section": "Counting Time Zones (Pure Python) - Getting Top Counts",
    "text": "Counting Time Zones (Pure Python) - Getting Top Counts\ndef top_counts(count_dict, n=10):\n    value_key_pairs = [(count, tz) for tz, count in count_dict.items()]\n    value_key_pairs.sort()\n    return value_key_pairs[-n:]\n\n# Using the Counter Class (Most efficient and Pythonic)\nfrom collections import Counter\ncounts = Counter(time_zones)\nprint(counts.most_common(10))\n\ntop_counts function: Gets the top n most frequent items (custom function).\nCounter class: The best way to count items. most_common(10) directly returns the top 10."
  },
  {
    "objectID": "qmd/pandas3ed13.html#counting-time-zones-pandas",
    "href": "qmd/pandas3ed13.html#counting-time-zones-pandas",
    "title": "Python for Data Analysis üêç",
    "section": "Counting Time Zones (pandas) üêº",
    "text": "Counting Time Zones (pandas) üêº\n\npandas DataFrame: A more powerful and convenient way to work with tabular data.\n\nimport pandas as pd\n\nframe = pd.DataFrame(records)  # Create DataFrame from dictionaries\nprint(frame.info()) # Summary information\n\npd.DataFrame(records): Converts the list of dictionaries to a DataFrame. pandas infers column names and types.\nframe.info(): Provides:\n\nNumber of rows and columns.\nColumn names and data types.\nNon-null value counts (shows missing data).\nMemory usage."
  },
  {
    "objectID": "qmd/pandas3ed13.html#frame.info-output-explained",
    "href": "qmd/pandas3ed13.html#frame.info-output-explained",
    "title": "Python for Data Analysis üêç",
    "section": "frame.info() Output Explained",
    "text": "frame.info() Output Explained\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3560 entries, 0 to 3559\nData columns (total 18 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   a            3440 non-null   object\n 1   c            2919 non-null   object\n ...\n 16  _heartbeat_  120 non-null    float64\n 17  kw           93 non-null     object\ndtypes: float64(4), object(14)\nmemory usage: 500.8+ KB\n\nRangeIndex: Total rows (3560) and index range (0 to 3559).\nData columns: Each column, non-null count, and data type.\n\nobject: Usually text (strings).\nfloat64: Floating-point numbers.\nint64: Integer numbers.\n\nNon-Null Count: Highlights missing values (e.g., c has 641 missing).\ndtypes and memory usage: Summary info."
  },
  {
    "objectID": "qmd/pandas3ed13.html#working-with-time-zones-in-pandas",
    "href": "qmd/pandas3ed13.html#working-with-time-zones-in-pandas",
    "title": "Python for Data Analysis üêç",
    "section": "Working with Time Zones in pandas",
    "text": "Working with Time Zones in pandas\nprint(frame['tz'].head())  # First few time zones\n\ntz_counts = frame['tz'].value_counts()  # Count occurrences\nprint(tz_counts.head())\n\nframe['tz']: Selects the ‚Äòtz‚Äô column (a pandas Series).\n.head(): Shows the first 5 rows.\n.value_counts(): Counts occurrences of each unique value. Much easier than pure Python!"
  },
  {
    "objectID": "qmd/pandas3ed13.html#handling-missing-data-in-pandas",
    "href": "qmd/pandas3ed13.html#handling-missing-data-in-pandas",
    "title": "Python for Data Analysis üêç",
    "section": "Handling Missing Data in pandas",
    "text": "Handling Missing Data in pandas\nclean_tz = frame['tz'].fillna('Missing')  # Replace NaN with \"Missing\"\nclean_tz[clean_tz == ''] = 'Unknown'      # Replace empty strings\ntz_counts = clean_tz.value_counts()\nprint(tz_counts.head())\n\n.fillna('Missing'): Replaces missing values (NaN in pandas) with ‚ÄúMissing‚Äù.\nclean_tz[clean_tz == ''] = 'Unknown': Replaces empty strings with ‚ÄúUnknown‚Äù (boolean indexing)."
  },
  {
    "objectID": "qmd/pandas3ed13.html#visualization-with-seaborn",
    "href": "qmd/pandas3ed13.html#visualization-with-seaborn",
    "title": "Python for Data Analysis üêç",
    "section": "Visualization with seaborn üìä",
    "text": "Visualization with seaborn üìä\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsubset = tz_counts.head()\nsns.barplot(y=subset.index, x=subset.to_numpy())\nplt.show() # Display the plot\n\nimport seaborn as sns: Imports seaborn (built on matplotlib).\nsubset = tz_counts.head(): Use the top few time zones for clearer visualization.\nsns.barplot(...): Creates a horizontal bar plot.\n\ny=subset.index: Time zone names on the y-axis.\nx=subset.to_numpy(): Counts on the x-axis. Convert Series to numpy array.\n\nplt.show(): Displays the plot.\n\n\n\n\n‚ÄòTop time zones in the 1.usa.gov sample data‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#analyzing-browseragent-information",
    "href": "qmd/pandas3ed13.html#analyzing-browseragent-information",
    "title": "Python for Data Analysis üêç",
    "section": "Analyzing Browser/Agent Information üåê",
    "text": "Analyzing Browser/Agent Information üåê\nprint(frame['a'][1])\nprint(frame['a'][50])\nprint(frame['a'][51][:50])  # First 50 characters\n\nresults = pd.Series([x.split()[0] for x in frame['a'].dropna()])\nprint(results.head())\nprint(results.value_counts().head(8))\n\nThe a field contains browser/device/application info.\nframe['a'][1] ,etc.: Access specific agent strings.\n.dropna(): Removes rows with missing ‚Äòa‚Äô values before splitting.\nx.split()[0]: Splits by spaces, takes the first element (main browser ID).\npd.Series(...): Creates a Series from the split strings.\nresults.value_counts().head(8): Counts and shows the top 8."
  },
  {
    "objectID": "qmd/pandas3ed13.html#windows-vs.-non-windows-users",
    "href": "qmd/pandas3ed13.html#windows-vs.-non-windows-users",
    "title": "Python for Data Analysis üêç",
    "section": "Windows vs.¬†Non-Windows Users üíª",
    "text": "Windows vs.¬†Non-Windows Users üíª\nimport numpy as np\n\ncframe = frame[frame['a'].notna()].copy()  # Create a copy\ncframe['os'] = np.where(cframe['a'].str.contains('Windows'),\n                       'Windows', 'Not Windows')\nprint(cframe['os'].head())\n\nGoal: Analyze time zones for Windows/non-Windows users separately.\ncframe = frame[frame['a'].notna()].copy(): Creates a copy, filtering out missing ‚Äòa‚Äô values. .copy() avoids warnings.\ncframe['a'].str.contains('Windows'): Checks if the agent string contains ‚ÄúWindows‚Äù.\nnp.where(...): Creates a new ‚Äòos‚Äô column: ‚ÄúWindows‚Äù if the string contains ‚ÄúWindows‚Äù, else ‚ÄúNot Windows‚Äù."
  },
  {
    "objectID": "qmd/pandas3ed13.html#grouping-by-time-zone-and-os",
    "href": "qmd/pandas3ed13.html#grouping-by-time-zone-and-os",
    "title": "Python for Data Analysis üêç",
    "section": "Grouping by Time Zone and OS",
    "text": "Grouping by Time Zone and OS\nby_tz_os = cframe.groupby(['tz', 'os'])\nagg_counts = by_tz_os.size().unstack().fillna(0) # Group, count, reshape\nprint(agg_counts.head())\n\ncframe.groupby(['tz', 'os']): Groups by time zone and OS.\n.size(): Counts records in each group (like value_counts(), but for groups).\n.unstack(): Reshapes. Pivots ‚Äòos‚Äô to become columns (easier comparison).\n.fillna(0): Replaces missing values (time zones with only one OS) with 0."
  },
  {
    "objectID": "qmd/pandas3ed13.html#finding-the-most-popular-time-zones",
    "href": "qmd/pandas3ed13.html#finding-the-most-popular-time-zones",
    "title": "Python for Data Analysis üêç",
    "section": "Finding the Most Popular Time Zones",
    "text": "Finding the Most Popular Time Zones\n# Method 1: Using argsort\nindexer = agg_counts.sum(axis=\"columns\").argsort()\nprint(indexer.values[:10]) # Use .values to get a clean array\ncount_subset = agg_counts.take(indexer[-10:])\nprint(count_subset)\n\n# Method 2: Using nlargest (more convenient)\nprint(agg_counts.sum(axis=\"columns\").nlargest(10))\n\nGoal: Find time zones with the highest overall counts.\nagg_counts.sum(axis=\"columns\"): Total count for each time zone.\nargsort(): Returns indices that would sort the array (least to most frequent).\n.take(indexer[-10:]): Selects rows for the top 10 time zones.\nnlargest(10): A more direct way to get the top 10."
  },
  {
    "objectID": "qmd/pandas3ed13.html#visualizing-windows-and-non-windows-users-grouped-bar-plot",
    "href": "qmd/pandas3ed13.html#visualizing-windows-and-non-windows-users-grouped-bar-plot",
    "title": "Python for Data Analysis üêç",
    "section": "Visualizing Windows and Non-Windows Users (Grouped Bar Plot)",
    "text": "Visualizing Windows and Non-Windows Users (Grouped Bar Plot)\n# Prepare data\ncount_subset = count_subset.stack()\ncount_subset.name = 'total'\ncount_subset = count_subset.reset_index()\nprint(count_subset.head())\nsns.barplot(x='total', y='tz', hue='os', data=count_subset)\nplt.show()\n\ncount_subset.stack(): Pivots ‚Äòos‚Äô back into the index (opposite of unstack()). Common for seaborn.\ncount_subset.name = 'total': Names the Series values ‚Äútotal‚Äù.\ncount_subset.reset_index(): Converts the index to regular columns (for seaborn).\nsns.barplot(...): Grouped bar plot.\n\nx='total': Counts on the x-axis.\ny='tz': Time zones on the y-axis.\nhue='os': Separate bars for Windows/Not Windows.\n\n\n\n\n\n‚ÄòTop time zones by Windows and non-Windows users‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#normalizing-counts-proportions",
    "href": "qmd/pandas3ed13.html#normalizing-counts-proportions",
    "title": "Python for Data Analysis üêç",
    "section": "Normalizing Counts (Proportions)",
    "text": "Normalizing Counts (Proportions)\ndef norm_total(group):\n    group['normed_total'] = group['total'] / group['total'].sum()\n    return group\n\nresults = count_subset.groupby('tz').apply(norm_total)\nsns.barplot(x='normed_total', y='tz', hue='os', data=results)\nplt.show()\n\nGoal: Compare proportions of Windows/non-Windows users within each time zone.\nnorm_total(group) function:\n\nCalculates normed_total: count for each OS divided by the total count for that time zone (proportion).\nReturns the modified group.\n\ncount_subset.groupby('tz').apply(norm_total): Applies the function to each time zone group.\nsns.barplot(...): Bar plot using ‚Äònormed_total‚Äô (proportions) - easier comparison.\n\n\n\n\n‚ÄòPercentage Windows and non-Windows users in top occurring time zones‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#movielens-1m-dataset",
    "href": "qmd/pandas3ed13.html#movielens-1m-dataset",
    "title": "Python for Data Analysis üêç",
    "section": "13.2 MovieLens 1M Dataset üé¨",
    "text": "13.2 MovieLens 1M Dataset üé¨\n\nDataset: MovieLens 1M (GroupLens Research).\nContents:\n\n1 million ratings.\n~6,000 users.\n~4,000 movies.\n\nData Format: Three tables:\n\nusers: Demographics (age, gender, occupation, zip).\nratings: User ID, movie ID, rating, timestamp.\nmovies: Title, genres.\n\nGoal: Explore relationships between ratings, demographics, and genres."
  },
  {
    "objectID": "qmd/pandas3ed13.html#loading-the-movielens-data",
    "href": "qmd/pandas3ed13.html#loading-the-movielens-data",
    "title": "Python for Data Analysis üêç",
    "section": "Loading the MovieLens Data",
    "text": "Loading the MovieLens Data\nimport pandas as pd\n\nunames = ['user_id', 'gender', 'age', 'occupation', 'zip']\nusers = pd.read_table('datasets/movielens/users.dat', sep='::',\n                      header=None, names=unames, engine='python')\n\nrnames = ['user_id', 'movie_id', 'rating', 'timestamp']\nratings = pd.read_table('datasets/movielens/ratings.dat', sep='::',\n                        header=None, names=rnames, engine='python')\n\nmnames = ['movie_id', 'title', 'genres']\nmovies = pd.read_table('datasets/movielens/movies.dat', sep='::',\n                       header=None, names=mnames, engine='python')\n\nKey Arguments of pd.read_table:\n\nsep='::': Separator is two colons.\nheader=None: No header rows.\nnames=unames (etc.): Provide column names.\nengine='python': Use Python engine (supports multi-character separators)."
  },
  {
    "objectID": "qmd/pandas3ed13.html#merging-the-movielens-data",
    "href": "qmd/pandas3ed13.html#merging-the-movielens-data",
    "title": "Python for Data Analysis üêç",
    "section": "Merging the MovieLens Data",
    "text": "Merging the MovieLens Data\ndata = pd.merge(pd.merge(ratings, users), movies)\nprint(data.head())\nprint(data.iloc[0])  # Access the first row\n\npd.merge(): Combines DataFrames based on common columns. pandas finds them automatically.\nTwo Merges:\n\npd.merge(ratings, users): Merges on user_id.\npd.merge(..., movies): Merges the result with movies on movie_id.\n\ndata: Contains all info in one DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed13.html#analyzing-ratings-by-gender",
    "href": "qmd/pandas3ed13.html#analyzing-ratings-by-gender",
    "title": "Python for Data Analysis üêç",
    "section": "Analyzing Ratings by Gender",
    "text": "Analyzing Ratings by Gender\nmean_ratings = data.pivot_table('rating', index='title',\n                                columns='gender', aggfunc='mean')\nprint(mean_ratings.head())\n\ndata.pivot_table(...): Reshapes and aggregates.\n\n'rating': Values to aggregate (average rating).\nindex='title': Movie title is the row index.\ncolumns='gender': Gender (‚ÄòM‚Äô, ‚ÄòF‚Äô) becomes columns.\naggfunc='mean' (default): Calculates the mean."
  },
  {
    "objectID": "qmd/pandas3ed13.html#filtering-by-number-of-ratings",
    "href": "qmd/pandas3ed13.html#filtering-by-number-of-ratings",
    "title": "Python for Data Analysis üêç",
    "section": "Filtering by Number of Ratings",
    "text": "Filtering by Number of Ratings\nratings_by_title = data.groupby('title').size() # Count ratings per movie\nprint(ratings_by_title.head())\nactive_titles = ratings_by_title.index[ratings_by_title &gt;= 250] # Filter\nprint(active_titles)\n\nmean_ratings = mean_ratings.loc[active_titles] # Apply filter\nprint(mean_ratings)\n\nGoal: Focus on movies with enough ratings.\ndata.groupby('title').size(): Counts ratings per movie.\nactive_titles = ...: Titles with at least 250 ratings.\nmean_ratings.loc[active_titles]: Filters mean_ratings to include only those movies."
  },
  {
    "objectID": "qmd/pandas3ed13.html#sorting-and-finding-top-films",
    "href": "qmd/pandas3ed13.html#sorting-and-finding-top-films",
    "title": "Python for Data Analysis üêç",
    "section": "Sorting and Finding Top Films",
    "text": "Sorting and Finding Top Films\ntop_female_ratings = mean_ratings.sort_values(\"F\", ascending=False)\nprint(top_female_ratings.head())\n\nmean_ratings.sort_values(\"F\", ascending=False): Sorts by ‚ÄòF‚Äô (female) column, descending (highest ratings first)."
  },
  {
    "objectID": "qmd/pandas3ed13.html#measuring-rating-disagreement",
    "href": "qmd/pandas3ed13.html#measuring-rating-disagreement",
    "title": "Python for Data Analysis üêç",
    "section": "Measuring Rating Disagreement",
    "text": "Measuring Rating Disagreement\nmean_ratings['diff'] = mean_ratings['M'] - mean_ratings['F']\nsorted_by_diff = mean_ratings.sort_values('diff')\nprint(sorted_by_diff.head())  # Preferred by women\nprint(sorted_by_diff[::-1].head())  # Preferred by men\n\n# Standard deviation (another measure of disagreement)\nrating_std_by_title = data.groupby('title')['rating'].std()\nrating_std_by_title = rating_std_by_title.loc[active_titles] #Filter\nprint(rating_std_by_title.sort_values(ascending=False)[:10])\n\nmean_ratings['diff'] = ...: New column: difference between male and female average ratings.\nsorted_by_diff = ...: Sorts by ‚Äòdiff‚Äô.\n\n.head(): Women rated higher.\n[::-1].head(): Men rated higher (reverses order).\n\nStandard deviation shows disagreement."
  },
  {
    "objectID": "qmd/pandas3ed13.html#handling-movie-genres-the-right-way",
    "href": "qmd/pandas3ed13.html#handling-movie-genres-the-right-way",
    "title": "Python for Data Analysis üêç",
    "section": "Handling Movie Genres (The Right Way!)",
    "text": "Handling Movie Genres (The Right Way!)\n# Original: \"Animation|Children's|Comedy\"\nmovies['genre'] = movies.pop('genres').str.split('|') # Split into lists\nprint(movies.head())\nmovies_exploded = movies.explode('genre') # Explode!  Key step.\nprint(movies_exploded[:10])\n\nProblem: Genres are pipe-separated strings. Hard to analyze.\nmovies['genres'].str.split('|'): Splits into lists of genres.\n.pop('genres'): Removes and returns the original column.\nmovies.explode('genre'): Each movie-genre combination gets its own row. Essential for genre analysis!"
  },
  {
    "objectID": "qmd/pandas3ed13.html#combining-all-data-and-grouping-by-genre",
    "href": "qmd/pandas3ed13.html#combining-all-data-and-grouping-by-genre",
    "title": "Python for Data Analysis üêç",
    "section": "Combining All Data and Grouping by Genre",
    "text": "Combining All Data and Grouping by Genre\nratings_with_genre = pd.merge(pd.merge(movies_exploded, ratings), users)\nprint(ratings_with_genre.iloc[0])\n\ngenre_ratings = (ratings_with_genre.groupby(['genre', 'age'])\n                 ['rating'].mean()\n                 .unstack('age'))\nprint(genre_ratings[:10])\n\nratings_with_genre = ...: Merges movies_exploded, ratings, and users. Each row: rating + user info + single genre.\nratings_with_genre.iloc[0]: Shows the first row.\ngenre_ratings = ...: Average rating for each genre/age group.\n\ngroupby(['genre', 'age']): Groups by genre and age.\n['rating'].mean(): Mean rating.\n.unstack('age'): Age becomes columns."
  },
  {
    "objectID": "qmd/pandas3ed13.html#us-baby-names-18802010",
    "href": "qmd/pandas3ed13.html#us-baby-names-18802010",
    "title": "Python for Data Analysis üêç",
    "section": "13.3 US Baby Names 1880‚Äì2010 üë∂",
    "text": "13.3 US Baby Names 1880‚Äì2010 üë∂\n\nDataset: US Social Security Administration (SSA) baby names.\nTime Period: 1880-2010.\nData Format: One file per year:\n\nName\nSex\nNumber of births\n\nExample (yob1880.txt): Mary,F,7065     Anna,F,2604     ...\nPotential Analyses:\n\nName popularity trends.\nRelative rank.\nNaming diversity.\nLetter/vowel/consonant analysis."
  },
  {
    "objectID": "qmd/pandas3ed13.html#loading-and-combining-the-baby-names-data",
    "href": "qmd/pandas3ed13.html#loading-and-combining-the-baby-names-data",
    "title": "Python for Data Analysis üêç",
    "section": "Loading and Combining the Baby Names Data",
    "text": "Loading and Combining the Baby Names Data\nimport pandas as pd\n\n# Load a single year (for demonstration)\nnames1880 = pd.read_csv('datasets/babynames/yob1880.txt',\n                        names=['name', 'sex', 'births'])\nprint(names1880)\nprint(names1880.groupby('sex')['births'].sum())\n\n# Load all years and combine\nyears = range(1880, 2011)\npieces = []\nfor year in years:\n    path = f'datasets/babynames/yob{year}.txt'\n    frame = pd.read_csv(path, names=['name', 'sex', 'births'])\n    frame['year'] = year  # Add 'year' column\n    pieces.append(frame)\n\nnames = pd.concat(pieces, ignore_index=True)\nprint(names)\n\nnames1880 = pd.read_csv(...): Loads one year. names assigns columns.\nnames1880.groupby('sex')['births'].sum(): Total births per sex in 1880.\nLooping through years:\n\nrange(1880, 2011): Iterates.\nf'datasets/babynames/yob{year}.txt': File path (f-string).\nframe['year'] = year: Adds ‚Äòyear‚Äô column.\npieces.append(frame): Adds to the list.\n\nnames = pd.concat(pieces, ignore_index=True): Combines all DataFrames. ignore_index=True prevents duplicate indices."
  },
  {
    "objectID": "qmd/pandas3ed13.html#aggregating-by-year-and-sex",
    "href": "qmd/pandas3ed13.html#aggregating-by-year-and-sex",
    "title": "Python for Data Analysis üêç",
    "section": "Aggregating by Year and Sex",
    "text": "Aggregating by Year and Sex\ntotal_births = names.pivot_table('births', index='year',\n                                 columns='sex', aggfunc=sum)\nprint(total_births.tail())\ntotal_births.plot(title='Total births by sex and year')\nplt.show()\n\nnames.pivot_table(...): Total births per year/sex.\n\n'births': Values to aggregate.\nindex='year': Year is the row index.\ncolumns='sex': Sex becomes columns.\naggfunc=sum: Sum of births.\n\ntotal_births.tail(): Last few rows.\ntotal_births.plot(...): Line plot of trends.\n\n\n\n\n‚ÄòTotal births by sex and year‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#calculating-proportion-of-each-name",
    "href": "qmd/pandas3ed13.html#calculating-proportion-of-each-name",
    "title": "Python for Data Analysis üêç",
    "section": "Calculating Proportion of Each Name",
    "text": "Calculating Proportion of Each Name\ndef add_prop(group):\n    group['prop'] = group['births'] / group['births'].sum()\n    return group\n\nnames = names.groupby(['year', 'sex']).apply(add_prop)\nprint(names)\n\nGoal: Proportion of babies with each name within each year and sex. Normalizes for total births.\nadd_prop(group) function:\n\nTakes a group (year/sex).\ngroup['births'] / group['births'].sum(): Proportion (births divided by total for that year/sex).\nReturns the modified group.\n\nnames.groupby(['year', 'sex']).apply(add_prop): Applies to each group. Adds ‚Äòprop‚Äô column."
  },
  {
    "objectID": "qmd/pandas3ed13.html#verifying-the-proportions-sanity-check",
    "href": "qmd/pandas3ed13.html#verifying-the-proportions-sanity-check",
    "title": "Python for Data Analysis üêç",
    "section": "Verifying the Proportions (Sanity Check!)",
    "text": "Verifying the Proportions (Sanity Check!)\nprint(names.groupby(['year', 'sex'])['prop'].sum())\n\nImportant: Always check your calculations!\nGroups by year/sex, sums ‚Äòprop‚Äô. Should be 1.0 for each group (proportions add up to 100%)."
  },
  {
    "objectID": "qmd/pandas3ed13.html#extracting-the-top-1000-names",
    "href": "qmd/pandas3ed13.html#extracting-the-top-1000-names",
    "title": "Python for Data Analysis üêç",
    "section": "Extracting the Top 1000 Names",
    "text": "Extracting the Top 1000 Names\ndef get_top1000(group):\n    return group.sort_values('births', ascending=False)[:1000]\n\ngrouped = names.groupby(['year', 'sex'])\ntop1000 = grouped.apply(get_top1000)\ntop1000 = top1000.reset_index(drop=True) # Drop hierarchical index\nprint(top1000)\n\nGoal: Top 1000 names for each year/sex (for further analysis).\nget_top1000(group) function:\n\nTakes a group (year/sex).\ngroup.sort_values('births', ascending=False): Sorts by births (descending).\n[:1000]: Top 1000 rows.\n\nnames.groupby(['year', 'sex']).apply(get_top1000): Applies to each group.\ntop1000.reset_index(drop=True): remove the multi-level index."
  },
  {
    "objectID": "qmd/pandas3ed13.html#analyzing-naming-trends",
    "href": "qmd/pandas3ed13.html#analyzing-naming-trends",
    "title": "Python for Data Analysis üêç",
    "section": "Analyzing Naming Trends",
    "text": "Analyzing Naming Trends\nboys = top1000[top1000['sex'] == 'M']\ngirls = top1000[top1000['sex'] == 'F']\n\ntotal_births = top1000.pivot_table('births', index='year',\n                                    columns='name', aggfunc=sum)\nprint(total_births.info())\n\nsubset = total_births[['John', 'Harry', 'Mary', 'Marilyn']]\nsubset.plot(subplots=True, figsize=(12, 10),\n            title=\"Number of births per year\")\nplt.show()\n\nboys = ... and girls = ...: Separate DataFrames for boys/girls.\ntotal_births = top1000.pivot_table(...): Trends of specific names.\n\n'births': Values to aggregate.\nindex='year': Year is the row index.\ncolumns='name': Each name is a column.\naggfunc=sum: Sum.\n\nsubset.plot(...): Plots trends.\n\nsubplots=True: Separate plot for each name.\n\n\n\n\n\n‚ÄòA few boy and girl names over time‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#measuring-the-increase-in-naming-diversity",
    "href": "qmd/pandas3ed13.html#measuring-the-increase-in-naming-diversity",
    "title": "Python for Data Analysis üêç",
    "section": "Measuring the Increase in Naming Diversity",
    "text": "Measuring the Increase in Naming Diversity\ntable = top1000.pivot_table('prop', index='year',\n                            columns='sex', aggfunc=sum)\ntable.plot(title='Sum of table1000.prop by year and sex',\n           yticks=np.linspace(0, 1.2, 13))\nplt.show()\n\ndf = boys[boys['year'] == 2010]\nprop_cumsum = df['prop'].sort_values(ascending=False).cumsum()\nprint(prop_cumsum[:10])\nprint(prop_cumsum.searchsorted(0.5)) # result 116, plus 1 result = 117\n\ndf = boys[boys.year == 1900]\nin1900 = df.sort_values('prop', ascending=False).prop.cumsum()\nprint(in1900.searchsorted(0.5) + 1) # result 25\n\nGoal: Has naming become more diverse? (Are parents choosing from more names?)\ntable = top1000.pivot_table(...): Sum of ‚Äòprop‚Äô for each year/sex. Decreasing proportion = increasing diversity.\nprop_cumsum = ... .cumsum(): Cumulative sum of ‚Äòprop‚Äô for boys in 2010 (sorted). Finds how many names reach 50% of births.\nprop_cumsum.searchsorted(0.5): Index where cumulative sum reaches 0.5 (50%). Because array indices start from 0, plus 1.\nSimilar steps for 1900.\n\n\n\n\n‚ÄòProportion of births represented in top one thousand names by sex‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#measuring-the-increase-in-naming-diversity-cont.---generalizing",
    "href": "qmd/pandas3ed13.html#measuring-the-increase-in-naming-diversity-cont.---generalizing",
    "title": "Python for Data Analysis üêç",
    "section": "Measuring the Increase in Naming Diversity (Cont.) - Generalizing",
    "text": "Measuring the Increase in Naming Diversity (Cont.) - Generalizing\ndef get_quantile_count(group, q=0.5):\n    group = group.sort_values('prop', ascending=False)\n    return group.prop.cumsum().searchsorted(q) + 1\n\ndiversity = top1000.groupby(['year', 'sex']).apply(get_quantile_count)\ndiversity = diversity.unstack()\n\nfig = plt.figure()\ndiversity.plot(title=\"Number of popular names in top 50%\")\nplt.show()\n\nget_quantile_count(group, q=0.5) function:\n\nTakes a group (year/sex) and quantile (default 0.5).\nSorts by ‚Äòprop‚Äô (descending).\nCumulative sum of ‚Äòprop‚Äô.\nsearchsorted(q): Index where sum reaches quantile. Plus 1.\n\ntop1000.groupby(['year', 'sex']).apply(get_quantile_count): Applies to each group.\ndiversity.unstack(): Reshapes for plotting.\nPlot shows how many names are needed for 50% of births, over time, by sex.\n\n\n\n\n‚ÄòPlot of diversity metric by year‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#the-last-letter-revolution",
    "href": "qmd/pandas3ed13.html#the-last-letter-revolution",
    "title": "Python for Data Analysis üêç",
    "section": "The ‚ÄúLast Letter‚Äù Revolution üî§",
    "text": "The ‚ÄúLast Letter‚Äù Revolution üî§\ndef get_last_letter(x):\n    return x[-1]\n\nlast_letters = names['name'].map(get_last_letter)\nlast_letters.name = 'last_letter'\n\ntable = names.pivot_table('births', index=last_letters,\n                          columns=['sex', 'year'], aggfunc=sum)\nsubtable = table.reindex(columns=[1910, 1960, 2010], level='year')\nprint(subtable.head())\nprint(subtable.sum())\n\nletter_prop = subtable / subtable.sum()\nprint(letter_prop.head())\n\nIdea: Analyze the distribution of last letters over time.\nget_last_letter(x) function: Returns the last character.\nnames['name'].map(get_last_letter): Applies to ‚Äòname‚Äô, creating last_letters Series.\ntable = names.pivot_table(...): Counts births by last letter, sex, and year.\nsubtable = ...: Selects specific years (1910, 1960, 2010).\nletter_prop = subtable / subtable.sum(): Proportion of names ending in each letter (normalized).\n\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(2, 1, figsize=(10, 8))\nletter_prop['M'].plot(kind='bar', rot=0, ax=axes[0], title='Male')\nletter_prop['F'].plot(kind='bar', rot=0, ax=axes[1], title='Female',\n                      legend=False)\nplt.show()\n\nplt.subplots(2, 1, ...): Two subplots (male/female).\nletter_prop['M'].plot(...) and letter_prop['F'].plot(...): Bar plots of last letter distribution.\n\n\n\n\n‚ÄòProportion of boy and girl names ending in each letter‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#the-last-letter-revolution-cont.---focusing-on-specific-letters",
    "href": "qmd/pandas3ed13.html#the-last-letter-revolution-cont.---focusing-on-specific-letters",
    "title": "Python for Data Analysis üêç",
    "section": "The ‚ÄúLast Letter‚Äù Revolution (Cont.) - Focusing on Specific Letters",
    "text": "The ‚ÄúLast Letter‚Äù Revolution (Cont.) - Focusing on Specific Letters\nletter_prop = table / table.sum()  # Proportions from the *full* table\ndny_ts = letter_prop.loc[['d', 'n', 'y'], 'M'].T  # Select and transpose\nprint(dny_ts.head())\ndny_ts.plot()\nplt.show()\n\nletter_prop = table / table.sum(): Proportions (all years).\ndny_ts = letter_prop.loc[['d', 'n', 'y'], 'M'].T: Selects ‚Äòd‚Äô, ‚Äòn‚Äô, ‚Äòy‚Äô for males, transposes (.T) for time series.\ndny_ts.plot(): Plots trends of those letters.\n\n\n\n\n‚ÄòProportion of boys born with names ending in d/n/y over time‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#boy-names-that-became-girl-names-and-vice-versa",
    "href": "qmd/pandas3ed13.html#boy-names-that-became-girl-names-and-vice-versa",
    "title": "Python for Data Analysis üêç",
    "section": "Boy Names That Became Girl Names (and Vice Versa) üîÑ",
    "text": "Boy Names That Became Girl Names (and Vice Versa) üîÑ\nall_names = pd.Series(top1000['name'].unique()) # All unique names\nlesley_like = all_names[all_names.str.contains('Lesl')] # Filter\nprint(lesley_like)\n\nfiltered = top1000[top1000['name'].isin(lesley_like)]\nprint(filtered.groupby('name')['births'].sum())\n\ntable = filtered.pivot_table('births', index='year',\n                            columns='sex', aggfunc='sum')\ntable = table.div(table.sum(axis=\"columns\"), axis=\"index\") # Normalize\nprint(table.tail())\ntable.plot(style={'M': 'k-', 'F': 'k--'})\nplt.show()\n\nGoal: Find names that switched gender preference.\nall_names = ...: All unique names in top1000.\nlesley_like = ...: Names containing ‚ÄúLesl‚Äù.\nfiltered = ...: Rows from top1000 with those names.\nfiltered.groupby('name')['births'].sum(): Total births per name.\ntable = filtered.pivot_table(...): Births per sex, per year.\ntable = table.div(..., axis=\"index\"): Proportion of each sex per year (normalized).\ntable.plot(...): Trend of male/female proportions.\n\n\n\n\n‚ÄòProportion of male/female Lesley-like names over time‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#usda-food-database",
    "href": "qmd/pandas3ed13.html#usda-food-database",
    "title": "Python for Data Analysis üêç",
    "section": "13.4 USDA Food Database üçé",
    "text": "13.4 USDA Food Database üçé\n\nDataset: USDA food nutrient database.\nData Format: JSON.\nExample Record:\n\n{\n  \"id\": 21441,\n  \"description\": \"KENTUCKY FRIED CHICKEN, Fried Chicken, EXTRA CRISPY, Wing, meat and skin with breading\",\n  \"tags\": [\"KFC\"],\n  \"manufacturer\": \"Kentucky Fried Chicken\",\n  \"group\": \"Fast Foods\",\n  \"portions\": [\n    {\n      \"amount\": 1,\n      \"unit\": \"wing, with skin\",\n      \"grams\": 68.0\n    }\n  ],\n  \"nutrients\": [\n    {\n      \"value\": 20.8,\n      \"units\": \"g\",\n      \"description\": \"Protein\",\n      \"group\": \"Composition\"\n    }\n  ]\n}\n\nGoal: Analyze nutrient information."
  },
  {
    "objectID": "qmd/pandas3ed13.html#loading-and-exploring-the-usda-data",
    "href": "qmd/pandas3ed13.html#loading-and-exploring-the-usda-data",
    "title": "Python for Data Analysis üêç",
    "section": "Loading and Exploring the USDA Data",
    "text": "Loading and Exploring the USDA Data\nimport json\nimport pandas as pd\n\ndb = json.load(open('datasets/usda_food/database.json'))\nprint(len(db))\nprint(db[0].keys())\nprint(db[0]['nutrients'][0])\n\nnutrients = pd.DataFrame(db[0]['nutrients']) # Nutrients for *first* food\nprint(nutrients.head(7))\n\nimport json: Imports the json library.\ndb = json.load(...): Loads JSON into a Python object (db - list of dicts).\nlen(db): Number of food records.\ndb[0].keys(): Keys in the first record.\ndb[0]['nutrients'][0]: First nutrient for the first food.\nnutrients = pd.DataFrame(...): DataFrame for first food‚Äôs nutrients."
  },
  {
    "objectID": "qmd/pandas3ed13.html#extracting-food-information",
    "href": "qmd/pandas3ed13.html#extracting-food-information",
    "title": "Python for Data Analysis üêç",
    "section": "Extracting Food Information",
    "text": "Extracting Food Information\ninfo_keys = ['description', 'group', 'id', 'manufacturer']\ninfo = pd.DataFrame(db, columns=info_keys)\nprint(info.head())\nprint(info.info())\nprint(pd.value_counts(info['group'])[:10])\n\nGoal: DataFrame (info) with basic food info.\ninfo_keys = [...]: Keys to extract.\ninfo = pd.DataFrame(db, columns=info_keys): Creates DataFrame.\ninfo.head(): First few rows.\ninfo.info(): Summary.\npd.value_counts(info['group'])[:10]: Top 10 food groups."
  },
  {
    "objectID": "qmd/pandas3ed13.html#processing-nutrient-data-all-foods",
    "href": "qmd/pandas3ed13.html#processing-nutrient-data-all-foods",
    "title": "Python for Data Analysis üêç",
    "section": "Processing Nutrient Data (All Foods)",
    "text": "Processing Nutrient Data (All Foods)\nnutrients = []\n\nfor rec in db:\n    fnuts = pd.DataFrame(rec['nutrients'])\n    fnuts['id'] = rec['id']  # Add food ID!\n    nutrients.append(fnuts)\n\nnutrients = pd.concat(nutrients, ignore_index=True)\nprint(nutrients)\n\nGoal: Single DataFrame (nutrients) with all nutrient info.\nLoop:\n\nfor rec in db:: Iterates through food records.\nfnuts = pd.DataFrame(rec['nutrients']): DataFrame for current food‚Äôs nutrients.\nfnuts['id'] = rec['id']: Adds food ID (for linking).\nnutrients.append(fnuts): Appends to the list.\n\nnutrients = pd.concat(nutrients, ignore_index=True): Combines all nutrient DataFrames."
  },
  {
    "objectID": "qmd/pandas3ed13.html#handling-duplicates-and-renaming",
    "href": "qmd/pandas3ed13.html#handling-duplicates-and-renaming",
    "title": "Python for Data Analysis üêç",
    "section": "Handling Duplicates and Renaming",
    "text": "Handling Duplicates and Renaming\nnutrients.duplicated().sum()  # Check for duplicates\nnutrients = nutrients.drop_duplicates()  # Remove duplicates\n\ncol_mapping = {'description' : 'food',\n               'group'       : 'fgroup'}\ninfo = info.rename(columns=col_mapping, copy=False)\nprint(info.info())\n\ncol_mapping = {'description' : 'nutrient',\n               'group' : 'nutgroup'}\nnutrients = nutrients.rename(columns=col_mapping, copy=False)\nprint(nutrients)\n\nDuplicate Check and Removal:\nSome nutrient rows are duplicated. Remove before continuing. -nutrients.duplicated().sum(): Count duplicate rows.\nnutrients = nutrients.drop_duplicates(): Remove duplicates.\nRenaming columns:\n\ncol_mapping = ...: Maps old names to new (clearer) names.\ninfo = info.rename(..., copy=False): Renames info columns (in place).\nnutrients = nutrients.rename(...): Renames nutrients columns."
  },
  {
    "objectID": "qmd/pandas3ed13.html#merging-food-and-nutrient-data",
    "href": "qmd/pandas3ed13.html#merging-food-and-nutrient-data",
    "title": "Python for Data Analysis üêç",
    "section": "Merging Food and Nutrient Data",
    "text": "Merging Food and Nutrient Data\nndata = pd.merge(nutrients, info, on='id')\nprint(ndata.info())\nprint(ndata.iloc[30000])\n\nndata = pd.merge(nutrients, info, on='id'): Combines on ‚Äòid‚Äô. One DataFrame with all info.\nndata.info(): Summary.\nndata.iloc[30000]: Sample row."
  },
  {
    "objectID": "qmd/pandas3ed13.html#plotting-median-nutrient-values",
    "href": "qmd/pandas3ed13.html#plotting-median-nutrient-values",
    "title": "Python for Data Analysis üêç",
    "section": "Plotting Median Nutrient Values",
    "text": "Plotting Median Nutrient Values\nresult = ndata.groupby(['nutrient', 'fgroup'])['value'].quantile(0.5)\nresult['Zinc, Zn'].sort_values().plot(kind='barh')\nplt.show()\n\nGoal: Visualize median nutrient values per food group.\nresult = ndata.groupby(['nutrient', 'fgroup'])['value'].quantile(0.5):\n\nGroups by nutrient and food group.\nCalculates median (0.5 quantile) of ‚Äòvalue‚Äô.\n\nresult['Zinc, Zn']...plot(kind='barh'):\n\nSelects Zinc.\nSorts values.\nHorizontal bar plot.\n\n\n\n\n\n‚ÄòMedian zinc values by food group‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#finding-foods-with-maximum-nutrient-values",
    "href": "qmd/pandas3ed13.html#finding-foods-with-maximum-nutrient-values",
    "title": "Python for Data Analysis üêç",
    "section": "Finding Foods with Maximum Nutrient Values",
    "text": "Finding Foods with Maximum Nutrient Values\nby_nutrient = ndata.groupby(['nutgroup', 'nutrient'])\n\ndef get_maximum(x):\n    return x.loc[x.value.idxmax()]\n\nmax_foods = by_nutrient.apply(get_maximum)[['value', 'food']]\nmax_foods['food'] = max_foods['food'].str[:50] # Shorten food names\nprint(max_foods.loc['Amino Acids']['food'])\n\nGoal: Food with the highest value for each nutrient.\nby_nutrient = ndata.groupby(['nutgroup', 'nutrient']): Groups by nutrient group and name.\nget_maximum(x) function:\n\nTakes a group.\nx.value.idxmax(): Index of the row with max ‚Äòvalue‚Äô.\nx.loc[...]: Selects that row.\n\nmax_foods = ...: Applies get_maximum, selects ‚Äòvalue‚Äô and ‚Äòfood‚Äô.\nmax_foods['food'] = ...str[:50]: Shortens food names."
  },
  {
    "objectID": "qmd/pandas3ed13.html#federal-election-commission-database",
    "href": "qmd/pandas3ed13.html#federal-election-commission-database",
    "title": "Python for Data Analysis üêç",
    "section": "13.5 2012 Federal Election Commission Database üó≥Ô∏è",
    "text": "13.5 2012 Federal Election Commission Database üó≥Ô∏è\n\nDataset: 2012 US FEC campaign contribution data.\nContents:\n\nContributor names.\nOccupation/employer.\nAddress.\nContribution amount.\n\nData Format: CSV.\nFile: P00000001-ALL.csv.\nGoal: Analyze contribution patterns.\n\nimport pandas as pd\nfec = pd.read_csv('datasets/fec/P00000001-ALL.csv', low_memory=False)\nprint(fec.info())\nprint(fec.iloc[123456])\n\nfec = pd.read_csv(...): Loads CSV.\nlow_memory=False: Important. Large file; use False for accurate type inference.\nfec.info(): Summary.\nfec.iloc[123456]: Sample record."
  },
  {
    "objectID": "qmd/pandas3ed13.html#adding-party-affiliation",
    "href": "qmd/pandas3ed13.html#adding-party-affiliation",
    "title": "Python for Data Analysis üêç",
    "section": "Adding Party Affiliation",
    "text": "Adding Party Affiliation\nunique_cands = fec['cand_nm'].unique()\nprint(unique_cands)\n\nparties = {'Bachmann, Michelle': 'Republican',\n           'Cain, Herman': 'Republican',\n           'Gingrich, Newt': 'Republican',\n           'Huntsman, Jon': 'Republican',\n           'Johnson, Gary Earl': 'Republican',\n           'McCotter, Thaddeus G': 'Republican',\n           'Obama, Barack': 'Democrat',\n           'Paul, Ron': 'Republican',\n           'Pawlenty, Timothy': 'Republican',\n           'Perry, Rick': 'Republican',\n           \"Roemer, Charles E. 'Buddy' III\": 'Republican',\n           'Romney, Mitt': 'Republican',\n           'Santorum, Rick': 'Republican'}\n\nprint(fec['cand_nm'][123456:123461])\nprint(fec['cand_nm'][123456:123461].map(parties))\n\nfec['party'] = fec['cand_nm'].map(parties)\nprint(fec['party'].value_counts())\n\nunique_cands = fec['cand_nm'].unique(): Unique candidate names.\nparties = {...}: Dictionary: candidate name -&gt; party.\nfec['cand_nm'][...].map(parties): Shows how map works.\nfec['party'] = fec['cand_nm'].map(parties): Creates ‚Äòparty‚Äô column.\nfec['party'].value_counts(): Counts per party."
  },
  {
    "objectID": "qmd/pandas3ed13.html#filtering-contributions-positive-amounts-only",
    "href": "qmd/pandas3ed13.html#filtering-contributions-positive-amounts-only",
    "title": "Python for Data Analysis üêç",
    "section": "Filtering Contributions (Positive Amounts Only)",
    "text": "Filtering Contributions (Positive Amounts Only)\nprint((fec['contb_receipt_amt'] &gt; 0).value_counts())\n\nfec = fec[fec['contb_receipt_amt'] &gt; 0] # Keep only positive\n\nProblem: Includes contributions (positive) and refunds (negative).\n(... &gt; 0).value_counts(): Checks positive/negative counts.\nfec = fec[... &gt; 0]: Filters to keep only positive contributions."
  },
  {
    "objectID": "qmd/pandas3ed13.html#filtering-by-candidate-obama-and-romney",
    "href": "qmd/pandas3ed13.html#filtering-by-candidate-obama-and-romney",
    "title": "Python for Data Analysis üêç",
    "section": "Filtering by Candidate (Obama and Romney)",
    "text": "Filtering by Candidate (Obama and Romney)\nfec_mrbo = fec[fec['cand_nm'].isin(['Obama, Barack', 'Romney, Mitt'])]\n\nGoal: Focus on the two main candidates.\nfec_mrbo = fec[fec['cand_nm'].isin([...])]: Filters for Obama/Romney."
  },
  {
    "objectID": "qmd/pandas3ed13.html#donation-statistics-by-occupation-and-employer",
    "href": "qmd/pandas3ed13.html#donation-statistics-by-occupation-and-employer",
    "title": "Python for Data Analysis üêç",
    "section": "Donation Statistics by Occupation and Employer",
    "text": "Donation Statistics by Occupation and Employer\nprint(fec['contbr_occupation'].value_counts()[:10])\n\nocc_mapping = {\n    'INFORMATION REQUESTED PER BEST EFFORTS' : 'NOT PROVIDED',\n    'INFORMATION REQUESTED' : 'NOT PROVIDED',\n    'INFORMATION REQUESTED (BEST EFFORTS)' : 'NOT PROVIDED',\n    'C.E.O.': 'CEO'\n}\n\ndef get_occ(x):\n    # If no mapping provided, return x\n    return occ_mapping.get(x, x)\n\nfec['contbr_occupation'] = fec['contbr_occupation'].map(get_occ)\n\nfec['contbr_occupation'].value_counts()[:10]: Top 10 occupations.\nProblem: Variations of similar occupations (‚ÄúINFORMATION REQUESTED‚Äù).\nocc_mapping = {...}: Maps variations to a standard form.\nget_occ(x) function:\n\nUses occ_mapping.get(x, x). If x is in the dictionary, returns the mapped value; otherwise, returns x.\n\nfec['contbr_occupation'] = ...map(get_occ): Standardizes occupations."
  },
  {
    "objectID": "qmd/pandas3ed13.html#donation-statistics-by-occupation-and-employer-cont.---employer-pivot-table",
    "href": "qmd/pandas3ed13.html#donation-statistics-by-occupation-and-employer-cont.---employer-pivot-table",
    "title": "Python for Data Analysis üêç",
    "section": "Donation Statistics by Occupation and Employer (Cont.) - Employer + Pivot Table",
    "text": "Donation Statistics by Occupation and Employer (Cont.) - Employer + Pivot Table\nemp_mapping = { # Same process as occupation, but for employer\n    'INFORMATION REQUESTED PER BEST EFFORTS' : 'NOT PROVIDED',\n    'INFORMATION REQUESTED' : 'NOT PROVIDED',\n    'SELF' : 'SELF-EMPLOYED',\n    'SELF EMPLOYED' : 'SELF-EMPLOYED',\n}\n\ndef get_emp(x):\n    # If no mapping provided, return x\n    return emp_mapping.get(x, x)\n\nfec['contbr_employer'] = fec['contbr_employer'].map(get_emp)\n\nby_occupation = fec.pivot_table('contb_receipt_amt',\n                                index='contbr_occupation',\n                                columns='party', aggfunc='sum')\n\nover_2mm = by_occupation[by_occupation.sum(axis=\"columns\") &gt; 2000000]\nprint(over_2mm)\n\nEmployer: Same process as for occupation.\nby_occupation = fec.pivot_table(...): Contributions by occupation/party.\n\n'contb_receipt_amt': Values to aggregate.\nindex='contbr_occupation': Occupation is the row index.\ncolumns='party': Party becomes columns.\naggfunc='sum': Total contributions.\n\nover_2mm = ...: Occupations with &gt; $2 million total.\n\nover_2mm.plot(kind='barh')\nplt.show()\n\n\n\n‚ÄòTotal donations by party for top occupations‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#top-donor-occupations-and-employers-for-obama-and-romney",
    "href": "qmd/pandas3ed13.html#top-donor-occupations-and-employers-for-obama-and-romney",
    "title": "Python for Data Analysis üêç",
    "section": "Top Donor Occupations and Employers (for Obama and Romney)",
    "text": "Top Donor Occupations and Employers (for Obama and Romney)\ndef get_top_amounts(group, key, n=5):\n    totals = group.groupby(key)['contb_receipt_amt'].sum()\n    return totals.nlargest(n)\n\ngrouped = fec_mrbo.groupby('cand_nm') # Group by candidate\nprint(grouped.apply(get_top_amounts, 'contbr_occupation', n=7))\nprint(grouped.apply(get_top_amounts, 'contbr_employer', n=10))\n\nget_top_amounts(group, key, n=5) function:\n\ngroup: DataFrame group (e.g., contributions for one candidate).\nkey: Column to group by (occupation/employer).\nn: Number of top items.\nCalculates total contributions per occupation/employer, returns top n.\n\ngrouped = fec_mrbo.groupby('cand_nm'): Groups by candidate.\ngrouped.apply(...): Finds top occupations/employers for each candidate."
  },
  {
    "objectID": "qmd/pandas3ed13.html#bucketing-donation-amounts",
    "href": "qmd/pandas3ed13.html#bucketing-donation-amounts",
    "title": "Python for Data Analysis üêç",
    "section": "Bucketing Donation Amounts",
    "text": "Bucketing Donation Amounts\nimport numpy as np\n\nbins = np.array([0, 1, 10, 100, 1000, 10000, 100_000, 1_000_000, 10_000_000])\nlabels = pd.cut(fec_mrbo['contb_receipt_amt'], bins)\nprint(labels)\n\ngrouped = fec_mrbo.groupby(['cand_nm', labels])\nprint(grouped.size().unstack(level=0))\n\nbucket_sums = grouped['contb_receipt_amt'].sum().unstack(level=0)\nnormed_sums = bucket_sums.div(bucket_sums.sum(axis=\"columns\"),\n                              axis=\"index\")\nprint(normed_sums)\nnormed_sums[:-2].plot(kind='barh')  # Exclude largest buckets\nplt.show()\n\nGoal: Analyze by donation size brackets.\nbins = np.array([...]): Defines bucket boundaries.\nlabels = pd.cut(..., bins): Assigns each contribution to a bucket.\ngrouped = ...groupby(['cand_nm', labels]): Groups by candidate and bucket.\ngrouped.size().unstack(...): Counts per bucket/candidate.\nbucket_sums = ...: Total amount per bucket/candidate.\nnormed_sums = ...: Percentage per bucket/candidate (normalized).\nnormed_sums[:-2].plot(kind='barh'): Bar plot (excludes largest buckets).\n\n\n\n\n‚ÄòPercentage of total donations received by candidates for each donation size‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13.html#donation-statistics-by-state",
    "href": "qmd/pandas3ed13.html#donation-statistics-by-state",
    "title": "Python for Data Analysis üêç",
    "section": "Donation Statistics by State",
    "text": "Donation Statistics by State\ngrouped = fec_mrbo.groupby(['cand_nm', 'contbr_st'])\ntotals = grouped['contb_receipt_amt'].sum().unstack(level=0).fillna(0)\ntotals = totals[totals.sum(axis=\"columns\") &gt; 100000] # Filter states\nprint(totals.head(10))\n\npercent = totals.div(totals.sum(axis=\"columns\"), axis=\"index\")\nprint(percent.head(10))\n\nGoal: Analyze by contributor state.\ngrouped = ...groupby(['cand_nm', 'contbr_st']): Groups by candidate/state.\ntotals = ...sum().unstack(...).fillna(0): Total per state/candidate. unstack puts candidates as columns, fillna(0) handles missing data.\ntotals = totals[...]: Filters states with &gt; $100,000 total.\npercent = totals.div(...): Percentage per state/candidate."
  },
  {
    "objectID": "qmd/pandas3ed13.html#summary",
    "href": "qmd/pandas3ed13.html#summary",
    "title": "Python for Data Analysis üêç",
    "section": "Summary",
    "text": "Summary\n\nDemonstrated real-world data analysis with Python.\nDatasets: Bitly/USA.gov, MovieLens, baby names, USDA food, FEC.\nKey Techniques:\n\nLoading (text, JSON, CSV).\nCleaning/transformation (missing data, strings, types).\nAggregation/grouping (groupby, pivot_table, apply).\nMerging/reshaping (merge, concat, unstack, stack, explode).\nVisualization (matplotlib, seaborn).\nTime series.\n\nIterative exploration: start with raw data, clean, and build analyses."
  },
  {
    "objectID": "qmd/pandas3ed13.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed13.html#thoughts-and-discussion",
    "title": "Python for Data Analysis üêç",
    "section": "Thoughts and Discussion",
    "text": "Thoughts and Discussion\n\nHow to extend/refine these analyses? Other questions?\nLimitations and assumptions? Biases?\nApply techniques to other datasets?\nEthical considerations with real-world data (especially about people)?\nTrade-offs: pure Python, collections, pandas. When is each best?\nHow visualization choice affects insights?\nExplore official documents to deepen your understanding.\nBusiness majors: How are these skills useful for a career? Provides a competitive edge."
  },
  {
    "objectID": "qmd/pandas3edA2cn.html",
    "href": "qmd/pandas3edA2cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êàë‰ª¨‰πãÂâçÂ∑≤Áªè‰ªãÁªç‰∫Ü IPython shell Âíå Jupyter notebooks ÁöÑÂü∫Á°ÄÁü•ËØÜ„ÄÇ\nÁé∞Âú®ÔºåÊàë‰ª¨Â∞ÜÊ∑±ÂÖ•Êé¢ËÆ® IPython ÁöÑÈ´òÁ∫ßÂäüËÉΩÔºåÊó†ËÆ∫ÊòØÂú®ÊéßÂà∂Âè∞ËøòÊòØ Jupyter ÁéØÂ¢É‰∏≠ÈÉΩÈùûÂ∏∏ÊúâÁî®„ÄÇ\nÂèØ‰ª•Â∞Ü IPython ËßÜ‰∏∫ÊÇ®ÁöÑÂ¢ûÂº∫Âûã Python Ëß£ÈáäÂô® ‚Äì ‰∏Ä‰∏™Áî®‰∫é‰∫§‰∫íÂºèËÆ°ÁÆóÂíåÊï∞ÊçÆÂàÜÊûêÁöÑÂº∫Â§ßÂ∑•ÂÖ∑„ÄÇ\nÊú¨ËäÇÂÜÖÂÆπÂèØ‰Ωú‰∏∫Ë°•ÂÖÖËµÑÊ∫êÔºåÂÉèÁîµÂ≠êÊ∏∏Êàè‰∏≠ÁöÑÈÅìÂÖ∑‰∏ÄÊ†∑Â¢ûÂº∫ÊÇ®ÁöÑÂ≠¶‰π†‰ΩìÈ™åÔºÅüéÆ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁÆÄ‰ªãË∂ÖË∂äÂü∫Á°Ä",
    "href": "qmd/pandas3edA2cn.html#ÁÆÄ‰ªãË∂ÖË∂äÂü∫Á°Ä",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êàë‰ª¨‰πãÂâçÂ∑≤Áªè‰ªãÁªç‰∫Ü IPython shell Âíå Jupyter notebooks ÁöÑÂü∫Á°ÄÁü•ËØÜ„ÄÇ\nÁé∞Âú®ÔºåÊàë‰ª¨Â∞ÜÊ∑±ÂÖ•Êé¢ËÆ® IPython ÁöÑÈ´òÁ∫ßÂäüËÉΩÔºåÊó†ËÆ∫ÊòØÂú®ÊéßÂà∂Âè∞ËøòÊòØ Jupyter ÁéØÂ¢É‰∏≠ÈÉΩÈùûÂ∏∏ÊúâÁî®„ÄÇ\nÂèØ‰ª•Â∞Ü IPython ËßÜ‰∏∫ÊÇ®ÁöÑÂ¢ûÂº∫Âûã Python Ëß£ÈáäÂô® ‚Äì ‰∏Ä‰∏™Áî®‰∫é‰∫§‰∫íÂºèËÆ°ÁÆóÂíåÊï∞ÊçÆÂàÜÊûêÁöÑÂº∫Â§ßÂ∑•ÂÖ∑„ÄÇ\nÊú¨ËäÇÂÜÖÂÆπÂèØ‰Ωú‰∏∫Ë°•ÂÖÖËµÑÊ∫êÔºåÂÉèÁîµÂ≠êÊ∏∏Êàè‰∏≠ÁöÑÈÅìÂÖ∑‰∏ÄÊ†∑Â¢ûÂº∫ÊÇ®ÁöÑÂ≠¶‰π†‰ΩìÈ™åÔºÅüéÆ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆ",
    "href": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆ ‚å®Ô∏è",
    "text": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆ ‚å®Ô∏è\n\nIPython Êèê‰æõ‰∫ÜËÆ∏Â§öÈîÆÁõòÂø´Êç∑ÈîÆÔºåÁî®‰∫éÈ´òÊïàÂØºËà™ÂíåÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩï„ÄÇ\nËøô‰∫õÂø´Êç∑ÈîÆÁ±ª‰ºº‰∫é Emacs Êàñ Unix bash shell ‰∏≠ÁöÑÂø´Êç∑ÈîÆ„ÄÇ\nÊéåÊè°Ëøô‰∫õÂø´Êç∑ÈîÆÂ∞ÜÊòæËëóÊèêÈ´òÊÇ®ÁöÑÂ∑•‰ΩúÊïàÁéáÔºÅ‚ö°"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÂØºËà™",
    "href": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÂØºËà™",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÔºöÂØºËà™",
    "text": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÔºöÂØºËà™\n\nCtrl-A: Â∞ÜÂÖâÊ†áÁßªÂä®Âà∞Ë°åÈ¶ñ„ÄÇ\nCtrl-E: Â∞ÜÂÖâÊ†áÁßªÂä®Âà∞Ë°åÂ∞æ„ÄÇ\nCtrl-F: Â∞ÜÂÖâÊ†áÂêëÂâçÁßªÂä®‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇ\nCtrl-B: Â∞ÜÂÖâÊ†áÂêëÂêéÁßªÂä®‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩï",
    "href": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÔºöÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩï",
    "text": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÔºöÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩï\n\nCtrl-P ÊàñÂêë‰∏äÁÆ≠Â§¥ÔºöÂú®ÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩï‰∏≠ÂêëÂêéÊêúÁ¥¢ÔºàÂåπÈÖçÂΩìÂâçÊñáÊú¨Ôºâ„ÄÇ\nCtrl-N ÊàñÂêë‰∏ãÁÆ≠Â§¥ÔºöÂú®ÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩï‰∏≠ÂêëÂâçÊêúÁ¥¢ÔºàÂåπÈÖçÂΩìÂâçÊñáÊú¨Ôºâ„ÄÇ\nCtrl-R: Readline È£éÊ†ºÁöÑÂèçÂêëÂéÜÂè≤ÊêúÁ¥¢ÔºàÈÉ®ÂàÜÂåπÈÖçÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÁºñËæëÂíåÊéßÂà∂",
    "href": "qmd/pandas3edA2cn.html#ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÁºñËæëÂíåÊéßÂà∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÔºöÁºñËæëÂíåÊéßÂà∂",
    "text": "ÁªàÁ´ØÈîÆÁõòÂø´Êç∑ÈîÆÔºöÁºñËæëÂíåÊéßÂà∂\n\nCtrl-Shift-V: ‰ªéÂâ™Ë¥¥ÊùøÁ≤òË¥¥ÊñáÊú¨„ÄÇ\nCtrl-C: ‰∏≠Êñ≠ÂΩìÂâçÊ≠£Âú®ÊâßË°åÁöÑ‰ª£Á†Å„ÄÇ üõë\nCtrl-K: Âà†Èô§‰ªéÂÖâÊ†áÂà∞Ë°åÂ∞æÁöÑÊñáÊú¨„ÄÇ\nCtrl-U: Âà†Èô§ÂΩìÂâçË°å‰∏äÁöÑÊâÄÊúâÊñáÊú¨„ÄÇ\nCtrl-L: Ê∏ÖÈô§Â±èÂπï„ÄÇ üí®"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Âø´Êç∑ÈîÆÂèØËßÜÂåñ",
    "href": "qmd/pandas3edA2cn.html#Âø´Êç∑ÈîÆÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âø´Êç∑ÈîÆÂèØËßÜÂåñ üñºÔ∏è",
    "text": "Âø´Êç∑ÈîÆÂèØËßÜÂåñ üñºÔ∏è\n\n‰ª•‰∏ãÊòØ IPython shell ‰∏≠‰∏Ä‰∫õÈîÆÁõòÂø´Êç∑ÈîÆÁöÑÂõæÁ§∫„ÄÇ\nC-b, C-f: ÂØπÂ∫î‰∫é Ctrl-B Âíå Ctrl-FÔºåÁî®‰∫éÂÖâÊ†áÁßªÂä®„ÄÇ\nC-a, C-e: ÂØπÂ∫î‰∫é Ctrl-A Âíå Ctrl-EÔºåÁî®‰∫éÁßªÂä®Âà∞Ë°åÁöÑÂºÄÂ§¥/ÁªìÂ∞æ„ÄÇ\nC-k: ÂØπÂ∫î‰∫é Ctrl-KÔºåÁî®‰∫éÂà†Èô§Âà∞Ë°åÂ∞æÁöÑÊñáÊú¨„ÄÇ\nC-u: ÂØπÂ∫î‰∫é Ctrl-UÔºåÁî®‰∫éÂà†Èô§Êï¥Ë°å„ÄÇ\nÂØπ a_variable ÁöÑÊìç‰ΩúÊòæÁ§∫‰∫ÜÊñáÊú¨Êìç‰Ωú„ÄÇ\nÊ≥®ÊÑèÔºöJupyter notebooks ÊúâËá™Â∑±ÁöÑ‰∏ÄÂ•óÂø´Êç∑ÈîÆ„ÄÇ ËØ∑Êé¢Á¥¢ Jupyter ÁöÑÈõÜÊàêÂ∏ÆÂä©ÔºÅ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#È≠îÊ≥ïÂëΩ‰ª§ipython-ÁöÑË∂ÖËÉΩÂäõ",
    "href": "qmd/pandas3edA2cn.html#È≠îÊ≥ïÂëΩ‰ª§ipython-ÁöÑË∂ÖËÉΩÂäõ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È≠îÊ≥ïÂëΩ‰ª§ÔºöIPython ÁöÑË∂ÖËÉΩÂäõ üßô‚Äç‚ôÇÔ∏è",
    "text": "È≠îÊ≥ïÂëΩ‰ª§ÔºöIPython ÁöÑË∂ÖËÉΩÂäõ üßô‚Äç‚ôÇÔ∏è\n\nÈ≠îÊ≥ïÂëΩ‰ª§ÊòØ IPython ÁâπÊúâÁöÑÁâπÊÆäÂëΩ‰ª§Ôºå‰∏çÊòØÂÜÖÁΩÆÁöÑ Python ÂáΩÊï∞„ÄÇ\nÂÆÉ‰ª¨‰ª•ÁôæÂàÜÂè∑ (%) ‰Ωú‰∏∫ÂâçÁºÄ„ÄÇ\nËøô‰∫õÂëΩ‰ª§ÁÆÄÂåñ‰∫ÜÂ∏∏ËßÅ‰ªªÂä°ÔºåÂπ∂ÂÖÅËÆ∏ÊÇ®ÊéßÂà∂ IPython ÁöÑË°å‰∏∫„ÄÇ ÂèØ‰ª•Â∞ÜÂÆÉ‰ª¨ËßÜ‰∏∫ IPython Êú¨Ë∫´ÁöÑ‚ÄúÂø´Êç∑ÊñπÂºè‚ÄùÔºÅ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Á§∫‰æãtimeit---ÊµãÈáèÊâßË°åÊó∂Èó¥",
    "href": "qmd/pandas3edA2cn.html#Á§∫‰æãtimeit---ÊµãÈáèÊâßË°åÊó∂Èó¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºö%timeit ‚è±Ô∏è - ÊµãÈáèÊâßË°åÊó∂Èó¥",
    "text": "Á§∫‰æãÔºö%timeit ‚è±Ô∏è - ÊµãÈáèÊâßË°åÊó∂Èó¥\n\n%timeit ÊµãÈáè Python ËØ≠Âè•ÁöÑÊâßË°åÊó∂Èó¥„ÄÇ ËøôÂØπ‰∫éÊÄßËÉΩÂàÜÊûêÈùûÂ∏∏ÊúâÁî®ÔºÅ\n\n\nimport numpy as np  # ÂØºÂÖ• numpy Â∫ìÔºåÂπ∂Â∞ÜÂÖ∂ÂëΩÂêç‰∏∫ np\na = np.random.standard_normal((100, 100))  # ÂàõÂª∫‰∏Ä‰∏™ 100x100 ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞Êï∞ÁªÑ\n%timeit np.dot(a, a)  # ‰ΩøÁî® %timeit È≠îÊ≥ïÂëΩ‰ª§ÊµãÈáè a ‰∏é a ÁöÑÁÇπÁßØËøêÁÆóÁöÑÊâßË°åÊó∂Èó¥\n\n47.8 Œºs ¬± 48.5 ns per loop (mean ¬± std. dev. of 7 runs, 10,000 loops each)\n\n\n\nËæìÂá∫ÊòæÁ§∫Â§öÊ¨°ËøêË°åÁöÑÂπ≥ÂùáÊâßË°åÊó∂Èó¥ÂíåÊ†áÂáÜÂ∑Æ„ÄÇ\nÁªìÊûú‰∏≠ÔºåÂ¶Ç 92.5 ¬µs ¬± 3.43 ¬µs per loopÔºå ¬µs ‰ª£Ë°®ÂæÆÁßí„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Êé¢Á¥¢È≠îÊ≥ïÂëΩ‰ª§---Ëé∑ÂèñÂ∏ÆÂä©",
    "href": "qmd/pandas3edA2cn.html#Êé¢Á¥¢È≠îÊ≥ïÂëΩ‰ª§---Ëé∑ÂèñÂ∏ÆÂä©",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êé¢Á¥¢È≠îÊ≥ïÂëΩ‰ª§ ‚ùì - Ëé∑ÂèñÂ∏ÆÂä©",
    "text": "Êé¢Á¥¢È≠îÊ≥ïÂëΩ‰ª§ ‚ùì - Ëé∑ÂèñÂ∏ÆÂä©\n\nÂú®È≠îÊ≥ïÂëΩ‰ª§Âêé‰ΩøÁî® ? ÂèØ‰ª•Êü•ÁúãÂÖ∂‚ÄúÂëΩ‰ª§Ë°å‚ÄùÈÄâÈ°πÔºàÁ±ª‰ºº‰∫éÂ∏ÆÂä©ÊâãÂÜåÔºâ„ÄÇ\n\n\n%debug?\n# ‰ΩøÁî® ? Êü•Áúã %debug È≠îÊ≥ïÂëΩ‰ª§ÁöÑËØ¶ÁªÜÁî®Ê≥ï\n# ÂåÖÊã¨Ë∞ÉËØïÂô®ÊøÄÊ¥ª„ÄÅÊñ≠ÁÇπËÆæÁΩÆÂíå‰∫ãÂêéË∞ÉËØïÁ≠â"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#automagic-Êó†ÈúÄ-ÁöÑÈ≠îÊ≥ï",
    "href": "qmd/pandas3edA2cn.html#automagic-Êó†ÈúÄ-ÁöÑÈ≠îÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "automagic: Êó†ÈúÄ % ÁöÑÈ≠îÊ≥ï ‚ú®",
    "text": "automagic: Êó†ÈúÄ % ÁöÑÈ≠îÊ≥ï ‚ú®\n\nautomagic ÂÖÅËÆ∏ÊÇ®Âú®‰∏ç‰ΩøÁî® % ÂâçÁºÄÁöÑÊÉÖÂÜµ‰∏ã‰ΩøÁî®È≠îÊ≥ïÂëΩ‰ª§ÔºåÂè™Ë¶ÅÊ≤°ÊúâÂèòÈáèÂÖ±‰∫´Áõ∏ÂêåÁöÑÂêçÁß∞„ÄÇ\nÊÇ®ÂèØ‰ª•‰ΩøÁî® %automagic ÊâìÂºÄÊàñÂÖ≥Èó≠ÂÆÉ„ÄÇ\n\n\n%automagic  # ÊâìÂºÄÊàñÂÖ≥Èó≠ automagic ÂäüËÉΩ\npwd         # Â¶ÇÊûú automagic ÂºÄÂêØ‰∏î 'pwd' ‰∏çÊòØÂèòÈáèÂêçÔºåÂàôÁ≠âÂêå‰∫é %pwd"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÂàÜÈÖçÈ≠îÊ≥ïÂëΩ‰ª§ÁöÑËæìÂá∫",
    "href": "qmd/pandas3edA2cn.html#ÂàÜÈÖçÈ≠îÊ≥ïÂëΩ‰ª§ÁöÑËæìÂá∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÈÖçÈ≠îÊ≥ïÂëΩ‰ª§ÁöÑËæìÂá∫",
    "text": "ÂàÜÈÖçÈ≠îÊ≥ïÂëΩ‰ª§ÁöÑËæìÂá∫\n\nÊüê‰∫õÈ≠îÊ≥ïÂëΩ‰ª§ÁöÑË°å‰∏∫Á±ª‰ºº‰∫éÂáΩÊï∞ÔºåÂÖÅËÆ∏ÊÇ®Â∞ÜÂÖ∂ËæìÂá∫ÂàÜÈÖçÁªôÂèòÈáè„ÄÇ\n\n\ndirectory = %pwd  # Â∞ÜÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÂ≠òÂÇ®Âú® 'directory' ÂèòÈáè‰∏≠\nprint(directory) #ÊâìÂç∞ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---Âø´ÈÄüÂèÇËÄÉ",
    "href": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---Âø´ÈÄüÂèÇËÄÉ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - Âø´ÈÄüÂèÇËÄÉ",
    "text": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - Âø´ÈÄüÂèÇËÄÉ\n\n%quickref: ÊòæÁ§∫ IPython Âø´ÈÄüÂèÇËÄÉÂç°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ÊñáÊ°£",
    "href": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ÊñáÊ°£",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ÊñáÊ°£",
    "text": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ÊñáÊ°£\n\n%magic: ÊòæÁ§∫ÊâÄÊúâÂèØÁî®È≠îÊ≥ïÂëΩ‰ª§ÁöÑËØ¶ÁªÜÊñáÊ°£„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---Ë∞ÉËØï",
    "href": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---Ë∞ÉËØï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - Ë∞ÉËØï",
    "text": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - Ë∞ÉËØï\n\n%debug: Âú®ÊúÄÂêé‰∏Ä‰∏™ÂºÇÂ∏∏ÂõûÊ∫ØÂ§ÑËøõÂÖ•‰∫§‰∫íÂºèË∞ÉËØïÂô®„ÄÇ\n%pdb: Âú®‰ªª‰ΩïÂºÇÂ∏∏ÂèëÁîüÂêéËá™Âä®ËøõÂÖ•Ë∞ÉËØïÂô®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ÂéÜÂè≤ËÆ∞ÂΩï",
    "href": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ÂéÜÂè≤ËÆ∞ÂΩï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ÂéÜÂè≤ËÆ∞ÂΩï",
    "text": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ÂéÜÂè≤ËÆ∞ÂΩï\n\n%hist: ÊâìÂç∞ÂëΩ‰ª§ËæìÂÖ•ÂéÜÂè≤ËÆ∞ÂΩïÔºàÂèØÈÄâÊã©ÂåÖÂê´ËæìÂá∫Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---‰ª£Á†ÅÊâßË°å",
    "href": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---‰ª£Á†ÅÊâßË°å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ‰ª£Á†ÅÊâßË°å",
    "text": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ‰ª£Á†ÅÊâßË°å\n\n%paste: ÊâßË°åÂâ™Ë¥¥Êùø‰∏≠È¢ÑÊ†ºÂºèÂåñÁöÑ Python ‰ª£Á†Å„ÄÇ\n%cpaste: ÊâìÂºÄ‰∏Ä‰∏™ÁâπÊÆäÊèêÁ§∫Á¨¶ÔºåÁî®‰∫éÊâãÂä®Á≤òË¥¥‰ª£Á†Å„ÄÇ\n%run script.py: Âú® IPython ÂÜÖÈÉ®ËøêË°å Python ËÑöÊú¨„ÄÇ\n%prun statement: ‰ΩøÁî® cProfile ÊâßË°åËØ≠Âè•Âπ∂Êä•ÂëäÊÄßËÉΩÂàÜÊûêÁªìÊûú„ÄÇ\n%time statement: Êä•ÂëäÂçïÊù°ËØ≠Âè•ÁöÑÊâßË°åÊó∂Èó¥„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ËÆ°Êó∂ÂíåÊÄßËÉΩÂàÜÊûê",
    "href": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ËÆ°Êó∂ÂíåÊÄßËÉΩÂàÜÊûê",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ËÆ°Êó∂ÂíåÊÄßËÉΩÂàÜÊûê",
    "text": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ËÆ°Êó∂ÂíåÊÄßËÉΩÂàÜÊûê\n\n%timeit statement: Á≤æÁ°ÆÊµãÈáèÂπ≥ÂùáÊâßË°åÊó∂Èó¥„ÄÇ\n%prun statement: ‰ΩøÁî® cProfile ÊâßË°åËØ≠Âè•Âπ∂Êä•ÂëäÊÄßËÉΩÂàÜÊûêÂô®ËæìÂá∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ÂëΩÂêçÁ©∫Èó¥ÁÆ°ÁêÜ",
    "href": "qmd/pandas3edA2cn.html#Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§---ÂëΩÂêçÁ©∫Èó¥ÁÆ°ÁêÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ÂëΩÂêçÁ©∫Èó¥ÁÆ°ÁêÜ",
    "text": "Â∏∏Áî®È≠îÊ≥ïÂëΩ‰ª§ üìú - ÂëΩÂêçÁ©∫Èó¥ÁÆ°ÁêÜ\n\n%reset: Âà†Èô§‰∫§‰∫íÂºèÂëΩÂêçÁ©∫Èó¥‰∏≠ÁöÑÊâÄÊúâÂèòÈáè/ÂêçÁß∞„ÄÇ\n%page OBJECT: ‰ª•ÂàÜÈ°µÊñπÂºèÊºÇ‰∫ÆÂú∞ÊâìÂç∞‰∏Ä‰∏™ÂØπË±°Âπ∂ÊòæÁ§∫ÂÆÉ„ÄÇ\n%who, %who_ls, %whos: ÊòæÁ§∫ÂëΩÂêçÁ©∫Èó¥‰∏≠ÁöÑÂèòÈáèÔºåÂÖ∑Êúâ‰∏çÂêåÁöÑËØ¶ÁªÜÁ®ãÂ∫¶„ÄÇ\n%xdel variable: Âà†Èô§‰∏Ä‰∏™ÂèòÈáèÂπ∂Â∞ùËØïÊ∏ÖÈô§ÂÖ∂ÊâÄÊúâÂºïÁî®„ÄÇ\nÊåâ q ÈÄÄÂá∫ %quickref Êàñ %magic ÂàÜÈ°µÂô®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#run-ÂëΩ‰ª§---ÊâßË°åËÑöÊú¨",
    "href": "qmd/pandas3edA2cn.html#run-ÂëΩ‰ª§---ÊâßË°åËÑöÊú¨",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "%run ÂëΩ‰ª§ üèÉ - ÊâßË°åËÑöÊú¨",
    "text": "%run ÂëΩ‰ª§ üèÉ - ÊâßË°åËÑöÊú¨\n\nÂú®ÊÇ®ÁöÑ IPython ‰ºöËØù‰∏≠ÊâßË°å Python ËÑöÊú¨„ÄÇ\nËÑöÊú¨Âú®Á©∫ÂëΩÂêçÁ©∫Èó¥‰∏≠ËøêË°åÔºàÊúÄÂàùÊ≤°ÊúâÂÖàÂâçÁöÑÂØºÂÖ•ÊàñÂèòÈáèÔºâ„ÄÇ\nËÑöÊú¨‰∏≠ÁöÑÂèòÈáè„ÄÅÂáΩÊï∞ÂíåÂØºÂÖ•Âú®ÊâßË°åÂêéÂèØÂú®ÊÇ®ÁöÑ IPython shell ‰∏≠ËÆøÈóÆ„ÄÇ\n\n\n# Âú®Âêç‰∏∫ 'my_script.py' ÁöÑÊñá‰ª∂‰∏≠Ôºö\ndef my_function(x):  # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ my_function ÁöÑÂáΩÊï∞ÔºåÂÆÉÊé•Âèó‰∏Ä‰∏™ÂèÇÊï∞ x\n    return x * 2      # ËøîÂõû x ‰πò‰ª• 2 ÁöÑÁªìÊûú\n\nresult = my_function(5)  # Ë∞ÉÁî® my_function ÂáΩÊï∞Ôºå‰º†ÂÖ•ÂèÇÊï∞ 5ÔºåÂπ∂Â∞ÜÁªìÊûúËµãÂÄºÁªô result\n\n# Âú® IPython ‰∏≠Ôºö\n%run my_script.py  # ‰ΩøÁî® %run È≠îÊ≥ïÂëΩ‰ª§ËøêË°å my_script.py ËÑöÊú¨\nprint(result)      # ÊâìÂç∞ result ÂèòÈáèÁöÑÂÄºÔºåËæìÂá∫Ôºö10"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#run--i-ËÆøÈóÆÁé∞ÊúâÂèòÈáè",
    "href": "qmd/pandas3edA2cn.html#run--i-ËÆøÈóÆÁé∞ÊúâÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "%run -i: ËÆøÈóÆÁé∞ÊúâÂèòÈáè",
    "text": "%run -i: ËÆøÈóÆÁé∞ÊúâÂèòÈáè\n\n%run -i ÂÖÅËÆ∏ËÑöÊú¨ËÆøÈóÆ IPython ‰ºöËØù‰∏≠Â∑≤ÂÆö‰πâÁöÑÂèòÈáè„ÄÇ\n\n\n# Âú® IPython ‰∏≠Ôºö\nmy_var = 10  # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ my_var ÁöÑÂèòÈáèÔºåÂπ∂ËµãÂÄº‰∏∫ 10\n\n# Âú® 'script_with_access.py' Êñá‰ª∂‰∏≠Ôºö\nprint(my_var * 3)  # ÊâìÂç∞ my_var ÂèòÈáè‰πò‰ª• 3 ÁöÑÁªìÊûú\n\n# ÂõûÂà∞ IPythonÔºö\n%run -i script_with_access.py  # ‰ΩøÁî® %run -i È≠îÊ≥ïÂëΩ‰ª§ËøêË°å script_with_access.py ËÑöÊú¨ÔºåËæìÂá∫Ôºö30"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#load-Â∞ÜËÑöÊú¨ÂØºÂÖ•ÂçïÂÖÉÊ†º-jupyter",
    "href": "qmd/pandas3edA2cn.html#load-Â∞ÜËÑöÊú¨ÂØºÂÖ•ÂçïÂÖÉÊ†º-jupyter",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "%load: Â∞ÜËÑöÊú¨ÂØºÂÖ•ÂçïÂÖÉÊ†º (Jupyter)",
    "text": "%load: Â∞ÜËÑöÊú¨ÂØºÂÖ•ÂçïÂÖÉÊ†º (Jupyter)\n\nÂú® Jupyter notebooks ‰∏≠Ôºå%load Â∞ÜËÑöÊú¨Áõ¥Êé•ÂØºÂÖ•‰ª£Á†ÅÂçïÂÖÉÊ†º„ÄÇ\n\n\n# %load my_script.py  # ËøôÂ∞ÜË¢´ËÑöÊú¨ÁöÑÂÜÖÂÆπÊõøÊç¢\n\n\nÁÑ∂ÂêéÔºå‰ª£Á†ÅÂçïÂÖÉÊ†ºÁöÑÂÜÖÂÆπÂ∞ÜÊòØÔºö\n\n\n\ndef my_function(x):  # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ my_function ÁöÑÂáΩÊï∞ÔºåÂÆÉÊé•Âèó‰∏Ä‰∏™ÂèÇÊï∞ x\n    return x * 2      # ËøîÂõû x ‰πò‰ª• 2 ÁöÑÁªìÊûú\n\nresult = my_function(5)  # Ë∞ÉÁî® my_function ÂáΩÊï∞Ôºå‰º†ÂÖ•ÂèÇÊï∞ 5ÔºåÂπ∂Â∞ÜÁªìÊûúËµãÂÄºÁªô result"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰∏≠Êñ≠Ê≠£Âú®ËøêË°åÁöÑ‰ª£Á†Å",
    "href": "qmd/pandas3edA2cn.html#‰∏≠Êñ≠Ê≠£Âú®ËøêË°åÁöÑ‰ª£Á†Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏≠Êñ≠Ê≠£Âú®ËøêË°åÁöÑ‰ª£Á†Å ‚úã",
    "text": "‰∏≠Êñ≠Ê≠£Âú®ËøêË°åÁöÑ‰ª£Á†Å ‚úã\n\nÊåâ Ctrl-C ‰∏≠Êñ≠Ê≠£Âú®ËøêË°åÁöÑ‰ª£Á†ÅÔºàÊó†ËÆ∫ÊòØÊù•Ëá™ %run ËøòÊòØÈïøÊó∂Èó¥ËøêË°åÁöÑÂëΩ‰ª§Ôºâ„ÄÇ\nËøôÂ∞ÜÂºïÂèë KeyboardInterrupt ÂºÇÂ∏∏ÔºåÁ´ãÂç≥ÂÅúÊ≠¢Â§ßÂ§öÊï∞ Python Á®ãÂ∫è„ÄÇ\nÊ≥®ÊÑèÔºöÂØπ‰∫éÁºñËØëÁöÑÊâ©Â±ïÔºåCtrl-C ÂèØËÉΩ‰∏ç‰ºöÁ´ãÂç≥ÁîüÊïà„ÄÇ\nÂ¶ÇÊûú Ctrl-C Ê≤°ÊúâÁ´ãÂç≥ÂÅúÊ≠¢ÊâßË°åÔºàÁâπÂà´ÊòØÂΩìÊ∂âÂèäÁºñËØëÁöÑÊâ©Â±ïÊó∂ÔºâÔºåÊÇ®ÂèØËÉΩÈúÄË¶Å‰ΩøÁî®Êìç‰ΩúÁ≥ªÁªüÁöÑÂ∑•ÂÖ∑Ôºà‰æãÂ¶ÇÔºåWindows ‰∏äÁöÑ‰ªªÂä°ÁÆ°ÁêÜÂô®ÔºåLinux ‰∏äÁöÑ killÔºâÊù•Âº∫Âà∂ÁªàÊ≠¢ËøõÁ®ã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†Å",
    "href": "qmd/pandas3edA2cn.html#‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†Å üìã",
    "text": "‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†Å üìã\n\n%paste Âíå %cpaste ÂØπ‰∫éËøêË°å‰ªéÂÖ∂‰ªñÂú∞ÊñπÂ§çÂà∂ÁöÑ‰ª£Á†ÅÈùûÂ∏∏ÊúâÁî®ÔºàÂú® Jupyter ‰∏≠Áõ∏ÂÖ≥ÊÄßËæÉ‰ΩéÔºåÂõ†‰∏∫ Jupyter ÊîØÊåÅÁõ¥Êé•Á≤òË¥¥Ôºâ„ÄÇ\n%paste Â∞ÜÂâ™Ë¥¥ÊùøÂÜÖÂÆπ‰Ωú‰∏∫Âçï‰∏™ÂùóÊâßË°å„ÄÇ\n\n\n# Ââ™Ë¥¥Êùø‰∏äÁöÑÁ§∫‰æã‰ª£Á†ÅÔºö\nx = 5               # ÂÆö‰πâÂèòÈáè x Âπ∂ËµãÂÄº‰∏∫ 5\nif x &gt; 2:          # Â¶ÇÊûú x Â§ß‰∫é 2\n    print(\"x is greater than 2\")  # ÊâìÂç∞ \"x is greater than 2\"\n\n# Âú® IPython ‰∏≠Ôºö\n%paste  # Á´ãÂç≥ÊâßË°å‰ª£Á†Å"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†Åcpaste",
    "href": "qmd/pandas3edA2cn.html#‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†Åcpaste",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†ÅÔºö%cpaste",
    "text": "‰ªéÂâ™Ë¥¥ÊùøÊâßË°å‰ª£Á†ÅÔºö%cpaste\n\n%cpaste ÊâìÂºÄ‰∏Ä‰∏™ÁâπÊÆäÊèêÁ§∫Á¨¶ÔºåÂÖÅËÆ∏Á≤òË¥¥Â§ö‰∏™‰ª£Á†ÅÂùóÂπ∂Âú®ÊâßË°åÂâçËøõË°åÁºñËæë„ÄÇ\nÊåâ Ctrl-D ÊâßË°å„ÄÇ\nÊåâ Ctrl-C ÈÄÄÂá∫ÊèêÁ§∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩïÊÇ®ÁöÑ-ipython-ËÆ∞ÂøÜ",
    "href": "qmd/pandas3edA2cn.html#ÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩïÊÇ®ÁöÑ-ipython-ËÆ∞ÂøÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩïÔºöÊÇ®ÁöÑ IPython ËÆ∞ÂøÜ üß†",
    "text": "ÂëΩ‰ª§ÂéÜÂè≤ËÆ∞ÂΩïÔºöÊÇ®ÁöÑ IPython ËÆ∞ÂøÜ üß†\n\nIPython Áª¥Êä§Â∑≤ÊâßË°åÂëΩ‰ª§ÁöÑÊï∞ÊçÆÂ∫ì„ÄÇ ËøôÂØπ‰∫é‰ª•‰∏ãÊñπÈù¢ÂæàÊúâ‰ª∑ÂÄºÔºö\n\nÊêúÁ¥¢ÂíåÈáçÁî®ËøáÂéªÁöÑÂëΩ‰ª§„ÄÇ\nÂú®‰ºöËØù‰πãÈó¥ÊåÅ‰πÖ‰øùÂ≠òÂéÜÂè≤ËÆ∞ÂΩï„ÄÇ\nÂ∞ÜËæìÂÖ•/ËæìÂá∫ËÆ∞ÂΩïÂà∞Êñá‰ª∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÊêúÁ¥¢ÂíåÈáçÁî®ÂëΩ‰ª§",
    "href": "qmd/pandas3edA2cn.html#ÊêúÁ¥¢ÂíåÈáçÁî®ÂëΩ‰ª§",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊêúÁ¥¢ÂíåÈáçÁî®ÂëΩ‰ª§ üîé",
    "text": "ÊêúÁ¥¢ÂíåÈáçÁî®ÂëΩ‰ª§ üîé\n\nÂêë‰∏äÁÆ≠Â§¥ (Ctrl-P): Âú®ÂéÜÂè≤ËÆ∞ÂΩï‰∏≠ÂêëÂêéÊêúÁ¥¢ÔºåÂåπÈÖçÂ∑≤ÈîÆÂÖ•ÁöÑÊñáÊú¨„ÄÇ\nÂêë‰∏ãÁÆ≠Â§¥ (Ctrl-N): Âú®ÂéÜÂè≤ËÆ∞ÂΩï‰∏≠ÂêëÂâçÊêúÁ¥¢„ÄÇ\nCtrl-R: ÂèçÂêëÊêúÁ¥¢ÔºàÁ±ª‰ºº‰∫é bashÔºâ„ÄÇ ÈîÆÂÖ•Â≠óÁ¨¶‰ª•Êü•ÊâæÂåπÈÖçÁöÑÂëΩ‰ª§„ÄÇ ÈáçÂ§çÊåâ Ctrl-R ÂèØÂæ™ÁéØÊµèËßàÂåπÈÖçÈ°π„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ËæìÂÖ•ÂíåËæìÂá∫ÂèòÈáè",
    "href": "qmd/pandas3edA2cn.html#ËæìÂÖ•ÂíåËæìÂá∫ÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËæìÂÖ•ÂíåËæìÂá∫ÂèòÈáè ‚Ü©Ô∏éÔ∏è",
    "text": "ËæìÂÖ•ÂíåËæìÂá∫ÂèòÈáè ‚Ü©Ô∏éÔ∏è\n\nIPython Â≠òÂÇ®ËæìÂÖ•ÂíåËæìÂá∫‰ª•‰æø‰∫éËÆøÈóÆÔºö\n\n_ (‰∏Ä‰∏™‰∏ãÂàíÁ∫ø): ÂºïÁî®‰∏ä‰∏Ä‰∏™ËæìÂá∫„ÄÇ\n__ (‰∏§‰∏™‰∏ãÂàíÁ∫ø): ÂºïÁî®ÂÄíÊï∞Á¨¨‰∫å‰∏™ËæìÂá∫„ÄÇ\n_iX: Â∞ÜÁ¨¨ X Ë°åÁöÑËæìÂÖ•Ë°®Á§∫‰∏∫Â≠óÁ¨¶‰∏≤Ôºà‰æãÂ¶ÇÔºå_i5 Ë°®Á§∫Á¨¨ 5 Ë°åÁöÑËæìÂÖ•Ôºâ„ÄÇ\n_X: Ë°®Á§∫Á¨¨ X Ë°åÁöÑËæìÂá∫„ÄÇ\n\n\n\n2 + 2      # ËæìÂá∫Ôºö4\nresult = _  # result Áé∞Âú®ÊòØ 4\nprint(_i1)  # ÊâìÂç∞Â≠óÁ¨¶‰∏≤ \"2 + 2\""
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïhist",
    "href": "qmd/pandas3edA2cn.html#‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïhist",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïÔºö%hist",
    "text": "‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïÔºö%hist\n\n%hist: ÊâìÂç∞ËæìÂÖ•ÂéÜÂè≤ËÆ∞ÂΩïÔºåÂèØÈÄâÊã©Â∏¶ÊúâË°åÂè∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïreset",
    "href": "qmd/pandas3edA2cn.html#‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïreset",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïÔºö%reset",
    "text": "‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïÔºö%reset\n\n%reset: Ê∏ÖÈô§‰∫§‰∫íÂºèÂëΩÂêçÁ©∫Èó¥Ôºå‰ª•ÂèäÂèØÈÄâÁöÑËæìÂÖ•/ËæìÂá∫ÁºìÂ≠ò„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïxdel",
    "href": "qmd/pandas3edA2cn.html#‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïxdel",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïÔºö%xdel",
    "text": "‰ΩøÁî®ÂéÜÂè≤ËÆ∞ÂΩïÔºö%xdel\n\n%xdel variable: Âà†Èô§ÂèòÈáèÂπ∂Â∞ùËØïÊ∏ÖÈô§ IPython ÂØπÂÆÉÁöÑÂÜÖÈÉ®ÂºïÁî®„ÄÇ ËøôÂØπ‰∫éÂÜÖÂ≠òÁÆ°ÁêÜÈùûÂ∏∏ÊúâÁî®ÔºåÂ∞§ÂÖ∂ÊòØÂú®Â§ÑÁêÜÂ§ßÂûãÊï∞ÊçÆÈõÜÊó∂„ÄÇ\nÂç≥‰ΩøÂú®‰ΩøÁî® del ‰πãÂêéÔºåIPython ÁöÑËæìÂÖ•/ËæìÂá∫ÂéÜÂè≤ËÆ∞ÂΩï‰πüÂèØËÉΩ‰ºöÂ∞ÜÂ§ßÂûãÂØπË±°‰øùÁïôÂú®ÂÜÖÂ≠ò‰∏≠„ÄÇ ËØ∑Ë∞®ÊÖé‰ΩøÁî® %xdel Âíå %reset Êù•ÁºìËß£ÂÜÖÂ≠òÈóÆÈ¢ò„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰∏éÊìç‰ΩúÁ≥ªÁªü‰∫§‰∫í",
    "href": "qmd/pandas3edA2cn.html#‰∏éÊìç‰ΩúÁ≥ªÁªü‰∫§‰∫í",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏éÊìç‰ΩúÁ≥ªÁªü‰∫§‰∫í üíª",
    "text": "‰∏éÊìç‰ΩúÁ≥ªÁªü‰∫§‰∫í üíª\n\nIPython ÂÖÅËÆ∏Áõ¥Êé•‰ªé shell ‰∏éÊÇ®ÁöÑÊìç‰ΩúÁ≥ªÁªüËøõË°å‰∫§‰∫í„ÄÇ\nÊÇ®ÂèØ‰ª•ËøêË°å shell ÂëΩ‰ª§„ÄÅÊõ¥ÊîπÁõÆÂΩïÂπ∂ÊçïËé∑ÂëΩ‰ª§ËæìÂá∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ΩøÁî®-ÊâßË°å-shell-ÂëΩ‰ª§",
    "href": "qmd/pandas3edA2cn.html#‰ΩøÁî®-ÊâßË°å-shell-ÂëΩ‰ª§",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® ! ÊâßË°å Shell ÂëΩ‰ª§ üí•",
    "text": "‰ΩøÁî® ! ÊâßË°å Shell ÂëΩ‰ª§ üí•\n\nÂú®Ë°åÈ¶ñÊ∑ªÂä† ! ÂâçÁºÄ‰ª•Â∞ÜÂÖ∂‰Ωú‰∏∫ shell ÂëΩ‰ª§ÊâßË°å„ÄÇ\n\n\n!ls  # ÂàóÂá∫ÂΩìÂâçÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂ÔºàLinux/macOSÔºâ\n!dir # ÂàóÂá∫Êñá‰ª∂ÔºàWindowsÔºâ\n\n_quarto.yml  pandas3ed10cn.qmd    pandas3ed5.qmd\ncsv_mindex.csv   pandas3ed11.qmd      pandas3ed5cn.qmd\ndatasets     pandas3ed11cn.html   pandas3ed6.html\nex1.csv      pandas3ed11cn.qmd    pandas3ed6.qmd\nex1.xlsx     pandas3ed11cn_files  pandas3ed6cn.html\nex2.csv      pandas3ed12.qmd      pandas3ed6cn.qmd\nex3.txt      pandas3ed12cn.qmd    pandas3ed7.qmd\nex4.csv      pandas3ed13.html     pandas3ed7cn.html\nex5.csv      pandas3ed13.qmd      pandas3ed7cn.qmd\nex6.csv      pandas3ed13cn.qmd    pandas3ed8.qmd\nex7.csv      pandas3ed1cn.qmd     pandas3ed8cn.qmd\nexample.json     pandas3ed2.html      pandas3ed9.qmd\nexamples     pandas3ed2.qmd       pandas3ed9cn.qmd\nframe_pickle     pandas3ed2cn.qmd     pandas3edA1.qmd\nmy.css       pandas3ed3.qmd       pandas3edA1cn.qmd\nout.csv      pandas3ed3cn.qmd     pandas3edA2.qmd\npandas3ed1.qmd   pandas3ed4.qmd       pandas3edA2cn.qmd\npandas3ed10.qmd  pandas3ed4cn.qmd     pandas3edA2cn.quarto_ipynb\n_quarto.yml  pandas3ed10cn.qmd    pandas3ed5.qmd\ncsv_mindex.csv   pandas3ed11.qmd      pandas3ed5cn.qmd\ndatasets     pandas3ed11cn.html   pandas3ed6.html\nex1.csv      pandas3ed11cn.qmd    pandas3ed6.qmd\nex1.xlsx     pandas3ed11cn_files  pandas3ed6cn.html\nex2.csv      pandas3ed12.qmd      pandas3ed6cn.qmd\nex3.txt      pandas3ed12cn.qmd    pandas3ed7.qmd\nex4.csv      pandas3ed13.html     pandas3ed7cn.html\nex5.csv      pandas3ed13.qmd      pandas3ed7cn.qmd\nex6.csv      pandas3ed13cn.qmd    pandas3ed8.qmd\nex7.csv      pandas3ed1cn.qmd     pandas3ed8cn.qmd\nexample.json     pandas3ed2.html      pandas3ed9.qmd\nexamples     pandas3ed2.qmd       pandas3ed9cn.qmd\nframe_pickle     pandas3ed2cn.qmd     pandas3edA1.qmd\nmy.css       pandas3ed3.qmd       pandas3edA1cn.qmd\nout.csv      pandas3ed3cn.qmd     pandas3edA2.qmd\npandas3ed1.qmd   pandas3ed4.qmd       pandas3edA2cn.qmd\npandas3ed10.qmd  pandas3ed4cn.qmd     pandas3edA2cn.quarto_ipynb"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÊçïËé∑-shell-ËæìÂá∫",
    "href": "qmd/pandas3edA2cn.html#ÊçïËé∑-shell-ËæìÂá∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊçïËé∑ Shell ËæìÂá∫",
    "text": "ÊçïËé∑ Shell ËæìÂá∫\n\nÂ∞Ü ! ÂëΩ‰ª§ÁöÑËæìÂá∫ÂàÜÈÖçÁªô Python ÂèòÈáè„ÄÇ\n\n\nfile_list = !ls  # Â∞Ü !ls ÂëΩ‰ª§ÔºàÂàóÂá∫ÂΩìÂâçÁõÆÂΩïÊñá‰ª∂ÔºâÁöÑËæìÂá∫ËµãÂÄºÁªô file_list ÂèòÈáè\nprint(file_list)  # ÊâìÂç∞ file_list ÂèòÈáèÁöÑÂÜÖÂÆπÔºåÂç≥Êñá‰ª∂ÂàóË°®\n\n['_quarto.yml', 'csv_mindex.csv', 'datasets', 'ex1.csv', 'ex1.xlsx', 'ex2.csv', 'ex3.txt', 'ex4.csv', 'ex5.csv', 'ex6.csv', 'ex7.csv', 'example.json', 'examples', 'frame_pickle', 'my.css', 'out.csv', 'pandas3ed1.qmd', 'pandas3ed10.qmd', 'pandas3ed10cn.qmd', 'pandas3ed11.qmd', 'pandas3ed11cn.html', 'pandas3ed11cn.qmd', 'pandas3ed11cn_files', 'pandas3ed12.qmd', 'pandas3ed12cn.qmd', 'pandas3ed13.html', 'pandas3ed13.qmd', 'pandas3ed13cn.qmd', 'pandas3ed1cn.qmd', 'pandas3ed2.html', 'pandas3ed2.qmd', 'pandas3ed2cn.qmd', 'pandas3ed3.qmd', 'pandas3ed3cn.qmd', 'pandas3ed4.qmd', 'pandas3ed4cn.qmd', 'pandas3ed5.qmd', 'pandas3ed5cn.qmd', 'pandas3ed6.html', 'pandas3ed6.qmd', 'pandas3ed6cn.html', 'pandas3ed6cn.qmd', 'pandas3ed7.qmd', 'pandas3ed7cn.html', 'pandas3ed7cn.qmd', 'pandas3ed8.qmd', 'pandas3ed8cn.qmd', 'pandas3ed9.qmd', 'pandas3ed9cn.qmd', 'pandas3edA1.qmd', 'pandas3edA1cn.qmd', 'pandas3edA2.qmd', 'pandas3edA2cn.qmd', 'pandas3edA2cn.quarto_ipynb']\n\n\n\nËøîÂõûÁöÑÂØπË±°ÊòØ‰∏Ä‰∏™Ëá™ÂÆö‰πâÂàóË°®ÔºåÂÖ∂‰∏≠ÂåÖÂê´ÊéßÂà∂Âè∞ËæìÂá∫ÁöÑÂêÑÁßçÁâàÊú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#shell-ÂëΩ‰ª§‰∏≠ÁöÑ-python-ÂèòÈáè",
    "href": "qmd/pandas3edA2cn.html#shell-ÂëΩ‰ª§‰∏≠ÁöÑ-python-ÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Shell ÂëΩ‰ª§‰∏≠ÁöÑ Python ÂèòÈáèÔºö$",
    "text": "Shell ÂëΩ‰ª§‰∏≠ÁöÑ Python ÂèòÈáèÔºö$\n\n‰ΩøÁî® $ Â∞Ü Python ÂèòÈáèÁöÑÂÄºÊõøÊç¢Âà∞ shell ÂëΩ‰ª§‰∏≠„ÄÇ\n\n\nmy_directory = \"data_files\"  # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ my_directory ÁöÑÂèòÈáèÔºåÂπ∂ËµãÂÄº‰∏∫ \"data_files\"\n!ls $my_directory  # ‰ΩøÁî® !ls ÂëΩ‰ª§ÂàóÂá∫ 'data_files' ÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂ÔºåÂÖ∂‰∏≠ $my_directory ‰ºöË¢´ÊõøÊç¢‰∏∫ \"data_files\""
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Âà´Âêçshell-ÂëΩ‰ª§ÁöÑÂø´Êç∑ÊñπÂºè",
    "href": "qmd/pandas3edA2cn.html#Âà´Âêçshell-ÂëΩ‰ª§ÁöÑÂø´Êç∑ÊñπÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âà´ÂêçÔºöShell ÂëΩ‰ª§ÁöÑÂø´Êç∑ÊñπÂºè",
    "text": "Âà´ÂêçÔºöShell ÂëΩ‰ª§ÁöÑÂø´Êç∑ÊñπÂºè\n\n%alias: ‰∏∫Â∏∏Áî® shell ÂëΩ‰ª§ÂàõÂª∫Âø´Êç∑ÊñπÂºèÔºàÂà´ÂêçÔºâ„ÄÇ\n\n\n%alias ll ls -l  # ÂàõÂª∫‰∏Ä‰∏™Âà´Âêç 'll'ÔºåÁî®‰∫éÊâßË°å 'ls -l' ÂëΩ‰ª§\nll /usr/bin  # Áé∞Âú®ÂèØ‰ª•‰ΩøÁî® 'll' ÂëΩ‰ª§\n\n\nÊ≥®ÊÑèÔºöÂà´ÂêçÂú®‰ºöËØù‰πãÈó¥‰∏çÊåÅ‰πÖÔºåÈô§ÈùûÊòæÂºèÈÖçÁΩÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰π¶Á≠æÁõÆÂΩïÁöÑÂø´Êç∑ÊñπÂºè",
    "href": "qmd/pandas3edA2cn.html#‰π¶Á≠æÁõÆÂΩïÁöÑÂø´Êç∑ÊñπÂºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰π¶Á≠æÔºöÁõÆÂΩïÁöÑÂø´Êç∑ÊñπÂºè",
    "text": "‰π¶Á≠æÔºöÁõÆÂΩïÁöÑÂø´Êç∑ÊñπÂºè\n\n%bookmark: ‰∏∫ÁªèÂ∏∏ËÆøÈóÆÁöÑÁõÆÂΩïÂàõÂª∫‰π¶Á≠æ„ÄÇ\n\n\n%bookmark mydata /path/to/my/data  # ÂàõÂª∫‰∏Ä‰∏™Âêç‰∏∫ 'mydata' ÁöÑ‰π¶Á≠æÔºåÊåáÂêë '/path/to/my/data' ÁõÆÂΩï\ncd mydata       # ‰ΩøÁî® cd ÂëΩ‰ª§Ë∑≥ËΩ¨Âà∞‰π¶Á≠æ 'mydata' ÊâÄÊåáÂêëÁöÑÁõÆÂΩï\n%bookmark -l    # ÂàóÂá∫ÊâÄÊúâ‰π¶Á≠æ\n\n\n‰π¶Á≠æÂú®‰ºöËØù‰πãÈó¥ÊòØÊåÅ‰πÖÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁõÆÂΩïÂéÜÂè≤ËÆ∞ÂΩï",
    "href": "qmd/pandas3edA2cn.html#ÁõÆÂΩïÂéÜÂè≤ËÆ∞ÂΩï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁõÆÂΩïÂéÜÂè≤ËÆ∞ÂΩï",
    "text": "ÁõÆÂΩïÂéÜÂè≤ËÆ∞ÂΩï\n\n%cd: Êõ¥ÊîπÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï„ÄÇ\n%pwd: ËøîÂõûÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï„ÄÇ\n%pushd: Â∞ÜÂΩìÂâçÁõÆÂΩïÊîæÁΩÆÂú®Â†ÜÊ†à‰∏äÂπ∂Êõ¥Êîπ‰∏∫ÁõÆÊ†áÁõÆÂΩï„ÄÇ\n%popd: Êõ¥Êîπ‰∏∫‰ªéÂ†ÜÊ†àÈ°∂ÈÉ®ÂºπÂá∫ÁöÑÁõÆÂΩï„ÄÇ\n%dirs: ËøîÂõûÂåÖÂê´ÂΩìÂâçÁõÆÂΩïÂ†ÜÊ†àÁöÑÂàóË°®„ÄÇ\n%dhist: ÊâìÂç∞ËÆøÈóÆËøáÁöÑÁõÆÂΩïÁöÑÂéÜÂè≤ËÆ∞ÂΩï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁéØÂ¢ÉÂèòÈáè",
    "href": "qmd/pandas3edA2cn.html#ÁéØÂ¢ÉÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁéØÂ¢ÉÂèòÈáè",
    "text": "ÁéØÂ¢ÉÂèòÈáè\n\n%env: ‰ª•Â≠óÂÖ∏ÂΩ¢ÂºèËøîÂõûÁ≥ªÁªüÁéØÂ¢ÉÂèòÈáè„ÄÇ\n%matplotlib: ÈÖçÁΩÆmatplotlib ÈõÜÊàêÈÄâÈ°π"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ËΩØ‰ª∂ÂºÄÂèëÂ∑•ÂÖ∑",
    "href": "qmd/pandas3edA2cn.html#ËΩØ‰ª∂ÂºÄÂèëÂ∑•ÂÖ∑",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËΩØ‰ª∂ÂºÄÂèëÂ∑•ÂÖ∑ üõ†Ô∏è",
    "text": "ËΩØ‰ª∂ÂºÄÂèëÂ∑•ÂÖ∑ üõ†Ô∏è\n\nIPython ‰∏ç‰ªÖÂØπ‰∫§‰∫íÂºèÊé¢Á¥¢Êúâ‰ª∑ÂÄºÔºåËÄå‰∏îÂØπËΩØ‰ª∂ÂºÄÂèë‰πüÊúâ‰ª∑ÂÄº„ÄÇ\nÂÖ≥ÈîÆÂ∑•ÂÖ∑ÂåÖÊã¨Ôºö\n\n‰∫§‰∫íÂºèË∞ÉËØïÂô®Ôºö pdb ÁöÑÂ¢ûÂº∫ÁâàÊú¨„ÄÇ\n‰ª£Á†ÅËÆ°Êó∂Ôºö %time Âíå %timeit„ÄÇ\nÊÄßËÉΩÂàÜÊûêÔºö %prun Âíå %lprun„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰∫§‰∫íÂºèË∞ÉËØïÂô®debug",
    "href": "qmd/pandas3edA2cn.html#‰∫§‰∫íÂºèË∞ÉËØïÂô®debug",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫§‰∫íÂºèË∞ÉËØïÂô®Ôºö%debug üêû",
    "text": "‰∫§‰∫íÂºèË∞ÉËØïÂô®Ôºö%debug üêû\n\n%debug: Âú®ÂºÇÂ∏∏ÂèëÁîüÂêéÊøÄÊ¥ªË∞ÉËØïÂô®Ôºà‰∫ãÂêéË∞ÉËØïÔºâ„ÄÇ\nÂÆÉÂ∞ÜÊÇ®ÁΩÆ‰∫éÈîôËØØÂèëÁîüÁöÑÂ†ÜÊ†àÂ∏ß‰∏≠„ÄÇ\nÈÄöËøáÈÄâÈ°πÂç°Ë°•ÂÖ®„ÄÅËØ≠Ê≥ïÈ´ò‰∫ÆÂíåÂõûÊ∫Ø‰∏ä‰∏ãÊñáÁ≠âÂäüËÉΩËøõË°å‰∫ÜÂ¢ûÂº∫„ÄÇ\n\n\n# ÂÅáËÆæ some_script.py ÂåÖÂê´ÈîôËØØÔºö\n%run some_script.py  # ËøêË°å some_script.py ËÑöÊú¨\n%debug  # Âú®ÈîôËØØÂèëÁîüÂ§ÑËøõÂÖ•Ë∞ÉËØïÂô®"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Ë∞ÉËØïÂô®ÂëΩ‰ª§---ÂØºËà™",
    "href": "qmd/pandas3edA2cn.html#Ë∞ÉËØïÂô®ÂëΩ‰ª§---ÂØºËà™",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ë∞ÉËØïÂô®ÂëΩ‰ª§ üß≠ - ÂØºËà™",
    "text": "Ë∞ÉËØïÂô®ÂëΩ‰ª§ üß≠ - ÂØºËà™\n\nÂú®Ë∞ÉËØïÂô®‰∏≠Ôºö\n\nu (up): Âú®Ë∞ÉÁî®Â†ÜÊ†à‰∏≠Âêë‰∏äÁßªÂä®„ÄÇ\nd (down): Âú®Ë∞ÉÁî®Â†ÜÊ†à‰∏≠Âêë‰∏ãÁßªÂä®„ÄÇ\ns (step): ËøõÂÖ•ÂáΩÊï∞Ë∞ÉÁî®„ÄÇ\nn (next): ÊâßË°åÂΩìÂâçË°åÂπ∂ÁßªÂä®Âà∞‰∏ã‰∏ÄË°åÔºàÂú®Âêå‰∏ÄÁ∫ßÂà´Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Ë∞ÉËØïÂô®ÂëΩ‰ª§---ÊéßÂà∂ÊµÅ",
    "href": "qmd/pandas3edA2cn.html#Ë∞ÉËØïÂô®ÂëΩ‰ª§---ÊéßÂà∂ÊµÅ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ë∞ÉËØïÂô®ÂëΩ‰ª§ üß≠ - ÊéßÂà∂ÊµÅ",
    "text": "Ë∞ÉËØïÂô®ÂëΩ‰ª§ üß≠ - ÊéßÂà∂ÊµÅ\n\nc (continue): ÁªßÁª≠ÊâßË°åÔºåÁõ¥Âà∞‰∏ã‰∏Ä‰∏™Êñ≠ÁÇπÊàñÁ®ãÂ∫èÁªìÊùü„ÄÇ\nq (quit): ÈÄÄÂá∫Ë∞ÉËØïÂô®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Ë∞ÉËØïÂô®ÂëΩ‰ª§---Ê£ÄÊü•",
    "href": "qmd/pandas3edA2cn.html#Ë∞ÉËØïÂô®ÂëΩ‰ª§---Ê£ÄÊü•",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ë∞ÉËØïÂô®ÂëΩ‰ª§ üß≠ - Ê£ÄÊü•",
    "text": "Ë∞ÉËØïÂô®ÂëΩ‰ª§ üß≠ - Ê£ÄÊü•\n\np variable: ÊâìÂç∞ variable ÁöÑÂÄº„ÄÇ\n!variable: Ê£ÄÊü•ÂèòÈáèÂÜÖÂÆπÔºåÂΩìÂèòÈáèÂêç‰∏éË∞ÉËØïÂô®ÂëΩ‰ª§Áõ∏ÂêåÊó∂ÂæàÊúâÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#pdb-Ëá™Âä®Ë∞ÉËØï",
    "href": "qmd/pandas3edA2cn.html#pdb-Ëá™Âä®Ë∞ÉËØï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "%pdb: Ëá™Âä®Ë∞ÉËØï",
    "text": "%pdb: Ëá™Âä®Ë∞ÉËØï\n\n%pdb: Âú®‰ªª‰ΩïÂºÇÂ∏∏ÂèëÁîüÊó∂Ëá™Âä®ËøõÂÖ•Ë∞ÉËØïÂô®„ÄÇ ËøôÂØπ‰∫éË∞ÉËØïÈùûÂ∏∏ÊúâÁî®ÔºÅ\n\n\n%pdb on  # ÂêØÁî®Ëá™Âä®Ë∞ÉËØï\n# Áé∞Âú®Ôºå‰ªª‰ΩïÈîôËØØÈÉΩÂ∞ÜËá™Âä®ÂêØÂä®Ë∞ÉËØïÂô®\n%pdb off # Á¶ÅÁî®Ëá™Âä®Ë∞ÉËØï"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ΩøÁî®Ë∞ÉËØïÂô®ËøõË°åÂºÄÂèë",
    "href": "qmd/pandas3edA2cn.html#‰ΩøÁî®Ë∞ÉËØïÂô®ËøõË°åÂºÄÂèë",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî®Ë∞ÉËØïÂô®ËøõË°åÂºÄÂèë",
    "text": "‰ΩøÁî®Ë∞ÉËØïÂô®ËøõË°åÂºÄÂèë\n\n%run -d script.py: Âú®ËøêË°åËÑöÊú¨‰πãÂâçÂêØÂä®Ë∞ÉËØïÂô®„ÄÇ ÈîÆÂÖ• s ‰ª•ËøõÂÖ•ËÑöÊú¨„ÄÇ\n%run -d -b line_number script.py: Âú®ÊåáÂÆöÁöÑ line_number Â§ÑËÆæÁΩÆÊñ≠ÁÇπ„ÄÇ\nset_trace(): ‰∏Ä‰∏™‚ÄúÁ©∑‰∫∫ÁöÑÊñ≠ÁÇπ‚ÄùÂáΩÊï∞Ôºõ Â∞ÜÂÖ∂ÊèíÂÖ•Âà∞ÊÇ®ÁöÑ‰ª£Á†Å‰∏≠‰ª•ÂàõÂª∫‰∏¥Êó∂Êñ≠ÁÇπ„ÄÇ\ndebug(function, *args, **kwargs): ËΩªÊùæËøõÂÖ•ÁâπÂÆöÂáΩÊï∞Ë∞ÉÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#set_trace-Âíå-debug-ÂáΩÊï∞",
    "href": "qmd/pandas3edA2cn.html#set_trace-Âíå-debug-ÂáΩÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "set_trace() Âíå debug() ÂáΩÊï∞",
    "text": "set_trace() Âíå debug() ÂáΩÊï∞\n\nfrom IPython.core.debugger import Pdb  # ‰ªé IPython.core.debugger Ê®°ÂùóÂØºÂÖ• Pdb Á±ª\nimport sys # ÂØºÂÖ• sys Ê®°Âùó\n\ndef set_trace():  # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ set_trace ÁöÑÂáΩÊï∞\n    Pdb().set_trace(sys._getframe().f_back)  # ÂàõÂª∫‰∏Ä‰∏™ Pdb ÂØπË±°ÔºåÂπ∂Âú®Ë∞ÉÁî® set_trace ÁöÑ‰ΩçÁΩÆËÆæÁΩÆ‰∏Ä‰∏™Ë∑üË∏™ÁÇπ\n\ndef debug(f, *args, **kwargs):  # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ debug ÁöÑÂáΩÊï∞ÔºåÂÆÉÊé•Âèó‰∏Ä‰∏™ÂáΩÊï∞ f ‰ª•Âèä‰ªªÊÑèÊï∞ÈáèÁöÑ‰ΩçÁΩÆÂèÇÊï∞ÂíåÂÖ≥ÈîÆÂ≠óÂèÇÊï∞\n    pdb = Pdb()  # ÂàõÂª∫‰∏Ä‰∏™ Pdb ÂØπË±°\n    return pdb.runcall(f, *args, **kwargs)  # ‰ΩøÁî® pdb.runcall Ë∞ÉÁî®ÂáΩÊï∞ fÔºåÂπ∂‰º†ÂÖ•ÂèÇÊï∞ÔºåËøôÂ∞ÜÂÖÅËÆ∏ÊÇ®ÂçïÊ≠•Ë∞ÉËØïÂáΩÊï∞ f\n\n\nÂú®‰ª£Á†Å‰∏≠Ë∞ÉÁî® set_trace() Êù•ËÆæÁΩÆÊñ≠ÁÇπ„ÄÇ\ndebug(f, *args, **kwargs) ÂÖÅËÆ∏ÈÄöËøá‰º†ÂÖ•ÂáΩÊï∞ f ÂèäÂÖ∂ÂèÇÊï∞Êù•ÂçïÊ≠•Ë∞ÉËØïÂáΩÊï∞ f„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#‰ª£Á†ÅËÆ°Êó∂time-Âíå-timeit-ÂõûÈ°æ",
    "href": "qmd/pandas3edA2cn.html#‰ª£Á†ÅËÆ°Êó∂time-Âíå-timeit-ÂõûÈ°æ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ª£Á†ÅËÆ°Êó∂Ôºö%time Âíå %timeit (ÂõûÈ°æ)",
    "text": "‰ª£Á†ÅËÆ°Êó∂Ôºö%time Âíå %timeit (ÂõûÈ°æ)\n\n%time: ÊµãÈáèËØ≠Âè•ÁöÑÊâßË°åÊó∂Èó¥‰∏ÄÊ¨°„ÄÇ\n%timeit: Â§öÊ¨°ÊµãÈáèÊâßË°åÊó∂Èó¥Ôºå‰ª•Êèê‰æõÊõ¥ÂáÜÁ°ÆÁöÑÂπ≥ÂùáÂÄº„ÄÇ ÂÆÉÈùûÂ∏∏ÈÄÇÂêàÈùûÂ∏∏Áü≠ÁöÑÊìç‰Ωú„ÄÇ\n\n\nmy_list = list(range(100000))  # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ 0 Âà∞ 99999 ÁöÑÊï¥Êï∞ÂàóË°®\n%time for _ in range(100):  sum(my_list)  # ‰ΩøÁî® %time ÊµãÈáèÂæ™ÁéØ 100 Ê¨°ËÆ°ÁÆó my_list ÊÄªÂíåÁöÑÊó∂Èó¥\n%timeit sum(my_list)  # ‰ΩøÁî® %timeit ÊµãÈáèËÆ°ÁÆó my_list ÊÄªÂíåÁöÑÂπ≥ÂùáÊó∂Èó¥\n\nCPU times: user 76.1 ms, sys: 0 ns, total: 76.1 ms\nWall time: 75.8 ms\n753 Œºs ¬± 326 ns per loop (mean ¬± std. dev. of 7 runs, 1,000 loops each)"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Âü∫Êú¨ÊÄßËÉΩÂàÜÊûêprun-Âíå-run--p",
    "href": "qmd/pandas3edA2cn.html#Âü∫Êú¨ÊÄßËÉΩÂàÜÊûêprun-Âíå-run--p",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫Êú¨ÊÄßËÉΩÂàÜÊûêÔºö%prun Âíå %run -p üïµÔ∏è‚Äç‚ôÄÔ∏è",
    "text": "Âü∫Êú¨ÊÄßËÉΩÂàÜÊûêÔºö%prun Âíå %run -p üïµÔ∏è‚Äç‚ôÄÔ∏è\n\nÊÄßËÉΩÂàÜÊûêÊè≠Á§∫‰∫ÜÊÇ®ÁöÑ‰ª£Á†ÅÂ∞ÜÊó∂Èó¥Ëä±Âú®Âì™Èáå„ÄÇ\n%prun statement: ÂàÜÊûêÂçï‰∏™ Python ËØ≠Âè•„ÄÇ\n%run -p script.py: ÂàÜÊûêÊï¥‰∏™ËÑöÊú¨„ÄÇ\nËøô‰∫õÂëΩ‰ª§Âú®ÂÜÖÈÉ®‰ΩøÁî® cProfile„ÄÇ\nËæìÂá∫ÁªìÊûúÂåÖÊã¨‰ª•‰∏ãÂÖ≥ÈîÆÊåáÊ†áÔºö\n\nncalls: Ë∞ÉÁî®Ê¨°Êï∞„ÄÇ\ntottime: ÂáΩÊï∞‰∏≠Ëä±Ë¥πÁöÑÊÄªÊó∂Èó¥Ôºà‰∏çÂåÖÊã¨Â≠êÂáΩÊï∞Ë∞ÉÁî®Ôºâ„ÄÇ\npercall: ÊØèÊ¨°Ë∞ÉÁî®ÁöÑÊó∂Èó¥ (tottime / ncalls)„ÄÇ\ncumtime: ÂáΩÊï∞ÂèäÂÖ∂Â≠êÂáΩÊï∞‰∏≠ÁöÑÁ¥ØÁßØÊó∂Èó¥„ÄÇ\npercall: ÊØèÊ¨°Ë∞ÉÁî®ÁöÑÁ¥ØÁßØÊó∂Èó¥ (cumtime / ncalls)„ÄÇ\nfilename:lineno(function): ÂáΩÊï∞‰ΩçÁΩÆ„ÄÇ\n\n\n\n#Á§∫‰æã\ndef slow_function():   # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ slow_function ÁöÑÂáΩÊï∞\n    result = []        # ÂàùÂßãÂåñ‰∏Ä‰∏™Á©∫ÂàóË°® result\n    for i in range(1000): # Âæ™ÁéØ 1000 Ê¨°\n        result.append(i * 2)  # Â∞Ü i ‰πò‰ª• 2 ÁöÑÁªìÊûúÊ∑ªÂä†Âà∞ result ÂàóË°®‰∏≠\n    return result   # ËøîÂõû result ÂàóË°®\n\n%prun slow_function()   # ‰ΩøÁî® %prun ÂàÜÊûê slow_function ÂáΩÊï∞ÁöÑÊÄßËÉΩ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#Ë°åÁ∫ßÊÄßËÉΩÂàÜÊûêlprun",
    "href": "qmd/pandas3edA2cn.html#Ë°åÁ∫ßÊÄßËÉΩÂàÜÊûêlprun",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ë°åÁ∫ßÊÄßËÉΩÂàÜÊûêÔºö%lprun üìè",
    "text": "Ë°åÁ∫ßÊÄßËÉΩÂàÜÊûêÔºö%lprun üìè\n\n%lprun: Êèê‰æõÁâπÂÆöÂáΩÊï∞ÁöÑÈÄêË°åÊÄßËÉΩÂàÜÊûêÔºåÊèê‰æõÊØî %prun Êõ¥ËØ¶ÁªÜÁöÑ‰ø°ÊÅØ„ÄÇ\nÈúÄË¶Å line_profiler IPython Êâ©Â±ï„ÄÇ\n\nÂêØÁî®ÔºöÂ∞Ü c.InteractiveShellApp.extensions = ['line_profiler'] Ê∑ªÂä†Âà∞ ipython_config.py Êàñ‰ΩøÁî® %load_ext line_profiler„ÄÇ\n\nËØ≠Ê≥ïÔºö%lprun -f function1 -f function2 statement_to_profile\nËæìÂá∫ÂåÖÊã¨Ôºö\n\nLine #: Ë°åÂè∑„ÄÇ\nHits: ËØ•Ë°åË¢´ÊâßË°åÁöÑÊ¨°Êï∞„ÄÇ\nTime: Âú®ËØ•Ë°å‰∏äËä±Ë¥πÁöÑÊÄªÊó∂Èó¥Ôºà‰ª•ËÆ°Êó∂Âô®Âçï‰ΩçÔºâ„ÄÇ\nPer Hit: ÊØèÊ¨°ÊâßË°åËØ•Ë°åÁöÑÊó∂Èó¥„ÄÇ\n% Time: Âú®ËØ•Ë°å‰∏äËä±Ë¥πÁöÑÊó∂Èó¥ÁôæÂàÜÊØî„ÄÇ\nLine Contents: ËØ•Ë°åÁöÑÊ∫ê‰ª£Á†Å„ÄÇ\n\n\n\n# ÂÅáËÆæ line_profiler Â∑≤ÂêØÁî®‰∏î prof_mod.py Â≠òÂú®Ôºö\nfrom prof_mod import add_and_sum, call_function # ‰ªé prof_mod Ê®°ÂùóÂØºÂÖ• add_and_sum Âíå call_function ÂáΩÊï∞ÔºàÁ§∫‰æãÊñá‰ª∂ÔºåÊÇ®ÈúÄË¶ÅÂàõÂª∫ÂÆÉÔºâ\n%lprun -f add_and_sum call_function()  # ‰ΩøÁî® %lprun ÂØπ add_and_sum ÂáΩÊï∞ËøõË°åÈÄêË°åÊÄßËÉΩÂàÜÊûêÔºåÂàÜÊûêËØ≠Âè•‰∏∫ call_function()"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß---ÈáçÊñ∞Âä†ËΩΩ",
    "href": "qmd/pandas3edA2cn.html#È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß---ÈáçÊñ∞Âä†ËΩΩ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß üìù - ÈáçÊñ∞Âä†ËΩΩ",
    "text": "È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß üìù - ÈáçÊñ∞Âä†ËΩΩ\n\nÈáçÊñ∞Âä†ËΩΩÊ®°Âùó‰æùËµñÈ°πÔºö\n\nÈóÆÈ¢òÔºöÂØπÂØºÂÖ•Ê®°ÂùóÁöÑÊõ¥Êîπ‰∏ç‰ºöËá™Âä®ÂèçÊò†„ÄÇ\nËß£ÂÜ≥ÊñπÊ°àÔºö\n\nimportlib.reload(module): ÈáçÊñ∞Âä†ËΩΩÂçï‰∏™Ê®°Âùó„ÄÇ\ndreload(module) (IPython ÁâπÊúâ): Ê∑±Â∫¶ÔºàÈÄíÂΩíÔºâÈáçÊñ∞Âä†ËΩΩÊ®°ÂùóÂèäÂÖ∂‰æùËµñÈ°π ‚Äì ‰∏Ä‰∏™Êõ¥Âº∫Â§ßÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß---‰ª£Á†ÅËÆæËÆ°",
    "href": "qmd/pandas3edA2cn.html#È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß---‰ª£Á†ÅËÆæËÆ°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß üìù - ‰ª£Á†ÅËÆæËÆ°",
    "text": "È´òÊïà‰ª£Á†ÅÂºÄÂèëÊäÄÂ∑ß üìù - ‰ª£Á†ÅËÆæËÆ°\n\n‰øùÊåÅÁõ∏ÂÖ≥ÂØπË±°ÂíåÊï∞ÊçÆÂ≠òÊ¥ª: ÈÅøÂÖçÂ∞ÜÊâÄÊúâ‰ª£Á†ÅÈÉΩÊîæÂú® main() ÂáΩÊï∞‰∏≠„ÄÇ Â∞ÜÈáçË¶ÅÂèòÈáè‰øùÁïôÂú®È°∂Â±ÇÔºå‰ª•‰æøÂú® IPython ‰∏≠ËΩªÊùæÊ£ÄÊü•„ÄÇ\nÊâÅÂπ≥Âåñ‰ºò‰∫éÂµåÂ•ó: Â∞ΩÈáèÂáèÂ∞ëÊ∑±Â∫¶ÂµåÂ•óÁöÑ‰ª£Á†ÅÁªìÊûÑ„ÄÇ ËøôÁÆÄÂåñ‰∫ÜË∞ÉËØïÂíåÊµãËØï„ÄÇ\nÂÖãÊúçÂØπËæÉÈïøÊñá‰ª∂ÁöÑÊÅêÊÉß: Âú®ÂêàÁêÜËåÉÂõ¥ÂÜÖÔºåËæÉÈïø„ÄÅÁªÑÁªáËâØÂ•ΩÁöÑÊ®°ÂùóÈÄöÂ∏∏‰ºò‰∫éËÆ∏Â§öÂ∞èÂûã„ÄÅÁõ∏‰∫íËøûÊé•ÁöÑÊ®°ÂùóÔºàÂáèÂ∞ëÈáçÊñ∞Âä†ËΩΩÂºÄÈîÄÔºâ„ÄÇ\n‰øùÊåÅÈ´òÂÜÖËÅö: Âú®Ê®°ÂùóÂÜÖÂ∞ÜÁõ∏ÂÖ≥‰ª£Á†ÅÈÄªËæëÂú∞ÂàÜÁªÑÂú®‰∏ÄËµ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ipython-ÈÖçÁΩÆÊñá‰ª∂ÂíåÈÖçÁΩÆ",
    "href": "qmd/pandas3edA2cn.html#ipython-ÈÖçÁΩÆÊñá‰ª∂ÂíåÈÖçÁΩÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPython ÈÖçÁΩÆÊñá‰ª∂ÂíåÈÖçÁΩÆ ‚öôÔ∏è",
    "text": "IPython ÈÖçÁΩÆÊñá‰ª∂ÂíåÈÖçÁΩÆ ‚öôÔ∏è\n\n‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂ (ipython_config.py) Ëá™ÂÆö‰πâ IPython ÁöÑÂ§ñËßÇÂíåË°å‰∏∫„ÄÇ\nËøô‰∫õÊñá‰ª∂ÈÄöÂ∏∏‰Ωç‰∫éÊÇ®ÁöÑ IPython ÁõÆÂΩï‰∏≠ÔºàÈÄöÂ∏∏ÊòØ ~/.ipython/profile_default/Ôºâ„ÄÇ\nÊÇ®ÂèØ‰ª•‰∏∫‰∏çÂêåÁöÑÈ°πÁõÆÊàñËÆæÁΩÆÂàõÂª∫Â§ö‰∏™ÈÖçÁΩÆÊñá‰ª∂„ÄÇ\nÂàõÂª∫Êñ∞ÈÖçÁΩÆÊñá‰ª∂Ôºöipython profile create my_profile\n‰ΩøÁî®ÁâπÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêØÂä® IPythonÔºöipython --profile=my_profile\nÊ≥®ÊÑèÔºöJupyter ÊúâËá™Â∑±Áã¨Á´ãÁöÑÈÖçÁΩÆÁ≥ªÁªü„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÁªìËÆ∫",
    "href": "qmd/pandas3edA2cn.html#ÁªìËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªìËÆ∫ üìñ",
    "text": "ÁªìËÆ∫ üìñ\n\nIPython Âíå Jupyter ÊòØÁî®‰∫é‰∫§‰∫íÂºèÊé¢Á¥¢ÂíåËΩØ‰ª∂ÂºÄÂèëÁöÑÂº∫Â§ßÂ∑•ÂÖ∑„ÄÇ\nÊéåÊè°ÂÆÉ‰ª¨ÁöÑÂäüËÉΩ ‚Äì Âø´Êç∑ÈîÆ„ÄÅÈ≠îÊ≥ïÂëΩ‰ª§„ÄÅË∞ÉËØïÂô®„ÄÅÊÄßËÉΩÂàÜÊûêÂô®ÂíåÈÖçÁΩÆÈÄâÈ°π ‚Äì Â∞ÜÊòæËëóÊèêÈ´òÊÇ®ÁöÑÂ∑•‰ΩúÊïàÁéá„ÄÇ\nËøõË°åÂÆûÈ™å‰ª•ÊâæÂà∞ÊúÄÈÄÇÂêàÊÇ®‰∏™‰∫∫È£éÊ†ºÁöÑÂ∑•‰ΩúÊµÅÁ®ãÔºÅ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3edA2cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nÊàë‰ª¨Êé¢Á¥¢‰∫ÜÈ´òÁ∫ß IPython ÂäüËÉΩÔºåÊâ©Â±ï‰∫ÜÂü∫Êú¨ÁöÑ shell ‰∫§‰∫í„ÄÇ\nÊàë‰ª¨‰ªãÁªç‰∫ÜÈîÆÁõòÂø´Êç∑ÈîÆ„ÄÅÈ≠îÊ≥ïÂëΩ‰ª§‰ª•Âèä‰∏éÊìç‰ΩúÁ≥ªÁªüÁöÑ‰∫§‰∫í„ÄÇ\nÊàë‰ª¨Á†îÁ©∂‰∫ÜÁî®‰∫éË∞ÉËØï„ÄÅ‰ª£Á†ÅËÆ°Êó∂ÂíåÊÄßËÉΩÂàÜÊûêÁöÑÂ∑•ÂÖ∑„ÄÇ\nÊàë‰ª¨ËÆ®ËÆ∫‰∫ÜÁºñÂÜôÈíàÂØπ IPython ‰∏≠ÁöÑ‰∫§‰∫íÂºèÂºÄÂèëËøõË°å‰ºòÂåñÁöÑ‰ª£Á†ÅÁöÑÊäÄÂ∑ß„ÄÇ\nÊàë‰ª¨‰ªãÁªç‰∫Ü IPython ÈÖçÁΩÆÊñá‰ª∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3edA2cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3edA2cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î\n\nÊÇ®È¢ÑËÆ°Âì™‰∫õ IPython ÂäüËÉΩÂú®ÊÇ®ÁöÑÂ∑•‰Ωú‰∏≠‰ºöÊúÄÊúâÁî®Ôºü\nÊÇ®Â¶Ç‰ΩïÂ∞ÜËøô‰∫õÂ∑•ÂÖ∑ÈõÜÊàêÂà∞ÊÇ®ÁöÑÊï∞ÊçÆÂàÜÊûêÂíåÁºñÁ†Å‰æãÁ®ã‰∏≠Ôºü\nËÄÉËôëÂàõÂª∫‰∏Ä‰∏™Ëá™ÂÆö‰πâ IPython ÈÖçÁΩÆÊñá‰ª∂Êù•ÁÆÄÂåñÊÇ®ÁªèÂ∏∏ÊâßË°åÁöÑ‰ªªÂä°„ÄÇ\n‰∏é‰º†ÁªüÁöÑ Python IDE Áõ∏ÊØîÔºå‰ΩøÁî® IPython ÊúâÂì™‰∫õ‰ºòÁÇπÂíåÁº∫ÁÇπÔºü\n‚ÄúÊâÅÂπ≥Âåñ‰ºò‰∫éÂµåÂ•ó‚ÄùÂíå‚ÄúÂÖãÊúçÂØπËæÉÈïøÊñá‰ª∂ÁöÑÊÅêÊÉß‚ÄùÁöÑÂéüÂàôÂ¶Ç‰ΩïÂ∫îÁî®‰∫éÊÇ®Ëá™Â∑±ÁöÑÁºñÁ†ÅÈ£éÊ†ºÔºü\nÊÇ®Â¶Ç‰Ωï‰ΩøÁî®Ë∞ÉËØïÂô®ÂíåÊÄßËÉΩÂàÜÊûêÂô®Êù•ÊèêÈ´ò‰ª£Á†ÅÁöÑÊ≠£Á°ÆÊÄßÂíåÊïàÁéáÔºü\n%run ‰∏éÁÆÄÂçïÂú∞‰ªéÂëΩ‰ª§Ë°åÊâßË°å Python ËÑöÊú¨Êúâ‰Ωï‰∏çÂêåÔºü"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html",
    "href": "qmd/pandas3ed13cn.html",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "",
    "text": "Êàë‰ª¨Â∑≤ÁªèÂà∞ËææÊúÄÂêé‰∏ÄÁ´†‰∫ÜÔºÅü•≥\nÈáçÁÇπÔºöÂ∞ÜÊï∞ÊçÆÂàÜÊûêÊäÄÊúØÂ∫îÁî®‰∫éÁúüÂÆû‰∏ñÁïåÁöÑÊï∞ÊçÆÈõÜ„ÄÇ\nÁõÆÊ†áÔºö‰ªéÂéüÂßãÊï∞ÊçÆ‰∏≠ÊèêÂèñÊúâÊÑè‰πâÁöÑËßÅËß£„ÄÇ\nÊºîÁ§∫ÁöÑÊäÄÊúØÂÖ∑ÊúâÂπøÊ≥õÁöÑÈÄÇÁî®ÊÄß„ÄÇ\nÊï∞ÊçÆÈõÜÂèØÂú®Êú¨‰π¶ÁöÑ GitHub/Gitee Â≠òÂÇ®Â∫ì‰∏≠ÊâæÂà∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Á¨¨-13-Á´†---Êï∞ÊçÆÂàÜÊûêÁ§∫‰æã",
    "href": "qmd/pandas3ed13cn.html#Á¨¨-13-Á´†---Êï∞ÊçÆÂàÜÊûêÁ§∫‰æã",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "",
    "text": "Êàë‰ª¨Â∑≤ÁªèÂà∞ËææÊúÄÂêé‰∏ÄÁ´†‰∫ÜÔºÅü•≥\nÈáçÁÇπÔºöÂ∞ÜÊï∞ÊçÆÂàÜÊûêÊäÄÊúØÂ∫îÁî®‰∫éÁúüÂÆû‰∏ñÁïåÁöÑÊï∞ÊçÆÈõÜ„ÄÇ\nÁõÆÊ†áÔºö‰ªéÂéüÂßãÊï∞ÊçÆ‰∏≠ÊèêÂèñÊúâÊÑè‰πâÁöÑËßÅËß£„ÄÇ\nÊºîÁ§∫ÁöÑÊäÄÊúØÂÖ∑ÊúâÂπøÊ≥õÁöÑÈÄÇÁî®ÊÄß„ÄÇ\nÊï∞ÊçÆÈõÜÂèØÂú®Êú¨‰π¶ÁöÑ GitHub/Gitee Â≠òÂÇ®Â∫ì‰∏≠ÊâæÂà∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Êï∞ÊçÆÊåñÊéòÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†",
    "href": "qmd/pandas3ed13cn.html#Êï∞ÊçÆÊåñÊéòÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Êï∞ÊçÆÊåñÊéò„ÄÅÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†",
    "text": "Êï∞ÊçÆÊåñÊéò„ÄÅÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†\n\nÊï∞ÊçÆÊåñÊéò„ÄÅÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†Êúâ‰∏Ä‰∏™ÂÖ±ÂêåÁöÑÁõÆÊ†áÔºö‰ªéÊï∞ÊçÆ‰∏≠ÊèêÂèñÊúâ‰ª∑ÂÄºÁöÑËßÅËß£Âπ∂ÂÅöÂá∫È¢ÑÊµã„ÄÇ\nÊ†∏ÂøÉÂå∫Âà´Âú®‰∫éÂÆÉ‰ª¨ÂÆûÁé∞Ëøô‰∏ÄÁõÆÊ†áÁöÑÊñπÂºè„ÄÇ\n\n\n\n\n\n\ngraph LR\n    A[Êï∞ÊçÆÊåñÊéò] --&gt; C(ÂÖ±ÂêåÁÇπ: Ê¥ûÂØü‰∏éÈ¢ÑÊµã)\n    B[Êú∫Âô®Â≠¶‰π†] --&gt; C\n    D[ÁªüËÆ°Â≠¶‰π†] --&gt; C"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Êï∞ÊçÆÊåñÊéò",
    "href": "qmd/pandas3ed13cn.html#Êï∞ÊçÆÊåñÊéò",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Êï∞ÊçÆÊåñÊéò ‚õèÔ∏è",
    "text": "Êï∞ÊçÆÊåñÊéò ‚õèÔ∏è\n\nÂÆö‰πâÔºö Âú®Â§ßÂûãÊï∞ÊçÆÈõÜ‰∏≠ÂèëÁé∞Ê®°Âºè„ÄÅÂºÇÂ∏∏ÂíåÂÖ≥Á≥ªÔºå‰ª•È¢ÑÊµãÁªìÊûú„ÄÇ\nÈáçÁÇπÔºö ÂèëÁé∞‰ª•ÂâçÊú™Áü•ÁöÑÊ®°Âºè„ÄÇÊé¢Á¥¢ÂíåÂèëÁé∞ÔºÅ\nÊäÄÊúØÔºö ÁªìÂêà‰∫ÜÊú∫Âô®Â≠¶‰π†„ÄÅÁªüËÆ°Â≠¶ÂíåÊï∞ÊçÆÂ∫ìÁ≥ªÁªüÁöÑÊñπÊ≥ï„ÄÇ\nÁ§∫‰æãÔºö ‰∏ÄÂÆ∂Ë∂ÖÂ∏ÇÂèëÁé∞Ë¥≠‰π∞Â∞øÂ∏É üß∑ ÁöÑÈ°æÂÆ¢ÈÄöÂ∏∏‰πü‰ºöË¥≠‰π∞Âï§ÈÖí üç∫„ÄÇ‰∏Ä‰∏™ÊÑèÊÉ≥‰∏çÂà∞ÁöÑÂÖ≥ËÅîÔºÅ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Êú∫Âô®Â≠¶‰π†",
    "href": "qmd/pandas3ed13cn.html#Êú∫Âô®Â≠¶‰π†",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Êú∫Âô®Â≠¶‰π† ü§ñ",
    "text": "Êú∫Âô®Â≠¶‰π† ü§ñ\n\nÂÆö‰πâÔºöÁÆóÊ≥ïÈÄöËøáÁªèÈ™åÔºàÊï∞ÊçÆÔºâËá™Âä®ÊîπËøõ„ÄÇ‰æßÈáç‰∫éÈ¢ÑÊµãÂíåÂÜ≥Á≠ñ„ÄÇ\nÈáçÁÇπÔºöÁ≥ªÁªüÊ†πÊçÆÊï∞ÊçÆÂ≠¶‰π†ÂíåÂÅöÂá∫ÂÜ≥Á≠ñÔºåÊó†ÈúÄÊòéÁ°ÆÁöÑËßÑÂàô„ÄÇ\nÁ±ªÂûãÔºö\n\nÁõëÁù£Â≠¶‰π†ÔºöÂú®Ê†áËÆ∞Êï∞ÊçÆ‰∏äËøõË°åËÆ≠ÁªÉÔºà‰æãÂ¶ÇÔºåÂûÉÂúæÈÇÆ‰ª∂/ÈùûÂûÉÂúæÈÇÆ‰ª∂ÂàÜÁ±ª üìßÔºâ„ÄÇ\nÊó†ÁõëÁù£Â≠¶‰π†ÔºöÂú®Êú™Ê†áËÆ∞Êï∞ÊçÆ‰∏≠ÂèëÁé∞ÈöêËóèÁªìÊûÑÔºà‰æãÂ¶ÇÔºåÂÆ¢Êà∑ÁªÜÂàÜ üë•Ôºâ„ÄÇ\nÂº∫ÂåñÂ≠¶‰π†ÔºöÊô∫ËÉΩ‰ΩìÈÄöËøá‰∏éÁéØÂ¢É‰∫§‰∫íÊù•ÂÅöÂá∫ÂÜ≥Á≠ñÔºà‰æãÂ¶ÇÔºåÊú∫Âô®‰∫∫Â≠¶‰π†Ë°åËµ∞ üö∂Ôºâ„ÄÇ\n\nÁ§∫‰æãÔºöÊ†πÊçÆÂ§ßÂ∞è„ÄÅ‰ΩçÁΩÆÂíåÂçßÂÆ§Á≠âÁâπÂæÅÈ¢ÑÊµãÊàø‰ª∑ üè†„ÄÇÁÆóÊ≥ïÂ≠¶‰π†ËøôÁßçÂÖ≥Á≥ª„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÁªüËÆ°Â≠¶‰π†",
    "href": "qmd/pandas3ed13cn.html#ÁªüËÆ°Â≠¶‰π†",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÁªüËÆ°Â≠¶‰π† üìä",
    "text": "ÁªüËÆ°Â≠¶‰π† üìä\n\nÂÆö‰πâÔºöÁî®‰∫éÂª∫Ê®°ÂíåÁêÜËß£Â§çÊùÇÊï∞ÊçÆÈõÜÁöÑÂ∑•ÂÖ∑„ÄÇ‰∏Ä‰∏™Â∞ÜÁªüËÆ°ÊñπÊ≥ïÂ∫îÁî®‰∫é‰ªéÊï∞ÊçÆ‰∏≠Â≠¶‰π†ÁöÑÊ°ÜÊû∂„ÄÇ\nÈáçÁÇπÔºöÂº∫Ë∞ÉÊ®°ÂûãÂèäÂÖ∂ÂèØËß£ÈáäÊÄß„ÄÅÁ≤æÁ°ÆÊÄßÂíå‰∏çÁ°ÆÂÆöÊÄß„ÄÇËøûÊé•ÁªüËÆ°Â≠¶ÂíåÊú∫Âô®Â≠¶‰π†„ÄÇ\nÂÖ≥ÈîÆÊ¶ÇÂøµÔºö\n\nÂÅèÂ∑Æ-ÊñπÂ∑ÆÊùÉË°°ÔºöÂπ≥Ë°°Ëøë‰ººËØØÂ∑ÆÔºàÂÅèÂ∑ÆÔºâÂíåÂØπËÆ≠ÁªÉÊï∞ÊçÆÁöÑÊïèÊÑüÊÄßÔºàÊñπÂ∑ÆÔºâ„ÄÇ\nÊ®°ÂûãÈÄâÊã©ÔºöÈÄâÊã©ÊúÄ‰Ω≥Ê®°Âûã„ÄÇ\nÊ≠£ÂàôÂåñÔºöÈÄöËøáÊÉ©ÁΩöÂ§çÊùÇÊÄßÊù•Èò≤Ê≠¢ËøáÊãüÂêà„ÄÇ\n\nÁ§∫‰æãÔºö‰ΩøÁî®Á∫øÊÄßÂõûÂΩíÊù•ÁêÜËß£ÂπøÂëäÊîØÂá∫ üìà ÂíåÈîÄÂîÆÈ¢ù‰πãÈó¥ÁöÑÂÖ≥Á≥ªÔºåÂπ∂Â∏¶ÊúâÁΩÆ‰ø°Âå∫Èó¥„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Êù•Ëá™-1.usa.gov-ÁöÑ-bitly-Êï∞ÊçÆ",
    "href": "qmd/pandas3ed13cn.html#Êù•Ëá™-1.usa.gov-ÁöÑ-bitly-Êï∞ÊçÆ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "13.1 Êù•Ëá™ 1.USA.gov ÁöÑ Bitly Êï∞ÊçÆ",
    "text": "13.1 Êù•Ëá™ 1.USA.gov ÁöÑ Bitly Êï∞ÊçÆ\n\nËÉåÊôØÔºö\n\nBitlyÔºàURL Áº©Áü≠ÊúçÂä°ÔºâÂíå USA.gov ‰∫é 2011 Âπ¥Âêà‰Ωú„ÄÇ\nÊù•Ëá™Áº©Áü≠ .gov Êàñ .mil ÈìæÊé•ÁöÑÁî®Êà∑ÁöÑÂåøÂêçÊï∞ÊçÆ„ÄÇ\nÊØèÂ∞èÊó∂Âø´ÁÖßÔºàÊñáÊú¨Êñá‰ª∂Ôºâ„ÄÇ\nÊúçÂä°Â∑≤ÂÅúÊ≠¢Ôºå‰ΩÜÊï∞ÊçÆÂ∑≤‰øùÁïô„ÄÇ\n\nÊï∞ÊçÆÊ†ºÂºèÔºö\n\nÊØèË°åÈÉΩÊòØ‰∏Ä‰∏™ JSONÔºàJavaScript ÂØπË±°Ë°®Á§∫Ê≥ïÔºâÂØπË±°„ÄÇ\nJSON ÊòØ‰∫∫Á±ªÂèØËØªÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#json-Êï∞ÊçÆÁ§∫‰æã",
    "href": "qmd/pandas3ed13cn.html#json-Êï∞ÊçÆÁ§∫‰æã",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "JSON Êï∞ÊçÆÁ§∫‰æã",
    "text": "JSON Êï∞ÊçÆÁ§∫‰æã\n{ \"a\": \"Mozilla\\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\\/535.11 (KHTML, like Gecko) Chrome\\/17.0.963.78 Safari\\/535.11\", \"c\": \"US\", \"nk\": 1, \"tz\": \"America\\/New_York\", \"gr\": \"MA\", \"g\": \"A6q0VH\", \"h\": \"wfLQtf\", \"l\": \"orofrog\", \"al\": \"en-US,en;q=0.8\", \"hh\": \"1.usa.gov\", \"r\": \"http:\\/\\/www.facebook.com\\/l\\/7AQEFzjSi\\/1.usa.gov\\/wfLQtf\", \"u\": \"http:\\/\\/www.ncbi.nlm.nih.gov\\/pubmed\\/22415991\", \"t\": 1331923247, \"hc\": 1331822918, \"cy\": \"Danvers\", \"ll\": [ 42.576698, -70.954903 ] }\n\nÁªìÊûÑÔºö JSON ÂØπË±°‰Ωç‰∫éÂ§ßÊã¨Âè∑ {} ‰∏≠„ÄÇ\nÈîÆÂÄºÂØπÔºö Êï∞ÊçÆ‰ª•ÈîÆÂÄºÂØπÂΩ¢ÂºèÂ≠òÂú®Ôºà‰æãÂ¶ÇÔºå\"a\": \"Mozilla/...\"Ôºâ„ÄÇ\nÊï∞ÊçÆÁ±ªÂûãÔºö ÂÄºÂèØ‰ª•ÊòØÂ≠óÁ¨¶‰∏≤„ÄÅÊï∞Â≠ó„ÄÅÊï∞ÁªÑÔºàÂ¶Ç \"ll\"ÔºâÊàñÂÖ∂‰ªñ JSON ÂØπË±°„ÄÇ\n**{python} Âíå JSON**:{python} ÁöÑ json Â∫ìÂèØ‰ª•ËΩªÊùæÂú∞Â∞Ü JSON Â≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫ ```{python} Â≠óÂÖ∏„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Âú®-python-‰∏≠ËØªÂèñ-json-Êï∞ÊçÆ",
    "href": "qmd/pandas3ed13cn.html#Âú®-python-‰∏≠ËØªÂèñ-json-Êï∞ÊçÆ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Âú® ```{python} ‰∏≠ËØªÂèñ JSON Êï∞ÊçÆ",
    "text": "Âú® ```{python} ‰∏≠ËØªÂèñ JSON Êï∞ÊçÆ\nimport json # ÂØºÂÖ• json Â∫ì\npath = ‚Äúdatasets/bitly_usagov/example.txt‚Äù # Êñá‰ª∂Ë∑ØÂæÑ\nwith open(path) as f: # ÊâìÂºÄÊñá‰ª∂ records = [json.loads(line) for line in f] # ÂàóË°®Êé®ÂØºÂºèÔºöÈÄêË°åËØªÂèñÂπ∂Ëß£Êûê JSON\nprint(records[0]) # ÊâìÂç∞Á¨¨‰∏ÄÊù°ËÆ∞ÂΩïÔºà‰∏Ä‰∏™Â≠óÂÖ∏Ôºâ\n\n-   **`import json`**: ÂØºÂÖ• JSON Â∫ì„ÄÇ\n-   **`open(path)`**: ÊâìÂºÄÊñá‰ª∂„ÄÇ\n-   **`json.loads(line)`**: Â∞Ü JSON Ë°åËß£Êûê‰∏∫ ```{python} Â≠óÂÖ∏„ÄÇ\n-   **ÂàóË°®Êé®ÂØºÂºè**: `[... for line in f]` ÂàõÂª∫‰∏Ä‰∏™Â≠óÂÖ∏ÂàóË°®„ÄÇ\n-   **`records`**: Áé∞Âú®ÊòØ‰∏Ä‰∏™ ```{python} Â≠óÂÖ∏ÁöÑÂàóË°®„ÄÇ\n\n## ËÆøÈóÆÂ≠óÂÖ∏‰∏≠ÁöÑÊï∞ÊçÆ\n\nprint(records[0]['tz'])  # ËÆøÈóÆ 'tz'ÔºàÊó∂Âå∫ÔºâÂ≠óÊÆµ\n\n‰ΩøÁî®Â≠óÂÖ∏ÈîÆËÆøÈóÆÔºàÊñπÊã¨Âè∑ÔºâÊù•Ëé∑ÂèñÂÄº„ÄÇ\nrecords[0] Ëé∑ÂèñÁ¨¨‰∏Ä‰∏™Â≠óÂÖ∏„ÄÇ\n['tz'] ËÆøÈóÆÈîÆ ‚Äútz‚Äù ÂØπÂ∫îÁöÑÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÁªüËÆ°Êó∂Âå∫Á∫Ø-python",
    "href": "qmd/pandas3ed13cn.html#ÁªüËÆ°Êó∂Âå∫Á∫Ø-python",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÁªüËÆ°Êó∂Âå∫ÔºàÁ∫Ø ```{python}Ôºâ",
    "text": "ÁªüËÆ°Êó∂Âå∫ÔºàÁ∫Ø ```{python}Ôºâ\n\nÁõÆÊ†áÔºö ÊâæÂà∞ÊúÄÂ∏∏ËßÅÁöÑÊó∂Âå∫Ôºàtz Â≠óÊÆµÔºâ„ÄÇ\nÊñπÊ≥ï 1ÔºöÂ≠óÂÖ∏ÂíåÂæ™ÁéØÔºàÂü∫Êú¨Ôºå‰ΩÜÊïàÁéáËæÉ‰ΩéÔºâ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÁªüËÆ°Êó∂Âå∫Á∫Ø-python--Â§ÑÁêÜÁº∫Â§±ÁöÑÈîÆ",
    "href": "qmd/pandas3ed13cn.html#ÁªüËÆ°Êó∂Âå∫Á∫Ø-python--Â§ÑÁêÜÁº∫Â§±ÁöÑÈîÆ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÁªüËÆ°Êó∂Âå∫ÔºàÁ∫Ø ```{python}Ôºâ- Â§ÑÁêÜÁº∫Â§±ÁöÑÈîÆ",
    "text": "ÁªüËÆ°Êó∂Âå∫ÔºàÁ∫Ø ```{python}Ôºâ- Â§ÑÁêÜÁº∫Â§±ÁöÑÈîÆ\n``````yhbszwga #ÂéüÂßã‰ª£Á†Å (‰ºöÂØºËá¥ KeyError) # time_zones = [rec[‚Äútz‚Äù] for rec in records]\n#‰ΩøÁî® if Êù°‰ª∂ËøõË°åÊõ¥Ê≠£ time_zones = [rec[‚Äútz‚Äù] for rec in records if ‚Äútz‚Äù in rec] # ÂàóË°®Êé®ÂØºÂºè,Â¶ÇÊûúÂ≠óÂÖ∏‰∏≠Êúâ‚Äôtz‚ÄôÈîÆÔºåÂàôÊ∑ªÂä†Âà∞ÂàóË°®‰∏≠ print(time_zones[:10]) #ÊâìÂç∞Ââç10‰∏™Êó∂Âå∫\n\n-   **`KeyError` Ëß£Èáä**: Â¶ÇÊûúËÆ∞ÂΩï*Ê≤°Êúâ* 'tz' ÈîÆÔºåÂàôËÆøÈóÆ `rec[\"tz\"]` ‰ºöÂºïÂèë `KeyError`„ÄÇ\n-   **Ëß£ÂÜ≥ÊñπÊ°à**:  `if \"tz\" in rec` Âú®ËÆøÈóÆ‰πãÂâçÊ£ÄÊü•ÈîÆÊòØÂê¶*Â≠òÂú®*„ÄÇËøôÂèØ‰ª•Èò≤Ê≠¢ÈîôËØØ„ÄÇ\n\n## ÁªüËÆ°Êó∂Âå∫ÔºàÁ∫Ø ```{python}Ôºâ- Ëé∑Âèñ Top ËÆ°Êï∞\n\n``````{python}\ndef top_counts(count_dict, n=10):\n    #Â∞ÜÂ≠óÂÖ∏ËΩ¨Êç¢‰∏∫(ÂÄºÔºåÈîÆ)ÂØπÁöÑÂàóË°®\n    value_key_pairs = [(count, tz) for tz, count in count_dict.items()]\n    value_key_pairs.sort() #ÂØπÂàóË°®ËøõË°åÊéíÂ∫è\n    return value_key_pairs[-n:]  # ËøîÂõûÊúÄÂêé n ‰∏™ÂÖÉÁ¥†ÔºàÂç≥ÊúÄÂ§ßÁöÑ n ‰∏™Ôºâ\n\n# ‰ΩøÁî® Counter Á±ªÔºàÊúÄÈ´òÊïà‰∏îÊúÄ ```{python}icÔºâ\nfrom collections import Counter  # ÂØºÂÖ• Counter Á±ª\ncounts = Counter(time_zones)  # ‰ΩøÁî® Counter ÁªüËÆ°Êó∂Âå∫\nprint(counts.most_common(10))  # Áõ¥Êé•Ëé∑ÂèñÂá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑÂâç 10 ‰∏™Êó∂Âå∫\n\ntop_counts ÂáΩÊï∞: Ëé∑ÂèñÂá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑ n ‰∏™È°πÁõÆÔºàËá™ÂÆö‰πâÂáΩÊï∞Ôºâ„ÄÇ\nCounter Á±ª: ÁªüËÆ°È°πÁõÆÂá∫Áé∞Ê¨°Êï∞ÁöÑÊúÄ‰Ω≥ÊñπÂºè„ÄÇmost_common(10) Áõ¥Êé•ËøîÂõûÂâç 10 ‰∏™„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÁªüËÆ°Êó∂Âå∫-pandas",
    "href": "qmd/pandas3ed13cn.html#ÁªüËÆ°Êó∂Âå∫-pandas",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÁªüËÆ°Êó∂Âå∫ (pandas) üêº",
    "text": "ÁªüËÆ°Êó∂Âå∫ (pandas) üêº\n\npandas DataFrame: ‰∏ÄÁßçÊõ¥Âº∫Â§ß„ÄÅÊõ¥Êñπ‰æøÁöÑÂ§ÑÁêÜË°®Ê†ºÊï∞ÊçÆÁöÑÊñπÂºè„ÄÇ\n\n``````yhbszwga import pandas as pd # ÂØºÂÖ• pandas\nframe = pd.DataFrame(records) # ‰ªéÂ≠óÂÖ∏ÂàóË°®ÂàõÂª∫ DataFrame print(frame.info()) # ÊòæÁ§∫ DataFrame ÁöÑÊëòË¶Å‰ø°ÊÅØ\n\n-   **`pd.DataFrame(records)`**:  Â∞ÜÂ≠óÂÖ∏ÂàóË°®ËΩ¨Êç¢‰∏∫ DataFrame„ÄÇpandas ‰ºöËá™Âä®Êé®Êñ≠ÂàóÂêçÂíåÁ±ªÂûã„ÄÇ\n-   **`frame.info()`**:  Êèê‰æõÔºö\n    -   Ë°åÊï∞ÂíåÂàóÊï∞„ÄÇ\n    -   ÂàóÂêçÂíåÊï∞ÊçÆÁ±ªÂûã„ÄÇ\n    -   ÈùûÁ©∫ÂÄºËÆ°Êï∞ÔºàÊòæÁ§∫Áº∫Â§±Êï∞ÊçÆÔºâ„ÄÇ\n    -   ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ„ÄÇ\n\n## `frame.info()` ËæìÂá∫Ëß£Èáä\n\n&lt;class ‚Äòpandas.core.frame.DataFrame‚Äô&gt; RangeIndex: 3560 entries, 0 to 3559 Data columns (total 18 columns): # Column Non-Null Count Dtype ‚Äî ‚Äî‚Äî ‚Äî‚Äî‚Äî‚Äî‚Äì ‚Äî‚Äì 0 a 3440 non-null object 1 c 2919 non-null object ‚Ä¶ 16 heartbeat 120 non-null float64 17 kw 93 non-null object dtypes: float64(4), object(14) memory usage: 500.8+ KB\n\n-   **`RangeIndex`**:  ÊÄªË°åÊï∞ (3560) ÂíåÁ¥¢ÂºïËåÉÂõ¥ (0 to 3559)„ÄÇ\n-   **`Data columns`**:  ÊØèÂàó„ÄÅÈùûÁ©∫ËÆ°Êï∞ÂíåÊï∞ÊçÆÁ±ªÂûã„ÄÇ\n    -   `object`: ÈÄöÂ∏∏ÊòØÊñáÊú¨ÔºàÂ≠óÁ¨¶‰∏≤Ôºâ„ÄÇ\n    -   `float64`: ÊµÆÁÇπÊï∞„ÄÇ\n    -   `int64`: Êï¥Êï∞„ÄÇ\n-   **`Non-Null Count`**:  Á™ÅÂá∫ÊòæÁ§∫Áº∫Â§±ÂÄºÔºà‰æãÂ¶ÇÔºå`c` Êúâ 641 ‰∏™Áº∫Â§±ÂÄºÔºâ„ÄÇ\n- `dtypes` and `memory usage`: Ê±áÊÄª‰ø°ÊÅØ.\n\n## ‰ΩøÁî® pandas Â§ÑÁêÜÊó∂Âå∫\n\n``````{python}\nprint(frame['tz'].head())  # ÊòæÁ§∫ÂâçÂá†‰∏™Êó∂Âå∫\n\ntz_counts = frame['tz'].value_counts()  # ÁªüËÆ°ÊØè‰∏™Êó∂Âå∫Âá∫Áé∞ÁöÑÊ¨°Êï∞\nprint(tz_counts.head())  # ÊòæÁ§∫Âá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑÂâçÂá†‰∏™Êó∂Âå∫\n\nframe['tz']: ÈÄâÊã© ‚Äòtz‚Äô ÂàóÔºà‰∏Ä‰∏™ pandas SeriesÔºâ„ÄÇ\n.head(): ÊòæÁ§∫Ââç 5 Ë°å„ÄÇ\n.value_counts(): ÁªüËÆ°ÊØè‰∏™ÂîØ‰∏ÄÂÄºÂá∫Áé∞ÁöÑÊ¨°Êï∞„ÄÇÊØîÁ∫Ø ```{python} ÁÆÄÂçïÂæóÂ§öÔºÅ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Âú®-pandas-‰∏≠Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "href": "qmd/pandas3ed13cn.html#Âú®-pandas-‰∏≠Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Âú® pandas ‰∏≠Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ",
    "text": "Âú® pandas ‰∏≠Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ\n```yhbszwga clean_tz = frame['tz'].fillna('Missing')  # Â∞Ü NaN ÊõøÊç¢‰∏∫ \"Missing\" clean_tz[clean_tz == ''] = 'Unknown'      # Â∞ÜÁ©∫Â≠óÁ¨¶‰∏≤ÊõøÊç¢‰∏∫ \"Unknown\" tz_counts = clean_tz.value_counts()  # ÈáçÊñ∞ÁªüËÆ°Êó∂Âå∫ print(tz_counts.head())  # ÊòæÁ§∫Â§ÑÁêÜÂêéÁöÑÁªìÊûú\n\n.fillna('Missing'): Â∞ÜÁº∫Â§±ÂÄºÔºàpandas ‰∏≠ÁöÑ NaNÔºâÊõøÊç¢‰∏∫ ‚ÄúMissing‚Äù„ÄÇ\nclean_tz[clean_tz == ''] = 'Unknown': Â∞ÜÁ©∫Â≠óÁ¨¶‰∏≤ÊõøÊç¢‰∏∫ ‚ÄúUnknown‚ÄùÔºàÂ∏ÉÂ∞îÁ¥¢ÂºïÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#‰ΩøÁî®-seaborn-ËøõË°åÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed13cn.html#‰ΩøÁî®-seaborn-ËøõË°åÂèØËßÜÂåñ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "‰ΩøÁî® seaborn ËøõË°åÂèØËßÜÂåñ üìä",
    "text": "‰ΩøÁî® seaborn ËøõË°åÂèØËßÜÂåñ üìä\n``````yhbszwga import seaborn as sns # ÂØºÂÖ• seaborn import matplotlib.pyplot as plt #ÂØºÂÖ•matplotlib\nsubset = tz_counts.head() # Ëé∑ÂèñÂá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑÂâçÂá†‰∏™Êó∂Âå∫ sns.barplot(y=subset.index, x=subset.to_numpy()) # ÂàõÂª∫Ê∞¥Âπ≥Êù°ÂΩ¢Âõæ plt.show() # ÊòæÁ§∫ÂõæÂΩ¢\n\n-   **`import seaborn as sns`**: ÂØºÂÖ• seabornÔºàÂü∫‰∫é matplotlib ÊûÑÂª∫Ôºâ„ÄÇ\n-   **`subset = tz_counts.head()`**: ‰ΩøÁî®ÂâçÂá†‰∏™Êó∂Âå∫‰ª•Ëé∑ÂæóÊõ¥Ê∏ÖÊô∞ÁöÑÂèØËßÜÂåñÊïàÊûú.\n-   **`sns.barplot(...)`**:  ÂàõÂª∫Ê∞¥Âπ≥Êù°ÂΩ¢Âõæ„ÄÇ\n    -   `y=subset.index`: y ËΩ¥‰∏äÊòØÊó∂Âå∫ÂêçÁß∞„ÄÇ\n    -   `x=subset.to_numpy()`: x ËΩ¥‰∏äÊòØËÆ°Êï∞„ÄÇÂ∞Ü Series ËΩ¨Êç¢‰∏∫ numpy Êï∞ÁªÑ„ÄÇ\n- **`plt.show()`**: ÊòæÁ§∫ÁªòÂõæ„ÄÇ\n\n!['1.usa.gov Ê†∑Êú¨Êï∞ÊçÆ‰∏≠Âá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑÊó∂Âå∫'](time_zone_barplot.png)\n\n## ÂàÜÊûêÊµèËßàÂô®/‰ª£ÁêÜ‰ø°ÊÅØ üåê\n\n``````{python}\nprint(frame['a'][1])  # ÊâìÂç∞Á¨¨ 2 Êù°ËÆ∞ÂΩïÁöÑ 'a' Â≠óÊÆµ\nprint(frame['a'][50])  # ÊâìÂç∞Á¨¨ 51 Êù°ËÆ∞ÂΩïÁöÑ 'a' Â≠óÊÆµ\nprint(frame['a'][51][:50])  # ÊâìÂç∞Á¨¨ 52 Êù°ËÆ∞ÂΩïÁöÑ 'a' Â≠óÊÆµÁöÑÂâç 50 ‰∏™Â≠óÁ¨¶\n\nresults = pd.Series([x.split()[0] for x in frame['a'].dropna()])  # Ëé∑Âèñ‰∏ªË¶ÅÊµèËßàÂô®‰ø°ÊÅØ\nprint(results.head())  # ÊòæÁ§∫ÂâçÂá†Êù°ÁªìÊûú\nprint(results.value_counts().head(8))  # ÁªüËÆ°Âπ∂ÊòæÁ§∫Âá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑÂâç 8 ‰∏™ÊµèËßàÂô®\n\na Â≠óÊÆµÂåÖÂê´ÊµèËßàÂô®/ËÆæÂ§á/Â∫îÁî®Á®ãÂ∫è‰ø°ÊÅØ„ÄÇ\nframe['a'][1] ,etc.: ËÆøÈóÆÁâπÂÆöÁöÑ‰ª£ÁêÜÂ≠óÁ¨¶‰∏≤„ÄÇ\n.dropna(): Âú®ÊãÜÂàÜ‰πãÂâçÂà†Èô§Áº∫Â∞ë ‚Äòa‚Äô ÂÄºÁöÑË°å„ÄÇ\nx.split()[0]: ÊåâÁ©∫Ê†ºÊãÜÂàÜÔºåÂèñÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†Ôºà‰∏ªË¶ÅÊµèËßàÂô® IDÔºâ„ÄÇ\npd.Series(...): ‰ªéÊãÜÂàÜÂêéÁöÑÂ≠óÁ¨¶‰∏≤ÂàõÂª∫‰∏Ä‰∏™ Series„ÄÇ\nresults.value_counts().head(8): ÁªüËÆ°Âπ∂ÊòæÁ§∫Ââç 8 ‰∏™„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#windows-‰∏éÈùû-windows-Áî®Êà∑",
    "href": "qmd/pandas3ed13cn.html#windows-‰∏éÈùû-windows-Áî®Êà∑",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Windows ‰∏éÈùû Windows Áî®Êà∑ üíª",
    "text": "Windows ‰∏éÈùû Windows Áî®Êà∑ üíª\n``````yhbszwga import numpy as np # ÂØºÂÖ• numpy\ncframe = frame[frame[‚Äòa‚Äô].notna()].copy() # ÂàõÂª∫‰∏Ä‰∏™ÂâØÊú¨ÔºåÂπ∂ÊéíÈô§‚Äôa‚ÄôÂàó‰∏∫Á©∫ÁöÑË°å cframe[‚Äòos‚Äô] = np.where(cframe[‚Äòa‚Äô].str.contains(‚ÄòWindows‚Äô), # ÂàõÂª∫Êñ∞Âàó ‚Äòos‚Äô ‚ÄòWindows‚Äô, ‚ÄòNot Windows‚Äô) # Â¶ÇÊûú ‚Äòa‚Äô ÂåÖÂê´ ‚ÄòWindows‚ÄôÔºåÂàô‰∏∫ ‚ÄòWindows‚ÄôÔºåÂê¶Âàô‰∏∫ ‚ÄòNot Windows‚Äô print(cframe[‚Äòos‚Äô].head()) # ÊòæÁ§∫ÂâçÂá†Ë°å ‚Äòos‚Äô Âàó\n\n-   **ÁõÆÊ†áÔºö** ÂàÜÂà´ÂàÜÊûê Windows/Èùû Windows Áî®Êà∑ÁöÑÊó∂Âå∫„ÄÇ\n-   **`cframe = frame[frame['a'].notna()].copy()`**:  ÂàõÂª∫‰∏Ä‰∏™*ÂâØÊú¨*ÔºåËøáÊª§ÊéâÁº∫Â§±ÁöÑ 'a' ÂÄº„ÄÇ`.copy()` ÂèØÈÅøÂÖçË≠¶Âëä„ÄÇ\n-   **`cframe['a'].str.contains('Windows')`**:  Ê£ÄÊü•‰ª£ÁêÜÂ≠óÁ¨¶‰∏≤ÊòØÂê¶ÂåÖÂê´ \"Windows\"„ÄÇ\n-   **`np.where(...)`**: ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ 'os' ÂàóÔºöÂ¶ÇÊûúÂ≠óÁ¨¶‰∏≤ÂåÖÂê´ \"Windows\"ÔºåÂàô‰∏∫ \"Windows\"ÔºåÂê¶Âàô‰∏∫ \"Not Windows\"„ÄÇ\n\n## ÊåâÊó∂Âå∫ÂíåÊìç‰ΩúÁ≥ªÁªüÂàÜÁªÑ\n\n``````{python}\nby_tz_os = cframe.groupby(['tz', 'os'])  # ÊåâÊó∂Âå∫ÂíåÊìç‰ΩúÁ≥ªÁªüÂàÜÁªÑ\nagg_counts = by_tz_os.size().unstack().fillna(0)  # ÂàÜÁªÑËÆ°Êï∞ÔºåÈáçÂ°ëÔºåÂπ∂Â°´ÂÖÖÁº∫Â§±ÂÄº‰∏∫ 0\nprint(agg_counts.head())  # ÊòæÁ§∫ÂàÜÁªÑËÆ°Êï∞ÁªìÊûú\n\ncframe.groupby(['tz', 'os']): ÊåâÊó∂Âå∫ÂíåÊìç‰ΩúÁ≥ªÁªüÂàÜÁªÑ„ÄÇ\n.size(): ËÆ°ÁÆóÊØè‰∏™ÁªÑ‰∏≠ÁöÑËÆ∞ÂΩïÊï∞ÔºàÁ±ª‰ºº‰∫é value_counts()Ôºå‰ΩÜÁî®‰∫éÂàÜÁªÑÔºâ„ÄÇ\n.unstack(): ÈáçÂ°ë„ÄÇÂ∞Ü ‚Äòos‚Äô ÈÄèËßÜ‰∏∫ÂàóÔºàÊõ¥Êòì‰∫éÊØîËæÉÔºâ„ÄÇ\n.fillna(0): Â∞ÜÁº∫Â§±ÂÄºÔºàÂè™Êúâ‰∏ÄÁßçÊìç‰ΩúÁ≥ªÁªüÁöÑÊó∂Âå∫ÔºâÊõøÊç¢‰∏∫ 0„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊâæÂà∞ÊúÄÂèóÊ¨¢ËøéÁöÑÊó∂Âå∫",
    "href": "qmd/pandas3ed13cn.html#ÊâæÂà∞ÊúÄÂèóÊ¨¢ËøéÁöÑÊó∂Âå∫",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊâæÂà∞ÊúÄÂèóÊ¨¢ËøéÁöÑÊó∂Âå∫",
    "text": "ÊâæÂà∞ÊúÄÂèóÊ¨¢ËøéÁöÑÊó∂Âå∫\n``````yhbszwga # ÊñπÊ≥ï 1: ‰ΩøÁî® argsort indexer = agg_counts.sum(axis=‚Äúcolumns‚Äù).argsort() # Ëé∑ÂèñÊåâÊÄªÊï∞ÊéíÂ∫èÁöÑÁ¥¢Âºï print(indexer.values[:10]) # ÊòæÁ§∫ÊéíÂ∫èÂêéÁöÑÂâç 10 ‰∏™Á¥¢Âºï count_subset = agg_counts.take(indexer[-10:]) # Ëé∑ÂèñËÆ°Êï∞ÊúÄÂ§öÁöÑÊúÄÂêé 10 Ë°å print(count_subset) #ÊâìÂç∞"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Ê†áÂáÜÂåñËÆ°Êï∞ÊØî‰æã",
    "href": "qmd/pandas3ed13cn.html#Ê†áÂáÜÂåñËÆ°Êï∞ÊØî‰æã",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Ê†áÂáÜÂåñËÆ°Êï∞ÔºàÊØî‰æãÔºâ",
    "text": "Ê†áÂáÜÂåñËÆ°Êï∞ÔºàÊØî‰æãÔºâ\n``````yhbszwga def norm_total(group): group[‚Äònormed_total‚Äô] = group[‚Äòtotal‚Äô] / group[‚Äòtotal‚Äô].sum() # ËÆ°ÁÆóÊØè‰∏™ÂàÜÁªÑÂÜÖÁöÑÊØî‰æã return group\nresults = count_subset.groupby(‚Äòtz‚Äô).apply(norm_total) # ÊåâÊó∂Âå∫Â∫îÁî®ÂáΩÊï∞ sns.barplot(x=‚Äònormed_total‚Äô, y=‚Äòtz‚Äô, hue=‚Äòos‚Äô, data=results) # ‰ΩøÁî®ÊØî‰æãÂàõÂª∫Êù°ÂΩ¢Âõæ plt.show() #ÊòæÁ§∫ÁªòÂõæ\n\n-   **ÁõÆÊ†áÔºö** ÊØîËæÉÊØè‰∏™Êó∂Âå∫ÂÜÖ Windows/Èùû Windows Áî®Êà∑ÁöÑ*ÊØî‰æã*„ÄÇ\n-   **`norm_total(group)` ÂáΩÊï∞Ôºö**\n    -   ËÆ°ÁÆó `normed_total`ÔºöÊØè‰∏™Êìç‰ΩúÁ≥ªÁªüÁöÑËÆ°Êï∞Èô§‰ª•ËØ•Êó∂Âå∫ÁöÑ*ÊÄª*ËÆ°Êï∞ÔºàÊØî‰æãÔºâ„ÄÇ\n    -   ËøîÂõû‰øÆÊîπÂêéÁöÑÂàÜÁªÑ„ÄÇ\n-   **`count_subset.groupby('tz').apply(norm_total)`**:  Â∞ÜÂáΩÊï∞Â∫îÁî®‰∫éÊØè‰∏™Êó∂Âå∫ÂàÜÁªÑ„ÄÇ\n-   **`sns.barplot(...)`**: ‰ΩøÁî® 'normed_total'ÔºàÊØî‰æãÔºâÁöÑÊù°ÂΩ¢Âõæ - Êõ¥ÂÆπÊòìÊØîËæÉ„ÄÇ\n\n!['ÁÉ≠Èó®Êó∂Âå∫‰∏≠ Windows ÂíåÈùû Windows Áî®Êà∑ÁöÑÁôæÂàÜÊØî'](normalized_plot.png)\n\n## 13.2 MovieLens 1M Êï∞ÊçÆÈõÜ üé¨\n\n-   **Êï∞ÊçÆÈõÜÔºö** MovieLens 1M (GroupLens Research)„ÄÇ\n-   **ÂÜÖÂÆπÔºö**\n    -   100 ‰∏áÊù°ËØÑÂàÜ„ÄÇ\n    -   Á∫¶ 6,000 ÂêçÁî®Êà∑„ÄÇ\n    -   Á∫¶ 4,000 ÈÉ®ÁîµÂΩ±„ÄÇ\n-   **Êï∞ÊçÆÊ†ºÂºèÔºö** ‰∏â‰∏™Ë°®Ê†ºÔºö\n    -   `users`: ‰∫∫Âè£ÁªüËÆ°‰ø°ÊÅØÔºàÂπ¥ÈæÑ„ÄÅÊÄßÂà´„ÄÅËÅå‰∏ö„ÄÅÈÇÆÊîøÁºñÁ†ÅÔºâ„ÄÇ\n    -   `ratings`: Áî®Êà∑ ID„ÄÅÁîµÂΩ± ID„ÄÅËØÑÂàÜ„ÄÅÊó∂Èó¥Êà≥„ÄÇ\n    -   `movies`: ÁîµÂΩ±ÂêçÁß∞„ÄÅÁ±ªÂûã„ÄÇ\n-   **ÁõÆÊ†áÔºö** Êé¢Á¥¢ËØÑÂàÜ„ÄÅ‰∫∫Âè£ÁªüËÆ°‰ø°ÊÅØÂíåÁ±ªÂûã‰πãÈó¥ÁöÑÂÖ≥Á≥ª„ÄÇ\n\n![](movielens_data_intro.png)\n\n## Âä†ËΩΩ MovieLens Êï∞ÊçÆ\n\n``````{python}\nimport pandas as pd\n\n# ÂÆö‰πâÂàóÂêç\nunames = ['user_id', 'gender', 'age', 'occupation', 'zip']\n# ËØªÂèñ users.dat Êñá‰ª∂\nusers = pd.read_table('datasets/movielens/users.dat', sep='::',\n                      header=None, names=unames, engine='```{python}')\n\n# ÂÆö‰πâÂàóÂêç\nrnames = ['user_id', 'movie_id', 'rating', 'timestamp']\n# ËØªÂèñ ratings.dat Êñá‰ª∂\nratings = pd.read_table('datasets/movielens/ratings.dat', sep='::',\n                        header=None, names=rnames, engine='```{python}')\n\n# ÂÆö‰πâÂàóÂêç\nmnames = ['movie_id', 'title', 'genres']\n# ËØªÂèñ movies.dat Êñá‰ª∂\nmovies = pd.read_table('datasets/movielens/movies.dat', sep='::',\n                       header=None, names=mnames, engine='```{python}')\n\npd.read_table ÁöÑÂÖ≥ÈîÆÂèÇÊï∞Ôºö\n\nsep='::': ÂàÜÈöîÁ¨¶ÊòØ‰∏§‰∏™ÂÜíÂè∑„ÄÇ\nheader=None: Ê≤°ÊúâÊ†áÈ¢òË°å„ÄÇ\nnames=unames (etc.): Êèê‰æõÂàóÂêç„ÄÇ\nengine='```{python}': ‰ΩøÁî® ```{python} ÂºïÊìéÔºàÊîØÊåÅÂ§öÂ≠óÁ¨¶ÂàÜÈöîÁ¨¶Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÂêàÂπ∂-movielens-Êï∞ÊçÆ",
    "href": "qmd/pandas3ed13cn.html#ÂêàÂπ∂-movielens-Êï∞ÊçÆ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÂêàÂπ∂ MovieLens Êï∞ÊçÆ",
    "text": "ÂêàÂπ∂ MovieLens Êï∞ÊçÆ\n```yhbszwga data = pd.merge(pd.merge(ratings, users), movies)  # ÂêàÂπ∂‰∏â‰∏™ DataFrame print(data.head())  # ÊòæÁ§∫ÂêàÂπ∂ÂêéÁöÑÊï∞ÊçÆÁöÑÂâçÂá†Ë°å print(data.iloc[0])  # ËÆøÈóÆÁ¨¨‰∏ÄË°åÊï∞ÊçÆ\n\npd.merge(): Âü∫‰∫éÂÖ¨ÂÖ±ÂàóÂêàÂπ∂ DataFrame„ÄÇpandas ‰ºöËá™Âä®ÊâæÂà∞ÂÆÉ‰ª¨„ÄÇ\n‰∏§Ê¨°ÂêàÂπ∂Ôºö\n\npd.merge(ratings, users): Âü∫‰∫é user_id ÂêàÂπ∂„ÄÇ\npd.merge(..., movies): Â∞ÜÁªìÊûú‰∏é movies Âü∫‰∫é movie_id ÂêàÂπ∂„ÄÇ\n\ndata: Â∞ÜÊâÄÊúâ‰ø°ÊÅØÂåÖÂê´Âú®‰∏Ä‰∏™ DataFrame ‰∏≠„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊåâÊÄßÂà´ÂàÜÊûêËØÑÂàÜ",
    "href": "qmd/pandas3ed13cn.html#ÊåâÊÄßÂà´ÂàÜÊûêËØÑÂàÜ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊåâÊÄßÂà´ÂàÜÊûêËØÑÂàÜ",
    "text": "ÊåâÊÄßÂà´ÂàÜÊûêËØÑÂàÜ\n```yhbszwga mean_ratings = data.pivot_table('rating', index='title',  # ‰ª• 'title' ‰∏∫Á¥¢Âºï                                 columns='gender', aggfunc='mean')  # ‰ª• 'gender' ‰∏∫ÂàóÔºåËÆ°ÁÆóÂπ≥Âùá 'rating' print(mean_ratings.head())  # ÊòæÁ§∫ÁªìÊûú\n\ndata.pivot_table(...): ÈáçÂ°ëÂíåËÅöÂêà„ÄÇ\n\n'rating': Ë¶ÅËÅöÂêàÁöÑÂÄºÔºàÂπ≥ÂùáËØÑÂàÜÔºâ„ÄÇ\nindex='title': ÁîµÂΩ±ÂêçÁß∞ÊòØË°åÁ¥¢Âºï„ÄÇ\ncolumns='gender': ÊÄßÂà´ (‚ÄòM‚Äô, ‚ÄòF‚Äô) Êàê‰∏∫Âàó„ÄÇ\naggfunc='mean' (ÈªòËÆ§): ËÆ°ÁÆóÂπ≥ÂùáÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊåâËØÑÂàÜÊï∞ÈáèËøáÊª§",
    "href": "qmd/pandas3ed13cn.html#ÊåâËØÑÂàÜÊï∞ÈáèËøáÊª§",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊåâËØÑÂàÜÊï∞ÈáèËøáÊª§",
    "text": "ÊåâËØÑÂàÜÊï∞ÈáèËøáÊª§\n``````yhbszwga ratings_by_title = data.groupby(‚Äòtitle‚Äô).size() # ÁªüËÆ°ÊØèÈÉ®ÁîµÂΩ±ÁöÑËØÑÂàÜÊï∞Èáè print(ratings_by_title.head()) # ÊòæÁ§∫ÂâçÂá†Ë°å active_titles = ratings_by_title.index[ratings_by_title &gt;= 250] # Á≠õÈÄâÂá∫ËØÑÂàÜÊï∞ÈáèÂ§ß‰∫éÁ≠â‰∫é 250 ÁöÑÁîµÂΩ± print(active_titles) # ÊòæÁ§∫Á≠õÈÄâÁªìÊûú\nmean_ratings = mean_ratings.loc[active_titles] # Ê†πÊçÆÁ≠õÈÄâÁªìÊûúËøáÊª§ mean_ratings print(mean_ratings) # ÊòæÁ§∫ËøáÊª§ÂêéÁöÑ mean_ratings\n\n-   **ÁõÆÊ†á**ÔºöÂÖ≥Ê≥®ËØÑÂàÜË∂≥Â§üÁöÑÁîµÂΩ±„ÄÇ\n-   **`data.groupby('title').size()`**:  ÁªüËÆ°ÊØèÈÉ®ÁîµÂΩ±ÁöÑËØÑÂàÜÊï∞„ÄÇ\n-   **`active_titles = ...`**:  Ëá≥Â∞ëÊúâ 250 Êù°ËØÑÂàÜÁöÑÁîµÂΩ±ÂêçÁß∞„ÄÇ\n-   **`mean_ratings.loc[active_titles]`**:  ËøáÊª§ `mean_ratings` ‰ª•‰ªÖÂåÖÂê´Ëøô‰∫õÁîµÂΩ±„ÄÇ\n\n## ÊéíÂ∫èÂíåÊü•ÊâæÁÉ≠Èó®ÁîµÂΩ±\n\n``````{python}\ntop_female_ratings = mean_ratings.sort_values(\"F\", ascending=False)  # ÊåâÂ•≥ÊÄßËØÑÂàÜÈôçÂ∫èÊéíÂàó\nprint(top_female_ratings.head())  # ÊòæÁ§∫Â•≥ÊÄßËØÑÂàÜÊúÄÈ´òÁöÑÂá†ÈÉ®ÁîµÂΩ±\n\nmean_ratings.sort_values(\"F\", ascending=False): Êåâ ‚ÄòF‚ÄôÔºàÂ•≥ÊÄßÔºâÂàóÊéíÂ∫èÔºåÈôçÂ∫èÔºàÊúÄÈ´òËØÑÂàÜ‰ºòÂÖàÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Ë°°ÈáèËØÑÂàÜÂ∑ÆÂºÇ",
    "href": "qmd/pandas3ed13cn.html#Ë°°ÈáèËØÑÂàÜÂ∑ÆÂºÇ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Ë°°ÈáèËØÑÂàÜÂ∑ÆÂºÇ",
    "text": "Ë°°ÈáèËØÑÂàÜÂ∑ÆÂºÇ\n``````yhbszwga mean_ratings[‚Äòdiff‚Äô] = mean_ratings[‚ÄòM‚Äô] - mean_ratings[‚ÄòF‚Äô] # ËÆ°ÁÆóÁî∑ÊÄßÂíåÂ•≥ÊÄßËØÑÂàÜÁöÑÂ∑ÆÂºÇ sorted_by_diff = mean_ratings.sort_values(‚Äòdiff‚Äô) # ÊåâÂ∑ÆÂºÇÊéíÂ∫è print(sorted_by_diff.head()) # ÊòæÁ§∫Â•≥ÊÄßËØÑÂàÜËæÉÈ´òÁöÑÁîµÂΩ±ÔºàÂ∑ÆÂºÇ‰∏∫Ë¥üÔºâ print(sorted_by_diff[::-1].head()) # ÊòæÁ§∫Áî∑ÊÄßËØÑÂàÜËæÉÈ´òÁöÑÁîµÂΩ±ÔºàÂ∑ÆÂºÇ‰∏∫Ê≠£Ôºâ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÂêàÂπ∂ÊâÄÊúâÊï∞ÊçÆÂπ∂ÊåâÁ±ªÂûãÂàÜÁªÑ",
    "href": "qmd/pandas3ed13cn.html#ÂêàÂπ∂ÊâÄÊúâÊï∞ÊçÆÂπ∂ÊåâÁ±ªÂûãÂàÜÁªÑ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÂêàÂπ∂ÊâÄÊúâÊï∞ÊçÆÂπ∂ÊåâÁ±ªÂûãÂàÜÁªÑ",
    "text": "ÂêàÂπ∂ÊâÄÊúâÊï∞ÊçÆÂπ∂ÊåâÁ±ªÂûãÂàÜÁªÑ\n``````yhbszwga ratings_with_genre = pd.merge(pd.merge(movies_exploded, ratings), users) # ÂêàÂπ∂ÊâÄÊúâÊï∞ÊçÆ print(ratings_with_genre.iloc[0]) # ÊòæÁ§∫ÂêàÂπ∂ÂêéÁ¨¨‰∏ÄË°å\ngenre_ratings = (ratings_with_genre.groupby([‚Äògenre‚Äô, ‚Äòage‚Äô]) # Êåâ ‚Äògenre‚Äô Âíå ‚Äòage‚Äô ÂàÜÁªÑ [‚Äòrating‚Äô].mean() # ËÆ°ÁÆóÂπ≥Âùá ‚Äòrating‚Äô .unstack(‚Äòage‚Äô)) # Â∞Ü ‚Äòage‚Äô ÈÄèËßÜ‰∏∫Âàó print(genre_ratings[:10]) # ÊòæÁ§∫ÁªìÊûú\n\n-   **`ratings_with_genre = ...`**: ÂêàÂπ∂ `movies_exploded`„ÄÅ`ratings` Âíå `users`„ÄÇÊØè‰∏ÄË°åÔºöËØÑÂàÜ + Áî®Êà∑‰ø°ÊÅØ + *Âçï‰∏™*Á±ªÂûã„ÄÇ\n-   **`ratings_with_genre.iloc[0]`**: ÊòæÁ§∫Á¨¨‰∏ÄË°å„ÄÇ\n-   **`genre_ratings = ...`**: ÊØè‰∏™Á±ªÂûã/Âπ¥ÈæÑÁªÑÁöÑÂπ≥ÂùáËØÑÂàÜ„ÄÇ\n    -   `groupby(['genre', 'age'])`: ÊåâÁ±ªÂûãÂíåÂπ¥ÈæÑÂàÜÁªÑ„ÄÇ\n    -   `['rating'].mean()`: Âπ≥ÂùáËØÑÂàÜ„ÄÇ\n    -   `.unstack('age')`: Âπ¥ÈæÑÂèòÊàêÂàó„ÄÇ\n\n## 13.3 1880-2010 Âπ¥ÁæéÂõΩÂ©¥ÂÑøÂßìÂêç üë∂\n\n-   **Êï∞ÊçÆÈõÜÔºö** ÁæéÂõΩÁ§æ‰ºö‰øùÈöúÁÆ°ÁêÜÂ±Ä (SSA) Â©¥ÂÑøÂßìÂêç„ÄÇ\n-   **Êó∂Èó¥ÊÆµÔºö** 1880-2010„ÄÇ\n-   **Êï∞ÊçÆÊ†ºÂºèÔºö** ÊØèÂπ¥‰∏Ä‰∏™Êñá‰ª∂Ôºö\n    -   ÂßìÂêç\n    -   ÊÄßÂà´\n    -   Âá∫Áîü‰∫∫Êï∞\n-   **Á§∫‰æã (yob1880.txt):**\n    ```\n    Mary,F,7065\n    Anna,F,2604\n    ...\n    ```\n-   **ÊΩúÂú®ÂàÜÊûêÔºö**\n    -   ÂßìÂêçÊµÅË°åË∂ãÂäø„ÄÇ\n    -   Áõ∏ÂØπÊéíÂêç„ÄÇ\n    -   ÂëΩÂêçÂ§öÊ†∑ÊÄß„ÄÇ\n    -   Â≠óÊØç/ÂÖÉÈü≥/ËæÖÈü≥ÂàÜÊûê„ÄÇ\n\n![](usbabynames_intro.png)\n\n## Âä†ËΩΩÂíåÁªÑÂêàÂ©¥ÂÑøÂßìÂêçÊï∞ÊçÆ\n\n``````{python}\nimport pandas as pd\n\n# Âä†ËΩΩÂçïÂπ¥Êï∞ÊçÆÔºàÁî®‰∫éÊºîÁ§∫Ôºâ\nnames1880 = pd.read_csv('datasets/babynames/yob1880.txt',\n                        names=['name', 'sex', 'births'])  # ÊåáÂÆöÂàóÂêç\nprint(names1880)  # ÊòæÁ§∫ 1880 Âπ¥ÁöÑÊï∞ÊçÆ\nprint(names1880.groupby('sex')['births'].sum())  # ÊåâÊÄßÂà´ÁªüËÆ° 1880 Âπ¥ÁöÑÊÄªÂá∫Áîü‰∫∫Êï∞\n\n# Âä†ËΩΩÊâÄÊúâÂπ¥‰ªΩÁöÑÊï∞ÊçÆÂπ∂ÂêàÂπ∂\nyears = range(1880, 2011)  # Âπ¥‰ªΩËåÉÂõ¥\npieces = []  # Áî®‰∫éÂ≠òÂÇ®ÊØè‰∏™Âπ¥‰ªΩÁöÑÊï∞ÊçÆ\nfor year in years:  # ÈÅçÂéÜÂπ¥‰ªΩ\n    path = f'datasets/babynames/yob{year}.txt'  # ÊûÑÂª∫Êñá‰ª∂Ë∑ØÂæÑ\n    frame = pd.read_csv(path, names=['name', 'sex', 'births'])  # ËØªÂèñÊï∞ÊçÆ\n    frame['year'] = year  # Ê∑ªÂä† 'year' Âàó\n    pieces.append(frame)  # Â∞ÜÂΩìÂâçÂπ¥‰ªΩÁöÑÊï∞ÊçÆÊ∑ªÂä†Âà∞ÂàóË°®\n\nnames = pd.concat(pieces, ignore_index=True)  # ÂêàÂπ∂ÊâÄÊúâÂπ¥‰ªΩÁöÑÊï∞ÊçÆ\nprint(names)  # ÊòæÁ§∫ÂêàÂπ∂ÂêéÁöÑÊï∞ÊçÆ\n\nnames1880 = pd.read_csv(...): Âä†ËΩΩ‰∏ÄÂπ¥„ÄÇnames ÊåáÂÆöÂàó„ÄÇ\nnames1880.groupby('sex')['births'].sum(): 1880 Âπ¥ÊØè‰∏™ÊÄßÂà´ÁöÑÊÄªÂá∫Áîü‰∫∫Êï∞„ÄÇ\nÂæ™ÁéØÈÅçÂéÜÂπ¥‰ªΩÔºö\n\nrange(1880, 2011): Ëø≠‰ª£„ÄÇ\nf'datasets/babynames/yob{year}.txt': Êñá‰ª∂Ë∑ØÂæÑÔºàf-stringÔºâ„ÄÇ\nframe['year'] = year: Ê∑ªÂä† ‚Äòyear‚Äô Âàó„ÄÇ\npieces.append(frame): Ê∑ªÂä†Âà∞ÂàóË°®„ÄÇ\n\nnames = pd.concat(pieces, ignore_index=True): ÂêàÂπ∂ÊâÄÊúâ DataFrame„ÄÇignore_index=True ÈÅøÂÖçÈáçÂ§çÁ¥¢Âºï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ËÅöÂêà",
    "href": "qmd/pandas3ed13cn.html#ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ËÅöÂêà",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ËÅöÂêà",
    "text": "ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ËÅöÂêà\n```yhbszwga total_births = names.pivot_table('births', index='year',  # ‰ª• 'year' ‰∏∫Á¥¢Âºï                                  columns='sex', aggfunc=sum)  # ‰ª• 'sex' ‰∏∫ÂàóÔºåËÆ°ÁÆó 'births' ÁöÑÊÄªÂíå print(total_births.tail())  # ÊòæÁ§∫ÊúÄÂêéÂá†Ë°å total_births.plot(title='Total births by sex and year')  # ÁªòÂà∂ÊåâÊÄßÂà´ÂíåÂπ¥‰ªΩÂàíÂàÜÁöÑÊÄªÂá∫Áîü‰∫∫Êï∞ plt.show() #ÊòæÁ§∫ÁªòÂõæ\n\nnames.pivot_table(...): ÊØèÂπ¥/ÊØèÊÄßÂà´ÁöÑÊÄªÂá∫Áîü‰∫∫Êï∞„ÄÇ\n\n'births': Ë¶ÅËÅöÂêàÁöÑÂÄº„ÄÇ\nindex='year': Âπ¥‰ªΩÊòØË°åÁ¥¢Âºï„ÄÇ\ncolumns='sex': ÊÄßÂà´Êàê‰∏∫Âàó„ÄÇ\naggfunc=sum: Âá∫Áîü‰∫∫Êï∞ÊÄªÂíå„ÄÇ\n\ntotal_births.tail(): ÊúÄÂêéÂá†Ë°å„ÄÇ\ntotal_births.plot(...): Ë∂ãÂäøÊäòÁ∫øÂõæ„ÄÇ\n\n\n\n\n‚ÄòÊåâÊÄßÂà´ÂíåÂπ¥‰ªΩÂàíÂàÜÁöÑÊÄªÂá∫Áîü‰∫∫Êï∞‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ËÆ°ÁÆóÊØè‰∏™ÂêçÂ≠óÁöÑÊØî‰æã",
    "href": "qmd/pandas3ed13cn.html#ËÆ°ÁÆóÊØè‰∏™ÂêçÂ≠óÁöÑÊØî‰æã",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ËÆ°ÁÆóÊØè‰∏™ÂêçÂ≠óÁöÑÊØî‰æã",
    "text": "ËÆ°ÁÆóÊØè‰∏™ÂêçÂ≠óÁöÑÊØî‰æã\n``````yhbszwga def add_prop(group): group[‚Äòprop‚Äô] = group[‚Äòbirths‚Äô] / group[‚Äòbirths‚Äô].sum() # ËÆ°ÁÆóÊØè‰∏™ÂàÜÁªÑÂÜÖÁöÑÊØî‰æã return group\nnames = names.groupby([‚Äòyear‚Äô, ‚Äòsex‚Äô]).apply(add_prop) # ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ÂàÜÁªÑÔºåÂπ∂Â∫îÁî®ÂáΩÊï∞ print(names) # ÊòæÁ§∫Ê∑ªÂä†‰∫Ü ‚Äòprop‚Äô ÂàóÁöÑÊï∞ÊçÆ\n\n-   **ÁõÆÊ†áÔºö** ÊØè‰∏™ÂêçÂ≠óÂú®*ÊØè‰∏™Âπ¥‰ªΩÂíåÊÄßÂà´*‰∏≠Âç†Â©¥ÂÑøÁöÑÊØî‰æã„ÄÇÊ†πÊçÆÊÄªÂá∫Áîü‰∫∫Êï∞ËøõË°åÊ†áÂáÜÂåñ„ÄÇ\n-   **`add_prop(group)` ÂáΩÊï∞Ôºö**\n    -   Êé•Êî∂‰∏Ä‰∏™ÂàÜÁªÑÔºàÂπ¥‰ªΩ/ÊÄßÂà´Ôºâ„ÄÇ\n    -   `group['births'] / group['births'].sum()`: ÊØî‰æãÔºàÂá∫Áîü‰∫∫Êï∞Èô§‰ª•ËØ•Âπ¥‰ªΩ/ÊÄßÂà´ÁöÑÊÄªÊï∞Ôºâ„ÄÇ\n    -   ËøîÂõû‰øÆÊîπÂêéÁöÑÂàÜÁªÑ„ÄÇ\n-   **`names.groupby(['year', 'sex']).apply(add_prop)`**:  Â∫îÁî®‰∫éÊØè‰∏™ÂàÜÁªÑ„ÄÇÊ∑ªÂä† 'prop' Âàó„ÄÇ\n\n## È™åËØÅÊØî‰æãÔºàÂÅ•ÂÖ®ÊÄßÊ£ÄÊü•ÔºÅÔºâ\n\n``````{python}\nprint(names.groupby(['year', 'sex'])['prop'].sum())  # È™åËØÅÊØè‰∏™Âπ¥‰ªΩÂíåÊÄßÂà´ÂàÜÁªÑÁöÑ 'prop' ÊÄªÂíåÊòØÂê¶‰∏∫ 1\n\nÈáçË¶ÅÔºöÂßãÁªàÊ£ÄÊü•ÊÇ®ÁöÑËÆ°ÁÆóÔºÅ\nÊåâÂπ¥‰ªΩ/ÊÄßÂà´ÂàÜÁªÑÔºåÂØπ ‚Äòprop‚Äô Ê±ÇÂíå„ÄÇÂØπ‰∫éÊØè‰∏™ÂàÜÁªÑÔºåÁªìÊûúÂ∫î‰∏∫ 1.0ÔºàÊØî‰æãÂä†Ëµ∑Êù•‰∏∫ 100%Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊèêÂèñÂâç-1000-‰∏™ÂêçÂ≠ó",
    "href": "qmd/pandas3ed13cn.html#ÊèêÂèñÂâç-1000-‰∏™ÂêçÂ≠ó",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊèêÂèñÂâç 1000 ‰∏™ÂêçÂ≠ó",
    "text": "ÊèêÂèñÂâç 1000 ‰∏™ÂêçÂ≠ó\n``````yhbszwga def get_top1000(group): return group.sort_values(‚Äòbirths‚Äô, ascending=False)[:1000] # Êåâ ‚Äòbirths‚Äô ÈôçÂ∫èÊéíÂàóÔºåÂπ∂ÂèñÂâç 1000 Ë°å\ngrouped = names.groupby([‚Äòyear‚Äô, ‚Äòsex‚Äô]) # ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ÂàÜÁªÑ top1000 = grouped.apply(get_top1000) # Â∫îÁî®ÂáΩÊï∞ top1000 = top1000.reset_index(drop=True) # Âà†Èô§Â§öÁ∫ßÁ¥¢Âºï print(top1000) # ÊòæÁ§∫Ââç 1000 ‰∏™ÂêçÂ≠óÁöÑÊï∞ÊçÆ\n\n-   **ÁõÆÊ†áÔºö** ÊØè‰∏™Âπ¥‰ªΩ/ÊÄßÂà´ÁöÑÂâç 1000 ‰∏™ÂêçÂ≠óÔºàÁî®‰∫éËøõ‰∏ÄÊ≠•ÂàÜÊûêÔºâ„ÄÇ\n-   **`get_top1000(group)` ÂáΩÊï∞Ôºö**\n    -   Êé•Êî∂‰∏Ä‰∏™ÂàÜÁªÑÔºàÂπ¥‰ªΩ/ÊÄßÂà´Ôºâ„ÄÇ\n    -   `group.sort_values('births', ascending=False)`: ÊåâÂá∫Áîü‰∫∫Êï∞ÊéíÂ∫èÔºàÈôçÂ∫èÔºâ„ÄÇ\n    -   `[:1000]`: Ââç 1000 Ë°å„ÄÇ\n-   **`names.groupby(['year', 'sex']).apply(get_top1000)`**: Â∫îÁî®‰∫éÊØè‰∏™ÂàÜÁªÑ„ÄÇ\n-   **`top1000.reset_index(drop=True)`:** Âà†Èô§Â§öÁ∫ßÁ¥¢Âºï.\n\n## ÂàÜÊûêÂëΩÂêçË∂ãÂäø\n\n``````{python}\nboys = top1000[top1000['sex'] == 'M']  # Á≠õÈÄâÂá∫Áî∑Â≠©ÁöÑÊï∞ÊçÆ\ngirls = top1000[top1000['sex'] == 'F']  # Á≠õÈÄâÂá∫Â•≥Â≠©ÁöÑÊï∞ÊçÆ\n\ntotal_births = top1000.pivot_table('births', index='year',  # ‰ª• 'year' ‰∏∫Á¥¢Âºï\n                                    columns='name', aggfunc=sum)  # ‰ª• 'name' ‰∏∫ÂàóÔºåËÆ°ÁÆó 'births' ÁöÑÊÄªÂíå\nprint(total_births.info())  # ÊòæÁ§∫‰ø°ÊÅØ\n\nsubset = total_births[['John', 'Harry', 'Mary', 'Marilyn']]  # ÈÄâÂèñÂá†‰∏™ÂêçÂ≠ó\nsubset.plot(subplots=True, figsize=(12, 10),  # ÁªòÂà∂Â≠êÂõæ\n            title=\"Number of births per year\")  # ËÆæÁΩÆÊ†áÈ¢ò\nplt.show()  #ÊòæÁ§∫ÁªòÂõæ\n\nboys = ... Âíå girls = ...: Áî∑Â≠©/Â•≥Â≠©ÁöÑÂçïÁã¨ DataFrame„ÄÇ\ntotal_births = top1000.pivot_table(...): ÁâπÂÆöÂêçÂ≠óÁöÑË∂ãÂäø„ÄÇ\n\n'births': Ë¶ÅËÅöÂêàÁöÑÂÄº„ÄÇ\nindex='year': Âπ¥‰ªΩÊòØË°åÁ¥¢Âºï„ÄÇ\ncolumns='name': ÊØè‰∏™ÂêçÂ≠óÊòØ‰∏ÄÂàó„ÄÇ\naggfunc=sum: Ê±ÇÂíå„ÄÇ\n\nsubset.plot(...): ÁªòÂà∂Ë∂ãÂäøÂõæ„ÄÇ\n\nsubplots=True: ÊØè‰∏™ÂêçÂ≠ó‰∏Ä‰∏™ÂçïÁã¨ÁöÑÂõæ„ÄÇ\n\n\n\n\n\n‚ÄòÂá†‰∏™Áî∑Â≠©ÂíåÂ•≥Â≠©ÂêçÂ≠óÈöèÊó∂Èó¥ÁöÑÂèòÂåñ‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Ë°°ÈáèÂëΩÂêçÂ§öÊ†∑ÊÄßÁöÑÂ¢ûÂä†",
    "href": "qmd/pandas3ed13cn.html#Ë°°ÈáèÂëΩÂêçÂ§öÊ†∑ÊÄßÁöÑÂ¢ûÂä†",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Ë°°ÈáèÂëΩÂêçÂ§öÊ†∑ÊÄßÁöÑÂ¢ûÂä†",
    "text": "Ë°°ÈáèÂëΩÂêçÂ§öÊ†∑ÊÄßÁöÑÂ¢ûÂä†\n``````yhbszwga table = top1000.pivot_table(‚Äòprop‚Äô, index=‚Äòyear‚Äô, # ‰ª• ‚Äòyear‚Äô ‰∏∫Á¥¢Âºï columns=‚Äòsex‚Äô, aggfunc=sum) # ‰ª• ‚Äòsex‚Äô ‰∏∫ÂàóÔºåËÆ°ÁÆó ‚Äòprop‚Äô ÁöÑÊÄªÂíå table.plot(title=‚ÄòSum of table1000.prop by year and sex‚Äô, # ÁªòÂà∂ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ÂàíÂàÜÁöÑ ‚Äòprop‚Äô ÊÄªÂíå yticks=np.linspace(0, 1.2, 13)) # ËÆæÁΩÆ y ËΩ¥ÂàªÂ∫¶ plt.show() #ÊòæÁ§∫ÁªòÂõæ\ndf = boys[boys[‚Äòyear‚Äô] == 2010] # Á≠õÈÄâÂá∫ 2010 Âπ¥ÁöÑÁî∑Â≠©Êï∞ÊçÆ prop_cumsum = df[‚Äòprop‚Äô].sort_values(ascending=False).cumsum() # ËÆ°ÁÆó 2010 Âπ¥Áî∑Â≠©ÂêçÂ≠ó ‚Äòprop‚Äô ÁöÑÁ¥ØÁßØÂíå print(prop_cumsum[:10]) # ÊòæÁ§∫Ââç 10 ‰∏™Á¥ØÁßØÂíå print(prop_cumsum.searchsorted(0.5)) # ÊâæÂà∞Á¥ØÁßØÂíåËææÂà∞ 0.5 ÁöÑÁ¥¢Âºï, ÁªìÊûú‰∏∫116, Âä†‰∏ä1, ÁªìÊûú‰∏∫117.\ndf = boys[boys.year == 1900] # Á≠õÈÄâÂá∫ 1900 Âπ¥ÁöÑÁî∑Â≠©Êï∞ÊçÆ in1900 = df.sort_values(‚Äòprop‚Äô, ascending=False).prop.cumsum() # ËÆ°ÁÆó 1900 Âπ¥Áî∑Â≠©ÂêçÂ≠ó ‚Äòprop‚Äô ÁöÑÁ¥ØÁßØÂíå print(in1900.searchsorted(0.5) + 1) # ÊâæÂà∞Á¥ØÁßØÂíåËææÂà∞ 0.5 ÁöÑÁ¥¢Âºï+1, ÁªìÊûú‰∏∫25\n\n-   **ÁõÆÊ†áÔºö** ÂëΩÂêçÊòØÂê¶ÂèòÂæóÊõ¥Âä†Â§öÊ†∑ÂåñÔºüÔºàÁà∂ÊØçÊòØÂê¶‰ªéÊõ¥Â§öÂêçÂ≠ó‰∏≠ÈÄâÊã©ÔºüÔºâ\n-   **`table = top1000.pivot_table(...)`**: ÊØè‰∏™Âπ¥‰ªΩ/ÊÄßÂà´ÁöÑ 'prop' *ÊÄªÂíå*„ÄÇÊØî‰æã‰∏ãÈôç = Â§öÊ†∑ÊÄßÂ¢ûÂä†„ÄÇ\n-   **`prop_cumsum = ... .cumsum()`**: 2010 Âπ¥Áî∑Â≠© 'prop' ÁöÑ*Á¥ØÁßØÂíå*ÔºàÂ∑≤ÊéíÂ∫èÔºâ„ÄÇÊâæÂá∫Â§öÂ∞ë‰∏™ÂêçÂ≠óËææÂà∞ 50% ÁöÑÂá∫Áîü‰∫∫Êï∞„ÄÇ\n-   **`prop_cumsum.searchsorted(0.5)`**:  Á¥ØÁßØÂíåËææÂà∞ 0.5 (50%) ÁöÑÁ¥¢Âºï„ÄÇÂõ†‰∏∫Êï∞ÁªÑÁöÑ‰∏ãÊ†áÊòØ‰ªé0ÂºÄÂßãÁöÑÔºåÊâÄ‰ª•ÁªìÊûúÈúÄË¶ÅÂä†1.\n-   ÂØπ 1900 Âπ¥ÊâßË°åÁ±ª‰ººÊ≠•È™§„ÄÇ\n\n!['ÊåâÊÄßÂà´ÂàíÂàÜÔºåÂâç 1000 ‰∏™ÂêçÂ≠óÊâÄ‰ª£Ë°®ÁöÑÂá∫ÁîüÊØî‰æã'](prop_top1000.png)\n\n## Ë°°ÈáèÂëΩÂêçÂ§öÊ†∑ÊÄßÁöÑÂ¢ûÂä†ÔºàÁª≠Ôºâ- Ê≥õÂåñ\n\n``````{python}\ndef get_quantile_count(group, q=0.5):\n    group = group.sort_values('prop', ascending=False)  # Êåâ 'prop' ÈôçÂ∫èÊéíÂàó\n    return group.prop.cumsum().searchsorted(q) + 1  # ËÆ°ÁÆóÁ¥ØÁßØÂíåÔºåÊâæÂà∞ËææÂà∞ÂàÜ‰ΩçÊï∞ q ÁöÑÁ¥¢Âºï+1\n\ndiversity = top1000.groupby(['year', 'sex']).apply(get_quantile_count)  # ÊåâÂπ¥‰ªΩÂíåÊÄßÂà´ÂàÜÁªÑÔºåÂπ∂Â∫îÁî®ÂáΩÊï∞\ndiversity = diversity.unstack()  # Â∞ÜÁªìÊûúÈáçÂ°ë\n\nfig = plt.figure()  # ÂàõÂª∫ÂõæÂΩ¢\ndiversity.plot(title=\"Number of popular names in top 50%\")  # ÁªòÂà∂Â§öÊ†∑ÊÄßÊåáÊ†á\nplt.show()  #ÊòæÁ§∫ÁªòÂõæ\n\nget_quantile_count(group, q=0.5) ÂáΩÊï∞Ôºö\n\nÊé•Êî∂‰∏Ä‰∏™ÂàÜÁªÑÔºàÂπ¥‰ªΩ/ÊÄßÂà´ÔºâÂíåÂàÜ‰ΩçÊï∞ÔºàÈªòËÆ§‰∏∫ 0.5Ôºâ„ÄÇ\nÊåâ ‚Äòprop‚Äô ÊéíÂ∫èÔºàÈôçÂ∫èÔºâ„ÄÇ\n‚Äòprop‚Äô ÁöÑÁ¥ØÁßØÂíå„ÄÇ\nsearchsorted(q): ÊÄªÂíåËææÂà∞ÂàÜ‰ΩçÊï∞ÁöÑÁ¥¢Âºï„ÄÇÂä† 1„ÄÇ\n\ntop1000.groupby(['year', 'sex']).apply(get_quantile_count): Â∫îÁî®‰∫éÊØè‰∏™ÂàÜÁªÑ„ÄÇ\ndiversity.unstack(): ÈáçÂ°ë‰ª•ËøõË°åÁªòÂõæ„ÄÇ\nÂõæË°®ÊòæÁ§∫‰∫ÜËææÂà∞ 50% Âá∫Áîü‰∫∫Êï∞ÊâÄÈúÄÁöÑÂßìÂêçÊï∞ÈáèÔºåÈöèÊó∂Èó¥ÂèòÂåñÔºåÊåâÊÄßÂà´ÂàíÂàÜ„ÄÇ\n\n\n\n\n‚ÄòÊåâÂπ¥‰ªΩÂàíÂàÜÁöÑÂ§öÊ†∑ÊÄßÊåáÊ†áÂõæ‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÈù©ÂëΩ",
    "href": "qmd/pandas3ed13cn.html#ÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÈù©ÂëΩ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "‚ÄúÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç‚ÄùÈù©ÂëΩ üî§",
    "text": "‚ÄúÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç‚ÄùÈù©ÂëΩ üî§\n``````yhbszwga def get_last_letter(x): return x[-1] # Ëé∑ÂèñÂ≠óÁ¨¶‰∏≤ÁöÑÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç\nlast_letters = names[‚Äòname‚Äô].map(get_last_letter) # Â∞ÜÂáΩÊï∞Â∫îÁî®‰∫é ‚Äòname‚Äô ÂàóÔºåËé∑ÂèñÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç last_letters.name = ‚Äòlast_letter‚Äô # Â∞Ü Series ÂëΩÂêç‰∏∫ ‚Äòlast_letter‚Äô\ntable = names.pivot_table(‚Äòbirths‚Äô, index=last_letters, # ‰ª• ‚Äòlast_letter‚Äô ‰∏∫Á¥¢Âºï columns=[‚Äòsex‚Äô, ‚Äòyear‚Äô], aggfunc=sum) # ‰ª• ‚Äòsex‚Äô Âíå ‚Äòyear‚Äô ‰∏∫ÂàóÔºåËÆ°ÁÆó ‚Äòbirths‚Äô ÁöÑÊÄªÂíå subtable = table.reindex(columns=[1910, 1960, 2010], level=‚Äòyear‚Äô) # ÈÄâÂèñÁâπÂÆöÂπ¥‰ªΩ print(subtable.head()) # ÊòæÁ§∫ÂâçÂá†Ë°å print(subtable.sum()) # ËÆ°ÁÆóÊØè‰∏™Âπ¥‰ªΩÂíåÊÄßÂà´ÁöÑÊÄªÂíå\nletter_prop = subtable / subtable.sum() # ËÆ°ÁÆóÊØè‰∏™Âπ¥‰ªΩÂíåÊÄßÂà´‰∏≠ÔºåÊØè‰∏™Â≠óÊØçÁöÑÊØî‰æã print(letter_prop.head()) # ÊòæÁ§∫ÂâçÂá†Ë°å\n\n-   **ÊÉ≥Ê≥ïÔºö** ÂàÜÊûêÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÈöèÊó∂Èó¥ÁöÑÂàÜÂ∏É„ÄÇ\n-   **`get_last_letter(x)` ÂáΩÊï∞Ôºö**  ËøîÂõûÊúÄÂêé‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇ\n-   **`names['name'].map(get_last_letter)`**: Â∫îÁî®‰∫é 'name'ÔºåÂàõÂª∫ `last_letters` Series„ÄÇ\n-   **`table = names.pivot_table(...)`**: ÊåâÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç„ÄÅÊÄßÂà´ÂíåÂπ¥‰ªΩÁªüËÆ°Âá∫Áîü‰∫∫Êï∞„ÄÇ\n-   **`subtable = ...`**: ÈÄâÊã©ÁâπÂÆöÂπ¥‰ªΩ (1910, 1960, 2010)„ÄÇ\n-   **`letter_prop = subtable / subtable.sum()`**:  ÊØè‰∏™Â≠óÊØçÁªìÂ∞æÁöÑÂêçÂ≠óÁöÑ*ÊØî‰æã*ÔºàÊ†áÂáÜÂåñÔºâ„ÄÇ\n\n``````{python}\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(2, 1, figsize=(10, 8))  # ÂàõÂª∫ 2x1 ÁöÑÂ≠êÂõæ\nletter_prop['M'].plot(kind='bar', rot=0, ax=axes[0], title='Male')  # ÁªòÂà∂Áî∑ÊÄßÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÁöÑÊù°ÂΩ¢Âõæ\nletter_prop['F'].plot(kind='bar', rot=0, ax=axes[1], title='Female',  # ÁªòÂà∂Â•≥ÊÄßÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÁöÑÊù°ÂΩ¢Âõæ\n                      legend=False)  # ‰∏çÊòæÁ§∫Âõæ‰æã\nplt.show()  #ÊòæÁ§∫ÁªòÂõæ\n\nplt.subplots(2, 1, ...): ‰∏§‰∏™Â≠êÂõæÔºàÁî∑ÊÄß/Â•≥ÊÄßÔºâ„ÄÇ\nletter_prop['M'].plot(...) Âíå letter_prop['F'].plot(...): ÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÂàÜÂ∏ÉÁöÑÊù°ÂΩ¢Âõæ„ÄÇ\n\n\n\n\n‚ÄòÁî∑Â≠©ÂíåÂ•≥Â≠©ÂêçÂ≠ó‰ª•ÊØè‰∏™Â≠óÊØçÁªìÂ∞æÁöÑÊØî‰æã‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÈù©ÂëΩÁª≠--ÂÖ≥Ê≥®ÁâπÂÆöÂ≠óÊØç",
    "href": "qmd/pandas3ed13cn.html#ÊúÄÂêé‰∏Ä‰∏™Â≠óÊØçÈù©ÂëΩÁª≠--ÂÖ≥Ê≥®ÁâπÂÆöÂ≠óÊØç",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "‚ÄúÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç‚ÄùÈù©ÂëΩÔºàÁª≠Ôºâ- ÂÖ≥Ê≥®ÁâπÂÆöÂ≠óÊØç",
    "text": "‚ÄúÊúÄÂêé‰∏Ä‰∏™Â≠óÊØç‚ÄùÈù©ÂëΩÔºàÁª≠Ôºâ- ÂÖ≥Ê≥®ÁâπÂÆöÂ≠óÊØç\n```yhbszwga letter_prop = table / table.sum()  # ËÆ°ÁÆóÊâÄÊúâÂπ¥‰ªΩÁöÑÊØî‰æã dny_ts = letter_prop.loc[['d', 'n', 'y'], 'M'].T  # ÈÄâÂèñÁî∑ÊÄßÂêçÂ≠ó‰∏≠‰ª• 'd', 'n', 'y' ÁªìÂ∞æÁöÑÊØî‰æãÔºåÂπ∂ËΩ¨ÁΩÆ print(dny_ts.head())  # ÊòæÁ§∫ÂâçÂá†Ë°å dny_ts.plot()  # ÁªòÂà∂Ë∂ãÂäøÂõæ plt.show()  #ÊòæÁ§∫ÁªòÂõæ\n\nletter_prop = table / table.sum(): ÊØî‰æãÔºàÊâÄÊúâÂπ¥‰ªΩÔºâ„ÄÇ\ndny_ts = letter_prop.loc[['d', 'n', 'y'], 'M'].T: ÈÄâÊã©Áî∑ÊÄßÁöÑ ‚Äòd‚Äô„ÄÅ‚Äòn‚Äô„ÄÅ‚Äòy‚ÄôÔºåËΩ¨ÁΩÆ (.T) ‰ª•Ëé∑ÂæóÊó∂Èó¥Â∫èÂàó„ÄÇ\ndny_ts.plot(): ÁªòÂà∂Ëøô‰∫õÂ≠óÊØçÁöÑË∂ãÂäø„ÄÇ\n\n\n\n\n‚ÄòÈöèÁùÄÊó∂Èó¥ÁöÑÊé®ÁßªÔºå‰ª• d/n/y ÁªìÂ∞æÁöÑÁî∑Â≠©ÂêçÂ≠óÁöÑÊØî‰æã‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÂèòÊàêÂ•≥Â≠©ÂêçÂ≠óÁöÑÁî∑Â≠©ÂêçÂ≠óÂèç‰πã‰∫¶ÁÑ∂",
    "href": "qmd/pandas3ed13cn.html#ÂèòÊàêÂ•≥Â≠©ÂêçÂ≠óÁöÑÁî∑Â≠©ÂêçÂ≠óÂèç‰πã‰∫¶ÁÑ∂",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÂèòÊàêÂ•≥Â≠©ÂêçÂ≠óÁöÑÁî∑Â≠©ÂêçÂ≠óÔºàÂèç‰πã‰∫¶ÁÑ∂ÔºâüîÑ",
    "text": "ÂèòÊàêÂ•≥Â≠©ÂêçÂ≠óÁöÑÁî∑Â≠©ÂêçÂ≠óÔºàÂèç‰πã‰∫¶ÁÑ∂ÔºâüîÑ\n``````yhbszwga all_names = pd.Series(top1000[‚Äòname‚Äô].unique()) # Ëé∑ÂèñÊâÄÊúâÂîØ‰∏ÄÁöÑÂêçÂ≠ó lesley_like = all_names[all_names.str.contains(‚ÄòLesl‚Äô)] # Á≠õÈÄâÂá∫ÂåÖÂê´ ‚ÄòLesl‚Äô ÁöÑÂêçÂ≠ó print(lesley_like) # ÊòæÁ§∫Á≠õÈÄâÁªìÊûú\nfiltered = top1000[top1000[‚Äòname‚Äô].isin(lesley_like)] # Á≠õÈÄâÂá∫ top1000 ‰∏≠ÂåÖÂê´Ëøô‰∫õÂêçÂ≠óÁöÑÊï∞ÊçÆ print(filtered.groupby(‚Äòname‚Äô)[‚Äòbirths‚Äô].sum()) # ÊåâÂêçÂ≠óÁªüËÆ°Âá∫Áîü‰∫∫Êï∞\ntable = filtered.pivot_table(‚Äòbirths‚Äô, index=‚Äòyear‚Äô, # ‰ª• ‚Äòyear‚Äô ‰∏∫Á¥¢Âºï columns=‚Äòsex‚Äô, aggfunc=sum) # ‰ª• ‚Äòsex‚Äô ‰∏∫ÂàóÔºåËÆ°ÁÆó ‚Äòbirths‚Äô ÁöÑÊÄªÂíå table = table.div(table.sum(axis=‚Äúcolumns‚Äù), axis=‚Äúindex‚Äù) # ËÆ°ÁÆóÊØè‰∏™Âπ¥‰ªΩ‰∏≠ÔºåÊØè‰∏™ÊÄßÂà´ÁöÑÊØî‰æã print(table.tail()) # ÊòæÁ§∫ÊúÄÂêéÂá†Ë°å table.plot(style={‚ÄòM‚Äô: ‚Äòk-‚Äô, ‚ÄòF‚Äô: ‚Äòk‚Äì‚Äô}) # ÁªòÂà∂Ë∂ãÂäøÂõæ plt.show() #ÊòæÁ§∫ÁªòÂõæ\n\n-   **ÁõÆÊ†áÔºö** ÊâæÂà∞ÊîπÂèò‰∫ÜÊÄßÂà´ÂÅèÂ•ΩÁöÑÂêçÂ≠ó„ÄÇ\n-   **`all_names = ...`**:  `top1000` ‰∏≠ÊâÄÊúâ*ÂîØ‰∏Ä*ÁöÑÂêçÂ≠ó„ÄÇ\n-   **`lesley_like = ...`**: ÂåÖÂê´ \"Lesl\" ÁöÑÂêçÂ≠ó„ÄÇ\n-   **`filtered = ...`**: `top1000` ‰∏≠ÂåÖÂê´Ëøô‰∫õÂêçÂ≠óÁöÑË°å„ÄÇ\n-   **`filtered.groupby('name')['births'].sum()`**:  ÊØè‰∏™ÂêçÂ≠óÁöÑÊÄªÂá∫Áîü‰∫∫Êï∞„ÄÇ\n-   **`table = filtered.pivot_table(...)`**: ÊØèÂπ¥„ÄÅÊØèÊÄßÂà´ÁöÑÂá∫Áîü‰∫∫Êï∞„ÄÇ\n-   **`table = table.div(..., axis=\"index\")`**:  ÊØèÂπ¥ÊØèÊÄßÂà´ÁöÑ*ÊØî‰æã*ÔºàÊ†áÂáÜÂåñÔºâ„ÄÇ\n-   **`table.plot(...)`**:  Áî∑ÊÄß/Â•≥ÊÄßÊØî‰æãÁöÑË∂ãÂäø„ÄÇ\n\n!['ÈöèÁùÄÊó∂Èó¥ÁöÑÊé®ÁßªÔºåÁ±ª‰ºº Lesley ÁöÑÂêçÂ≠óÁöÑÁî∑ÊÄß/Â•≥ÊÄßÊØî‰æã'](lesleylike_names.png)\n\n## 13.4 USDA È£üÂìÅÊï∞ÊçÆÂ∫ì üçé\n\n-   **Êï∞ÊçÆÈõÜÔºö** USDA È£üÂìÅËê•ÂÖªÊï∞ÊçÆÂ∫ì„ÄÇ\n-   **Êï∞ÊçÆÊ†ºÂºèÔºö** JSON„ÄÇ\n-   **Á§∫‰æãËÆ∞ÂΩïÔºö**\n\n```json\n{\n  \"id\": 21441,\n  \"description\": \"KENTUCKY FRIED CHICKEN, Fried Chicken, EXTRA CRISPY, Wing, meat and skin with breading\",\n  \"tags\": [\"KFC\"],\n  \"manufacturer\": \"Kentucky Fried Chicken\",\n  \"group\": \"Fast Foods\",\n  \"portions\": [\n    {\n      \"amount\": 1,\n      \"unit\": \"wing, with skin\",\n      \"grams\": 68.0\n    }\n  ],\n  \"nutrients\": [\n    {\n      \"value\": 20.8,\n      \"units\": \"g\",\n      \"description\": \"Protein\",\n      \"group\": \"Composition\"\n    }\n  ]\n}\n\nÁõÆÊ†áÔºö ÂàÜÊûêËê•ÂÖª‰ø°ÊÅØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Âä†ËΩΩÂíåÊé¢Á¥¢-usda-Êï∞ÊçÆ",
    "href": "qmd/pandas3ed13cn.html#Âä†ËΩΩÂíåÊé¢Á¥¢-usda-Êï∞ÊçÆ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Âä†ËΩΩÂíåÊé¢Á¥¢ USDA Êï∞ÊçÆ",
    "text": "Âä†ËΩΩÂíåÊé¢Á¥¢ USDA Êï∞ÊçÆ\n``````yhbszwga import json # ÂØºÂÖ• json Â∫ì import pandas as pd\ndb = json.load(open(‚Äòdatasets/usda_food/database.json‚Äô)) # Âä†ËΩΩ JSON Êï∞ÊçÆ print(len(db)) # ÊòæÁ§∫ËÆ∞ÂΩïÊï∞Èáè print(db[0].keys()) # ÊòæÁ§∫Á¨¨‰∏ÄÊù°ËÆ∞ÂΩïÁöÑÈîÆ print(db[0][‚Äònutrients‚Äô][0]) # ÊòæÁ§∫Á¨¨‰∏ÄÊù°ËÆ∞ÂΩïÁöÑÁ¨¨‰∏Ä‰∏™Ëê•ÂÖªÁ¥†\nnutrients = pd.DataFrame(db[0][‚Äònutrients‚Äô]) # ÂàõÂª∫Á¨¨‰∏Ä‰∏™È£üÁâ©ÁöÑËê•ÂÖªÁ¥† DataFrame print(nutrients.head(7)) # ÊòæÁ§∫Ââç 7 Ë°å\n\n-   **`import json`**: ÂØºÂÖ• `json` Â∫ì„ÄÇ\n-   **`db = json.load(...)`**:  Â∞Ü JSON Âä†ËΩΩÂà∞ ```{python} ÂØπË±°Ôºà`db` - Â≠óÂÖ∏ÂàóË°®Ôºâ‰∏≠„ÄÇ\n-   **`len(db)`**:  È£üÁâ©ËÆ∞ÂΩïÁöÑÊï∞Èáè„ÄÇ\n-   **`db[0].keys()`**: Á¨¨‰∏ÄÊù°ËÆ∞ÂΩï‰∏≠ÁöÑÈîÆ„ÄÇ\n-   **`db[0]['nutrients'][0]`**:  Á¨¨‰∏Ä‰∏™È£üÁâ©ÁöÑÁ¨¨‰∏Ä‰∏™Ëê•ÂÖªÁ¥†„ÄÇ\n-   **`nutrients = pd.DataFrame(...)`**: *Á¨¨‰∏Ä‰∏™*È£üÁâ©ÁöÑËê•ÂÖªÁ¥†ÁöÑ DataFrame„ÄÇ\n\n## ÊèêÂèñÈ£üÁâ©‰ø°ÊÅØ\n\n``````{python}\ninfo_keys = ['description', 'group', 'id', 'manufacturer']  # Ë¶ÅÊèêÂèñÁöÑÈîÆ\ninfo = pd.DataFrame(db, columns=info_keys)  # ÂàõÂª∫ÂåÖÂê´È£üÁâ©‰ø°ÊÅØÁöÑ DataFrame\nprint(info.head())  # ÊòæÁ§∫ÂâçÂá†Ë°å\nprint(info.info())  # ÊòæÁ§∫ DataFrame ÁöÑ‰ø°ÊÅØ\nprint(pd.value_counts(info['group'])[:10])  # ÁªüËÆ°Âπ∂ÊòæÁ§∫Âá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑÂâç 10 ‰∏™È£üÁâ©ÁªÑ\n\nÁõÆÊ†áÔºö ÂåÖÂê´Âü∫Êú¨È£üÁâ©‰ø°ÊÅØÁöÑ DataFrame (info)„ÄÇ\ninfo_keys = [...]: Ë¶ÅÊèêÂèñÁöÑÈîÆ„ÄÇ\ninfo = pd.DataFrame(db, columns=info_keys): ÂàõÂª∫ DataFrame„ÄÇ\ninfo.head(): ÂâçÂá†Ë°å„ÄÇ\ninfo.info(): ÊëòË¶Å„ÄÇ\npd.value_counts(info['group'])[:10]: Ââç 10 ‰∏™È£üÁâ©ÁªÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Â§ÑÁêÜËê•ÂÖªÊï∞ÊçÆÊâÄÊúâÈ£üÁâ©",
    "href": "qmd/pandas3ed13cn.html#Â§ÑÁêÜËê•ÂÖªÊï∞ÊçÆÊâÄÊúâÈ£üÁâ©",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Â§ÑÁêÜËê•ÂÖªÊï∞ÊçÆÔºàÊâÄÊúâÈ£üÁâ©Ôºâ",
    "text": "Â§ÑÁêÜËê•ÂÖªÊï∞ÊçÆÔºàÊâÄÊúâÈ£üÁâ©Ôºâ\n``````yhbszwga nutrients = [] # Áî®‰∫éÂ≠òÂÇ®ÊâÄÊúâÈ£üÁâ©ÁöÑËê•ÂÖªÁ¥†\nfor rec in db: # ÈÅçÂéÜÈ£üÁâ©ËÆ∞ÂΩï fnuts = pd.DataFrame(rec[‚Äònutrients‚Äô]) # ÂàõÂª∫ÂΩìÂâçÈ£üÁâ©ÁöÑËê•ÂÖªÁ¥† DataFrame fnuts[‚Äòid‚Äô] = rec[‚Äòid‚Äô] # Ê∑ªÂä†È£üÁâ© ID nutrients.append(fnuts) # Â∞ÜÂΩìÂâçÈ£üÁâ©ÁöÑËê•ÂÖªÁ¥† DataFrame Ê∑ªÂä†Âà∞ÂàóË°®\nnutrients = pd.concat(nutrients, ignore_index=True) # ÂêàÂπ∂ÊâÄÊúâËê•ÂÖªÁ¥† DataFrame print(nutrients) # ÊòæÁ§∫ÂêàÂπ∂ÂêéÁöÑ DataFrame\n\n-   **ÁõÆÊ†á**ÔºöÂåÖÂê´*ÊâÄÊúâ*Ëê•ÂÖª‰ø°ÊÅØÁöÑÂçï‰∏™ DataFrame (`nutrients`)„ÄÇ\n-   **Âæ™ÁéØÔºö**\n    -   `for rec in db:`: ÈÅçÂéÜÈ£üÁâ©ËÆ∞ÂΩï„ÄÇ\n    -   `fnuts = pd.DataFrame(rec['nutrients'])`: ÂΩìÂâçÈ£üÁâ©Ëê•ÂÖªÁ¥†ÁöÑ DataFrame„ÄÇ\n    -   `fnuts['id'] = rec['id']`: Ê∑ªÂä†È£üÁâ© IDÔºàÁî®‰∫éÈìæÊé•Ôºâ„ÄÇ\n    -   `nutrients.append(fnuts)`: ËøΩÂä†Âà∞ÂàóË°®„ÄÇ\n-   **`nutrients = pd.concat(nutrients, ignore_index=True)`**:  ÂêàÂπ∂ÊâÄÊúâËê•ÂÖªÁ¥† DataFrame„ÄÇ\n\n## Â§ÑÁêÜÈáçÂ§çÈ°πÂíåÈáçÂëΩÂêç\n\n``````{python}\nnutrients.duplicated().sum()  # Ê£ÄÊü•ÈáçÂ§çÁöÑË°åÊï∞\nnutrients = nutrients.drop_duplicates()  # Âà†Èô§ÈáçÂ§çÁöÑË°å\n\ncol_mapping = {'description' : 'food',  # ÂàóÂêçÊò†Â∞ÑÂ≠óÂÖ∏\n               'group'       : 'fgroup'}\ninfo = info.rename(columns=col_mapping, copy=False)  # ÈáçÂëΩÂêç info DataFrame ÁöÑÂàó\nprint(info.info())  # ÊòæÁ§∫ÈáçÂëΩÂêçÂêéÁöÑ info DataFrame ÁöÑ‰ø°ÊÅØ\n\ncol_mapping = {'description' : 'nutrient',  # ÂàóÂêçÊò†Â∞ÑÂ≠óÂÖ∏\n               'group' : 'nutgroup'}\nnutrients = nutrients.rename(columns=col_mapping, copy=False)  # ÈáçÂëΩÂêç nutrients DataFrame ÁöÑÂàó\nprint(nutrients)  # ÊòæÁ§∫ÈáçÂëΩÂêçÂêéÁöÑ nutrients DataFrame\n\nÈáçÂ§çÈ°πÊ£ÄÊü•ÂíåÂà†Èô§Ôºö\n\nÊüê‰∫õËê•ÂÖªÁ¥†Ë°åÊòØÈáçÂ§çÁöÑ„ÄÇËØ∑Âú®ÁªßÁª≠‰πãÂâçÂà†Èô§„ÄÇ\nnutrients.duplicated().sum(): ÁªüËÆ°ÈáçÂ§çÁöÑË°åÊï∞„ÄÇ\nnutrients = nutrients.drop_duplicates(): Âà†Èô§ÈáçÂ§çË°å„ÄÇ\n\nÈáçÂëΩÂêçÂàóÔºö\n\ncol_mapping = ...: Â∞ÜÊóßÂêçÁß∞Êò†Â∞ÑÂà∞Êñ∞ÂêçÁß∞ÔºàÊõ¥Ê∏ÖÊô∞Ôºâ„ÄÇ\ninfo = info.rename(..., copy=False): ÈáçÂëΩÂêç info ÂàóÔºàÂéüÂú∞Ôºâ„ÄÇ\nnutrients = nutrients.rename(...): ÈáçÂëΩÂêç nutrients Âàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÂêàÂπ∂È£üÁâ©ÂíåËê•ÂÖªÊï∞ÊçÆ",
    "href": "qmd/pandas3ed13cn.html#ÂêàÂπ∂È£üÁâ©ÂíåËê•ÂÖªÊï∞ÊçÆ",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÂêàÂπ∂È£üÁâ©ÂíåËê•ÂÖªÊï∞ÊçÆ",
    "text": "ÂêàÂπ∂È£üÁâ©ÂíåËê•ÂÖªÊï∞ÊçÆ\n```yhbszwga ndata = pd.merge(nutrients, info, on='id')  # Âü∫‰∫é 'id' ÂàóÂêàÂπ∂ nutrients Âíå info DataFrame print(ndata.info())  # ÊòæÁ§∫ÂêàÂπ∂ÂêéÁöÑ DataFrame ÁöÑ‰ø°ÊÅØ print(ndata.iloc[30000])  # ÊòæÁ§∫Á¨¨ 30001 Ë°åÊï∞ÊçÆ\n\nndata = pd.merge(nutrients, info, on='id'): Âü∫‰∫é ‚Äòid‚Äô ÂêàÂπ∂„ÄÇÂåÖÂê´ÊâÄÊúâ‰ø°ÊÅØÁöÑÂçï‰∏™ DataFrame„ÄÇ\nndata.info(): ÊëòË¶Å„ÄÇ\nndata.iloc[30000]: Á§∫‰æãË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÁªòÂà∂‰∏≠‰ΩçÊï∞Ëê•ÂÖªÂÄº",
    "href": "qmd/pandas3ed13cn.html#ÁªòÂà∂‰∏≠‰ΩçÊï∞Ëê•ÂÖªÂÄº",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÁªòÂà∂‰∏≠‰ΩçÊï∞Ëê•ÂÖªÂÄº",
    "text": "ÁªòÂà∂‰∏≠‰ΩçÊï∞Ëê•ÂÖªÂÄº\n```yhbszwga result = ndata.groupby(['nutrient', 'fgroup'])['value'].quantile(0.5)  # Êåâ 'nutrient' Âíå 'fgroup' ÂàÜÁªÑÔºåËÆ°ÁÆó 'value' ÁöÑ‰∏≠‰ΩçÊï∞ result['Zinc, Zn'].sort_values().plot(kind='barh')  # ÁªòÂà∂ÈîåÁöÑ‰∏≠‰ΩçÊï∞ÔºåÊåâÂÄºÊéíÂ∫èÔºåÊ∞¥Âπ≥Êù°ÂΩ¢Âõæ plt.show() # ÊòæÁ§∫ÁªòÂõæ\n\nÁõÆÊ†áÔºö ÂèØËßÜÂåñÊØè‰∏™È£üÁâ©ÁªÑÁöÑ‰∏≠‰ΩçÊï∞Ëê•ÂÖªÂÄº„ÄÇ\nresult = ndata.groupby(['nutrient', 'fgroup'])['value'].quantile(0.5):\n\nÊåâËê•ÂÖªÁ¥†ÂíåÈ£üÁâ©ÁªÑÂàÜÁªÑ„ÄÇ\nËÆ°ÁÆó ‚Äòvalue‚Äô ÁöÑ‰∏≠‰ΩçÊï∞Ôºà0.5 ÂàÜ‰ΩçÊï∞Ôºâ„ÄÇ\n\nresult['Zinc, Zn']...plot(kind='barh'):\n\nÈÄâÊã©Èîå„ÄÇ\nÂØπÂÄºËøõË°åÊéíÂ∫è„ÄÇ\nÊ∞¥Âπ≥Êù°ÂΩ¢Âõæ„ÄÇ\n\n\n\n\n\n‚ÄòÊåâÈ£üÁâ©ÁªÑÂàíÂàÜÁöÑÈîå‰∏≠‰ΩçÊï∞ÂÄº‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Êü•ÊâæÂÖ∑ÊúâÊúÄÂ§ßËê•ÂÖªÂÄºÁöÑÈ£üÁâ©",
    "href": "qmd/pandas3ed13cn.html#Êü•ÊâæÂÖ∑ÊúâÊúÄÂ§ßËê•ÂÖªÂÄºÁöÑÈ£üÁâ©",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Êü•ÊâæÂÖ∑ÊúâÊúÄÂ§ßËê•ÂÖªÂÄºÁöÑÈ£üÁâ©",
    "text": "Êü•ÊâæÂÖ∑ÊúâÊúÄÂ§ßËê•ÂÖªÂÄºÁöÑÈ£üÁâ©\n``````yhbszwga by_nutrient = ndata.groupby([‚Äònutgroup‚Äô, ‚Äònutrient‚Äô]) # Êåâ ‚Äònutgroup‚Äô Âíå ‚Äònutrient‚Äô ÂàÜÁªÑ\ndef get_maximum(x): return x.loc[x.value.idxmax()] # Ëé∑ÂèñÊØè‰∏™ÂàÜÁªÑ‰∏≠ ‚Äòvalue‚Äô ÊúÄÂ§ßÁöÑË°å\nmax_foods = by_nutrient.apply(get_maximum)[[‚Äòvalue‚Äô, ‚Äòfood‚Äô]] # Â∫îÁî®ÂáΩÊï∞ÔºåÂπ∂ÈÄâÊã© ‚Äòvalue‚Äô Âíå ‚Äòfood‚Äô Âàó max_foods[‚Äòfood‚Äô] = max_foods[‚Äòfood‚Äô].str[:50] # Êà™Êñ≠ ‚Äòfood‚Äô ÂàóÁöÑÈïøÂ∫¶ print(max_foods.loc[‚ÄòAmino Acids‚Äô][‚Äòfood‚Äô]) # ÊòæÁ§∫Ê∞®Âü∫ÈÖ∏ÁªÑ‰∏≠ÔºåÂêÑÁßçËê•ÂÖªÁ¥†Âê´ÈáèÊúÄÈ´òÁöÑÈ£üÁâ©\n\n-   **ÁõÆÊ†áÔºö** ÊØèÁßçËê•ÂÖªÁ¥†*Âê´ÈáèÊúÄÈ´ò*ÁöÑÈ£üÁâ©„ÄÇ\n-   **`by_nutrient = ndata.groupby(['nutgroup', 'nutrient'])`**: ÊåâËê•ÂÖªÁ¥†ÁªÑÂíåÂêçÁß∞ÂàÜÁªÑ„ÄÇ\n-   **`get_maximum(x)` ÂáΩÊï∞Ôºö**\n    -   Êé•Êî∂‰∏Ä‰∏™ÂàÜÁªÑ„ÄÇ\n    -   `x.value.idxmax()`:  'value' ÊúÄÂ§ßÁöÑË°åÁöÑ*Á¥¢Âºï*„ÄÇ\n    -   `x.loc[...]`:  ÈÄâÊã©ËØ•Ë°å„ÄÇ\n-   **`max_foods = ...`**: Â∫îÁî® `get_maximum`ÔºåÈÄâÊã© 'value' Âíå 'food'„ÄÇ\n-   **`max_foods['food'] = ...str[:50]`**: Áº©Áü≠È£üÁâ©ÂêçÁß∞„ÄÇ\n\n## 13.5 2012 Âπ¥ËÅîÈÇ¶ÈÄâ‰∏æÂßîÂëò‰ºöÊï∞ÊçÆÂ∫ì üó≥Ô∏è\n\n-   **Êï∞ÊçÆÈõÜÔºö** 2012 Âπ¥ÁæéÂõΩ FEC Á´ûÈÄâÊçêÊ¨æÊï∞ÊçÆ„ÄÇ\n-   **ÂÜÖÂÆπÔºö**\n    -   ÊçêÊ¨æ‰∫∫ÂßìÂêç„ÄÇ\n    -   ËÅå‰∏ö/Èõá‰∏ª„ÄÇ\n    -   Âú∞ÂùÄ„ÄÇ\n    -   ÊçêÊ¨æÈáëÈ¢ù„ÄÇ\n-   **Êï∞ÊçÆÊ†ºÂºèÔºö** CSV„ÄÇ\n-   **Êñá‰ª∂Ôºö**  `P00000001-ALL.csv`„ÄÇ\n-   **ÁõÆÊ†áÔºö** ÂàÜÊûêÊçêÊ¨æÊ®°Âºè„ÄÇ\n\n``````{python}\nimport pandas as pd\nfec = pd.read_csv('datasets/fec/P00000001-ALL.csv', low_memory=False)  # ËØªÂèñ CSV Êñá‰ª∂\nprint(fec.info())  # ÊòæÁ§∫ DataFrame ÁöÑ‰ø°ÊÅØ\nprint(fec.iloc[123456])  # ÊòæÁ§∫Á¨¨ 123457 Ë°åÊï∞ÊçÆ\n\nfec = pd.read_csv(...): Âä†ËΩΩ CSV„ÄÇ\nlow_memory=False: ÈáçË¶Å„ÄÇÂ§ßÊñá‰ª∂Ôºõ‰ΩøÁî® False ‰ª•ËøõË°åÂáÜÁ°ÆÁöÑÁ±ªÂûãÊé®Êñ≠„ÄÇ\nfec.info(): ÊëòË¶Å„ÄÇ\nfec.iloc[123456]: Á§∫‰æãËÆ∞ÂΩï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#Ê∑ªÂä†ÊîøÂÖöÂΩíÂ±û",
    "href": "qmd/pandas3ed13cn.html#Ê∑ªÂä†ÊîøÂÖöÂΩíÂ±û",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "Ê∑ªÂä†ÊîøÂÖöÂΩíÂ±û",
    "text": "Ê∑ªÂä†ÊîøÂÖöÂΩíÂ±û\n``````yhbszwga unique_cands = fec[‚Äòcand_nm‚Äô].unique() # Ëé∑ÂèñÂîØ‰∏ÄÁöÑÂÄôÈÄâ‰∫∫ÂßìÂêç print(unique_cands) # ÊòæÁ§∫ÂîØ‰∏ÄÁöÑÂÄôÈÄâ‰∫∫ÂßìÂêç\nparties = {‚ÄòBachmann, Michelle‚Äô: ‚ÄòRepublican‚Äô, # ÂÄôÈÄâ‰∫∫ÂßìÂêç‰∏éÊîøÂÖöÁöÑÊò†Â∞ÑÂ≠óÂÖ∏ ‚ÄòCain, Herman‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòGingrich, Newt‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòHuntsman, Jon‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòJohnson, Gary Earl‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòMcCotter, Thaddeus G‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòObama, Barack‚Äô: ‚ÄòDemocrat‚Äô, ‚ÄòPaul, Ron‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòPawlenty, Timothy‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòPerry, Rick‚Äô: ‚ÄòRepublican‚Äô, ‚ÄúRoemer, Charles E. ‚ÄòBuddy‚Äô III‚Äù: ‚ÄòRepublican‚Äô, ‚ÄòRomney, Mitt‚Äô: ‚ÄòRepublican‚Äô, ‚ÄòSantorum, Rick‚Äô: ‚ÄòRepublican‚Äô}\nprint(fec[‚Äòcand_nm‚Äô][123456:123461]) # ÊòæÁ§∫‰∏ÄÈÉ®ÂàÜÂÄôÈÄâ‰∫∫ÂßìÂêç print(fec[‚Äòcand_nm‚Äô][123456:123461].map(parties)) # Â∞ÜËøô‰∫õÂÄôÈÄâ‰∫∫ÂßìÂêçÊò†Â∞ÑÂà∞ÊîøÂÖö\nfec[‚Äòparty‚Äô] = fec[‚Äòcand_nm‚Äô].map(parties) # Âü∫‰∫éÊò†Â∞ÑÂ≠óÂÖ∏ÔºåÂàõÂª∫ ‚Äòparty‚Äô Âàó print(fec[‚Äòparty‚Äô].value_counts()) # ÁªüËÆ°ÊØè‰∏™ÊîøÂÖöÁöÑÊçêÊ¨æÊï∞Èáè\n\n-   **`unique_cands = fec['cand_nm'].unique()`**: ÂîØ‰∏ÄÂÄôÈÄâ‰∫∫ÂßìÂêç„ÄÇ\n-   **`parties = {...}`**:  Â≠óÂÖ∏ÔºöÂÄôÈÄâ‰∫∫ÂßìÂêç -&gt; ÊîøÂÖö„ÄÇ\n-   **`fec['cand_nm'][...].map(parties)`**:  Â±ïÁ§∫ `map` ÁöÑÂ∑•‰ΩúÂéüÁêÜ„ÄÇ\n-   **`fec['party'] = fec['cand_nm'].map(parties)`**: ÂàõÂª∫ 'party' Âàó„ÄÇ\n-   **`fec['party'].value_counts()`**:  ÊØè‰∏™ÊîøÂÖöÁöÑËÆ°Êï∞„ÄÇ\n\n## ËøáÊª§ÊçêÊ¨æÔºà‰ªÖÈôêÊ≠£ÈáëÈ¢ùÔºâ\n\n``````{python}\nprint((fec['contb_receipt_amt'] &gt; 0).value_counts())  # ÁªüËÆ°ÊçêÊ¨æÈáëÈ¢ùÂ§ß‰∫é 0 ÂíåÂ∞è‰∫éÁ≠â‰∫é 0 ÁöÑÊï∞Èáè\n\nfec = fec[fec['contb_receipt_amt'] &gt; 0]  # ‰ªÖ‰øùÁïôÊçêÊ¨æÈáëÈ¢ùÂ§ß‰∫é 0 ÁöÑÊï∞ÊçÆ\n\nÈóÆÈ¢òÔºöÂåÖÊã¨ÊçêÊ¨æÔºàÊ≠£ÔºâÂíåÈÄÄÊ¨æÔºàË¥üÔºâ„ÄÇ\n(... &gt; 0).value_counts(): Ê£ÄÊü•Ê≠£/Ë¥üËÆ°Êï∞„ÄÇ\nfec = fec[... &gt; 0]: ËøáÊª§‰ª•‰ªÖ‰øùÁïôÊ≠£ÊçêÊ¨æ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊåâÂÄôÈÄâ‰∫∫ËøáÊª§Â••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞º",
    "href": "qmd/pandas3ed13cn.html#ÊåâÂÄôÈÄâ‰∫∫ËøáÊª§Â••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞º",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊåâÂÄôÈÄâ‰∫∫ËøáÊª§ÔºàÂ••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞ºÔºâ",
    "text": "ÊåâÂÄôÈÄâ‰∫∫ËøáÊª§ÔºàÂ••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞ºÔºâ\n```yhbszwga fec_mrbo = fec[fec['cand_nm'].isin(['Obama, Barack', 'Romney, Mitt'])]  # ‰ªÖ‰øùÁïôÂ••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞ºÁöÑÊçêÊ¨æÊï∞ÊçÆ\n\nÁõÆÊ†áÔºö ÂÖ≥Ê≥®‰∏§‰Ωç‰∏ªË¶ÅÂÄôÈÄâ‰∫∫„ÄÇ\nfec_mrbo = fec[fec['cand_nm'].isin([...])]: ËøáÊª§Â••Â∑¥È©¨/ÁΩóÂßÜÂ∞º„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊåâËÅå‰∏öÂíåÈõá‰∏ªÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°",
    "href": "qmd/pandas3ed13cn.html#ÊåâËÅå‰∏öÂíåÈõá‰∏ªÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊåâËÅå‰∏öÂíåÈõá‰∏ªÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°",
    "text": "ÊåâËÅå‰∏öÂíåÈõá‰∏ªÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°\n``````yhbszwga print(fec[‚Äòcontbr_occupation‚Äô].value_counts()[:10]) # ÁªüËÆ°Âπ∂ÊòæÁ§∫Âá∫Áé∞Ê¨°Êï∞ÊúÄÂ§öÁöÑÂâç 10 ‰∏™ËÅå‰∏ö\nocc_mapping = { # ËÅå‰∏öÊò†Â∞ÑÂ≠óÂÖ∏ÔºåÂ∞ÜÁõ∏‰ººÁöÑËÅå‰∏öÂêçÁß∞Áªü‰∏Ä ‚ÄòINFORMATION REQUESTED PER BEST EFFORTS‚Äô : ‚ÄòNOT PROVIDED‚Äô, ‚ÄòINFORMATION REQUESTED‚Äô : ‚ÄòNOT PROVIDED‚Äô, ‚ÄòINFORMATION REQUESTED (BEST EFFORTS)‚Äô : ‚ÄòNOT PROVIDED‚Äô, ‚ÄòC.E.O.‚Äô: ‚ÄòCEO‚Äô }\ndef get_occ(x): # Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõÊò†Â∞ÑÔºåÂàôËøîÂõû x return occ_mapping.get(x, x) # Ëé∑ÂèñÊò†Â∞ÑÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôËøîÂõûÂéüÂÄº\nfec[‚Äòcontbr_occupation‚Äô] = fec[‚Äòcontbr_occupation‚Äô].map(get_occ) # Â∫îÁî®ËÅå‰∏öÊò†Â∞Ñ\n\n-   **`fec['contbr_occupation'].value_counts()[:10]`**: Ââç 10 ‰∏™ËÅå‰∏ö„ÄÇ\n-   **ÈóÆÈ¢òÔºö** Áõ∏‰ººËÅå‰∏öÁöÑÂèò‰Ωì (\"INFORMATION REQUESTED\")„ÄÇ\n-   **`occ_mapping = {...}`**: Â∞ÜÂèò‰ΩìÊò†Â∞ÑÂà∞Ê†áÂáÜÂΩ¢Âºè„ÄÇ\n-   **`get_occ(x)` ÂáΩÊï∞Ôºö**\n    -   ‰ΩøÁî® `occ_mapping.get(x, x)`„ÄÇÂ¶ÇÊûú `x` Âú®Â≠óÂÖ∏‰∏≠ÔºåÂàôËøîÂõûÊò†Â∞ÑÁöÑÂÄºÔºõÂê¶ÂàôÔºåËøîÂõû `x`„ÄÇ\n-   **`fec['contbr_occupation'] = ...map(get_occ)`**: Ê†áÂáÜÂåñËÅå‰∏ö„ÄÇ\n\n## ÊåâËÅå‰∏öÂíåÈõá‰∏ªÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°ÔºàÁª≠Ôºâ- Èõá‰∏ª + Êï∞ÊçÆÈÄèËßÜË°®\n\n``````{python}\nemp_mapping = {  # Èõá‰∏ªÊò†Â∞ÑÂ≠óÂÖ∏ÔºåÂ∞ÜÁõ∏‰ººÁöÑÈõá‰∏ªÂêçÁß∞Áªü‰∏Ä\n    'INFORMATION REQUESTED PER BEST EFFORTS' : 'NOT PROVIDED',\n    'INFORMATION REQUESTED' : 'NOT PROVIDED',\n    'SELF' : 'SELF-EMPLOYED',\n    'SELF EMPLOYED' : 'SELF-EMPLOYED',\n}\n\ndef get_emp(x):\n    # Â¶ÇÊûúÊ≤°ÊúâÊèê‰æõÊò†Â∞ÑÔºåÂàôËøîÂõû x\n    return emp_mapping.get(x, x)  # Ëé∑ÂèñÊò†Â∞ÑÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂàôËøîÂõûÂéüÂÄº\n\nfec['contbr_employer'] = fec['contbr_employer'].map(get_emp)  # Â∫îÁî®Èõá‰∏ªÊò†Â∞Ñ\n\nby_occupation = fec.pivot_table('contb_receipt_amt',  # ÂàõÂª∫Êï∞ÊçÆÈÄèËßÜË°®\n                                index='contbr_occupation',  # ‰ª• 'contbr_occupation' ‰∏∫Á¥¢Âºï\n                                columns='party', aggfunc='sum')  # ‰ª• 'party' ‰∏∫ÂàóÔºåËÆ°ÁÆó 'contb_receipt_amt' ÁöÑÊÄªÂíå\n\nover_2mm = by_occupation[by_occupation.sum(axis=\"columns\") &gt; 2000000]  # Á≠õÈÄâÂá∫ÊÄªÊçêÊ¨æÈáëÈ¢ùÂ§ß‰∫é 200 ‰∏áÁöÑËÅå‰∏ö\nprint(over_2mm)  # ÊòæÁ§∫Á≠õÈÄâÁªìÊûú\n\nÈõá‰∏ªÔºö‰∏éËÅå‰∏öÁõ∏ÂêåÁöÑËøáÁ®ã„ÄÇ\nby_occupation = fec.pivot_table(...): ÊåâËÅå‰∏ö/ÊîøÂÖöÁöÑÊçêÊ¨æ„ÄÇ\n\n'contb_receipt_amt': Ë¶ÅËÅöÂêàÁöÑÂÄº„ÄÇ\nindex='contbr_occupation': ËÅå‰∏öÊòØË°åÁ¥¢Âºï„ÄÇ\ncolumns='party': ÊîøÂÖöÊàê‰∏∫Âàó„ÄÇ\naggfunc='sum': ÊÄªÊçêÊ¨æ„ÄÇ\n\nover_2mm = ...: ÊÄªÊçêÊ¨æ &gt; 200 ‰∏áÁæéÂÖÉÁöÑËÅå‰∏ö„ÄÇ\n\n```yhbszwga over_2mm.plot(kind='barh')  # ÁªòÂà∂Ê∞¥Âπ≥Êù°ÂΩ¢Âõæ plt.show()  #ÊòæÁ§∫ÁªòÂõæ\n\n\n\n‚ÄòÊåâÁÉ≠Èó®ËÅå‰∏öÂàíÂàÜÁöÑÂêÑÊîøÂÖöÊÄªÊçêÊ¨æÈ¢ù‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÁÉ≠Èó®ÊçêÊ¨æ‰∫∫ËÅå‰∏öÂíåÈõá‰∏ªÈíàÂØπÂ••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞º",
    "href": "qmd/pandas3ed13cn.html#ÁÉ≠Èó®ÊçêÊ¨æ‰∫∫ËÅå‰∏öÂíåÈõá‰∏ªÈíàÂØπÂ••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞º",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÁÉ≠Èó®ÊçêÊ¨æ‰∫∫ËÅå‰∏öÂíåÈõá‰∏ªÔºàÈíàÂØπÂ••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞ºÔºâ",
    "text": "ÁÉ≠Èó®ÊçêÊ¨æ‰∫∫ËÅå‰∏öÂíåÈõá‰∏ªÔºàÈíàÂØπÂ••Â∑¥È©¨ÂíåÁΩóÂßÜÂ∞ºÔºâ\n``````yhbszwga def get_top_amounts(group, key, n=5): totals = group.groupby(key)[‚Äòcontb_receipt_amt‚Äô].sum() # Êåâ key ÂàÜÁªÑÔºåËÆ°ÁÆó ‚Äòcontb_receipt_amt‚Äô ÁöÑÊÄªÂíå return totals.nlargest(n) # ËøîÂõûÊÄªÂíåÊúÄÂ§ßÁöÑÂâç n ‰∏™\ngrouped = fec_mrbo.groupby(‚Äòcand_nm‚Äô) # ÊåâÂÄôÈÄâ‰∫∫ÂßìÂêçÂàÜÁªÑ print(grouped.apply(get_top_amounts, ‚Äòcontbr_occupation‚Äô, n=7)) # Ëé∑ÂèñÊØè‰∏™ÂÄôÈÄâ‰∫∫ÊçêÊ¨æÈáëÈ¢ùÊúÄÂ§öÁöÑÂâç 7 ‰∏™ËÅå‰∏ö print(grouped.apply(get_top_amounts, ‚Äòcontbr_employer‚Äô, n=10)) # Ëé∑ÂèñÊØè‰∏™ÂÄôÈÄâ‰∫∫ÊçêÊ¨æÈáëÈ¢ùÊúÄÂ§öÁöÑÂâç 10 ‰∏™Èõá‰∏ª\n\n-   **`get_top_amounts(group, key, n=5)` ÂáΩÊï∞Ôºö**\n    -   `group`: DataFrame ÂàÜÁªÑÔºà‰æãÂ¶ÇÔºå‰∏Ä‰ΩçÂÄôÈÄâ‰∫∫ÁöÑÊçêÊ¨æÔºâ„ÄÇ\n    -   `key`: Ë¶ÅÂàÜÁªÑÁöÑÂàóÔºàËÅå‰∏ö/Èõá‰∏ªÔºâ„ÄÇ\n    -   `n`: ÁÉ≠Èó®È°πÁõÆÁöÑÊï∞Èáè„ÄÇ\n    -   ËÆ°ÁÆóÊØè‰∏™ËÅå‰∏ö/Èõá‰∏ªÁöÑÊÄªÊçêÊ¨æÔºåËøîÂõûÂâç `n` ‰∏™„ÄÇ\n-   **`grouped = fec_mrbo.groupby('cand_nm')`**: ÊåâÂÄôÈÄâ‰∫∫ÂàÜÁªÑ„ÄÇ\n-   **`grouped.apply(...)`**:  Êü•Êâæ*ÊØè‰∏™ÂÄôÈÄâ‰∫∫*ÁöÑÁÉ≠Èó®ËÅå‰∏ö/Èõá‰∏ª„ÄÇ\n\n## ÂØπÊçêÊ¨æÈáëÈ¢ùËøõË°åÂàÜÊ°∂\n\n``````{python}\nimport numpy as np\n\nbins = np.array([0, 1, 10, 100, 1000, 10000, 100_000, 1_000_000, 10_000_000])  # ÂÆö‰πâÂàÜÊ°∂ËæπÁïå\nlabels = pd.cut(fec_mrbo['contb_receipt_amt'], bins)  # Â∞ÜÊçêÊ¨æÈáëÈ¢ùÂàÜÈÖçÂà∞ÂêÑ‰∏™Ê°∂‰∏≠\nprint(labels)  # ÊòæÁ§∫ÂàÜÊ°∂ÁªìÊûú\n\ngrouped = fec_mrbo.groupby(['cand_nm', labels])  # ÊåâÂÄôÈÄâ‰∫∫ÂßìÂêçÂíåÂàÜÊ°∂Ê†áÁ≠æÂàÜÁªÑ\nprint(grouped.size().unstack(level=0))  # ÁªüËÆ°ÊØè‰∏™ÂÄôÈÄâ‰∫∫Âú®ÊØè‰∏™Ê°∂‰∏≠ÁöÑÊçêÊ¨æÊï∞Èáè\n\nbucket_sums = grouped['contb_receipt_amt'].sum().unstack(level=0)  # ËÆ°ÁÆóÊØè‰∏™ÂÄôÈÄâ‰∫∫Âú®ÊØè‰∏™Ê°∂‰∏≠ÁöÑÊÄªÊçêÊ¨æÈáëÈ¢ù\nnormed_sums = bucket_sums.div(bucket_sums.sum(axis=\"columns\"),  # ËÆ°ÁÆóÊØè‰∏™Ê°∂‰∏≠ÔºåÊØè‰∏™ÂÄôÈÄâ‰∫∫ÊçêÊ¨æÈáëÈ¢ùÁöÑÊØî‰æã\n                              axis=\"index\")\nprint(normed_sums)  # ÊòæÁ§∫ÊØî‰æã\nnormed_sums[:-2].plot(kind='barh')  # ÁªòÂà∂Ê∞¥Âπ≥Êù°ÂΩ¢ÂõæÔºå‰∏çÂåÖÊã¨ÊúÄÂ§ßÁöÑ‰∏§‰∏™Ê°∂\nplt.show()  #ÊòæÁ§∫ÁªòÂõæ\n\nÁõÆÊ†áÔºö ÊåâÊçêÊ¨æËßÑÊ®°ÂàÜÊ°£ÂàÜÊûê„ÄÇ\nbins = np.array([...]): ÂÆö‰πâÊ°∂ËæπÁïå„ÄÇ\nlabels = pd.cut(..., bins): Â∞ÜÊØè‰∏™ÊçêÊ¨æÂàÜÈÖçÂà∞‰∏Ä‰∏™Ê°∂„ÄÇ\ngrouped = ...groupby(['cand_nm', labels]): ÊåâÂÄôÈÄâ‰∫∫ÂíåÊ°∂ÂàÜÁªÑ„ÄÇ\ngrouped.size().unstack(...): ÊØè‰∏™Ê°∂/ÂÄôÈÄâ‰∫∫ÁöÑËÆ°Êï∞„ÄÇ\nbucket_sums = ...: ÊØè‰∏™Ê°∂/ÂÄôÈÄâ‰∫∫ÁöÑÊÄªÈáëÈ¢ù„ÄÇ\nnormed_sums = ...: ÊØè‰∏™Ê°∂/ÂÄôÈÄâ‰∫∫ÁöÑÁôæÂàÜÊØîÔºàÊ†áÂáÜÂåñÔºâ„ÄÇ\nnormed_sums[:-2].plot(kind='barh'): Êù°ÂΩ¢ÂõæÔºà‰∏çÂåÖÊã¨ÊúÄÂ§ßÁöÑÊ°∂Ôºâ„ÄÇ\n\n\n\n\n‚ÄòÂÄôÈÄâ‰∫∫Êî∂Âà∞ÁöÑÂêÑÁßçËßÑÊ®°ÊçêÊ¨æÂç†ÊÄªÊçêÊ¨æÁöÑÁôæÂàÜÊØî‚Äô"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊåâÂ∑ûÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°",
    "href": "qmd/pandas3ed13cn.html#ÊåâÂ∑ûÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊåâÂ∑ûÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°",
    "text": "ÊåâÂ∑ûÂàíÂàÜÁöÑÊçêÊ¨æÁªüËÆ°\n``````yhbszwga grouped = fec_mrbo.groupby([‚Äòcand_nm‚Äô, ‚Äòcontbr_st‚Äô]) # ÊåâÂÄôÈÄâ‰∫∫ÂßìÂêçÂíåÂ∑ûÂàÜÁªÑ totals = grouped[‚Äòcontb_receipt_amt‚Äô].sum().unstack(level=0).fillna(0) # ËÆ°ÁÆóÊØè‰∏™ÂÄôÈÄâ‰∫∫Âú®ÊØè‰∏™Â∑ûÁöÑÊÄªÊçêÊ¨æÈáëÈ¢ùÔºåÂπ∂Â°´ÂÖÖÁº∫Â§±ÂÄº totals = totals[totals.sum(axis=‚Äúcolumns‚Äù) &gt; 100000] # Á≠õÈÄâÂá∫ÊÄªÊçêÊ¨æÈáëÈ¢ùÂ§ß‰∫é 10 ‰∏áÁöÑÂ∑û print(totals.head(10)) # ÊòæÁ§∫Ââç 10 Ë°å\npercent = totals.div(totals.sum(axis=‚Äúcolumns‚Äù), axis=‚Äúindex‚Äù) # ËÆ°ÁÆóÊØè‰∏™Â∑û‰∏≠ÔºåÊØè‰∏™ÂÄôÈÄâ‰∫∫ÊçêÊ¨æÈáëÈ¢ùÁöÑÊØî‰æã print(percent.head(10)) # ÊòæÁ§∫Ââç 10 Ë°å ```\n\nÁõÆÊ†áÔºö ÊåâÊçêÊ¨æ‰∫∫ÊâÄÂú®Â∑ûËøõË°åÂàÜÊûê„ÄÇ\ngrouped = ...groupby(['cand_nm', 'contbr_st']): ÊåâÂÄôÈÄâ‰∫∫/Â∑ûÂàÜÁªÑ„ÄÇ\ntotals = ...sum().unstack(...).fillna(0): ÊØè‰∏™Â∑û/ÂÄôÈÄâ‰∫∫ÁöÑÊÄªÊï∞„ÄÇunstack Â∞ÜÂÄôÈÄâ‰∫∫‰Ωú‰∏∫ÂàóÔºåfillna(0) Â§ÑÁêÜÁº∫Â§±Êï∞ÊçÆ„ÄÇ\ntotals = totals[...]: ËøáÊª§ÊÄªÊï∞ &gt; 100,000 ÁæéÂÖÉÁöÑÂ∑û„ÄÇ\npercent = totals.div(...): ÊØè‰∏™Â∑û/ÂÄôÈÄâ‰∫∫ÁöÑÁôæÂàÜÊØî„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed13cn.html#ÊÄªÁªì",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nÊºîÁ§∫‰∫Ü‰ΩøÁî® ```{python} ËøõË°åÁúüÂÆû‰∏ñÁïåÊï∞ÊçÆÂàÜÊûê„ÄÇ\nÊï∞ÊçÆÈõÜÔºöBitly/USA.gov„ÄÅMovieLens„ÄÅÂ©¥ÂÑøÂßìÂêç„ÄÅUSDA È£üÂìÅ„ÄÅFEC„ÄÇ\nÂÖ≥ÈîÆÊäÄÊúØÔºö\n\nÂä†ËΩΩÔºàÊñáÊú¨„ÄÅJSON„ÄÅCSVÔºâ„ÄÇ\nÊ∏ÖÁêÜ/ËΩ¨Êç¢ÔºàÁº∫Â§±Êï∞ÊçÆ„ÄÅÂ≠óÁ¨¶‰∏≤„ÄÅÁ±ªÂûãÔºâ„ÄÇ\nËÅöÂêà/ÂàÜÁªÑ (groupby„ÄÅpivot_table„ÄÅapply)„ÄÇ\nÂêàÂπ∂/ÈáçÂ°ë (merge„ÄÅconcat„ÄÅunstack„ÄÅstack„ÄÅexplode)„ÄÇ\nÂèØËßÜÂåñ (matplotlib, seaborn)„ÄÇ\nÊó∂Èó¥Â∫èÂàó„ÄÇ\n\nËø≠‰ª£Êé¢Á¥¢Ôºö‰ªéÂéüÂßãÊï∞ÊçÆÂºÄÂßãÔºåÊ∏ÖÁêÜÔºåÂπ∂ÊûÑÂª∫ÂàÜÊûê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed13cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "href": "qmd/pandas3ed13cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "title": "pythonÊï∞ÊçÆÂàÜÊûê üêç",
    "section": "ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "text": "ÊÄùËÄÉÂíåËÆ®ËÆ∫\n\nÂ¶Ç‰ΩïÊâ©Â±ï/ÊîπËøõËøô‰∫õÂàÜÊûêÔºüÂÖ∂‰ªñÈóÆÈ¢òÔºü\nÂ±ÄÈôêÊÄßÂíåÂÅáËÆæÔºüÂÅèÂ∑ÆÔºü\nÂ∞ÜÊäÄÊúØÂ∫îÁî®‰∫éÂÖ∂‰ªñÊï∞ÊçÆÈõÜÔºü\nÁúüÂÆû‰∏ñÁïåÊï∞ÊçÆÔºàÂ∞§ÂÖ∂ÊòØÂÖ≥‰∫é‰∫∫ÁöÑÊï∞ÊçÆÔºâÁöÑ‰º¶ÁêÜËÄÉËôëÔºü\nÊùÉË°°ÔºöÁ∫Ø ``{python}„ÄÅcollections`„ÄÅpandas„ÄÇ‰ªÄ‰πàÊó∂ÂÄôÊúÄÂ•ΩÔºü\nÂèØËßÜÂåñÈÄâÊã©Â¶Ç‰ΩïÂΩ±ÂìçËßÅËß£Ôºü\nÊé¢Á¥¢ÂÆòÊñπÊñáÊ°£‰ª•Âä†Ê∑±ÁêÜËß£„ÄÇ\nÂïÜÁßë‰∏ì‰∏öÔºöËøô‰∫õÊäÄËÉΩÂØπËÅå‰∏öÊúâ‰ΩïÁî®Â§ÑÔºüÊèê‰æõÁ´û‰∫â‰ºòÂäø„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed11.html",
    "href": "qmd/pandas3ed11.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "# SETUP (Provided code - needs to be at the top of the notebook)\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport pytz\nfrom pandas.tseries.offsets import Hour, Minute, Day, MonthEnd\n\n# For demonstration, suppress FutureWarnings in this specific notebook\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n#For plot,\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "qmd/pandas3ed11.html#date-and-time-data-types-and-tools",
    "href": "qmd/pandas3ed11.html#date-and-time-data-types-and-tools",
    "title": "Python for Data Analysis",
    "section": "Date and Time Data Types and Tools",
    "text": "Date and Time Data Types and Tools\nPython‚Äôs standard library provides modules for handling dates and times:\n\ndatetime: Provides classes for manipulating dates and times (e.g., datetime, date, time, timedelta).\ntime: Provides time-related functions.\ncalendar: Functions related to calendars.\n\nThe datetime.datetime type (or simply datetime) is commonly used."
  },
  {
    "objectID": "qmd/pandas3ed11.html#the-datetime-object",
    "href": "qmd/pandas3ed11.html#the-datetime-object",
    "title": "Python for Data Analysis",
    "section": "The datetime Object",
    "text": "The datetime Object\nLet‚Äôs create a datetime object representing the current time:\nfrom datetime import datetime\n\nnow = datetime.now()\nprint(now)\nThis code snippet retrieves the current date and time."
  },
  {
    "objectID": "qmd/pandas3ed11.html#the-datetime-object-continued",
    "href": "qmd/pandas3ed11.html#the-datetime-object-continued",
    "title": "Python for Data Analysis",
    "section": "The datetime Object (Continued)",
    "text": "The datetime Object (Continued)\nWe can also manually construct a datetime object:\nmy_date = datetime(2024, 10, 27, 10, 30, 0) # Year, Month, Day, Hour, Minute, Second\nprint(my_date)\nAccess individual components:\nprint(f\"Year: {now.year}, Month: {now.month}, Day: {now.day}\")"
  },
  {
    "objectID": "qmd/pandas3ed11.html#the-timedelta-object",
    "href": "qmd/pandas3ed11.html#the-timedelta-object",
    "title": "Python for Data Analysis",
    "section": "The timedelta Object",
    "text": "The timedelta Object\nA timedelta object represents the difference between two datetime objects:\ndelta = datetime(2011, 1, 7) - datetime(2008, 6, 24, 8, 15)\nprint(delta)\nprint(f\"Days: {delta.days}, Seconds: {delta.seconds}\")"
  },
  {
    "objectID": "qmd/pandas3ed11.html#the-timedelta-object-continued",
    "href": "qmd/pandas3ed11.html#the-timedelta-object-continued",
    "title": "Python for Data Analysis",
    "section": "The timedelta Object (Continued)",
    "text": "The timedelta Object (Continued)\n\ndelta.days: Returns the difference in days.\ndelta.seconds: Returns the difference in seconds (within the last day). It does not include the seconds contained within the days difference."
  },
  {
    "objectID": "qmd/pandas3ed11.html#the-timedelta-object-continued-1",
    "href": "qmd/pandas3ed11.html#the-timedelta-object-continued-1",
    "title": "Python for Data Analysis",
    "section": "The timedelta Object (Continued)",
    "text": "The timedelta Object (Continued)\nYou can add or subtract timedelta objects to/from datetime objects:\nfrom datetime import timedelta\n\nstart = datetime(2011, 1, 7)\nprint(start + timedelta(12))  # Add 12 days\nprint(start - 2 * timedelta(12))  # Subtract 24 days"
  },
  {
    "objectID": "qmd/pandas3ed11.html#types-in-the-datetime-module",
    "href": "qmd/pandas3ed11.html#types-in-the-datetime-module",
    "title": "Python for Data Analysis",
    "section": "Types in the datetime Module",
    "text": "Types in the datetime Module\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndate\nStores the calendar date (year, month, day).\n\n\ntime\nStores the time of day (hours, minutes, seconds, microseconds).\n\n\ndatetime\nStores both date and time.\n\n\ntimedelta\nRepresents the difference between two datetime values.\n\n\ntzinfo\nBase type for storing time zone information."
  },
  {
    "objectID": "qmd/pandas3ed11.html#converting-between-string-and-datetime",
    "href": "qmd/pandas3ed11.html#converting-between-string-and-datetime",
    "title": "Python for Data Analysis",
    "section": "Converting Between String and Datetime",
    "text": "Converting Between String and Datetime\n\nstrftime(): Formats a datetime object into a string.\nstrptime(): Parses a string into a datetime object.\npd.to_datetime(): convert string to DatetimeIndex in pandas.\n\nstamp = datetime(2011, 1, 3)\n\n# datetime to string\nprint(str(stamp))\nprint(stamp.strftime('%Y-%m-%d'))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#converting-between-string-and-datetime-continued",
    "href": "qmd/pandas3ed11.html#converting-between-string-and-datetime-continued",
    "title": "Python for Data Analysis",
    "section": "Converting Between String and Datetime (Continued)",
    "text": "Converting Between String and Datetime (Continued)\n# string to datetime\nvalue = '2011-01-03'\nprint(datetime.strptime(value, '%Y-%m-%d'))\n\ndatestrs = ['7/6/2011', '8/6/2011']\ndt_list = [datetime.strptime(x, '%m/%d/%Y') for x in datestrs]\nprint(dt_list)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#common-strftime-and-strptime-format-codes",
    "href": "qmd/pandas3ed11.html#common-strftime-and-strptime-format-codes",
    "title": "Python for Data Analysis",
    "section": "Common strftime and strptime Format Codes",
    "text": "Common strftime and strptime Format Codes\nCode | Description |\n: | :- |\n%Y | 4-digit year |\n%y | 2-digit year |\n%m | 2-digit month [01, 12] |\n%d | 2-digit day [01, 31] |\n%H | Hour (24-hour clock) [00, 23] |\n%I | Hour (12-hour clock) [01, 12] |\n%M | 2-digit minute [00, 59] |\n%S | Second [00, 61] (60 and 61 are for leap seconds) |\n%f | Microsecond as an integer, zero-padded (from 000000 to 999999) |\n%j | Day of the year as a zero-padded integer (from 001 to 336) |"
  },
  {
    "objectID": "qmd/pandas3ed11.html#more-strftime-and-strptime-format-codes",
    "href": "qmd/pandas3ed11.html#more-strftime-and-strptime-format-codes",
    "title": "Python for Data Analysis",
    "section": "More strftime and strptime Format Codes",
    "text": "More strftime and strptime Format Codes\nCode | Description |\n:- | : |\n%w | Weekday as an integer [0 (Sunday), 6] |\n%u | Weekday as an integer starting from 1, where 1 is Monday. |\n%U | Week number of the year [00, 53]; Sunday is the first day, days before the first Sunday are ‚Äúweek 0‚Äù |\n%W | Week number of the year [00, 53]; Monday is considered the first day of the week, and days before the first Monday of the year are ‚Äúweek 0‚Äù.|\n%z | UTC time zone offset as +HHMM or -HHMM; empty if naive |\n|%Z |Time zone name as a string, or empty string if no time zone | | %F | Shortcut for %Y-%m-%d (e.g., 2012-4-18) | | %D | Shortcut for %m/%d/%y (e.g., 04/18/12) |"
  },
  {
    "objectID": "qmd/pandas3ed11.html#pd.to_datetime-in-pandas",
    "href": "qmd/pandas3ed11.html#pd.to_datetime-in-pandas",
    "title": "Python for Data Analysis",
    "section": "pd.to_datetime() in pandas",
    "text": "pd.to_datetime() in pandas\npandas is designed for working with arrays of dates. The pd.to_datetime() method is highly versatile:\ndatestrs = ['2011-07-06 12:00:00', '2011-08-06 00:00:00']\ndt_index = pd.to_datetime(datestrs)\nprint(dt_index)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#pd.to_datetime-in-pandas-continued",
    "href": "qmd/pandas3ed11.html#pd.to_datetime-in-pandas-continued",
    "title": "Python for Data Analysis",
    "section": "pd.to_datetime() in pandas (Continued)",
    "text": "pd.to_datetime() in pandas (Continued)\nIt automatically handles various date formats and can also identify missing values:\nidx = pd.to_datetime(datestrs + [None])\nprint(idx)\nprint(idx[2])  # NaT (Not a Time)\nprint(pd.isna(idx))\nNaT is pandas‚Äôs representation of a null timestamp."
  },
  {
    "objectID": "qmd/pandas3ed11.html#locale-specific-date-formatting",
    "href": "qmd/pandas3ed11.html#locale-specific-date-formatting",
    "title": "Python for Data Analysis",
    "section": "Locale-Specific Date Formatting",
    "text": "Locale-Specific Date Formatting\ndatetime objects have locale-specific formatting options.\nType | Description |\n: | :- |\n%a | Abbreviated weekday name. |\n%A | Full weekday name. |\n%b | Abbreviated month name. |\n%B | Full month name. |\n%c | Full date and time (e.g., ‚ÄòTue 01 May 2012 04:20:57 PM‚Äô). |\n%p | Locale equivalent of AM or PM. |\n%x | Locale-appropriate formatted date (e.g., in the US, May 1, 2012 yields ‚Äò05/01/2012‚Äô). |\n%X | Locale-appropriate time (e.g., ‚Äò04:24:12 PM‚Äô). |"
  },
  {
    "objectID": "qmd/pandas3ed11.html#time-series-basics-in-pandas",
    "href": "qmd/pandas3ed11.html#time-series-basics-in-pandas",
    "title": "Python for Data Analysis",
    "section": "Time Series Basics in pandas",
    "text": "Time Series Basics in pandas\nA fundamental time series object in pandas is a Series indexed by timestamps:\ndates = [datetime(2011, 1, 2), datetime(2011, 1, 5),\n         datetime(2011, 1, 7), datetime(2011, 1, 8),\n         datetime(2011, 1, 10), datetime(2011, 1, 12)]\nts = pd.Series(np.random.randn(6), index=dates)\nprint(ts)\nprint(type(ts))\n\nThe index is a DatetimeIndex."
  },
  {
    "objectID": "qmd/pandas3ed11.html#time-series-basics-in-pandas-continued",
    "href": "qmd/pandas3ed11.html#time-series-basics-in-pandas-continued",
    "title": "Python for Data Analysis",
    "section": "Time Series Basics in pandas (Continued)",
    "text": "Time Series Basics in pandas (Continued)\nArithmetic operations between differently-indexed time series automatically align on the dates.\nprint(ts.index)\nprint(ts + ts[::2]) # [::2] selects every second element.  Note the NaN values."
  },
  {
    "objectID": "qmd/pandas3ed11.html#timestamp-objects",
    "href": "qmd/pandas3ed11.html#timestamp-objects",
    "title": "Python for Data Analysis",
    "section": "Timestamp Objects",
    "text": "Timestamp Objects\nScalar values within a DatetimeIndex is pandas Timestamp objects:\nstamp = ts.index[0]\nprint(stamp)\nprint(type(stamp))\nA pandas.Timestamp can be substituted most places where you would use a datetime object."
  },
  {
    "objectID": "qmd/pandas3ed11.html#indexing-selection-and-subsetting",
    "href": "qmd/pandas3ed11.html#indexing-selection-and-subsetting",
    "title": "Python for Data Analysis",
    "section": "Indexing, Selection, and Subsetting",
    "text": "Indexing, Selection, and Subsetting\nYou can index time series using labels (dates) in various ways:\nstamp = ts.index[2]\nprint(ts[stamp])\nprint(ts['2011-01-10'])"
  },
  {
    "objectID": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued",
    "href": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued",
    "title": "Python for Data Analysis",
    "section": "Indexing, Selection, and Subsetting (Continued)",
    "text": "Indexing, Selection, and Subsetting (Continued)\nFor longer time series, you can select slices using years or year-months:\nlonger_ts = pd.Series(np.random.randn(1000),\n                      index=pd.date_range('1/1/2000', periods=1000))\nprint(longer_ts['2001'])\nprint(longer_ts['2001-05'])"
  },
  {
    "objectID": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued-1",
    "href": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued-1",
    "title": "Python for Data Analysis",
    "section": "Indexing, Selection, and Subsetting (Continued)",
    "text": "Indexing, Selection, and Subsetting (Continued)\nSlicing with datetime objects also works, including range queries:\nprint(ts[datetime(2011, 1, 7):])\nprint(ts['2011-01-06':'2011-01-11'])"
  },
  {
    "objectID": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued-2",
    "href": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued-2",
    "title": "Python for Data Analysis",
    "section": "Indexing, Selection, and Subsetting (Continued)",
    "text": "Indexing, Selection, and Subsetting (Continued)\nThe truncate() method slices a Series between two dates:\nprint(ts.truncate(after='2011-01-09'))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued-3",
    "href": "qmd/pandas3ed11.html#indexing-selection-and-subsetting-continued-3",
    "title": "Python for Data Analysis",
    "section": "Indexing, Selection, and Subsetting (Continued)",
    "text": "Indexing, Selection, and Subsetting (Continued)\nAll of these slicing operations apply to DataFrame, indexing on rows:\ndates = pd.date_range('1/1/2000', periods=100, freq='W-WED')\nlong_df = pd.DataFrame(np.random.randn(100, 4),\n                       index=dates,\n                       columns=['Colorado', 'Texas', 'New York', 'Ohio'])\nprint(long_df.loc['2001-05'])"
  },
  {
    "objectID": "qmd/pandas3ed11.html#time-series-with-duplicate-indices",
    "href": "qmd/pandas3ed11.html#time-series-with-duplicate-indices",
    "title": "Python for Data Analysis",
    "section": "Time Series with Duplicate Indices",
    "text": "Time Series with Duplicate Indices\nIt‚Äôs possible to have multiple data observations for the same timestamp:\ndates = pd.DatetimeIndex(['1/1/2000', '1/2/2000', '1/2/2000', '1/2/2000',\n                        '1/3/2000'])\ndup_ts = pd.Series(np.arange(5), index=dates)\nprint(dup_ts)\nprint(dup_ts.index.is_unique)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#time-series-with-duplicate-indices-continued",
    "href": "qmd/pandas3ed11.html#time-series-with-duplicate-indices-continued",
    "title": "Python for Data Analysis",
    "section": "Time Series with Duplicate Indices (Continued)",
    "text": "Time Series with Duplicate Indices (Continued)\nIndexing will now produce either scalar values or slices:\nprint(dup_ts['1/3/2000'])  # Not duplicated\nprint(dup_ts['1/2/2000'])  # Duplicated"
  },
  {
    "objectID": "qmd/pandas3ed11.html#time-series-with-duplicate-indices-continued-1",
    "href": "qmd/pandas3ed11.html#time-series-with-duplicate-indices-continued-1",
    "title": "Python for Data Analysis",
    "section": "Time Series with Duplicate Indices (Continued)",
    "text": "Time Series with Duplicate Indices (Continued)\nTo aggregate data with non-unique timestamps, use groupby with level=0:\ngrouped = dup_ts.groupby(level=0)\nprint(grouped.mean())\nprint(grouped.count())"
  },
  {
    "objectID": "qmd/pandas3ed11.html#date-ranges-frequencies-and-shifting",
    "href": "qmd/pandas3ed11.html#date-ranges-frequencies-and-shifting",
    "title": "Python for Data Analysis",
    "section": "Date Ranges, Frequencies, and Shifting",
    "text": "Date Ranges, Frequencies, and Shifting\n\nGenerating Date Ranges\npandas.date_range() is used to generate a DatetimeIndex with a specific length and frequency:\nindex = pd.date_range('2012-04-01', '2012-06-01')\nprint(index)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#generating-date-rangescontinued",
    "href": "qmd/pandas3ed11.html#generating-date-rangescontinued",
    "title": "Python for Data Analysis",
    "section": "Generating Date Ranges(Continued)",
    "text": "Generating Date Ranges(Continued)\nBy default, date_range generates daily timestamps. You can specify a start or end date and the number of periods:\nprint(pd.date_range(start='2012-04-01', periods=20))\nprint(pd.date_range(end='2012-06-01', periods=20))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#generating-date-rangescontinued-1",
    "href": "qmd/pandas3ed11.html#generating-date-rangescontinued-1",
    "title": "Python for Data Analysis",
    "section": "Generating Date Ranges(Continued)",
    "text": "Generating Date Ranges(Continued)\nYou can also specify frequencies. For example, to get the last business day of each month:\nprint(pd.date_range('2000-01-01', '2000-12-01', freq='BM'))  # 'BM' = Business Month end\n\nFrequencies and Date Offsets\nFrequencies in pandas are composed of a base frequency and a multiplier. Base frequencies are typically string aliases (e.g., ‚ÄòM‚Äô for monthly, ‚ÄòH‚Äô for hourly).\n\n\n\n\n\n\n\n\nAlias\nOffset Type\nDescription\n\n\n\n\nD\nDay\nCalendar daily\n\n\nB\nBusinessDay\nBusiness daily\n\n\nH\nHour\nHourly\n\n\nT or min\nMinute\nOnce a minute\n\n\nS\nSecond\nOnce a second\n\n\nL or ms\nMilli\nMillisecond (1/1,000 of 1 second)\n\n\nU\nMicro\nMicrosecond (1/1,000,000 of 1 second)\n\n\nM\nMonthEnd\nLast calendar day of month"
  },
  {
    "objectID": "qmd/pandas3ed11.html#frequencies-and-date-offsetscont.",
    "href": "qmd/pandas3ed11.html#frequencies-and-date-offsetscont.",
    "title": "Python for Data Analysis",
    "section": "Frequencies and Date Offsets(Cont.)",
    "text": "Frequencies and Date Offsets(Cont.)\n\n\n\n\n\n\n\n\nAlias\nOffset Type\nDescription\n\n\n\n\nBM\nBusinessMonthEnd\nLast business day (weekday) of month\n\n\nMS\nMonthBegin\nFirst calendar day of month\n\n\nBMS\nBusinessMonthBegin\nFirst weekday of month\n\n\nW-MON, W-TUE, ‚Ä¶\nWeek\nWeekly on given day of week (MON, TUE, WED, THU,FRI, SAT, or SUN)\n\n\nWOM-1MON, WOM-2MON, ‚Ä¶\nWeekOfMonth\nGenerate weekly dates in the first, second, third, or fourth week of the month (e.g., WOM-3FRI for thethird Friday of each month)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#frequencies-and-date-offsetscont.-1",
    "href": "qmd/pandas3ed11.html#frequencies-and-date-offsetscont.-1",
    "title": "Python for Data Analysis",
    "section": "Frequencies and Date Offsets(Cont.)",
    "text": "Frequencies and Date Offsets(Cont.)\n\n\n\n\n\n\n\n\nAlias\nOffset Type\nDescription\n\n\n\n\nQ-JAN, Q-FEB, ‚Ä¶\nQuarterEnd\nQuarterly dates anchored on last calendar day of each month, for year ending in indicated month (JAN, FEB,MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, or DEC)\n\n\nBQ-JAN, BQ-FEB, ‚Ä¶\nBusinessQuarterEnd\nQuarterly dates anchored on last weekday day of each month, for year ending in indicated month\n\n\nQS-JAN, QS-FEB, ‚Ä¶\nQuarterBegin\nQuarterly dates anchored on first calendar day of each month, for year ending in indicated month\n\n\nBQS-JAN, BQS-FEB, ‚Ä¶\nBusinessQuarterBegin\nQuarterly dates anchored on first weekday day of each month, for year ending in indicated month\n\n\nA-JAN, A-FEB, ‚Ä¶\nYearEnd\nAnnual dates anchored on last calendar day of given month (JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP,OCT, NOV, or DEC)\n\n\nBA-JAN, BA-FEB, ‚Ä¶\nBusinessYearEnd\nAnnual dates anchored on last weekday of given month\n\n\nAS-JAN, AS-FEB, ‚Ä¶\nYearBegin\nAnnual dates anchored on first day of given month\n\n\nBAS-JAN, BAS-FEB, ‚Ä¶\nBusinessYearBegin\nAnnual dates anchored on first weekday of given month"
  },
  {
    "objectID": "qmd/pandas3ed11.html#frequencies-and-date-offsets---examples",
    "href": "qmd/pandas3ed11.html#frequencies-and-date-offsets---examples",
    "title": "Python for Data Analysis",
    "section": "Frequencies and Date Offsets - Examples",
    "text": "Frequencies and Date Offsets - Examples\nfrom pandas.tseries.offsets import Hour, Minute\nprint(Hour())\nprint(Hour(4))\nprint(pd.date_range('2000-01-01', '2000-01-03 23:59', freq='4H'))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#frequencies-and-date-offsets---examplescont.",
    "href": "qmd/pandas3ed11.html#frequencies-and-date-offsets---examplescont.",
    "title": "Python for Data Analysis",
    "section": "Frequencies and Date Offsets - Examples(Cont.)",
    "text": "Frequencies and Date Offsets - Examples(Cont.)\nprint(Hour(2) + Minute(30))\nprint(pd.date_range('2000-01-01', periods=10, freq='1h30min'))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#frequencies-and-date-offsets---week-of-month",
    "href": "qmd/pandas3ed11.html#frequencies-and-date-offsets---week-of-month",
    "title": "Python for Data Analysis",
    "section": "Frequencies and Date Offsets - ‚ÄúWeek of Month‚Äù",
    "text": "Frequencies and Date Offsets - ‚ÄúWeek of Month‚Äù\nrng = pd.date_range('2012-01-01', '2012-09-01', freq='WOM-3FRI')\nprint(list(rng))\n\nShifting (Leading and Lagging) Data\nShifting moves data backward or forward through time. The shift() method is used:\nts = pd.Series(np.random.randn(4),\n               index=pd.date_range('1/1/2000', periods=4, freq='M'))\nprint(ts)\nprint(ts.shift(2))\nprint(ts.shift(-2))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#shifting-leading-and-lagging-data-continued",
    "href": "qmd/pandas3ed11.html#shifting-leading-and-lagging-data-continued",
    "title": "Python for Data Analysis",
    "section": "Shifting (Leading and Lagging) Data (Continued)",
    "text": "Shifting (Leading and Lagging) Data (Continued)\nA common use is to compute percentage changes:\nprint(ts / ts.shift(1) - 1)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#shifting-leading-and-lagging-data-continued-1",
    "href": "qmd/pandas3ed11.html#shifting-leading-and-lagging-data-continued-1",
    "title": "Python for Data Analysis",
    "section": "Shifting (Leading and Lagging) Data (Continued)",
    "text": "Shifting (Leading and Lagging) Data (Continued)\nYou can also shift the timestamps, leaving the data unchanged:\nprint(ts.shift(2, freq='M'))\nprint(ts.shift(3, freq='D'))\nprint(ts.shift(1, freq='90T'))\n\nShifting dates with offsets\npandas date offsets can be used with datetime or Timestamp objects:\nfrom pandas.tseries.offsets import Day, MonthEnd\nnow = datetime(2011, 11, 17)\nprint(now + 3 * Day())\nprint(now + MonthEnd()) # roll forward to the month end.\nprint(now + MonthEnd(2))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#shifting-dates-with-offsetscont.",
    "href": "qmd/pandas3ed11.html#shifting-dates-with-offsetscont.",
    "title": "Python for Data Analysis",
    "section": "Shifting dates with offsets(Cont.)",
    "text": "Shifting dates with offsets(Cont.)\noffset = MonthEnd()\nprint(offset.rollforward(now)) # Explicit forward roll\nprint(offset.rollback(now)) # Explicit backward roll"
  },
  {
    "objectID": "qmd/pandas3ed11.html#shifting-dates-with-offsetscont.-1",
    "href": "qmd/pandas3ed11.html#shifting-dates-with-offsetscont.-1",
    "title": "Python for Data Analysis",
    "section": "Shifting dates with offsets(Cont.)",
    "text": "Shifting dates with offsets(Cont.)\nA clever use of date offsets with groupby is to ‚Äúroll‚Äù dates:\nts = pd.Series(np.random.randn(20),\n                index=pd.date_range('1/15/2000', periods=20, freq='4D'))\nprint(ts.groupby(MonthEnd().rollforward).mean())\nprint(ts.resample('M').mean()) # Equivalent, and faster"
  },
  {
    "objectID": "qmd/pandas3ed11.html#time-zone-handling",
    "href": "qmd/pandas3ed11.html#time-zone-handling",
    "title": "Python for Data Analysis",
    "section": "Time Zone Handling",
    "text": "Time Zone Handling\nWorking with time zones can be complex. pandas uses the pytz library. By default, time series in pandas are time zone naive.\nimport pytz\nprint(pytz.common_timezones[-5:])\ntz = pytz.timezone('America/New_York')\nprint(tz)\n\nTime Zone Localization and Conversion\ndates = pd.date_range('3/9/2012 9:30', periods=6, freq='D')\nts = pd.Series(np.random.randn(len(dates)), index=dates)\nprint(ts)\nprint(ts.index.tz) # Time zone naive (None)\n\n\nTime Zone Localization and Conversion(Cont.)\n#Generate a date range with a timezone\ndate_rng = pd.date_range('3/9/2012 9:30', periods=10, freq='D', tz='UTC')\nprint(date_rng.tz)\n\n# Localize to a timezone.\nts_utc = ts.tz_localize('UTC') # Localize to a specific time zone\nprint(ts_utc)\nprint(ts_utc.index)\n\n\nTime Zone Localization and Conversion(Cont.)\n# Convert to another time zone.\nts_eastern = ts_utc.tz_convert('America/New_York')\nprint(ts_eastern)\n\n\nOperations with Time Zone-Aware Timestamp Objects\nTimestamp objects also support time zone localization and conversion:\nstamp = pd.Timestamp('2011-03-12 04:00')\nstamp_utc = stamp.tz_localize('utc')\nprint(stamp_utc.tz_convert('America/New_York'))\n\n\nOperations with Time Zone-Aware Timestamp Objects(Cont.)\nWhen performing operations between different time zones, the result will be in UTC.\ndates = pd.date_range('3/7/2012 9:30', periods=10, freq='B')\nts = pd.Series(np.random.randn(len(dates)), index=dates)\nts1 = ts[:7].tz_localize('Europe/London')\nts2 = ts1[2:].tz_convert('Europe/Moscow')\nresult = ts1 + ts2\nprint(result.index)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#periods-and-period-arithmetic",
    "href": "qmd/pandas3ed11.html#periods-and-period-arithmetic",
    "title": "Python for Data Analysis",
    "section": "Periods and Period Arithmetic",
    "text": "Periods and Period Arithmetic\nPeriods represent time spans (e.g., days, months, quarters, years). The Period class:\np = pd.Period(2011, freq='A-DEC')\nprint(p)\nprint(p + 5)\nprint(p - 2)\nprint(pd.Period('2014', freq='A-DEC') - p)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#periods-and-period-arithmetic-continued",
    "href": "qmd/pandas3ed11.html#periods-and-period-arithmetic-continued",
    "title": "Python for Data Analysis",
    "section": "Periods and Period Arithmetic (Continued)",
    "text": "Periods and Period Arithmetic (Continued)\nperiod_range creates regular ranges of periods:\nrng = pd.period_range('2000-01-01', '2000-06-30', freq='M')\nprint(rng)\nprint(pd.Series(np.random.randn(6), index=rng))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#periods-and-period-arithmetic-continued-1",
    "href": "qmd/pandas3ed11.html#periods-and-period-arithmetic-continued-1",
    "title": "Python for Data Analysis",
    "section": "Periods and Period Arithmetic (Continued)",
    "text": "Periods and Period Arithmetic (Continued)\nvalues = ['2001Q3', '2002Q2', '2003Q1']\nindex = pd.PeriodIndex(values, freq='Q-DEC')\nprint(index)\n\nPeriod Frequency Conversion\nPeriods and PeriodIndex objects can be converted using asfreq:\np = pd.Period('2011', freq='A-DEC')\nprint(p.asfreq('M', how='start'))\nprint(p.asfreq('M', how='end'))\n\np = pd.Period('Aug-2011', 'M')\nprint(p.asfreq('A-JUN'))\n\n\nPeriod Frequency Conversion(Cont.)\nperiods = pd.period_range('2006', '2009', freq='A-DEC')\nts = pd.Series(np.random.randn(len(periods)), index=periods)\nprint(ts.asfreq('M', how='start'))\nprint(ts.asfreq('B', how='end'))\n\n\nQuarterly Period Frequencies\nQuarterly data is common in finance. pandas supports quarterly frequencies (Q-JAN through Q-DEC):\np = pd.Period('2012Q4', freq='Q-JAN')#In the case of a fiscal year ending in January, 2012Q4 runs from November 2011through January 2012\nprint(p)\nprint(p.asfreq('D', how='start'))\nprint(p.asfreq('D', how='end'))\n\n\nQuarterly Period Frequencies(Cont.)\nGet the timestamp at 4 P.M. on the second-to-last business day of the quarter\np4pm = (p.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60\nprint(p4pm)\nprint(p4pm.to_timestamp())\n\n\nQuarterly Period Frequencies(Cont.)\nGenerate quarterly ranges using pandas.period_range\nperiods = pd.period_range('2011Q3', '2012Q4', freq='Q-JAN')\nts = pd.Series(np.arange(len(periods)), index=periods)\nprint(ts)\nnew_periods = (periods.asfreq('B', 'e') - 1).asfreq('H', 's') + 16\nts.index = new_periods.to_timestamp()\nprint(ts)\n\n\nConverting Timestamps to Periods (and Back)\nto_period() converts timestamps to periods:\ndates = pd.date_range('1/1/2000', periods=3, freq='M')\nts = pd.Series(np.random.randn(3), index=dates)\npts = ts.to_period()\nprint(ts)\nprint(pts)\n\n\nConverting Timestamps to Periods (and Back)(Cont.)\ndates = pd.date_range('1/29/2000', periods=6, freq='D')\nts2 = pd.Series(np.random.randn(6), index=dates)\nprint(ts2.to_period('M'))\nprint(ts2.to_period('M').to_timestamp(how='end'))#back to Timestamps\n\n\nCreating a PeriodIndex from Arrays\nYou can combine year and quarter columns to create a PeriodIndex:\ndata = pd.read_csv('examples/macrodata.csv')\nprint(data.head(5))\n\n\nCreating a PeriodIndex from Arrays (Continued)\nindex = pd.PeriodIndex(year=data['year'], quarter=data['quarter'],freq='Q-DEC')\ndata.index = index\nprint(data['infl'].head())"
  },
  {
    "objectID": "qmd/pandas3ed11.html#resampling-and-frequency-conversion",
    "href": "qmd/pandas3ed11.html#resampling-and-frequency-conversion",
    "title": "Python for Data Analysis",
    "section": "Resampling and Frequency Conversion",
    "text": "Resampling and Frequency Conversion\nResampling converts a time series from one frequency to another.\n\nDownsampling: Aggregating higher frequency data to lower (e.g., daily to monthly).\nUpsampling: Converting lower frequency data to higher (e.g., daily to hourly).\n\nThe resample() method is used. It‚Äôs similar to groupby.\ndates = pd.date_range('1/1/2000', periods=100, freq='D')\nts = pd.Series(np.random.randn(len(dates)), index=dates)\nprint(ts.resample('M').mean()) # Monthly means (downsampling)\nprint(ts.resample('M', kind='period').mean())\n\nResample Method Arguments\nArgument | Description |\n: | :‚Äì |\nrule | String, DateOffset, or timedelta indicating the desired resampled frequency (for example, ‚ÄòM‚Äô, ‚Äò5min‚Äô, or Second(15)) |\naxis | Axis to resample on; default axis=0 |\n|fill_method|How to interpolate when upsampling, as in ‚Äúffill‚Äù or ‚Äúbfill‚Äù; by default does no interpolation| |closed|In downsampling, which end of each interval is closed (inclusive), ‚Äúright‚Äù or ‚Äúleft‚Äù|\n\n\nResample Method Arguments(Cont.)\nArgument | Description |\n: | :‚Äì |\n|label|In downsampling, how to label the aggregated result, with the ‚Äúright‚Äù or ‚Äúleft‚Äù bin edge (e.g., the9:30 to 9:35 five-minute interval could be labeled 9:30 or 9:35)| |limit|When forward or backward filling, the maximum number of periods to fill| |kind|Aggregate to periods (‚Äúperiod‚Äù) or timestamps (‚Äútimestamp‚Äù); defaults to the type of index thetime series has| |convention|When resampling periods, the convention (‚Äústart‚Äù or ‚Äúend‚Äù) for converting the low-frequency periodto high frequency; defaults to ‚Äústart‚Äù| |origin|The ‚Äúbase‚Äù timestamp from which to determine the resampling bin edges; can also be one of ‚Äúepoch‚Äù,‚Äústart‚Äù, ‚Äústart_day‚Äù, ‚Äúend‚Äù, or ‚Äúend_day‚Äù; see the resample docstring for full details| |offset|An offset timedelta added to the origin; defaults to None|\n\n\nDownsampling\ndates = pd.date_range('1/1/2000', periods=12, freq='T')\nts = pd.Series(np.arange(12), index=dates)\nprint(ts)\nprint(ts.resample('5min').sum())"
  },
  {
    "objectID": "qmd/pandas3ed11.html#downsamplingcont.",
    "href": "qmd/pandas3ed11.html#downsamplingcont.",
    "title": "Python for Data Analysis",
    "section": "Downsampling(Cont.)",
    "text": "Downsampling(Cont.)\n# closed='right', label='left'\nprint(ts.resample('5min', closed='right').sum())\n\n# closed='right', label='right'\nprint(ts.resample('5min', closed='right', label='right').sum())"
  },
  {
    "objectID": "qmd/pandas3ed11.html#downsamplingcont.-1",
    "href": "qmd/pandas3ed11.html#downsamplingcont.-1",
    "title": "Python for Data Analysis",
    "section": "Downsampling(Cont.)",
    "text": "Downsampling(Cont.)\n#shift the result index\nfrom pandas.tseries.frequencies import to_offset\nresult = ts.resample('5min', closed='right', label='right').sum()\nresult.index = result.index + to_offset(\"-1s\")\nprint(result)\n\nOpen-High-Low-Close (OHLC) Resampling\nfinance data resampling\nprint(ts.resample('5min').ohlc())\n\n\nUpsampling and Interpolation\nframe = pd.DataFrame(np.random.randn(2, 4),\n                    index=pd.date_range('1/1/2000', periods=2, freq='W-WED'),\n                    columns=['Colorado', 'Texas', 'New York', 'Ohio'])\nprint(frame)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#upsampling-and-interpolationcont.",
    "href": "qmd/pandas3ed11.html#upsampling-and-interpolationcont.",
    "title": "Python for Data Analysis",
    "section": "Upsampling and Interpolation(Cont.)",
    "text": "Upsampling and Interpolation(Cont.)\ndf_daily = frame.resample('D').asfreq()\nprint(df_daily)\nprint(frame.resample('D').ffill())\nprint(frame.resample('D').ffill(limit=2))\nprint(frame.resample('W-THU').ffill())\n\nResampling with Periods\nResampling period-indexed data is similar:\nframe = pd.DataFrame(np.random.randn(24, 4),\n                     index=pd.period_range('1-2000', '12-2001', freq='M'),\n                     columns=['Colorado', 'Texas', 'New York', 'Ohio'])\nprint(frame.head())"
  },
  {
    "objectID": "qmd/pandas3ed11.html#resampling-with-periodscont.",
    "href": "qmd/pandas3ed11.html#resampling-with-periodscont.",
    "title": "Python for Data Analysis",
    "section": "Resampling with Periods(Cont.)",
    "text": "Resampling with Periods(Cont.)\nannual_frame = frame.resample('A-DEC').mean()\nprint(annual_frame)\n\n# Q-DEC: Quarterly, year ending in December\nprint(annual_frame.resample('Q-DEC', convention='end').asfreq())\nprint(annual_frame.resample('Q-MAR').ffill())"
  },
  {
    "objectID": "qmd/pandas3ed11.html#grouped-time-resampling",
    "href": "qmd/pandas3ed11.html#grouped-time-resampling",
    "title": "Python for Data Analysis",
    "section": "Grouped Time Resampling",
    "text": "Grouped Time Resampling\nN = 15\ntimes = pd.date_range('2017-05-20 00:00', freq='1min', periods=N)\ndf = pd.DataFrame({'time': times, 'value': np.arange(N)})\nprint(df)\nprint(df.set_index('time').resample('5min').count())"
  },
  {
    "objectID": "qmd/pandas3ed11.html#grouped-time-resamplingcont.",
    "href": "qmd/pandas3ed11.html#grouped-time-resamplingcont.",
    "title": "Python for Data Analysis",
    "section": "Grouped Time Resampling(Cont.)",
    "text": "Grouped Time Resampling(Cont.)\ndf2 = pd.DataFrame({'time': times.repeat(3),\n                    'key': np.tile(['a', 'b', 'c'], N),\n                    'value': np.arange(N * 3.)})\nprint(df2.head(7))"
  },
  {
    "objectID": "qmd/pandas3ed11.html#grouped-time-resamplingcont.-1",
    "href": "qmd/pandas3ed11.html#grouped-time-resamplingcont.-1",
    "title": "Python for Data Analysis",
    "section": "Grouped Time Resampling(Cont.)",
    "text": "Grouped Time Resampling(Cont.)\ntime_key = pd.Grouper(freq='5min')\nresampled = (df2.set_index('time')\n             .groupby(['key', time_key])\n             .sum())\nprint(resampled)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#moving-window-functions",
    "href": "qmd/pandas3ed11.html#moving-window-functions",
    "title": "Python for Data Analysis",
    "section": "Moving Window Functions",
    "text": "Moving Window Functions\nMoving window functions (also called rolling window functions) operate on a sliding window of data. They are commonly used for smoothing noisy time series.\nclose_px_all = pd.read_csv('examples/stock_px.csv',parse_dates=True, index_col=0)\nclose_px = close_px_all[['AAPL', 'MSFT', 'XOM']]\nclose_px = close_px.resample('B').ffill()#business day frequency"
  },
  {
    "objectID": "qmd/pandas3ed11.html#moving-window-functionscont.",
    "href": "qmd/pandas3ed11.html#moving-window-functionscont.",
    "title": "Python for Data Analysis",
    "section": "Moving Window Functions(Cont.)",
    "text": "Moving Window Functions(Cont.)\nclose_px['AAPL'].plot()\nclose_px['AAPL'].rolling(250).mean().plot() # rolling 250 days mean"
  },
  {
    "objectID": "qmd/pandas3ed11.html#moving-window-functionscont.-1",
    "href": "qmd/pandas3ed11.html#moving-window-functionscont.-1",
    "title": "Python for Data Analysis",
    "section": "Moving Window Functions(Cont.)",
    "text": "Moving Window Functions(Cont.)\nstd250 = close_px['AAPL'].pct_change().rolling(250, min_periods=10).std()\nprint(std250[5:12])\nstd250.plot()"
  },
  {
    "objectID": "qmd/pandas3ed11.html#moving-window-functionscont.-2",
    "href": "qmd/pandas3ed11.html#moving-window-functionscont.-2",
    "title": "Python for Data Analysis",
    "section": "Moving Window Functions(Cont.)",
    "text": "Moving Window Functions(Cont.)\nexpanding_mean = std250.expanding().mean()"
  },
  {
    "objectID": "qmd/pandas3ed11.html#moving-window-functionscont.-3",
    "href": "qmd/pandas3ed11.html#moving-window-functionscont.-3",
    "title": "Python for Data Analysis",
    "section": "Moving Window Functions(Cont.)",
    "text": "Moving Window Functions(Cont.)\nplt.style.use('grayscale')\nclose_px.rolling(60).mean().plot(logy=True)"
  },
  {
    "objectID": "qmd/pandas3ed11.html#moving-window-functionscont.-4",
    "href": "qmd/pandas3ed11.html#moving-window-functionscont.-4",
    "title": "Python for Data Analysis",
    "section": "Moving Window Functions(Cont.)",
    "text": "Moving Window Functions(Cont.)\nprint(close_px.rolling('20D').mean())\n\nExponentially Weighted Functions\naapl_px = close_px['AAPL']['2006':'2007']\nma30 = aapl_px.rolling(30, min_periods=20).mean()\newma30 = aapl_px.ewm(span=30).mean()\n\naapl_px.plot(style='k-', label='Price')\nma30.plot(style='k--', label='Simple Moving Avg')\newma30.plot(style='k-', label='EW MA')\nplt.legend()\n\n\nBinary Moving Window Functions\nspx_px = close_px_all['SPX']\nspx_rets = spx_px.pct_change()\nreturns = close_px.pct_change()\n\n# Correlation of AAPL returns with S&P 500 returns\ncorr = returns['AAPL'].rolling(125, min_periods=100).corr(spx_rets)\ncorr.plot()\n\n\nBinary Moving Window Functions (Continued)\n# Correlation of all stock returns with S&P 500\ncorr = returns.rolling(125, min_periods=100).corr(spx_rets)\ncorr.plot()\n\n\nUser-Defined Moving Window Functions\nThe apply method allows you to apply custom functions:\nfrom scipy.stats import percentileofscore\n\ndef score_at_2percent(x):\n    return percentileofscore(x, 0.02)\n\nresult = returns['AAPL'].rolling(250).apply(score_at_2percent)\nresult.plot()"
  },
  {
    "objectID": "qmd/pandas3ed11.html#conclusion",
    "href": "qmd/pandas3ed11.html#conclusion",
    "title": "Python for Data Analysis",
    "section": "Conclusion",
    "text": "Conclusion\nThis chapter covered essential techniques for working with time series data in pandas, including:\n\nDate and time data types.\nTime series indexing, selection, and subsetting.\nGenerating date ranges and frequencies.\nShifting data.\nTime zone handling.\nPeriods and period arithmetic.\nResampling (downsampling and upsampling).\nMoving window functions.\n\nThese tools are fundamental for analyzing time-based data."
  },
  {
    "objectID": "qmd/pandas3ed11.html#summary",
    "href": "qmd/pandas3ed11.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary",
    "text": "Summary\n\nTime Series Data: Sequences of data points indexed in time order.\npandas Functionality: pandas provides robust tools for manipulating time series data.\nKey Operations: Learned to handle date/time types, resample, shift, and apply rolling functions.\nApplications: These techniques are applicable in finance, economics, ecology, etc.\nBuilding Blocks: Foundation for advanced time series modeling."
  },
  {
    "objectID": "qmd/pandas3ed11.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed11.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion",
    "text": "Thoughts and Discussion\n\nData Frequency Choice: How does frequency choice impact insights?\nMissing Data Strategies: Discuss strategies for handling missing data.\nMoving Window Function Selection: Trade-offs between moving average types.\nTime Zone Awareness: Why is time zone awareness crucial?\nResampling Applications: Other applications of resampling.\nPeriod vs.¬†Timestamp: When to use Periods vs.¬†Timestamps?\nReal-World Data Challenges: Common challenges with real-world data.\nBeyond pandas: Other libraries for advanced analysis.\nEthical Considerations: Ethical considerations in time series analysis.\nProject Ideas: Propose a small project idea."
  },
  {
    "objectID": "qmd/pandas3ed12cn.html",
    "href": "qmd/pandas3ed12cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨Á´†Â∞Ü‰ªãÁªçÂ¶Ç‰ΩïÂ∞Ü‰ΩøÁî® pandas ËøõË°åÊï∞ÊçÆÊï¥ÁêÜ‰∏é‰ΩøÁî® Python ‰∏ìÁî®Â∫ìËøõË°åÊ®°ÂûãÊûÑÂª∫ËÅîÁ≥ªËµ∑Êù•„ÄÇ\nÊàë‰ª¨Â∞ÜÈáçÁÇπÂÖ≥Ê≥®Â¶Ç‰ΩïÂ∞Ü pandas ‰∏é statsmodels Âíå scikit-learn Á≠âÂ∫ìËøûÊé•Ëµ∑Êù•„ÄÇ\nËøôÊòØÊï∞ÊçÆÂàÜÊûêÂ∑•‰ΩúÊµÅÁ®ã‰∏≠ÁöÑÂÖ≥ÈîÆ‰∏ÄÊ≠•„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÁÆÄ‰ªã",
    "href": "qmd/pandas3ed12cn.html#ÁÆÄ‰ªã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨Á´†Â∞Ü‰ªãÁªçÂ¶Ç‰ΩïÂ∞Ü‰ΩøÁî® pandas ËøõË°åÊï∞ÊçÆÊï¥ÁêÜ‰∏é‰ΩøÁî® Python ‰∏ìÁî®Â∫ìËøõË°åÊ®°ÂûãÊûÑÂª∫ËÅîÁ≥ªËµ∑Êù•„ÄÇ\nÊàë‰ª¨Â∞ÜÈáçÁÇπÂÖ≥Ê≥®Â¶Ç‰ΩïÂ∞Ü pandas ‰∏é statsmodels Âíå scikit-learn Á≠âÂ∫ìËøûÊé•Ëµ∑Êù•„ÄÇ\nËøôÊòØÊï∞ÊçÆÂàÜÊûêÂ∑•‰ΩúÊµÅÁ®ã‰∏≠ÁöÑÂÖ≥ÈîÆ‰∏ÄÊ≠•„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÂÖ≥ÈîÆÊ¶ÇÂøµ",
    "href": "qmd/pandas3ed12cn.html#ÂÖ≥ÈîÆÊ¶ÇÂøµ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ≥ÈîÆÊ¶ÇÂøµ üîë",
    "text": "ÂÖ≥ÈîÆÊ¶ÇÂøµ üîë\nËÆ©Êàë‰ª¨ÂÆö‰πâ‰∏Ä‰∫õÈáçË¶ÅÁöÑÊúØËØ≠Ôºö\n\nÊï∞ÊçÆÊåñÊéòÔºö ‰ªéÂ§ßÂûãÊï∞ÊçÆÈõÜ‰∏≠ÂèëÁé∞Ê®°Âºè„ÄÅÂºÇÂ∏∏ÂíåÊ¥ûÂØüÂäõ„ÄÇÂÆÉÈÄöÂ∏∏Ê∂âÂèäÂêÑÁßçÊäÄÊúØÔºåÂåÖÊã¨Êú∫Âô®Â≠¶‰π†„ÄÇ\nÊú∫Âô®Â≠¶‰π† (ML)Ôºö ‰∫∫Â∑•Êô∫ËÉΩÁöÑ‰∏Ä‰∏™Â≠êÈõÜÔºå‰ΩøÁ≥ªÁªüËÉΩÂ§üÂú®Ê≤°ÊúâÊòéÁ°ÆÁºñÁ®ãÁöÑÊÉÖÂÜµ‰∏ã‰ªéÊï∞ÊçÆ‰∏≠Â≠¶‰π†„ÄÇÊú∫Âô®Â≠¶‰π†ÁÆóÊ≥ï‰ªé‚ÄúËÆ≠ÁªÉÊï∞ÊçÆ‚ÄùÊûÑÂª∫Ê®°Âûã‰ª•ËøõË°åÈ¢ÑÊµã„ÄÇ\nÁªüËÆ°Â≠¶‰π†Ôºö ‰ΩøÁî®ÁªüËÆ°ÊñπÊ≥ïÁêÜËß£Êï∞ÊçÆÁöÑÊ°ÜÊû∂„ÄÇÂÆÉ‰∏éÊú∫Âô®Â≠¶‰π†ÊúâÈáçÂè†Ôºå‰ΩÜÈÄöÂ∏∏Êõ¥Âº∫Ë∞ÉÊé®ÁêÜÂíåÂèØËß£ÈáäÊÄß„ÄÇ\nÁâπÂæÅÂ∑•Á®ãÔºö Âà©Áî®È¢ÜÂüüÁü•ËØÜ‰ªéÂéüÂßãÊï∞ÊçÆ‰∏≠ÈÄâÊã©„ÄÅËΩ¨Êç¢ÂíåÂàõÂª∫Áõ∏ÂÖ≥ÁâπÂæÅÔºàÂèòÈáèÔºâ„ÄÇËøôÂèØ‰ª•ÊèêÈ´òÊ®°ÂûãÊÄßËÉΩÔºåÂπ∂‰∏îËá≥ÂÖ≥ÈáçË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Êï∞ÊçÆÊåñÊéòÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†ÁöÑÂÖ≥Á≥ª",
    "href": "qmd/pandas3ed12cn.html#Êï∞ÊçÆÊåñÊéòÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†ÁöÑÂÖ≥Á≥ª",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÊåñÊéò„ÄÅÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†ÁöÑÂÖ≥Á≥ª ü§ù",
    "text": "Êï∞ÊçÆÊåñÊéò„ÄÅÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†ÁöÑÂÖ≥Á≥ª ü§ù\nÊï∞ÊçÆÊåñÊéò„ÄÅÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†ÊòØÁõ∏ÂÖ≥ÁöÑÔºö\n\n\n\n\n\ngraph LR\n    A[Êï∞ÊçÆÊåñÊéò] --&gt; C(ÂÖ±ÂêåÁÇπ)  # Êï∞ÊçÆÊåñÊéòÊåáÂêëÂÖ±ÂêåÁÇπ\n    B[Êú∫Âô®Â≠¶‰π†] --&gt; C(ÂÖ±ÂêåÁÇπ)  # Êú∫Âô®Â≠¶‰π†ÊåáÂêëÂÖ±ÂêåÁÇπ\n    D[ÁªüËÆ°Â≠¶‰π†] --&gt; C(ÂÖ±ÂêåÁÇπ)  # ÁªüËÆ°Â≠¶‰π†ÊåáÂêëÂÖ±ÂêåÁÇπ\n    C --&gt; E[Ê¥ûÂØü‰∏éÈ¢ÑÊµã]  # ÂÖ±ÂêåÁÇπÊåáÂêëÊ¥ûÂØü‰∏éÈ¢ÑÊµã\n\n\n\n\n\n\nÂÆÉ‰ª¨ÈÉΩÊó®Âú®ÊèêÂèñÊ¥ûÂØüÂπ∂ËøõË°åÈ¢ÑÊµã„ÄÇÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°Â≠¶‰π†Êèê‰æõ‰∫ÜÂú®Êõ¥ÂπøÊ≥õÁöÑÊï∞ÊçÆÊåñÊéòÁéØÂ¢É‰∏≠‰ΩøÁî®ÁöÑÂ∑•ÂÖ∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#python-Âú®Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ‰ΩúÁî®",
    "href": "qmd/pandas3ed12cn.html#python-Âú®Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ‰ΩúÁî®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Python Âú®Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ‰ΩúÁî® üêç",
    "text": "Python Âú®Êï∞ÊçÆÂàÜÊûê‰∏≠ÁöÑ‰ΩúÁî® üêç\nPython Âú®Êï∞ÊçÆÂàÜÊûê‰∏≠Âç†ÊçÆ‰∏ªÂØºÂú∞‰ΩçÔºåÂéüÂõ†Â¶Ç‰∏ãÔºö\n\n‰∏∞ÂØåÁöÑÁîüÊÄÅÁ≥ªÁªüÔºö pandasÔºàÊï∞ÊçÆÂ§ÑÁêÜÔºâ„ÄÅNumPyÔºàÊï∞ÂÄºËÆ°ÁÆóÔºâ„ÄÅstatsmodelsÔºàÁªüËÆ°Âª∫Ê®°Ôºâ„ÄÅscikit-learnÔºàÊú∫Âô®Â≠¶‰π†Ôºâ‰ª•Âèä Matplotlib/SeabornÔºàÂèØËßÜÂåñÔºâÁ≠âÂ∫ìÊèê‰æõ‰∫ÜÂÆåÊï¥ÁöÑÂ∑•ÂÖ∑ÂåÖ„ÄÇ\nÊòìÁî®ÊÄßÔºö Python Ê∏ÖÊô∞ÁöÑËØ≠Ê≥ïÂíå‰∫§‰∫íÊÄßÔºà‰æãÂ¶Ç JupyterÔºâ‰ΩøÂÖ∂Êòì‰∫éÂ≠¶‰π†ÔºåÂç≥‰ΩøÊ≤°ÊúâÁºñÁ®ãËÉåÊôØ„ÄÇ\nÁ§æÂå∫ÊîØÊåÅÔºö Â∫ûÂ§ßËÄåÊ¥ªË∑ÉÁöÑÁ§æÂå∫ÂºÄÂèëÂ∫ì„ÄÅÊèê‰æõÊîØÊåÅÂπ∂ÂàõÂª∫ÊñáÊ°£„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Â∏∏ËßÅÂ∑•‰ΩúÊµÅÁ®ã",
    "href": "qmd/pandas3ed12cn.html#Â∏∏ËßÅÂ∑•‰ΩúÊµÅÁ®ã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏∏ËßÅÂ∑•‰ΩúÊµÅÁ®ã üîÑ",
    "text": "Â∏∏ËßÅÂ∑•‰ΩúÊµÅÁ®ã üîÑ\nÂÖ∏ÂûãÁöÑÊ®°ÂûãÂºÄÂèëÂ∑•‰ΩúÊµÅÁ®ãÔºö\n\n\n\n\n\ngraph LR\n    A[Êï∞ÊçÆÂä†ËΩΩ (pandas)] --&gt; B[Êï∞ÊçÆÊ∏ÖÊ¥ó (pandas)]  # Êï∞ÊçÆÂä†ËΩΩÊåáÂêëÊï∞ÊçÆÊ∏ÖÊ¥ó\n    B --&gt; C[ÁâπÂæÅÂ∑•Á®ã (pandas, ÂÖ∂‰ªñÂ∑•ÂÖ∑)]  # Êï∞ÊçÆÊ∏ÖÊ¥óÊåáÂêëÁâπÂæÅÂ∑•Á®ã\n    C --&gt; D[Ê®°ÂûãÊûÑÂª∫ (statsmodels, scikit-learn)]  # ÁâπÂæÅÂ∑•Á®ãÊåáÂêëÊ®°ÂûãÊûÑÂª∫\n    D --&gt; E[Ê®°ÂûãËØÑ‰º∞ (statsmodels, scikit-learn)]  # Ê®°ÂûãÊûÑÂª∫ÊåáÂêëÊ®°ÂûãËØÑ‰º∞\n    E --&gt; F[È¢ÑÊµã/Êé®ÁêÜ]  # Ê®°ÂûãËØÑ‰º∞ÊåáÂêëÈ¢ÑÊµã/Êé®ÁêÜ\n\n\n\n\n\n\n\nÊï∞ÊçÆÂä†ËΩΩÔºö pandas ËØªÂèñÊï∞ÊçÆÔºàCSV„ÄÅExcel„ÄÅÊï∞ÊçÆÂ∫ìÁ≠âÔºâ„ÄÇ\nÊï∞ÊçÆÊ∏ÖÊ¥óÔºö pandas Â§ÑÁêÜÁº∫Â§±ÂÄº„ÄÅÈîôËØØÂπ∂ËΩ¨Êç¢Êï∞ÊçÆ„ÄÇ\nÁâπÂæÅÂ∑•Á®ãÔºö ÂàõÂª∫/ËΩ¨Êç¢ÁâπÂæÅ‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊ®°Âûã„ÄÇ\nÊ®°ÂûãÊûÑÂª∫Ôºö statsmodels/scikit-learn ËÆ≠ÁªÉÊ®°Âûã„ÄÇ\nÊ®°ÂûãËØÑ‰º∞Ôºö ËØÑ‰º∞ÊÄßËÉΩ„ÄÇ\nÈ¢ÑÊµã/Êé®ÁêÜÔºö ËøõË°åÈ¢ÑÊµãÊàñÂæóÂá∫Êé®ËÆ∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#pandas-ÂíåÊ®°Âûã‰πãÈó¥ÁöÑÊé•Âè£",
    "href": "qmd/pandas3ed12cn.html#pandas-ÂíåÊ®°Âûã‰πãÈó¥ÁöÑÊé•Âè£",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas ÂíåÊ®°Âûã‰πãÈó¥ÁöÑÊé•Âè£ ‚ÜîÔ∏éÔ∏è",
    "text": "pandas ÂíåÊ®°Âûã‰πãÈó¥ÁöÑÊé•Âè£ ‚ÜîÔ∏éÔ∏è\n‰∏ªË¶ÅÁöÑÊé•Âè£ÈÄöÂ∏∏ÊòØ NumPy Êï∞ÁªÑ„ÄÇpandas DataFrame ÊûÑÂª∫Âú® NumPy ‰πã‰∏äÔºåÂõ†Ê≠§ËΩ¨Êç¢ÂæàÂÆπÊòì„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#dataframe-Âà∞-numpy-Êï∞ÁªÑ",
    "href": "qmd/pandas3ed12cn.html#dataframe-Âà∞-numpy-Êï∞ÁªÑ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame Âà∞ NumPy Êï∞ÁªÑ ‚û°Ô∏è",
    "text": "DataFrame Âà∞ NumPy Êï∞ÁªÑ ‚û°Ô∏è\n‰ΩøÁî® .to_numpy() Â∞Ü DataFrame ËΩ¨Êç¢‰∏∫ NumPy Êï∞ÁªÑÔºö\n\nÈáçË¶ÅÊèêÁ§∫Ôºö .to_numpy() ‰ºò‰∫é .values„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#numpy-Êï∞ÁªÑÂà∞-dataframe",
    "href": "qmd/pandas3ed12cn.html#numpy-Êï∞ÁªÑÂà∞-dataframe",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "NumPy Êï∞ÁªÑÂà∞ DataFrame ‚¨ÖÔ∏è",
    "text": "NumPy Êï∞ÁªÑÂà∞ DataFrame ‚¨ÖÔ∏è\n‰ªé NumPy Êï∞ÁªÑÂàõÂª∫ DataFrameÔºö\n\n# ‰ΩøÁî® NumPy Êï∞ÁªÑÂíåÂàóÂêçÂàõÂª∫ DataFrame\ndf2 = pd.DataFrame(data_array, columns=['one', 'two', 'three'])\nprint(df2)  # ÊâìÂç∞ DataFrame\n\n   one   two  three\n0  1.0  0.01   -1.5\n1  2.0 -0.01    0.0\n2  3.0  0.25    3.6\n3  4.0 -4.10    1.3\n4  5.0  0.00   -2.0\n\n\n\nÊàë‰ª¨Âú®ÂàõÂª∫ DataFrame Êó∂Êèê‰æõ‰∫ÜÂàóÂêç„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÂêåÊûÑÊï∞ÊçÆ‰∏éÂºÇÊûÑÊï∞ÊçÆ",
    "href": "qmd/pandas3ed12cn.html#ÂêåÊûÑÊï∞ÊçÆ‰∏éÂºÇÊûÑÊï∞ÊçÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂêåÊûÑÊï∞ÊçÆ‰∏éÂºÇÊûÑÊï∞ÊçÆ ü§î",
    "text": "ÂêåÊûÑÊï∞ÊçÆ‰∏éÂºÇÊûÑÊï∞ÊçÆ ü§î\n\nÂêåÊûÑÊï∞ÊçÆÔºö Áõ∏ÂêåÁ±ªÂûãÔºà‰æãÂ¶ÇÔºåÊâÄÊúâÊï∞Â≠óÔºâ-&gt; ÂÖ∑ÊúâËØ•Á±ªÂûãÁöÑ NumPy Êï∞ÁªÑ„ÄÇ\nÂºÇÊûÑÊï∞ÊçÆÔºö Ê∑∑ÂêàÁ±ªÂûãÔºàÊï∞Â≠óÂíåÂ≠óÁ¨¶‰∏≤Ôºâ-&gt; dtype=object Êï∞ÁªÑÔºàÂØπ‰∫éÊï∞ÂÄºËÆ°ÁÆóÊïàÁéáËæÉ‰ΩéÔºâ„ÄÇ\n\nÁ§∫‰æãÔºö\n\ndf3 = data.copy()  # Â§çÂà∂ DataFrame\ndf3['strings'] = ['a', 'b', 'c', 'd', 'e']  # Ê∑ªÂä†‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Âàó\nprint(df3)  # ÊâìÂç∞ DataFrame\n\nprint(\"\\nÂºÇÊûÑÊï∞ÁªÑ:\")  # ÊâìÂç∞ÊèêÁ§∫‰ø°ÊÅØ\nprint(df3.to_numpy())  # ÊâìÂç∞ÂºÇÊûÑ NumPy Êï∞ÁªÑ (Êï∞ÊçÆÁ±ªÂûãÊòØobject)\n\n   x0    x1    y strings\n0   1  0.01 -1.5       a\n1   2 -0.01  0.0       b\n2   3  0.25  3.6       c\n3   4 -4.10  1.3       d\n4   5  0.00 -2.0       e\n\nÂºÇÊûÑÊï∞ÁªÑ:\n[[1 0.01 -1.5 'a']\n [2 -0.01 0.0 'b']\n [3 0.25 3.6 'c']\n [4 -4.1 1.3 'd']\n [5 0.0 -2.0 'e']]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÈÄâÊã©ÂàóÂ≠êÈõÜ",
    "href": "qmd/pandas3ed12cn.html#ÈÄâÊã©ÂàóÂ≠êÈõÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÄâÊã©ÂàóÂ≠êÈõÜ ü§è",
    "text": "ÈÄâÊã©ÂàóÂ≠êÈõÜ ü§è\nÂØπ‰∫éÂª∫Ê®°ÔºåÂú®ËΩ¨Êç¢‰πãÂâç‰ΩøÁî® .loc ÈÄâÊã©ÂàóÔºö\n\nmodel_cols = ['x0', 'x1']  # ÂÆö‰πâË¶ÅÈÄâÊã©ÁöÑÂàó\nprint(data.loc[:, model_cols].to_numpy())  # ÈÄâÊã©ÂàóÂπ∂ËΩ¨Êç¢‰∏∫ NumPy Êï∞ÁªÑ\n\n[[ 1.    0.01]\n [ 2.   -0.01]\n [ 3.    0.25]\n [ 4.   -4.1 ]\n [ 5.    0.  ]]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂíåËôöÊãüÂèòÈáè",
    "href": "qmd/pandas3ed12cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂíåËôöÊãüÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÁ±ªÊï∞ÊçÆÂíåËôöÊãüÂèòÈáè üè∑Ô∏è",
    "text": "ÂàÜÁ±ªÊï∞ÊçÆÂíåËôöÊãüÂèòÈáè üè∑Ô∏è\nÂàÜÁ±ªÂèòÈáèÔºà‰æãÂ¶ÇÔºå‚Äúmale‚Äù„ÄÅ‚Äúfemale‚ÄùÔºâÈúÄË¶ÅÊï∞ÂÄºË°®Á§∫„ÄÇ‰ΩøÁî®ËôöÊãüÂèòÈáèÔºàÊàñÁã¨ÁÉ≠ÁºñÁ†ÅÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#pandas-get_dummies",
    "href": "qmd/pandas3ed12cn.html#pandas-get_dummies",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pandas get_dummies() üêº",
    "text": "pandas get_dummies() üêº\npd.get_dummies() ÁÆÄÂåñ‰∫ÜÊ≠§Êìç‰ΩúÔºö\n\n# ÂàõÂª∫‰∏Ä‰∏™ÂàÜÁ±ªÂàó\ndata['category'] = pd.Categorical(['a', 'b', 'a', 'a', 'b'], categories=['a', 'b'])\nprint(data)  # ÊâìÂç∞ DataFrame\n\n# ‰ΩøÁî® get_dummies() ÂàõÂª∫ËôöÊãüÂèòÈáè\ndummies = pd.get_dummies(data.category, prefix='category')\nprint(\"\\nËôöÊãüÂèòÈáè:\")  # ÊâìÂç∞ÊèêÁ§∫‰ø°ÊÅØ\nprint(dummies)  # ÊâìÂç∞ËôöÊãüÂèòÈáè\n\n   x0    x1    y category\n0   1  0.01 -1.5        a\n1   2 -0.01  0.0        b\n2   3  0.25  3.6        a\n3   4 -4.10  1.3        a\n4   5  0.00 -2.0        b\n\nËôöÊãüÂèòÈáè:\n   category_a  category_b\n0        True       False\n1       False        True\n2        True       False\n3        True       False\n4       False        True\n\n\n\n# Âà†Èô§ÂéüÂßãÂàÜÁ±ªÂàóÔºåÂπ∂ËøûÊé•ËôöÊãüÂèòÈáè\ndata_with_dummies = data.drop('category', axis=1).join(dummies)\nprint(\"\\nÂåÖÂê´ËôöÊãüÂèòÈáèÁöÑ DataFrame:\")  # ÊâìÂç∞ÊèêÁ§∫‰ø°ÊÅØ\nprint(data_with_dummies)  # ÊâìÂç∞ÂåÖÂê´ËôöÊãüÂèòÈáèÁöÑ DataFrame\n\n\nÂåÖÂê´ËôöÊãüÂèòÈáèÁöÑ DataFrame:\n   x0    x1    y  category_a  category_b\n0   1  0.01 -1.5        True       False\n1   2 -0.01  0.0       False        True\n2   3  0.25  3.6        True       False\n3   4 -4.10  1.3        True       False\n4   5  0.00 -2.0       False        True\n\n\n\nprefix Ê∑ªÂä†‰∏Ä‰∏™ÂâçÁºÄÔºà‰æãÂ¶ÇÔºåcategory_aÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#patsyÊ®°ÂûãÊèèËø∞",
    "href": "qmd/pandas3ed12cn.html#patsyÊ®°ÂûãÊèèËø∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "PatsyÔºöÊ®°ÂûãÊèèËø∞ üìù",
    "text": "PatsyÔºöÊ®°ÂûãÊèèËø∞ üìù\n\nPatsy ‰ΩøÁî®ÂÖ¨ÂºèËØ≠Ê≥ïÔºàÁ±ª‰ºº‰∫é RÔºâÊù•ÊåáÂÆöÊ®°ÂûãÔºåÂ∞§ÂÖ∂ÊòØÁ∫øÊÄßÊ®°Âûã„ÄÇ\nÂÆÉÈöè statsmodels ‰∏ÄËµ∑ÂÆâË£ÖÔºö conda install statsmodels"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#patsy-ÂÖ¨Âºè",
    "href": "qmd/pandas3ed12cn.html#patsy-ÂÖ¨Âºè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Patsy ÂÖ¨Âºè ‚ûï",
    "text": "Patsy ÂÖ¨Âºè ‚ûï\nÁ§∫‰æãÂÖ¨ÂºèÔºö\n# y ~ x0 + x1\n\nyÔºöÂõ†ÂèòÈáèÔºàÂìçÂ∫îÂèòÈáèÔºâ„ÄÇ\nx0, x1ÔºöËá™ÂèòÈáèÔºàÈ¢ÑÊµãÂèòÈáèÔºâ„ÄÇ\n~ÔºöÂàÜÈöîÂ∑¶‰æßÔºàÂìçÂ∫îÂèòÈáèÔºâÂíåÂè≥‰æßÔºàÈ¢ÑÊµãÂèòÈáèÔºâ„ÄÇ\n+ÔºöÂåÖÂê´È°πÔºà‰∏çÊòØÊï∞Â≠¶Âä†Ê≥ïÔºÅÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#patsy.dmatrices",
    "href": "qmd/pandas3ed12cn.html#patsy.dmatrices",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "patsy.dmatrices() üßÆ",
    "text": "patsy.dmatrices() üßÆ\ndmatrices() Êé•Âèó‰∏Ä‰∏™ÂÖ¨ÂºèÂíåÊï∞ÊçÆÔºåËøîÂõûËÆæËÆ°Áü©ÈòµÔºö\n\nimport patsy  # ÂØºÂÖ• patsy Â∫ì\n\n# ‰ΩøÁî® dmatrices() ÂàõÂª∫ËÆæËÆ°Áü©Èòµ\ny, X = patsy.dmatrices('y ~ x0 + x1', data)\n\nprint(\"y (ÂìçÂ∫îÂèòÈáèÁöÑËÆæËÆ°Áü©Èòµ):\")  # ÊâìÂç∞ÊèêÁ§∫‰ø°ÊÅØ\nprint(y)  # ÊâìÂç∞ÂìçÂ∫îÂèòÈáèÁöÑËÆæËÆ°Áü©Èòµ\nprint(\"\\nX (È¢ÑÊµãÂèòÈáèÁöÑËÆæËÆ°Áü©Èòµ):\")  # ÊâìÂç∞ÊèêÁ§∫‰ø°ÊÅØ\nprint(X)  # ÊâìÂç∞È¢ÑÊµãÂèòÈáèÁöÑËÆæËÆ°Áü©Èòµ\n\ny (ÂìçÂ∫îÂèòÈáèÁöÑËÆæËÆ°Áü©Èòµ):\n[[-1.5]\n [ 0. ]\n [ 3.6]\n [ 1.3]\n [-2. ]]\n\nX (È¢ÑÊµãÂèòÈáèÁöÑËÆæËÆ°Áü©Èòµ):\n[[ 1.    1.    0.01]\n [ 1.    2.   -0.01]\n [ 1.    3.    0.25]\n [ 1.    4.   -4.1 ]\n [ 1.    5.    0.  ]]\n\n\n\nPatsy ÈªòËÆ§ÂåÖÂê´‰∏Ä‰∏™Êà™Ë∑ùÔºà‰∏ÄÂàó 1Ôºâ‚Äî‚ÄîÂΩìÈ¢ÑÊµãÂèòÈáè‰∏∫Èõ∂Êó∂ÁöÑÂü∫Á∫øÂìçÂ∫î„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÊäëÂà∂Êà™Ë∑ù",
    "href": "qmd/pandas3ed12cn.html#ÊäëÂà∂Êà™Ë∑ù",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊäëÂà∂Êà™Ë∑ù ‚ûñ",
    "text": "ÊäëÂà∂Êà™Ë∑ù ‚ûñ\n‰ΩøÁî® + 0 Âà†Èô§Êà™Ë∑ùÔºö\n\n# ÂàõÂª∫‰∏çÂåÖÂê´Êà™Ë∑ùÁöÑËÆæËÆ°Áü©Èòµ\nX_no_intercept = patsy.dmatrices('y ~ x0 + x1 + 0', data)[1]  # [1] ‰ªÖËé∑Âèñ X\nprint(X_no_intercept)  # ÊâìÂç∞‰∏çÂåÖÂê´Êà™Ë∑ùÁöÑ X\n\n[[ 1.    0.01]\n [ 2.   -0.01]\n [ 3.    0.25]\n [ 4.   -4.1 ]\n [ 5.    0.  ]]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#patsynumpy-Âíå-statsmodels",
    "href": "qmd/pandas3ed12cn.html#patsynumpy-Âíå-statsmodels",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Patsy„ÄÅNumPy Âíå statsmodels ü§ù",
    "text": "Patsy„ÄÅNumPy Âíå statsmodels ü§ù\nPatsy ‰∏≠ÁöÑËÆæËÆ°Áü©ÈòµÂèØ‰∏é NumPyÔºà‰æãÂ¶Ç np.linalg.lstsqÔºâÊàñ statsmodels ‰∏ÄËµ∑‰ΩøÁî®Ôºö\n\nimport numpy as np  # ÂØºÂÖ• numpy Â∫ì\n\n# ‰ΩøÁî® NumPy ÁöÑÊúÄÂ∞è‰∫å‰πòÊ≥ïÊãüÂêàÁ∫øÊÄßÊ®°Âûã\ncoef, resid, _, _ = np.linalg.lstsq(X, y, rcond=None) # Ê∑ªÂä† rcond=None ‰ª•ÂÖºÂÆπ\nprint(coef)  # ÊâìÂç∞Á≥ªÊï∞\n\n# Â∞ÜÁ≥ªÊï∞ËΩ¨Êç¢‰∏∫ pandas Series\ncoef = pd.Series(coef.squeeze(), index=X.design_info.column_names)\nprint(coef)  # ÊâìÂç∞Â∏¶ÊúâÁ¥¢ÂºïÁöÑÁ≥ªÊï∞\n\n[[ 0.31290976]\n [-0.07910564]\n [-0.26546384]]\nIntercept    0.312910\nx0          -0.079106\nx1          -0.265464\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#patsyÊï∞ÊçÆËΩ¨Êç¢",
    "href": "qmd/pandas3ed12cn.html#patsyÊï∞ÊçÆËΩ¨Êç¢",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "PatsyÔºöÊï∞ÊçÆËΩ¨Êç¢ ‚ú®",
    "text": "PatsyÔºöÊï∞ÊçÆËΩ¨Êç¢ ‚ú®\nÂú®ÂÖ¨Âºè‰∏≠ÂåÖÂê´ Python ‰ª£Á†Å‰ª•ËøõË°åËΩ¨Êç¢Ôºö\n\n# Âú®ÂÖ¨Âºè‰∏≠‰ΩøÁî® Python ÂáΩÊï∞ËøõË°åÊï∞ÊçÆËΩ¨Êç¢\ny, X = patsy.dmatrices('y ~ x0 + np.log(np.abs(x1) + 1)', data)\nprint(X)  # ÊâìÂç∞ËΩ¨Êç¢ÂêéÁöÑ X\n\n[[1.         1.         0.00995033]\n [1.         2.         0.00995033]\n [1.         3.         0.22314355]\n [1.         4.         1.62924054]\n [1.         5.         0.        ]]\n\n\nPatsy Âú®‰ΩúÁî®Âüü‰∏≠Êü•Êâæ np.log Á≠âÂáΩÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÂÜÖÁΩÆÂáΩÊï∞standardizecenter",
    "href": "qmd/pandas3ed12cn.html#ÂÜÖÁΩÆÂáΩÊï∞standardizecenter",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁΩÆÂáΩÊï∞Ôºöstandardize„ÄÅcenter üõ†Ô∏è",
    "text": "ÂÜÖÁΩÆÂáΩÊï∞Ôºöstandardize„ÄÅcenter üõ†Ô∏è\nPatsy ÂÖ∑ÊúâÂÜÖÁΩÆÂáΩÊï∞Ôºö\n\nstandardize(x)ÔºöÊ†áÂáÜÂåñ xÔºàÂùáÂÄº‰∏∫ 0ÔºåÊ†áÂáÜÂ∑Æ‰∏∫ 1Ôºâ„ÄÇ\ncenter(x)ÔºöÂáèÂéªÂùáÂÄº„ÄÇ\n\n\n# ‰ΩøÁî® Patsy ÁöÑÂÜÖÁΩÆÂáΩÊï∞ËøõË°åÊï∞ÊçÆËΩ¨Êç¢\ny, X = patsy.dmatrices('y ~ standardize(x0) + center(x1)', data)\nprint(X)  # ÊâìÂç∞ËΩ¨Êç¢ÂêéÁöÑ X\n\n[[ 1.         -1.41421356  0.78      ]\n [ 1.         -0.70710678  0.76      ]\n [ 1.          0.          1.02      ]\n [ 1.          0.70710678 -3.33      ]\n [ 1.          1.41421356  0.77      ]]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÊúâÁä∂ÊÄÅËΩ¨Êç¢Âíå-build_design_matrices",
    "href": "qmd/pandas3ed12cn.html#ÊúâÁä∂ÊÄÅËΩ¨Êç¢Âíå-build_design_matrices",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊúâÁä∂ÊÄÅËΩ¨Êç¢Âíå build_design_matrices üíæ",
    "text": "ÊúâÁä∂ÊÄÅËΩ¨Êç¢Âíå build_design_matrices üíæ\nÂΩìÂ∫îÁî®ÂÉècenterÂíåstandardizeËøôÊ†∑ÁöÑËΩ¨Êç¢Êó∂ÔºåÂú®ËΩ¨Êç¢Êñ∞Êï∞ÊçÆÊó∂‰ΩøÁî®ÂéüÂßãÊï∞ÊçÆÈõÜÁöÑÁªüËÆ°Êï∞ÊçÆ„ÄÇ patsy.build_design_matrices ÂèØ‰ª•Êèê‰æõÂ∏ÆÂä©Ôºö\n\n# ÂàõÂª∫Êñ∞Êï∞ÊçÆ\nnew_data = pd.DataFrame({\n    'x0': [6, 7, 8, 9],\n    'x1': [3.1, -0.5, 0, 2.3],\n    'y' : [1, 2, 3, 4]\n})\n\n# ‰ΩøÁî®ÂéüÂßã X ÁöÑ design_info ÊûÑÂª∫Êñ∞Êï∞ÊçÆÁöÑËÆæËÆ°Áü©Èòµ\nnew_X = patsy.build_design_matrices([X.design_info], new_data)\nprint(new_X)  # ÊâìÂç∞Êñ∞Êï∞ÊçÆÁöÑËÆæËÆ°Áü©Èòµ\n\n[DesignMatrix with shape (4, 3)\n  Intercept  standardize(x0)  center(x1)\n          1          2.12132        3.87\n          1          2.82843        0.27\n          1          3.53553        0.77\n          1          4.24264        3.07\n  Terms:\n    'Intercept' (column 0)\n    'standardize(x0)' (column 1)\n    'center(x1)' (column 2)]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÊåâÂêçÁß∞Ê∑ªÂä†Âàó",
    "href": "qmd/pandas3ed12cn.html#ÊåâÂêçÁß∞Ê∑ªÂä†Âàó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÂêçÁß∞Ê∑ªÂä†Âàó ‚ûï",
    "text": "ÊåâÂêçÁß∞Ê∑ªÂä†Âàó ‚ûï\nË¶ÅÊ∑ªÂä†ÂàóÔºåËØ∑Â∞ÜÂÆÉ‰ª¨ÂåÖË£ÖÂú® I() ‰∏≠Ôºö\n\n# ‰ΩøÁî® I() Ê∑ªÂä†Âàó\ny, X = patsy.dmatrices('y ~ I(x0 + x1)', data)\nprint(X) # ÊâìÂç∞ËÆæËÆ°Áü©Èòµ, I(x0 + x1)Â∞Üx0 + x1‰Ωú‰∏∫‰∏Ä‰∏™Êï¥‰ΩìÂä†ÂÖ•\n\n[[ 1.    1.01]\n [ 1.    1.99]\n [ 1.    3.25]\n [ 1.   -0.1 ]\n [ 1.    5.  ]]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂíå-patsy",
    "href": "qmd/pandas3ed12cn.html#ÂàÜÁ±ªÊï∞ÊçÆÂíå-patsy",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÁ±ªÊï∞ÊçÆÂíå Patsy üè∑Ô∏è",
    "text": "ÂàÜÁ±ªÊï∞ÊçÆÂíå Patsy üè∑Ô∏è\nPatsy Ëá™Âä®Â§ÑÁêÜÂàÜÁ±ªÂèòÈáèÔºö\n\n# ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ÂàÜÁ±ªÂèòÈáèÁöÑ DataFrame\ndata = pd.DataFrame({\n    'key1': ['a', 'a', 'b', 'b', 'a', 'b', 'a', 'b'],\n    'key2': [0, 1, 0, 1, 0, 1, 0, 0],\n    'v1': [1, 2, 3, 4, 5, 6, 7, 8],\n    'v2': [-1, 0, 2.5, -0.5, 4.0, -1.2, 0.2, -1.7]\n    })\n\n# ‰ΩøÁî® Patsy Â§ÑÁêÜÂàÜÁ±ªÂèòÈáè\ny, X = patsy.dmatrices('v2 ~ key1', data)\nprint(X)  # ÊâìÂç∞ËÆæËÆ°Áü©Èòµ\n\n[[1. 0.]\n [1. 0.]\n [1. 1.]\n [1. 1.]\n [1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 1.]]\n\n\n\nPatsy ÁúÅÁï•‰∫Ü‰∏Ä‰∏™Á∫ßÂà´‰ª•ÈÅøÂÖçÂÖ±Á∫øÊÄßÔºà‰∏éÊà™Ë∑ùÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Êó†Êà™Ë∑ùÂàÜÁ±ªÂèòÈáè",
    "href": "qmd/pandas3ed12cn.html#Êó†Êà™Ë∑ùÂàÜÁ±ªÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó†Êà™Ë∑ùÔºåÂàÜÁ±ªÂèòÈáè ‚ûñüè∑Ô∏è",
    "text": "Êó†Êà™Ë∑ùÔºåÂàÜÁ±ªÂèòÈáè ‚ûñüè∑Ô∏è\nÊ≤°ÊúâÊà™Ë∑ùÊó∂ÔºåÂ∞ÜÂåÖÂê´ÊâÄÊúâÁ±ªÂà´ÂàóÔºö\n\n# Âú®Ê≤°ÊúâÊà™Ë∑ùÁöÑÊÉÖÂÜµ‰∏ãÂ§ÑÁêÜÂàÜÁ±ªÂèòÈáè\ny, X = patsy.dmatrices('v2 ~ key1 + 0', data)\nprint(X)  # ÊâìÂç∞ËÆæËÆ°Áü©Èòµ\n\n[[1. 0.]\n [1. 0.]\n [0. 1.]\n [0. 1.]\n [1. 0.]\n [0. 1.]\n [1. 0.]\n [0. 1.]]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Â∞ÜÊï∞ÂÄºËßÜ‰∏∫ÂàÜÁ±ªÂèòÈáè",
    "href": "qmd/pandas3ed12cn.html#Â∞ÜÊï∞ÂÄºËßÜ‰∏∫ÂàÜÁ±ªÂèòÈáè",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞ÜÊï∞ÂÄºËßÜ‰∏∫ÂàÜÁ±ªÂèòÈáè üî¢‚û°Ô∏èüè∑Ô∏è",
    "text": "Â∞ÜÊï∞ÂÄºËßÜ‰∏∫ÂàÜÁ±ªÂèòÈáè üî¢‚û°Ô∏èüè∑Ô∏è\n‰ΩøÁî® C() Â∞ÜÊï∞Â≠óËßÜ‰∏∫ÂàÜÁ±ªÂèòÈáèÔºö\n\n# ‰ΩøÁî® C() Â∞ÜÊï∞ÂÄºËßÜ‰∏∫ÂàÜÁ±ªÂèòÈáè\ny, X = patsy.dmatrices('v2 ~ C(key2)', data)\nprint(X) # ÊâìÂç∞ËÆæËÆ°Áü©Èòµ\n\n[[1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 1.]\n [1. 0.]\n [1. 0.]]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#‰∫§‰∫íÈ°π",
    "href": "qmd/pandas3ed12cn.html#‰∫§‰∫íÈ°π",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫§‰∫íÈ°π ü§ù",
    "text": "‰∫§‰∫íÈ°π ü§ù\n‰∫§‰∫íÈ°πÂØπÁªÑÂêàÊïàÂ∫îËøõË°åÂª∫Ê®°„ÄÇ‰ΩøÁî® :Ôºö\n\n# Â∞Ü key2 Êò†Â∞Ñ‰∏∫Â≠óÁ¨¶‰∏≤\ndata['key2'] = data['key2'].map({0: 'zero', 1: 'one'})\nprint(data)  # ÊâìÂç∞ DataFrame\n\n# ÂàõÂª∫ÂåÖÂê´‰∫§‰∫íÈ°πÁöÑËÆæËÆ°Áü©Èòµ\ny, X = patsy.dmatrices('v2 ~ key1 + key2 + key1:key2', data)\nprint(X)  # ÊâìÂç∞ËÆæËÆ°Áü©Èòµ\n\n  key1  key2  v1   v2\n0    a  zero   1 -1.0\n1    a   one   2  0.0\n2    b  zero   3  2.5\n3    b   one   4 -0.5\n4    a  zero   5  4.0\n5    b   one   6 -1.2\n6    a  zero   7  0.2\n7    b  zero   8 -1.7\n[[1. 0. 1. 0.]\n [1. 0. 0. 0.]\n [1. 1. 1. 1.]\n [1. 1. 0. 0.]\n [1. 0. 1. 0.]\n [1. 1. 0. 0.]\n [1. 0. 1. 0.]\n [1. 1. 1. 1.]]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#statsmodels-ÁÆÄ‰ªã",
    "href": "qmd/pandas3ed12cn.html#statsmodels-ÁÆÄ‰ªã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "statsmodels ÁÆÄ‰ªã üìà",
    "text": "statsmodels ÁÆÄ‰ªã üìà\nstatsmodels Áî®‰∫éÁªüËÆ°Âª∫Ê®°„ÄÅÂÅáËÆæÊ£ÄÈ™åÂíåÊï∞ÊçÆÊé¢Á¥¢„ÄÇÂÆÉ‰æßÈáç‰∫éÁªüËÆ°Êé®Êñ≠Ôºå‰∏é scikit-learn ‰∫íË°•„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#statsmodels-‰∏≠ÁöÑÊ®°Âûã",
    "href": "qmd/pandas3ed12cn.html#statsmodels-‰∏≠ÁöÑÊ®°Âûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "statsmodels ‰∏≠ÁöÑÊ®°Âûã üßÆ",
    "text": "statsmodels ‰∏≠ÁöÑÊ®°Âûã üßÆ\nstatsmodels ÂåÖÊã¨Ôºö\n\nÁ∫øÊÄßÊ®°ÂûãÔºö OLS„ÄÅGLS Á≠â„ÄÇ\nÂπø‰πâÁ∫øÊÄßÊ®°Âûã (GLM)Ôºö ÈÄÇÁî®‰∫éÂêÑÁßçÂìçÂ∫îÁ±ªÂûãÔºà‰∫åÂÖÉ„ÄÅËÆ°Êï∞Ôºâ„ÄÇ\nÊó∂Èó¥Â∫èÂàóÂàÜÊûêÔºö ARIMA„ÄÅVAR Á≠â„ÄÇ\n‰ª•ÂèäÊõ¥Â§ö‚Ä¶"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#‰ΩøÁî®-statsmodels-ÁöÑÁ∫øÊÄßÊ®°Âûã",
    "href": "qmd/pandas3ed12cn.html#‰ΩøÁî®-statsmodels-ÁöÑÁ∫øÊÄßÊ®°Âûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® statsmodels ÁöÑÁ∫øÊÄßÊ®°Âûã üìè",
    "text": "‰ΩøÁî® statsmodels ÁöÑÁ∫øÊÄßÊ®°Âûã üìè\n‰ΩøÁî®Êï∞ÁªÑÂíåÂÖ¨Âºè API ÊãüÂêàÁ∫øÊÄßÊ®°Âûã„ÄÇ\nÂàõÂª∫Á§∫‰æãÊï∞ÊçÆÔºö\n\nimport statsmodels.api as sm  # ÂØºÂÖ• statsmodels.api Ê®°Âùó\nimport statsmodels.formula.api as smf  # ÂØºÂÖ• statsmodels.formula.api Ê®°Âùó\n\n# ÂèØÈáçÁé∞ÁöÑÁ§∫‰æã\nrng = np.random.default_rng(seed=12345)  # ËÆæÁΩÆÈöèÊú∫Êï∞ÁßçÂ≠ê‰ª•ÂÆûÁé∞ÂèØÈáçÂ§çÊÄß\n\n# ÂÆö‰πâ‰∏Ä‰∏™ÁîüÊàêÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞ÁöÑÂáΩÊï∞\ndef dnorm(mean, variance, size=1):\n    if isinstance(size, int):  # Â¶ÇÊûú size ÊòØÊï¥Êï∞\n        size = size,  # Â∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫ÂÖÉÁªÑ\n    return mean + np.sqrt(variance) * rng.standard_normal(*size)  # ÁîüÊàêÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞\n\nN = 100  # Ê†∑Êú¨Êï∞Èáè\n# ÁîüÊàêËá™ÂèòÈáè X\nX = np.c_[dnorm(0, 0.4, size=N),\n          dnorm(0, 0.6, size=N),\n          dnorm(0, 0.2, size=N)]\neps = dnorm(0, 0.1, size=N)  # ÁîüÊàêÈöèÊú∫ËØØÂ∑ÆÈ°π\nbeta = [0.1, 0.3, 0.5]  # Á≥ªÊï∞\ny = np.dot(X, beta) + eps  # ÁîüÊàêÂõ†ÂèòÈáè y"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Âü∫‰∫éÊï∞ÁªÑÁöÑ-api",
    "href": "qmd/pandas3ed12cn.html#Âü∫‰∫éÊï∞ÁªÑÁöÑ-api",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫‰∫éÊï∞ÁªÑÁöÑ API ‚ûï",
    "text": "Âü∫‰∫éÊï∞ÁªÑÁöÑ API ‚ûï\n\nX_model = sm.add_constant(X)  # Ê∑ªÂä†Êà™Ë∑ùÈ°π\nmodel = sm.OLS(y, X_model)  # ÂàõÂª∫ÊôÆÈÄöÊúÄÂ∞è‰∫å‰πò (OLS) Ê®°Âûã\nresults = model.fit()  # ÊãüÂêàÊ®°Âûã\nprint(results.params)  # ÊâìÂç∞Ê®°ÂûãÂèÇÊï∞\nprint(results.summary())  # ÊâìÂç∞Ê®°ÂûãÊëòË¶Å\n\n[-0.02079903  0.06581276  0.26897046  0.44941894]\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                      y   R-squared:                       0.470\nModel:                            OLS   Adj. R-squared:                  0.453\nMethod:                 Least Squares   F-statistic:                     28.36\nDate:                Fri, 21 Feb 2025   Prob (F-statistic):           3.23e-13\nTime:                        10:12:16   Log-Likelihood:                -25.390\nNo. Observations:                 100   AIC:                             58.78\nDf Residuals:                      96   BIC:                             69.20\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         -0.0208      0.032     -0.653      0.516      -0.084       0.042\nx1             0.0658      0.054      1.220      0.226      -0.041       0.173\nx2             0.2690      0.043      6.312      0.000       0.184       0.354\nx3             0.4494      0.068      6.567      0.000       0.314       0.585\n==============================================================================\nOmnibus:                        0.429   Durbin-Watson:                   1.878\nProb(Omnibus):                  0.807   Jarque-Bera (JB):                0.296\nSkew:                           0.133   Prob(JB):                        0.863\nKurtosis:                       2.995   Cond. No.                         2.16\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\nsm.add_constant(X) Ê∑ªÂä†‰∏ÄÂàó 1 ‰ª•Ë°®Á§∫Êà™Ë∑ù„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Âü∫‰∫éÂÖ¨ÂºèÁöÑ-api",
    "href": "qmd/pandas3ed12cn.html#Âü∫‰∫éÂÖ¨ÂºèÁöÑ-api",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âü∫‰∫éÂÖ¨ÂºèÁöÑ API",
    "text": "Âü∫‰∫éÂÖ¨ÂºèÁöÑ API\n\n# ÂàõÂª∫ÂåÖÂê´Ëá™ÂèòÈáèÂíåÂõ†ÂèòÈáèÁöÑ DataFrame\ndata = pd.DataFrame(X, columns=['col0', 'col1', 'col2'])\ndata['y'] = y\n\n# ‰ΩøÁî®ÂÖ¨Âºè API ÊãüÂêà OLS Ê®°Âûã\nresults = smf.ols('y ~ col0 + col1 + col2', data=data).fit()\nprint(results.params)  # ÊâìÂç∞Ê®°ÂûãÂèÇÊï∞\nprint(results.tvalues)  # ÊâìÂç∞ t ÂÄº\nprint(results.predict(data[:5]))  # ÂØπÂâç 5 ‰∏™Ê†∑Êú¨ËøõË°åÈ¢ÑÊµã\n\nIntercept   -0.020799\ncol0         0.065813\ncol1         0.268970\ncol2         0.449419\ndtype: float64\nIntercept   -0.652501\ncol0         1.219768\ncol1         6.312369\ncol2         6.567428\ndtype: float64\n0   -0.592959\n1   -0.531160\n2    0.058636\n3    0.283658\n4   -0.102947\ndtype: float64\n\n\n\nÂÖ¨Âºè API Â§ÑÁêÜÊà™Ë∑ùÂπ∂‰∏é DataFrame ‰∏ÄËµ∑‰ΩøÁî®„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#‰ΩøÁî®-statsmodels-ËøõË°åÊó∂Èó¥Â∫èÂàóÂàÜÊûê",
    "href": "qmd/pandas3ed12cn.html#‰ΩøÁî®-statsmodels-ËøõË°åÊó∂Èó¥Â∫èÂàóÂàÜÊûê",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® statsmodels ËøõË°åÊó∂Èó¥Â∫èÂàóÂàÜÊûê ‚åö",
    "text": "‰ΩøÁî® statsmodels ËøõË°åÊó∂Èó¥Â∫èÂàóÂàÜÊûê ‚åö\nstatsmodels ÂÖ∑ÊúâÊó∂Èó¥Â∫èÂàóÂ∑•ÂÖ∑„ÄÇÁ§∫‰æãÔºöËá™ÂõûÂΩí (AR) Ê®°ÂûãÔºö\n\nfrom statsmodels.tsa.ar_model import AutoReg  # ÂØºÂÖ• AutoReg Á±ª\n\ninit_x = 4  # ÂàùÂßãÂÄº\nvalues = [init_x, init_x]  # ÂàùÂßãÂÄºÂàóË°®\nN = 1000  # Êó∂Èó¥Â∫èÂàóÈïøÂ∫¶\nb0 = 0.8  # AR(1) Á≥ªÊï∞\nb1 = -0.4  # AR(2) Á≥ªÊï∞\nnoise = dnorm(0, 0.1, N)  # ÁîüÊàêÂô™Â£∞\n\n# ÁîüÊàê AR(2) Êó∂Èó¥Â∫èÂàó\nfor i in range(N):\n    new_x = values[-1] * b0 + values[-2] * b1 + noise[i]\n    values.append(new_x)\n\nMAXLAGS = 5  # ÊúÄÂ§ßÊªûÂêéÈò∂Êï∞\nmodel = AutoReg(values, MAXLAGS)  # ÂàõÂª∫ AutoReg Ê®°Âûã\nresults = model.fit()  # ÊãüÂêàÊ®°Âûã\nprint(results.params)  # ÊâìÂç∞Ê®°ÂûãÂèÇÊï∞\n\n[ 0.02346612  0.8096828  -0.42865278 -0.03336517  0.04267874 -0.05671529]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#scikit-learn-ÁÆÄ‰ªã",
    "href": "qmd/pandas3ed12cn.html#scikit-learn-ÁÆÄ‰ªã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "scikit-learn ÁÆÄ‰ªã ü§ñ",
    "text": "scikit-learn ÁÆÄ‰ªã ü§ñ\nscikit-learn ÊòØ‰∏Ä‰∏™Âº∫Â§ß„ÄÅÂπøÊ≥õ‰ΩøÁî®ÁöÑÊú∫Âô®Â≠¶‰π†Â∫ì„ÄÇÂÆÉÂÖ∑ÊúâÁî®‰∫éÂàÜÁ±ª„ÄÅÂõûÂΩí„ÄÅËÅöÁ±ªÁ≠âÁöÑÁÆóÊ≥ï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#scikit-learn-ÁâπÊÄß",
    "href": "qmd/pandas3ed12cn.html#scikit-learn-ÁâπÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "scikit-learn ÁâπÊÄß ‚ú®",
    "text": "scikit-learn ÁâπÊÄß ‚ú®\n\nÁÆÄÂçï„ÄÅ‰∏ÄËá¥ÁöÑ APIÔºö Áî®Êà∑ÂèãÂ•Ω‰∏î‰∏ÄËá¥„ÄÇ\nËÆ∏Â§öÁÆóÊ≥ïÔºö Ê∂µÁõñÂ∏∏ËßÅÁöÑÊú∫Âô®Â≠¶‰π†‰ªªÂä°„ÄÇ\nÊ®°ÂûãÈÄâÊã©/ËØÑ‰º∞Ôºö ‰∫§ÂèâÈ™åËØÅ„ÄÅË∂ÖÂèÇÊï∞Ë∞ÉÊï¥„ÄÅÊÄßËÉΩÊåáÊ†á„ÄÇ\nÊï∞ÊçÆÈ¢ÑÂ§ÑÁêÜÔºö Áº©Êîæ„ÄÅÁâπÂæÅÈÄâÊã©Á≠â„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Ê≥∞Âù¶Â∞ºÂÖãÂè∑Á§∫‰æã",
    "href": "qmd/pandas3ed12cn.html#Ê≥∞Âù¶Â∞ºÂÖãÂè∑Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≥∞Âù¶Â∞ºÂÖãÂè∑Á§∫‰æã üö¢",
    "text": "Ê≥∞Âù¶Â∞ºÂÖãÂè∑Á§∫‰æã üö¢\n‰ΩøÁî®Ê≥∞Âù¶Â∞ºÂÖãÂè∑Êï∞ÊçÆÈõÜÂ±ïÁ§∫ scikit-learn Â∑•‰ΩúÊµÅÁ®ã„ÄÇ\n\n# ËØªÂèñËÆ≠ÁªÉÈõÜÂíåÊµãËØïÈõÜ\ntrain = pd.read_csv('datasets/titanic/train.csv')\ntest = pd.read_csv('datasets/titanic/test.csv')\n\n\ntrain.head(4)  # ÊòæÁ§∫ËÆ≠ÁªÉÈõÜÁöÑÂâç 4 Ë°å\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜ",
    "href": "qmd/pandas3ed12cn.html#Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜ üßπ",
    "text": "Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜ üßπ\n\n# Ê£ÄÊü•ËÆ≠ÁªÉÈõÜÂíåÊµãËØïÈõÜ‰∏≠ÁöÑÁº∫Â§±ÂÄºÊï∞Èáè\nprint(train.isna().sum())\nprint(test.isna().sum())\n\nPassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\nPassengerId      0\nPclass           0\nName             0\nSex              0\nAge             86\nSibSp            0\nParch            0\nTicket           0\nFare             1\nCabin          327\nEmbarked         0\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#Ê®°ÂûãËÆ≠ÁªÉÂíåÈ¢ÑÊµã",
    "href": "qmd/pandas3ed12cn.html#Ê®°ÂûãËÆ≠ÁªÉÂíåÈ¢ÑÊµã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê®°ÂûãËÆ≠ÁªÉÂíåÈ¢ÑÊµã üèãÔ∏è‚Äç‚ôÄÔ∏è",
    "text": "Ê®°ÂûãËÆ≠ÁªÉÂíåÈ¢ÑÊµã üèãÔ∏è‚Äç‚ôÄÔ∏è\n\nfrom sklearn.linear_model import LogisticRegression  # ÂØºÂÖ• LogisticRegression Á±ª\n\nmodel = LogisticRegression()  # ÂàõÂª∫ LogisticRegression Ê®°Âûã\nmodel.fit(X_train, y_train)  # ‰ΩøÁî®ËÆ≠ÁªÉÊï∞ÊçÆËÆ≠ÁªÉÊ®°Âûã\ny_predict = model.predict(X_test)  # ‰ΩøÁî®ÊµãËØïÊï∞ÊçÆËøõË°åÈ¢ÑÊµã\nprint(y_predict[:10])  # ÊâìÂç∞Ââç 10 ‰∏™È¢ÑÊµãÁªìÊûú\n\n[0 0 0 0 1 0 1 0 1 0]"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#‰∫§ÂèâÈ™åËØÅ",
    "href": "qmd/pandas3ed12cn.html#‰∫§ÂèâÈ™åËØÅ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫§ÂèâÈ™åËØÅ üîÑ",
    "text": "‰∫§ÂèâÈ™åËØÅ üîÑ\n\nfrom sklearn.linear_model import LogisticRegressionCV  # ÂØºÂÖ• LogisticRegressionCV Á±ª\nfrom sklearn.model_selection import cross_val_score  # ÂØºÂÖ• cross_val_score ÂáΩÊï∞\n\n# ‰ΩøÁî®‰∫§ÂèâÈ™åËØÅÂàõÂª∫ LogisticRegression Ê®°Âûã\nmodel_cv = LogisticRegressionCV(Cs=10)\nmodel_cv.fit(X_train, y_train)  # ‰ΩøÁî®ËÆ≠ÁªÉÊï∞ÊçÆËÆ≠ÁªÉÊ®°Âûã\n\n# ‰ΩøÁî®‰∫§ÂèâÈ™åËØÅËØÑ‰º∞Ê®°Âûã\nmodel = LogisticRegression(C=10)\nscores = cross_val_score(model, X_train, y_train, cv=4)  # ËøõË°å 4 Êäò‰∫§ÂèâÈ™åËØÅ\nprint(scores)  # ÊâìÂç∞‰∫§ÂèâÈ™åËØÅÂàÜÊï∞\n\n[0.77578475 0.79820628 0.77578475 0.78828829]\n\n\n‰∫§ÂèâÈ™åËØÅÊúâÂä©‰∫éÈÅøÂÖçËøáÊãüÂêàÔºåÂπ∂Êèê‰æõÊõ¥Á®≥ÂÅ•ÁöÑÊ®°Âûã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed12cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì üìù",
    "text": "ÊÄªÁªì üìù\n\nÊàë‰ª¨‰ΩøÁî® statsmodels Âíå scikit-learn Â∞Ü pandas Êï∞ÊçÆÊï¥ÁêÜÂíåÊ®°ÂûãÊûÑÂª∫ËÅîÁ≥ªËµ∑Êù•„ÄÇ\n‰ΩøÁî® .to_numpy() Â∞Ü DataFrame ËΩ¨Êç¢‰∏∫ NumPy Êï∞ÁªÑ„ÄÇ\nPatsy ‰∏∫Ê®°ÂûãÊèê‰æõ‰∫Ü‰∏ÄÁßçÂÖ¨ÂºèËØ≠Ê≥ï„ÄÇ\nstatsmodels ÊìÖÈïøÁªüËÆ°Êé®Êñ≠„ÄÇ\nscikit-learn ÂØπ‰∫éËÆ∏Â§öÊú∫Âô®Â≠¶‰π†‰ªªÂä°ÂÖ∑ÊúâÈÄöÁî®ÊÄß„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed12cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed12cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ üó£Ô∏è",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ üó£Ô∏è\n\nÂ¶Ç‰ΩïÂú® statsmodels Âíå scikit-learn ‰πãÈó¥ËøõË°åÈÄâÊã©ÔºüËÄÉËôëÊé®Êñ≠‰∏éÈ¢ÑÊµã„ÄÇ\nÂ¶Ç‰ΩïÂú®Ê≥∞Âù¶Â∞ºÂÖãÂè∑Á§∫‰æã‰∏≠ÊîπËøõÁâπÂæÅÔºü\nÂÖ∂‰ªñ Python Âª∫Ê®°Â∫ìÔºàTensorFlow„ÄÅPyTorch„ÄÅXGBoostÔºâÔºü\nËøô‰∏éÊÇ®ÁöÑÈ°πÁõÆÊúâ‰ΩïÂÖ≥Á≥ªÔºü\nÊï∞ÊçÆÂàÜÊûêÂ∞ÜÂ¶Ç‰ΩïÂèëÂ±ïÔºü"
  },
  {
    "objectID": "qmd/pandas3ed7.html",
    "href": "qmd/pandas3ed7.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Data analysis and modeling require significant data preparation.\nLoading, cleaning, transforming, and rearranging data consumes a large portion of an analyst‚Äôs time (often 80% or more! üòÆ).\nData isn‚Äôt always in the right format. Real-world data is messy!\nPandas, combined with Python‚Äôs built-in features, offers powerful tools for data manipulation."
  },
  {
    "objectID": "qmd/pandas3ed7.html#introduction-why-data-cleaning-matters",
    "href": "qmd/pandas3ed7.html#introduction-why-data-cleaning-matters",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Data analysis and modeling require significant data preparation.\nLoading, cleaning, transforming, and rearranging data consumes a large portion of an analyst‚Äôs time (often 80% or more! üòÆ).\nData isn‚Äôt always in the right format. Real-world data is messy!\nPandas, combined with Python‚Äôs built-in features, offers powerful tools for data manipulation."
  },
  {
    "objectID": "qmd/pandas3ed7.html#introduction-pandas-for-data-manipulation",
    "href": "qmd/pandas3ed7.html#introduction-pandas-for-data-manipulation",
    "title": "Python for Data Analysis",
    "section": "Introduction: Pandas for Data Manipulation",
    "text": "Introduction: Pandas for Data Manipulation\n\nPandas provides high-level, flexible, and fast tools for data manipulation.\nIt‚Äôs designed to handle real-world data challenges effectively.\nThis chapter covers tools for:\n\nHandling missing data.\nDealing with duplicate data.\nString manipulation.\nOther analytical data transformations."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data",
    "href": "qmd/pandas3ed7.html#handling-missing-data",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data",
    "text": "7.1 Handling Missing Data\n\nMissing data is common in data analysis.\nPandas aims to make working with missing data as easy as possible.\nDescriptive statistics in pandas exclude missing data by default.\nPandas uses NaN (Not a Number), a floating-point value, to represent missing data, especially for float64 type."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-the-nan-sentinel",
    "href": "qmd/pandas3ed7.html#handling-missing-data-the-nan-sentinel",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: The NaN Sentinel",
    "text": "7.1 Handling Missing Data: The NaN Sentinel\n\nimport numpy as np\nimport pandas as pd\n\nfloat_data = pd.Series([1.2, -3.5, np.nan, 0])\nfloat_data\n\n0    1.2\n1   -3.5\n2    NaN\n3    0.0\ndtype: float64\n\n\n\nnp.nan is a special floating-point value indicating missing data.\nIt‚Äôs a sentinel value ‚Äì its presence signals a missing or null value."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-detecting-with-.isna",
    "href": "qmd/pandas3ed7.html#handling-missing-data-detecting-with-.isna",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Detecting with .isna()",
    "text": "7.1 Handling Missing Data: Detecting with .isna()\n\nfloat_data.isna()\n\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n\n\n\nThe .isna() method returns a Boolean Series.\nTrue indicates a missing value (NaN), and False indicates a non-missing value."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-na-convention",
    "href": "qmd/pandas3ed7.html#handling-missing-data-na-convention",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: NA Convention",
    "text": "7.1 Handling Missing Data: NA Convention\n\nPandas adopts the R convention: missing data is referred to as NA (not available).\nNA can mean:\n\nData doesn‚Äôt exist.\nData exists but wasn‚Äôt observed (e.g., data collection issues).\n\nAnalyzing missing data itself can reveal data collection problems or potential biases. ü§î"
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-none-is-also-na",
    "href": "qmd/pandas3ed7.html#handling-missing-data-none-is-also-na",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: None is also NA",
    "text": "7.1 Handling Missing Data: None is also NA\n\nstring_data = pd.Series([\"aardvark\", np.nan, None, \"avocado\"])\nstring_data\n\n0    aardvark\n1         NaN\n2        None\n3     avocado\ndtype: object\n\n\n\nstring_data.isna()\n\n0    False\n1     True\n2     True\n3    False\ndtype: bool\n\n\n\nPython‚Äôs built-in None value is also treated as NA in pandas.\nBoth string and numeric Series can hold None and NaN as NA."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-consistent-handling",
    "href": "qmd/pandas3ed7.html#handling-missing-data-consistent-handling",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Consistent Handling",
    "text": "7.1 Handling Missing Data: Consistent Handling\n\nfloat_data = pd.Series([1, 2, None], dtype='float64')\nfloat_data\n\n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n\n\n\nfloat_data.isna()\n\n0    False\n1    False\n2     True\ndtype: bool\n\n\n\nPandas strives for consistent missing data handling across data types.\nfloat_data use NaN to represent the missing value."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-na-handling-methods",
    "href": "qmd/pandas3ed7.html#handling-missing-data-na-handling-methods",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: NA Handling Methods",
    "text": "7.1 Handling Missing Data: NA Handling Methods\n\nKey methods for managing missing values.\n\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\ndropna\nFilters out axis labels (rows/columns) based on missing values, with options for thresholds.\n\n\nfillna\nFills in missing data with a specified value or using interpolation methods (e.g., ‚Äúffill‚Äù, ‚Äúbfill‚Äù).\n\n\nisna\nReturns a Boolean array/Series indicating which values are missing/NA.\n\n\nnotna\nThe negation of isna: returns True for non-NA values, False for NA values.\n\n\n\nThese methods provide the foundation for handling missing data in pandas."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropna-on-series",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropna-on-series",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: dropna on Series",
    "text": "7.1 Handling Missing Data: dropna on Series\n\ndata = pd.Series([1, np.nan, 3.5, np.nan, 7])\ndata.dropna()\n\n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n\n\n\ndropna() on a Series returns a new Series with only non-null data and index labels.\nEquivalent to Boolean indexing: data[data.notna()]."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropna-on-dataframes-part-1",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropna-on-dataframes-part-1",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: dropna on DataFrames (Part 1)",
    "text": "7.1 Handling Missing Data: dropna on DataFrames (Part 1)\n\ndata = pd.DataFrame([[1., 6.5, 3.], [1., np.nan, np.nan],\n                     [np.nan, np.nan, np.nan], [np.nan, 6.5, 3.]])\ndata\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n1\n1.0\nNaN\nNaN\n\n\n2\nNaN\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0"
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropna-on-dataframes-part-2",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropna-on-dataframes-part-2",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: dropna on DataFrames (Part 2)",
    "text": "7.1 Handling Missing Data: dropna on DataFrames (Part 2)\n\ndata.dropna()\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n\n\n\n\n\n\nBy default, dropna() drops any row containing any NA value.\nThis can be very strict."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropna-with-howall",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropna-with-howall",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: dropna with how='all'",
    "text": "7.1 Handling Missing Data: dropna with how='all'\n\ndata.dropna(how=\"all\")\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n1\n1.0\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0\n\n\n\n\n\n\n\n\nhow=\"all\" drops only rows that are all NA.\nMore lenient than the default behavior."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropping-columns-part-1",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropping-columns-part-1",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Dropping Columns (Part 1)",
    "text": "7.1 Handling Missing Data: Dropping Columns (Part 1)\n\ndata[4] = np.nan\ndata\n\n\n\n\n\n\n\n\n0\n1\n2\n4\n\n\n\n\n0\n1.0\n6.5\n3.0\nNaN\n\n\n1\n1.0\nNaN\nNaN\nNaN\n\n\n2\nNaN\nNaN\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropping-columns-part-2",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropping-columns-part-2",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Dropping Columns (Part 2)",
    "text": "7.1 Handling Missing Data: Dropping Columns (Part 2)\n\ndata.dropna(axis=\"columns\", how=\"all\")\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n1.0\n6.5\n3.0\n\n\n1\n1.0\nNaN\nNaN\n\n\n2\nNaN\nNaN\nNaN\n\n\n3\nNaN\n6.5\n3.0\n\n\n\n\n\n\n\n\nTo drop columns, use axis=\"columns\" (or axis=1).\nhow=\"all\" with axis=\"columns\" drops columns that are all NA."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropna-with-thresh-part-1",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropna-with-thresh-part-1",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: dropna with thresh (Part 1)",
    "text": "7.1 Handling Missing Data: dropna with thresh (Part 1)\n\ndf = pd.DataFrame(np.random.standard_normal((7, 3)))\ndf.iloc[:4, 1] = np.nan\ndf.iloc[:2, 2] = np.nan\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.485893\nNaN\nNaN\n\n\n1\n0.682706\nNaN\nNaN\n\n\n2\n0.130569\nNaN\n0.566507\n\n\n3\n-1.027739\nNaN\n-0.228702\n\n\n4\n-0.074999\n-1.654210\n-0.880709\n\n\n5\n-0.391791\n-0.643451\n-0.949277\n\n\n6\n0.361998\n-0.568802\n-0.559101"
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-dropna-with-thresh-part-2",
    "href": "qmd/pandas3ed7.html#handling-missing-data-dropna-with-thresh-part-2",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: dropna with thresh (Part 2)",
    "text": "7.1 Handling Missing Data: dropna with thresh (Part 2)\n\ndf.dropna()\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n4\n-0.074999\n-1.654210\n-0.880709\n\n\n5\n-0.391791\n-0.643451\n-0.949277\n\n\n6\n0.361998\n-0.568802\n-0.559101\n\n\n\n\n\n\n\n\ndf.dropna(thresh=2)\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n2\n0.130569\nNaN\n0.566507\n\n\n3\n-1.027739\nNaN\n-0.228702\n\n\n4\n-0.074999\n-1.654210\n-0.880709\n\n\n5\n-0.391791\n-0.643451\n-0.949277\n\n\n6\n0.361998\n-0.568802\n-0.559101\n\n\n\n\n\n\n\n\nThe thresh argument keeps rows with at least thresh non-NA values.\nFine-grained control over which rows to keep."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-filling-with-fillna",
    "href": "qmd/pandas3ed7.html#handling-missing-data-filling-with-fillna",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Filling with fillna",
    "text": "7.1 Handling Missing Data: Filling with fillna\n\ndf.fillna(0)\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.485893\n0.000000\n0.000000\n\n\n1\n0.682706\n0.000000\n0.000000\n\n\n2\n0.130569\n0.000000\n0.566507\n\n\n3\n-1.027739\n0.000000\n-0.228702\n\n\n4\n-0.074999\n-1.654210\n-0.880709\n\n\n5\n-0.391791\n-0.643451\n-0.949277\n\n\n6\n0.361998\n-0.568802\n-0.559101\n\n\n\n\n\n\n\n\nfillna(value) replaces all NA values with the specified value.\nA common choice is 0, but this depends on the context."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-fillna-with-a-dictionary",
    "href": "qmd/pandas3ed7.html#handling-missing-data-fillna-with-a-dictionary",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: fillna with a Dictionary",
    "text": "7.1 Handling Missing Data: fillna with a Dictionary\n\ndf.fillna({1: 0.5, 2: 0})\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.485893\n0.500000\n0.000000\n\n\n1\n0.682706\n0.500000\n0.000000\n\n\n2\n0.130569\n0.500000\n0.566507\n\n\n3\n-1.027739\n0.500000\n-0.228702\n\n\n4\n-0.074999\n-1.654210\n-0.880709\n\n\n5\n-0.391791\n-0.643451\n-0.949277\n\n\n6\n0.361998\n-0.568802\n-0.559101\n\n\n\n\n\n\n\n\nUse a dictionary to specify different fill values for each column.\nThe dictionary keys are column labels; values are the fill values."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-interpolation-with-fillna-part-1",
    "href": "qmd/pandas3ed7.html#handling-missing-data-interpolation-with-fillna-part-1",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Interpolation with fillna (Part 1)",
    "text": "7.1 Handling Missing Data: Interpolation with fillna (Part 1)\n\ndf = pd.DataFrame(np.random.standard_normal((6, 3)))\ndf.iloc[2:, 1] = np.nan\ndf.iloc[4:, 2] = np.nan\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n-0.939042\n-0.133246\n-0.447715\n\n\n1\n0.332539\n-0.599213\n-0.042865\n\n\n2\n1.702894\nNaN\n1.864746\n\n\n3\n0.229695\nNaN\n1.362523\n\n\n4\n1.079099\nNaN\nNaN\n\n\n5\n-0.979342\nNaN\nNaN"
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-interpolation-with-fillna-part-2",
    "href": "qmd/pandas3ed7.html#handling-missing-data-interpolation-with-fillna-part-2",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Interpolation with fillna (Part 2)",
    "text": "7.1 Handling Missing Data: Interpolation with fillna (Part 2)\n\ndf.fillna(method=\"ffill\") # Forward fill\n\n/tmp/ipykernel_3050/64151187.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  df.fillna(method=\"ffill\") # Forward fill\n\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n-0.939042\n-0.133246\n-0.447715\n\n\n1\n0.332539\n-0.599213\n-0.042865\n\n\n2\n1.702894\n-0.599213\n1.864746\n\n\n3\n0.229695\n-0.599213\n1.362523\n\n\n4\n1.079099\n-0.599213\n1.362523\n\n\n5\n-0.979342\n-0.599213\n1.362523\n\n\n\n\n\n\n\n\nmethod=\"ffill\" (forward fill) propagates the last valid observation forward.\nmethod=\"bfill\" (backward fill) uses the next valid observation to fill the gap.\nSuitable for time series or ordered data."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-fillna-with-limit",
    "href": "qmd/pandas3ed7.html#handling-missing-data-fillna-with-limit",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: fillna with limit",
    "text": "7.1 Handling Missing Data: fillna with limit\n\ndf.fillna(method=\"ffill\", limit=2)\n\n/tmp/ipykernel_3050/1627181726.py:1: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  df.fillna(method=\"ffill\", limit=2)\n\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n-0.939042\n-0.133246\n-0.447715\n\n\n1\n0.332539\n-0.599213\n-0.042865\n\n\n2\n1.702894\n-0.599213\n1.864746\n\n\n3\n0.229695\n-0.599213\n1.362523\n\n\n4\n1.079099\nNaN\n1.362523\n\n\n5\n-0.979342\nNaN\n1.362523\n\n\n\n\n\n\n\n\nlimit restricts the number of consecutive NA values filled by ffill or bfill."
  },
  {
    "objectID": "qmd/pandas3ed7.html#handling-missing-data-imputation-with-fillna",
    "href": "qmd/pandas3ed7.html#handling-missing-data-imputation-with-fillna",
    "title": "Python for Data Analysis",
    "section": "7.1 Handling Missing Data: Imputation with fillna",
    "text": "7.1 Handling Missing Data: Imputation with fillna\n\ndata = pd.Series([1., np.nan, 3.5, np.nan, 7])\ndata.fillna(data.mean())\n\n0    1.000000\n1    3.833333\n2    3.500000\n3    3.833333\n4    7.000000\ndtype: float64\n\n\n\nReplace missing values with the mean, median, or other statistics.\nThis is a simple form of imputation."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation",
    "href": "qmd/pandas3ed7.html#data-transformation",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation",
    "text": "7.2 Data Transformation\n\nFiltering and cleaning are essential, but data often needs further transformation.\nThis section covers:\n\nRemoving duplicates.\nTransforming data using functions or mappings.\nReplacing values.\nRenaming axis indexes.\nDiscretization and binning.\nDetecting and filtering outliers.\nPermutation and random sampling.\nComputing indicator/dummy variables."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-removing-duplicates",
    "href": "qmd/pandas3ed7.html#data-transformation-removing-duplicates",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Removing Duplicates",
    "text": "7.2 Data Transformation: Removing Duplicates\n\ndata = pd.DataFrame({\"k1\": [\"one\", \"two\"] * 3 + [\"two\"],\n                     \"k2\": [1, 1, 2, 3, 3, 4, 4]})\ndata\n\n\n\n\n\n\n\n\nk1\nk2\n\n\n\n\n0\none\n1\n\n\n1\ntwo\n1\n\n\n2\none\n2\n\n\n3\ntwo\n3\n\n\n4\none\n3\n\n\n5\ntwo\n4\n\n\n6\ntwo\n4\n\n\n\n\n\n\n\n\nDuplicate rows can occur for various reasons."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-identifying-duplicates-with-duplicated",
    "href": "qmd/pandas3ed7.html#data-transformation-identifying-duplicates-with-duplicated",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Identifying Duplicates with duplicated()",
    "text": "7.2 Data Transformation: Identifying Duplicates with duplicated()\n\ndata.duplicated()\n\n0    False\n1    False\n2    False\n3    False\n4    False\n5    False\n6     True\ndtype: bool\n\n\n\nduplicated() returns a Boolean Series indicating whether each row is a duplicate (has appeared earlier)."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-removing-duplicates-with-drop_duplicates",
    "href": "qmd/pandas3ed7.html#data-transformation-removing-duplicates-with-drop_duplicates",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Removing Duplicates with drop_duplicates()",
    "text": "7.2 Data Transformation: Removing Duplicates with drop_duplicates()\n\ndata.drop_duplicates()\n\n\n\n\n\n\n\n\nk1\nk2\n\n\n\n\n0\none\n1\n\n\n1\ntwo\n1\n\n\n2\none\n2\n\n\n3\ntwo\n3\n\n\n4\none\n3\n\n\n5\ntwo\n4\n\n\n\n\n\n\n\n\ndrop_duplicates() returns a DataFrame with duplicate rows removed.\nKeeps the first occurrence of each unique row."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-drop_duplicates-on-a-subset-of-columns-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-drop_duplicates-on-a-subset-of-columns-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: drop_duplicates() on a Subset of Columns (Part 1)",
    "text": "7.2 Data Transformation: drop_duplicates() on a Subset of Columns (Part 1)\n\ndata[\"v1\"] = range(7)\ndata\n\n\n\n\n\n\n\n\nk1\nk2\nv1\n\n\n\n\n0\none\n1\n0\n\n\n1\ntwo\n1\n1\n\n\n2\none\n2\n2\n\n\n3\ntwo\n3\n3\n\n\n4\none\n3\n4\n\n\n5\ntwo\n4\n5\n\n\n6\ntwo\n4\n6"
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-drop_duplicates-on-a-subset-of-columns-part-2",
    "href": "qmd/pandas3ed7.html#data-transformation-drop_duplicates-on-a-subset-of-columns-part-2",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: drop_duplicates() on a Subset of Columns (Part 2)",
    "text": "7.2 Data Transformation: drop_duplicates() on a Subset of Columns (Part 2)\n\ndata.drop_duplicates(subset=[\"k1\"])\n\n\n\n\n\n\n\n\nk1\nk2\nv1\n\n\n\n\n0\none\n1\n0\n\n\n1\ntwo\n1\n1\n\n\n\n\n\n\n\n\nSpecify a subset of columns to check for duplicates using the subset argument.\nHere, only the \"k1\" column is considered."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-drop_duplicates-with-keeplast",
    "href": "qmd/pandas3ed7.html#data-transformation-drop_duplicates-with-keeplast",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: drop_duplicates() with keep='last'",
    "text": "7.2 Data Transformation: drop_duplicates() with keep='last'\n\ndata.drop_duplicates([\"k1\", \"k2\"], keep=\"last\")\n\n\n\n\n\n\n\n\nk1\nk2\nv1\n\n\n\n\n0\none\n1\n0\n\n\n1\ntwo\n1\n1\n\n\n2\none\n2\n2\n\n\n3\ntwo\n3\n3\n\n\n4\none\n3\n4\n\n\n6\ntwo\n4\n6\n\n\n\n\n\n\n\n\nkeep=\"last\" keeps the last occurrence of each unique row (or combination of columns).\nThe default is keep=\"first\"."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-transforming-data-using-a-function-or-mapping-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-transforming-data-using-a-function-or-mapping-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Transforming Data Using a Function or Mapping (Part 1)",
    "text": "7.2 Data Transformation: Transforming Data Using a Function or Mapping (Part 1)\n\ndata = pd.DataFrame({\"food\": [\"bacon\", \"pulled pork\", \"bacon\",\n                              \"pastrami\", \"corned beef\", \"bacon\",\n                              \"pastrami\", \"honey ham\", \"nova lox\"],\n                     \"ounces\": [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})\ndata\n\n\n\n\n\n\n\n\nfood\nounces\n\n\n\n\n0\nbacon\n4.0\n\n\n1\npulled pork\n3.0\n\n\n2\nbacon\n12.0\n\n\n3\npastrami\n6.0\n\n\n4\ncorned beef\n7.5\n\n\n5\nbacon\n8.0\n\n\n6\npastrami\n3.0\n\n\n7\nhoney ham\n5.0\n\n\n8\nnova lox\n6.0\n\n\n\n\n\n\n\n\nSuppose we want to add a column indicating the animal type for each food."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-using-a-mapping-dictionary",
    "href": "qmd/pandas3ed7.html#data-transformation-using-a-mapping-dictionary",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Using a Mapping Dictionary",
    "text": "7.2 Data Transformation: Using a Mapping Dictionary\n\nmeat_to_animal = {\n  \"bacon\": \"pig\",\n  \"pulled pork\": \"pig\",\n  \"pastrami\": \"cow\",\n  \"corned beef\": \"cow\",\n  \"honey ham\": \"pig\",\n  \"nova lox\": \"salmon\"\n}\n\n\nCreate a dictionary mapping each food to its corresponding animal."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-using-.map",
    "href": "qmd/pandas3ed7.html#data-transformation-using-.map",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Using .map()",
    "text": "7.2 Data Transformation: Using .map()\n\ndata[\"animal\"] = data[\"food\"].map(meat_to_animal)\ndata\n\n\n\n\n\n\n\n\nfood\nounces\nanimal\n\n\n\n\n0\nbacon\n4.0\npig\n\n\n1\npulled pork\n3.0\npig\n\n\n2\nbacon\n12.0\npig\n\n\n3\npastrami\n6.0\ncow\n\n\n4\ncorned beef\n7.5\ncow\n\n\n5\nbacon\n8.0\npig\n\n\n6\npastrami\n3.0\ncow\n\n\n7\nhoney ham\n5.0\npig\n\n\n8\nnova lox\n6.0\nsalmon\n\n\n\n\n\n\n\n\nThe .map() method of a Series accepts a function or a dictionary-like object (like our mapping).\nIt applies the mapping to each element of the Series."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-using-a-function-with-.map",
    "href": "qmd/pandas3ed7.html#data-transformation-using-a-function-with-.map",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Using a Function with .map()",
    "text": "7.2 Data Transformation: Using a Function with .map()\n\ndef get_animal(x):\n    return meat_to_animal[x]\n\ndata[\"food\"].map(get_animal)\n\n0       pig\n1       pig\n2       pig\n3       cow\n4       cow\n5       pig\n6       cow\n7       pig\n8    salmon\nName: food, dtype: object\n\n\n\nWe could also use a function with .map().\nThe function takes a single element from the Series as input and returns the transformed value."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-replacing-values",
    "href": "qmd/pandas3ed7.html#data-transformation-replacing-values",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Replacing Values",
    "text": "7.2 Data Transformation: Replacing Values\n\ndata = pd.Series([1., -999., 2., -999., -1000., 3.])\ndata\n\n0       1.0\n1    -999.0\n2       2.0\n3    -999.0\n4   -1000.0\n5       3.0\ndtype: float64\n\n\n\nSuppose -999 and -1000 are sentinel values for missing data."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-replace-for-single-value",
    "href": "qmd/pandas3ed7.html#data-transformation-replace-for-single-value",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: replace() for Single Value",
    "text": "7.2 Data Transformation: replace() for Single Value\n\ndata.replace(-999, np.nan)\n\n0       1.0\n1       NaN\n2       2.0\n3       NaN\n4   -1000.0\n5       3.0\ndtype: float64\n\n\n\nreplace(old_value, new_value) replaces occurrences of old_value with new_value."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-replace-for-multiple-values",
    "href": "qmd/pandas3ed7.html#data-transformation-replace-for-multiple-values",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: replace() for Multiple Values",
    "text": "7.2 Data Transformation: replace() for Multiple Values\n\ndata.replace([-999, -1000], np.nan)\n\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    NaN\n5    3.0\ndtype: float64\n\n\n\nPass a list of old values to replace multiple values at once."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-different-replacements-for-each-value",
    "href": "qmd/pandas3ed7.html#data-transformation-different-replacements-for-each-value",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Different Replacements for Each Value",
    "text": "7.2 Data Transformation: Different Replacements for Each Value\n\ndata.replace([-999, -1000], [np.nan, 0])\n\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64\n\n\n\nProvide a list of replacement values corresponding to the list of old values."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-using-a-dictionary-with-replace",
    "href": "qmd/pandas3ed7.html#data-transformation-using-a-dictionary-with-replace",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Using a Dictionary with replace()",
    "text": "7.2 Data Transformation: Using a Dictionary with replace()\n\ndata.replace({-999: np.nan, -1000: 0})\n\n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64\n\n\n\nA dictionary can also be used with replace().\nKeys are old values; values are new values."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-renaming-axis-indexes-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-renaming-axis-indexes-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Renaming Axis Indexes (Part 1)",
    "text": "7.2 Data Transformation: Renaming Axis Indexes (Part 1)\n\ndata = pd.DataFrame(np.arange(12).reshape((3, 4)),\n                    index=[\"Ohio\", \"Colorado\", \"New York\"],\n                    columns=[\"one\", \"two\", \"three\", \"four\"])\ndata\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOhio\n0\n1\n2\n3\n\n\nColorado\n4\n5\n6\n7\n\n\nNew York\n8\n9\n10\n11\n\n\n\n\n\n\n\n\nAxis labels (row and column indexes) can also be transformed."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-modifying-indexes-with-.map-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-modifying-indexes-with-.map-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Modifying Indexes with .map() (Part 1)",
    "text": "7.2 Data Transformation: Modifying Indexes with .map() (Part 1)\n\ndef transform(x):\n    return x[:4].upper()\n\ndata.index.map(transform)\n\nIndex(['OHIO', 'COLO', 'NEW '], dtype='object')"
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-modifying-indexes-with-.map-part-2",
    "href": "qmd/pandas3ed7.html#data-transformation-modifying-indexes-with-.map-part-2",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Modifying Indexes with .map() (Part 2)",
    "text": "7.2 Data Transformation: Modifying Indexes with .map() (Part 2)\n\ndata.index = data.index.map(transform)\ndata\n\n\n\n\n\n\n\n\none\ntwo\nthree\nfour\n\n\n\n\nOHIO\n0\n1\n2\n3\n\n\nCOLO\n4\n5\n6\n7\n\n\nNEW\n8\n9\n10\n11\n\n\n\n\n\n\n\n\nLike Series, axis indexes have a .map() method.\nWe apply a function to transform each index label.\nAssigning to data.index modifies the DataFrame in place."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-rename-for-creating-a-transformed-copy",
    "href": "qmd/pandas3ed7.html#data-transformation-rename-for-creating-a-transformed-copy",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: rename() for Creating a Transformed Copy",
    "text": "7.2 Data Transformation: rename() for Creating a Transformed Copy\n\ndata.rename(index=str.title, columns=str.upper)\n\n\n\n\n\n\n\n\nONE\nTWO\nTHREE\nFOUR\n\n\n\n\nOhio\n0\n1\n2\n3\n\n\nColo\n4\n5\n6\n7\n\n\nNew\n8\n9\n10\n11\n\n\n\n\n\n\n\n\nrename() creates a transformed copy without modifying the original DataFrame.\nindex and columns arguments can take functions, dictionaries, or Series."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-rename-with-a-dictionary",
    "href": "qmd/pandas3ed7.html#data-transformation-rename-with-a-dictionary",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: rename() with a Dictionary",
    "text": "7.2 Data Transformation: rename() with a Dictionary\n\ndata.rename(index={\"OHIO\": \"INDIANA\"},\n            columns={\"three\": \"peekaboo\"})\n\n\n\n\n\n\n\n\none\ntwo\npeekaboo\nfour\n\n\n\n\nINDIANA\n0\n1\n2\n3\n\n\nCOLO\n4\n5\n6\n7\n\n\nNEW\n8\n9\n10\n11\n\n\n\n\n\n\n\n\nUse dictionaries with rename() to modify a subset of axis labels."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-discretization-and-binning-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-discretization-and-binning-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Discretization and Binning (Part 1)",
    "text": "7.2 Data Transformation: Discretization and Binning (Part 1)\n\nContinuous data is often discretized or binned for analysis.\nExample: Grouping ages into age ranges.\n\n\nages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]\nbins = [18, 25, 35, 60, 100]  # Define bin edges\nage_categories = pd.cut(ages, bins)\nage_categories\n\n[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35, 60], (35, 60], (25, 35]]\nLength: 12\nCategories (4, interval[int64, right]): [(18, 25] &lt; (25, 35] &lt; (35, 60] &lt; (60, 100]]\n\n\n\npd.cut(data, bins) divides the data into bins based on the specified bins edges.\nReturns a special Categorical object."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-understanding-the-categorical-object-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-understanding-the-categorical-object-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Understanding the Categorical Object (Part 1)",
    "text": "7.2 Data Transformation: Understanding the Categorical Object (Part 1)\n\nage_categories.codes\n\narray([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8)\n\n\n\nage_categories.categories\n\nIntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype='interval[int64, right]')"
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-understanding-the-categorical-object-part-2",
    "href": "qmd/pandas3ed7.html#data-transformation-understanding-the-categorical-object-part-2",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Understanding the Categorical Object (Part 2)",
    "text": "7.2 Data Transformation: Understanding the Categorical Object (Part 2)\n\nage_categories.categories[0]\n\nInterval(18, 25, closed='right')\n\n\n\ncodes: An array of integers representing the bin each value belongs to (starting from 0).\ncategories: An IntervalIndex object holding the bin intervals."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-value_counts-on-categorical",
    "href": "qmd/pandas3ed7.html#data-transformation-value_counts-on-categorical",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: value_counts() on Categorical",
    "text": "7.2 Data Transformation: value_counts() on Categorical\n\npd.value_counts(age_categories)\n\n/tmp/ipykernel_3050/3010498523.py:1: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n  pd.value_counts(age_categories)\n\n\n(18, 25]     5\n(25, 35]     3\n(35, 60]     3\n(60, 100]    1\nName: count, dtype: int64\n\n\n\npd.value_counts(categorical) gives the bin counts for the result of pd.cut()."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-open-vs.-closed-intervals",
    "href": "qmd/pandas3ed7.html#data-transformation-open-vs.-closed-intervals",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Open vs.¬†Closed Intervals",
    "text": "7.2 Data Transformation: Open vs.¬†Closed Intervals\n\nParentheses () mean the side is open (exclusive).\nSquare brackets [] mean the side is closed (inclusive).\n(18, 25] means ‚Äúgreater than 18, up to and including 25.‚Äù\n\n\npd.cut(ages, bins, right=False) # Change which side is closed\n\n[[18, 25), [18, 25), [25, 35), [25, 35), [18, 25), ..., [25, 35), [60, 100), [35, 60), [35, 60), [25, 35)]\nLength: 12\nCategories (4, interval[int64, left]): [[18, 25) &lt; [25, 35) &lt; [35, 60) &lt; [60, 100)]\n\n\n\nright=False changes the closed side of the interval."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-labeling-bins",
    "href": "qmd/pandas3ed7.html#data-transformation-labeling-bins",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Labeling Bins",
    "text": "7.2 Data Transformation: Labeling Bins\n\ngroup_names = [\"Youth\", \"YoungAdult\", \"MiddleAged\", \"Senior\"]\npd.cut(ages, bins, labels=group_names)\n\n['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', 'MiddleAged', 'MiddleAged', 'YoungAdult']\nLength: 12\nCategories (4, object): ['Youth' &lt; 'YoungAdult' &lt; 'MiddleAged' &lt; 'Senior']\n\n\n\nlabels argument assigns custom names to the bins.\nMore informative than the default interval labels."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-pd.cut-with-number-of-bins",
    "href": "qmd/pandas3ed7.html#data-transformation-pd.cut-with-number-of-bins",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: pd.cut() with Number of Bins",
    "text": "7.2 Data Transformation: pd.cut() with Number of Bins\n\ndata = np.random.uniform(size=20)\npd.cut(data, 4, precision=2) # Cut into 4 equal-length bins\n\n[(0.24, 0.47], (0.47, 0.7], (0.24, 0.47], (0.24, 0.47], (0.24, 0.47], ..., (0.24, 0.47], (0.24, 0.47], (0.0083, 0.24], (0.7, 0.93], (0.24, 0.47]]\nLength: 20\nCategories (4, interval[float64, right]): [(0.0083, 0.24] &lt; (0.24, 0.47] &lt; (0.47, 0.7] &lt; (0.7, 0.93]]\n\n\n\nPass an integer number of bins to pd.cut() to compute equal-length bins based on min/max values.\nprecision limits the decimal precision of the bin labels."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-pd.qcut-for-quantile-binning",
    "href": "qmd/pandas3ed7.html#data-transformation-pd.qcut-for-quantile-binning",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: pd.qcut() for Quantile Binning",
    "text": "7.2 Data Transformation: pd.qcut() for Quantile Binning\n\ndata = np.random.standard_normal(1000)\nquartiles = pd.qcut(data, 4, precision=2)  # Cut into quartiles\nquartiles\n\n[(-0.025, 0.71], (-3.6399999999999997, -0.7], (-3.6399999999999997, -0.7], (-3.6399999999999997, -0.7], (-3.6399999999999997, -0.7], ..., (-0.025, 0.71], (-0.025, 0.71], (-0.025, 0.71], (-3.6399999999999997, -0.7], (0.71, 2.83]]\nLength: 1000\nCategories (4, interval[float64, right]): [(-3.6399999999999997, -0.7] &lt; (-0.7, -0.025] &lt; (-0.025, 0.71] &lt; (0.71, 2.83]]\n\n\n\npd.qcut() bins data based on sample quantiles.\nAims for (roughly) equal-sized bins.\nUseful for dividing data into percentiles."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-pd.qcut-with-custom-quantiles",
    "href": "qmd/pandas3ed7.html#data-transformation-pd.qcut-with-custom-quantiles",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: pd.qcut() with Custom Quantiles",
    "text": "7.2 Data Transformation: pd.qcut() with Custom Quantiles\n\npd.qcut(data, [0, 0.1, 0.5, 0.9, 1.]).value_counts()\n\n(-3.633, -1.372]     100\n(-1.372, -0.0253]    400\n(-0.0253, 1.303]     400\n(1.303, 2.829]       100\nName: count, dtype: int64\n\n\n\nPass custom quantiles (values between 0 and 1) to pd.qcut().\nExample: Dividing into deciles (0.1, 0.2, ‚Ä¶, 0.9)."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-detecting-and-filtering-outliers-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-detecting-and-filtering-outliers-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Detecting and Filtering Outliers (Part 1)",
    "text": "7.2 Data Transformation: Detecting and Filtering Outliers (Part 1)\n\nOutlier filtering/transformation is often an array operation.\n\n\ndata = pd.DataFrame(np.random.standard_normal((1000, 4)))\ndata.describe()\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\ncount\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n\n\nmean\n-0.039436\n0.023506\n0.033709\n-0.065900\n\n\nstd\n1.041645\n0.995395\n1.009236\n0.989461\n\n\nmin\n-3.824468\n-3.027657\n-3.162477\n-2.905442\n\n\n25%\n-0.739737\n-0.625055\n-0.642409\n-0.729251\n\n\n50%\n-0.002323\n0.027559\n0.053660\n-0.100235\n\n\n75%\n0.689503\n0.716488\n0.742530\n0.573621\n\n\nmax\n3.432633\n3.184034\n2.696409\n4.601769\n\n\n\n\n\n\n\n\nExample DataFrame with normally distributed data."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-finding-values-exceeding-a-threshold",
    "href": "qmd/pandas3ed7.html#data-transformation-finding-values-exceeding-a-threshold",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Finding Values Exceeding a Threshold",
    "text": "7.2 Data Transformation: Finding Values Exceeding a Threshold\n\ncol = data[2]\ncol[col.abs() &gt; 3]\n\n220   -3.162477\nName: 2, dtype: float64\n\n\n\nFind values in column 2 with an absolute value greater than 3."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-selecting-rows-based-on-outliers",
    "href": "qmd/pandas3ed7.html#data-transformation-selecting-rows-based-on-outliers",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Selecting Rows Based on Outliers",
    "text": "7.2 Data Transformation: Selecting Rows Based on Outliers\n\ndata[(data.abs() &gt; 3).any(axis=\"columns\")]\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n218\n-3.047603\n1.184693\n-0.421148\n-0.858853\n\n\n220\n0.559135\n-0.454616\n-3.162477\n-0.004671\n\n\n228\n-1.083756\n-3.027657\n0.067461\n0.004288\n\n\n293\n-3.824468\n0.227885\n0.068424\n-0.238792\n\n\n388\n-1.367729\n0.451219\n-0.148288\n3.332105\n\n\n466\n-0.810977\n-0.282397\n0.982584\n3.029097\n\n\n535\n-0.899738\n0.764458\n-0.238991\n3.010730\n\n\n537\n-3.093978\n-0.996427\n-0.594244\n1.664094\n\n\n658\n0.349057\n0.287110\n0.162536\n4.601769\n\n\n880\n0.467114\n3.184034\n-0.131752\n1.236468\n\n\n914\n3.432633\n-0.993436\n0.366902\n0.025728\n\n\n\n\n\n\n\n\ndata.abs() &gt; 3: Boolean DataFrame indicating values exceeding 3 or -3.\nany(axis=\"columns\"): Checks if any value in a row is True.\nSelects all rows containing at least one outlier value."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-capping-values",
    "href": "qmd/pandas3ed7.html#data-transformation-capping-values",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Capping Values",
    "text": "7.2 Data Transformation: Capping Values\n\ndata[data.abs() &gt; 3] = np.sign(data) * 3\ndata.describe()\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\ncount\n1000.000000\n1000.000000\n1000.000000\n1000.000000\n\n\nmean\n-0.038903\n0.023350\n0.033872\n-0.067874\n\n\nstd\n1.037202\n0.994743\n1.008734\n0.981955\n\n\nmin\n-3.000000\n-3.000000\n-3.000000\n-2.905442\n\n\n25%\n-0.739737\n-0.625055\n-0.642409\n-0.729251\n\n\n50%\n-0.002323\n0.027559\n0.053660\n-0.100235\n\n\n75%\n0.689503\n0.716488\n0.742530\n0.573621\n\n\nmax\n3.000000\n3.000000\n2.696409\n3.000000\n\n\n\n\n\n\n\n\nnp.sign(data): Returns -1 for negative values, 1 for positive values.\nCap values outside the interval [-3, 3] to -3 and 3."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-permutation-and-random-sampling-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-permutation-and-random-sampling-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Permutation and Random Sampling (Part 1)",
    "text": "7.2 Data Transformation: Permutation and Random Sampling (Part 1)\n\nPermuting (randomly reordering) rows or columns.\nSelecting a random subset of data.\n\n\ndf = pd.DataFrame(np.arange(5 * 7).reshape((5, 7)))\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n0\n0\n1\n2\n3\n4\n5\n6\n\n\n1\n7\n8\n9\n10\n11\n12\n13\n\n\n2\n14\n15\n16\n17\n18\n19\n20\n\n\n3\n21\n22\n23\n24\n25\n26\n27\n\n\n4\n28\n29\n30\n31\n32\n33\n34\n\n\n\n\n\n\n\n\nCreate a sample DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-permuting-rows-with-permutation-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-permuting-rows-with-permutation-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Permuting Rows with permutation() (Part 1)",
    "text": "7.2 Data Transformation: Permuting Rows with permutation() (Part 1)\n\nsampler = np.random.permutation(5) # Random permutation of integers 0-4\nsampler\n\narray([2, 3, 1, 4, 0])"
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-permuting-rows-with-permutation-part-2",
    "href": "qmd/pandas3ed7.html#data-transformation-permuting-rows-with-permutation-part-2",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Permuting Rows with permutation() (Part 2)",
    "text": "7.2 Data Transformation: Permuting Rows with permutation() (Part 2)\n\ndf.take(sampler)  # or df.iloc[sampler]\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n2\n14\n15\n16\n17\n18\n19\n20\n\n\n3\n21\n22\n23\n24\n25\n26\n27\n\n\n1\n7\n8\n9\n10\n11\n12\n13\n\n\n4\n28\n29\n30\n31\n32\n33\n34\n\n\n0\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n\n\n\n\nnp.random.permutation(n) generates a random permutation of integers 0 to n-1.\ntake() or iloc[] can be used with the permutation to reorder rows."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-permuting-columns-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-permuting-columns-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Permuting Columns (Part 1)",
    "text": "7.2 Data Transformation: Permuting Columns (Part 1)\n\ncolumn_sampler = np.random.permutation(7)\ncolumn_sampler\n\narray([2, 6, 4, 1, 3, 5, 0])"
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-permuting-columns-part-2",
    "href": "qmd/pandas3ed7.html#data-transformation-permuting-columns-part-2",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Permuting Columns (Part 2)",
    "text": "7.2 Data Transformation: Permuting Columns (Part 2)\n\ndf.take(column_sampler, axis=\"columns\")\n\n\n\n\n\n\n\n\n2\n6\n4\n1\n3\n5\n0\n\n\n\n\n0\n2\n6\n4\n1\n3\n5\n0\n\n\n1\n9\n13\n11\n8\n10\n12\n7\n\n\n2\n16\n20\n18\n15\n17\n19\n14\n\n\n3\n23\n27\n25\n22\n24\n26\n21\n\n\n4\n30\n34\n32\n29\n31\n33\n28\n\n\n\n\n\n\n\n\nPermute columns similarly, using axis=\"columns\" with take()."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-random-sampling-without-replacement",
    "href": "qmd/pandas3ed7.html#data-transformation-random-sampling-without-replacement",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Random Sampling without Replacement",
    "text": "7.2 Data Transformation: Random Sampling without Replacement\n\ndf.sample(n=3)  # Select 3 random rows\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n4\n28\n29\n30\n31\n32\n33\n34\n\n\n3\n21\n22\n23\n24\n25\n26\n27\n\n\n0\n0\n1\n2\n3\n4\n5\n6\n\n\n\n\n\n\n\n\nsample(n=k) selects k random rows without replacement."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-random-sampling-with-replacement",
    "href": "qmd/pandas3ed7.html#data-transformation-random-sampling-with-replacement",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Random Sampling with Replacement",
    "text": "7.2 Data Transformation: Random Sampling with Replacement\n\nchoices = pd.Series([5, 7, -1, 6, 4])\nchoices.sample(n=10, replace=True) # Sample with replacement\n\n1    7\n1    7\n2   -1\n3    6\n1    7\n4    4\n3    6\n2   -1\n1    7\n2   -1\ndtype: int64\n\n\n\nreplace=True allows sampling with replacement (the same row can be chosen multiple times)."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-computing-indicatordummy-variables-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-computing-indicatordummy-variables-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Computing Indicator/Dummy Variables (Part 1)",
    "text": "7.2 Data Transformation: Computing Indicator/Dummy Variables (Part 1)\n\nConverting a categorical variable into a ‚Äúdummy‚Äù or ‚Äúindicator‚Äù matrix.\nUsed in statistical modeling and machine learning.\n\n\ndf = pd.DataFrame({\"key\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"b\"],\n                   \"data1\": range(6)})\ndf\n\n\n\n\n\n\n\n\nkey\ndata1\n\n\n\n\n0\nb\n0\n\n\n1\nb\n1\n\n\n2\na\n2\n\n\n3\nc\n3\n\n\n4\na\n4\n\n\n5\nb\n5\n\n\n\n\n\n\n\n\nExample DataFrame with a categorical column ‚Äúkey‚Äù."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-get_dummies",
    "href": "qmd/pandas3ed7.html#data-transformation-get_dummies",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: get_dummies()",
    "text": "7.2 Data Transformation: get_dummies()\n\npd.get_dummies(df[\"key\"])\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\nFalse\nTrue\nFalse\n\n\n1\nFalse\nTrue\nFalse\n\n\n2\nTrue\nFalse\nFalse\n\n\n3\nFalse\nFalse\nTrue\n\n\n4\nTrue\nFalse\nFalse\n\n\n5\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\npd.get_dummies(categorical_column) creates a DataFrame where:\n\nEach unique value in the original column becomes a new column.\nValues are 1 if the original row had that category, 0 otherwise."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-adding-a-prefix-to-dummy-variables",
    "href": "qmd/pandas3ed7.html#data-transformation-adding-a-prefix-to-dummy-variables",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Adding a Prefix to Dummy Variables",
    "text": "7.2 Data Transformation: Adding a Prefix to Dummy Variables\n\ndummies = pd.get_dummies(df[\"key\"], prefix=\"key\")\ndf_with_dummy = df[[\"data1\"]].join(dummies)\ndf_with_dummy\n\n\n\n\n\n\n\n\ndata1\nkey_a\nkey_b\nkey_c\n\n\n\n\n0\n0\nFalse\nTrue\nFalse\n\n\n1\n1\nFalse\nTrue\nFalse\n\n\n2\n2\nTrue\nFalse\nFalse\n\n\n3\n3\nFalse\nFalse\nTrue\n\n\n4\n4\nTrue\nFalse\nFalse\n\n\n5\n5\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\nprefix argument adds a prefix to the dummy variable column names.\nUseful when joining with the original DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-handling-multiple-categories-movielens-example-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-handling-multiple-categories-movielens-example-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Handling Multiple Categories (MovieLens Example) (Part 1)",
    "text": "7.2 Data Transformation: Handling Multiple Categories (MovieLens Example) (Part 1)\n\nmnames = [\"movie_id\", \"title\", \"genres\"]\nmovies = pd.read_table(\"datasets/movielens/movies.dat\", sep=\"::\",\n                       header=None, names=mnames, engine=\"python\")\nmovies[:10]\n\n\n\n\n\n\n\n\nmovie_id\ntitle\ngenres\n\n\n\n\n0\n1\nToy Story (1995)\nAnimation|Children's|Comedy\n\n\n1\n2\nJumanji (1995)\nAdventure|Children's|Fantasy\n\n\n2\n3\nGrumpier Old Men (1995)\nComedy|Romance\n\n\n3\n4\nWaiting to Exhale (1995)\nComedy|Drama\n\n\n4\n5\nFather of the Bride Part II (1995)\nComedy\n\n\n5\n6\nHeat (1995)\nAction|Crime|Thriller\n\n\n6\n7\nSabrina (1995)\nComedy|Romance\n\n\n7\n8\nTom and Huck (1995)\nAdventure|Children's\n\n\n8\n9\nSudden Death (1995)\nAction\n\n\n9\n10\nGoldenEye (1995)\nAction|Adventure|Thriller\n\n\n\n\n\n\n\n\nMovieLens dataset: ‚Äúgenres‚Äù column contains pipe-separated (|) genre strings.\nA movie can belong to multiple genres."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-str.get_dummies-for-multiple-categories",
    "href": "qmd/pandas3ed7.html#data-transformation-str.get_dummies-for-multiple-categories",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: str.get_dummies() for Multiple Categories",
    "text": "7.2 Data Transformation: str.get_dummies() for Multiple Categories\n\ndummies = movies[\"genres\"].str.get_dummies(\"|\")\ndummies.iloc[:10, :6]  # Show first 10 rows and 6 columns\n\n\n\n\n\n\n\n\nAction\nAdventure\nAnimation\nChildren's\nComedy\nCrime\n\n\n\n\n0\n0\n0\n1\n1\n1\n0\n\n\n1\n0\n1\n0\n1\n0\n0\n\n\n2\n0\n0\n0\n0\n1\n0\n\n\n3\n0\n0\n0\n0\n1\n0\n\n\n4\n0\n0\n0\n0\n1\n0\n\n\n5\n1\n0\n0\n0\n0\n1\n\n\n6\n0\n0\n0\n0\n1\n0\n\n\n7\n0\n1\n0\n1\n0\n0\n\n\n8\n1\n0\n0\n0\n0\n0\n\n\n9\n1\n1\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nstr.get_dummies(separator) handles multiple categories separated by a delimiter."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-combining-with-the-original-dataframe",
    "href": "qmd/pandas3ed7.html#data-transformation-combining-with-the-original-dataframe",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Combining with the Original DataFrame",
    "text": "7.2 Data Transformation: Combining with the Original DataFrame\n\nmovies_windic = movies.join(dummies.add_prefix(\"Genre_\"))\nmovies_windic.iloc[0]\n\nmovie_id                                       1\ntitle                           Toy Story (1995)\ngenres               Animation|Children's|Comedy\nGenre_Action                                   0\nGenre_Adventure                                0\nGenre_Animation                                1\nGenre_Children's                               1\nGenre_Comedy                                   1\nGenre_Crime                                    0\nGenre_Documentary                              0\nGenre_Drama                                    0\nGenre_Fantasy                                  0\nGenre_Film-Noir                                0\nGenre_Horror                                   0\nGenre_Musical                                  0\nGenre_Mystery                                  0\nGenre_Romance                                  0\nGenre_Sci-Fi                                   0\nGenre_Thriller                                 0\nGenre_War                                      0\nGenre_Western                                  0\nName: 0, dtype: object\n\n\n\nadd_prefix() adds a prefix to the dummy variable columns.\njoin() combines the dummy variables with the original DataFrame."
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-combining-get_dummies-and-cut-part-1",
    "href": "qmd/pandas3ed7.html#data-transformation-combining-get_dummies-and-cut-part-1",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Combining get_dummies() and cut() (Part 1)",
    "text": "7.2 Data Transformation: Combining get_dummies() and cut() (Part 1)\n\nnp.random.seed(12345)\nvalues = np.random.uniform(size=10)\nvalues\n\narray([0.92961609, 0.31637555, 0.18391881, 0.20456028, 0.56772503,\n       0.5955447 , 0.96451452, 0.6531771 , 0.74890664, 0.65356987])"
  },
  {
    "objectID": "qmd/pandas3ed7.html#data-transformation-combining-get_dummies-and-cut-part-2",
    "href": "qmd/pandas3ed7.html#data-transformation-combining-get_dummies-and-cut-part-2",
    "title": "Python for Data Analysis",
    "section": "7.2 Data Transformation: Combining get_dummies() and cut() (Part 2)",
    "text": "7.2 Data Transformation: Combining get_dummies() and cut() (Part 2)\n\nbins = [0, 0.2, 0.4, 0.6, 0.8, 1]\npd.get_dummies(pd.cut(values, bins))\n\n\n\n\n\n\n\n\n(0.0, 0.2]\n(0.2, 0.4]\n(0.4, 0.6]\n(0.6, 0.8]\n(0.8, 1.0]\n\n\n\n\n0\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n1\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n2\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\n3\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\n4\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n5\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\n6\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\n7\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n8\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n9\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\nA recipe for statistical applications: Combine get_dummies() with discretization functions like cut().\nCreates indicator variables for each bin."
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types",
    "href": "qmd/pandas3ed7.html#extension-data-types",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types",
    "text": "7.3 Extension Data Types\n\nPandas‚Äô original reliance on NumPy had limitations:\n\nIncomplete missing data handling for integers and Booleans.\nString data was computationally expensive.\nSome data types (time intervals, timedeltas) weren‚Äôt efficiently supported.\n\nPandas now has an extension type system.\n\nAllows adding new data types not natively supported by NumPy.\nTreats these types as first-class citizens."
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types-integer-example-part-1",
    "href": "qmd/pandas3ed7.html#extension-data-types-integer-example-part-1",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types: Integer Example (Part 1)",
    "text": "7.3 Extension Data Types: Integer Example (Part 1)\n\ns = pd.Series([1, 2, 3, None])\ns\n\n0    1.0\n1    2.0\n2    3.0\n3    NaN\ndtype: float64\n\n\n\ns.dtype\n\ndtype('float64')\n\n\n\nTraditional behavior: Integer Series with missing values becomes float64."
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types-int64dtype-part-1",
    "href": "qmd/pandas3ed7.html#extension-data-types-int64dtype-part-1",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types: Int64Dtype (Part 1)",
    "text": "7.3 Extension Data Types: Int64Dtype (Part 1)\n\ns = pd.Series([1, 2, 3, None], dtype=pd.Int64Dtype())\ns\n\n0       1\n1       2\n2       3\n3    &lt;NA&gt;\ndtype: Int64"
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types-int64dtype-part-2",
    "href": "qmd/pandas3ed7.html#extension-data-types-int64dtype-part-2",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types: Int64Dtype (Part 2)",
    "text": "7.3 Extension Data Types: Int64Dtype (Part 2)\n\ns.isna()\n\n0    False\n1    False\n2    False\n3     True\ndtype: bool\n\n\n\ns.dtype\n\nInt64Dtype()\n\n\n\npd.Int64Dtype() (or \"Int64\") creates an integer Series with proper NA handling.\nUses &lt;NA&gt; to indicate missing values (pandas.NA sentinel value)."
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types-string-example",
    "href": "qmd/pandas3ed7.html#extension-data-types-string-example",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types: String Example",
    "text": "7.3 Extension Data Types: String Example\n\ns = pd.Series(['one', 'two', None, 'three'], dtype=pd.StringDtype())\ns\n\n0      one\n1      two\n2     &lt;NA&gt;\n3    three\ndtype: string\n\n\n\ns.dtype\n\nstring[python]\n\n\n\npd.StringDtype() creates a specialized string data type.\nMore memory-efficient and computationally efficient for large datasets.\nRequires the pyarrow library."
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types-astype-part-1",
    "href": "qmd/pandas3ed7.html#extension-data-types-astype-part-1",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types: astype() (Part 1)",
    "text": "7.3 Extension Data Types: astype() (Part 1)\n\ndf = pd.DataFrame({\"A\": [1, 2, None, 4],\n                    \"B\": [\"one\", \"two\", \"three\", None],\n                   \"C\": [False, None, False, True]})\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n1.0\none\nFalse\n\n\n1\n2.0\ntwo\nNone\n\n\n2\nNaN\nthree\nFalse\n\n\n3\n4.0\nNone\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types-astype-part-2",
    "href": "qmd/pandas3ed7.html#extension-data-types-astype-part-2",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types: astype() (Part 2)",
    "text": "7.3 Extension Data Types: astype() (Part 2)\n\ndf[\"A\"] = df[\"A\"].astype(\"Int64\")\ndf[\"B\"] = df[\"B\"].astype(\"string\")\ndf[\"C\"] = df[\"C\"].astype(\"boolean\")\ndf\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\n0\n1\none\nFalse\n\n\n1\n2\ntwo\n&lt;NA&gt;\n\n\n2\n&lt;NA&gt;\nthree\nFalse\n\n\n3\n4\n&lt;NA&gt;\nTrue\n\n\n\n\n\n\n\n\nExtension types are well-integrated with existing tools. You can use astype() method to convert different types."
  },
  {
    "objectID": "qmd/pandas3ed7.html#extension-data-types-summary",
    "href": "qmd/pandas3ed7.html#extension-data-types-summary",
    "title": "Python for Data Analysis",
    "section": "7.3 Extension Data Types: Summary",
    "text": "7.3 Extension Data Types: Summary\n\nA reasonably complete list of extension types available.\n\n\n\n\n\n\n\n\nExtension type\nDescription\n\n\n\n\nBooleanDtype\nNullable Boolean data, use \"boolean\" when passing as string\n\n\nCategoricalDtype\nCategorical data type, use \"category\" when passing as string\n\n\nDatetimeTZDtype\nDatetime with time zone\n\n\nFloat32Dtype\n32-bit nullable floating point, use \"Float32\" when passing as string\n\n\nFloat64Dtype\n64-bit nullable floating point, use \"Float64\" when passing as string\n\n\nInt8Dtype\n8-bit nullable signed integer, use \"Int8\" when passing as string\n\n\nInt16Dtype\n16-bit nullable signed integer, use \"Int16\" when passing as string\n\n\nInt32Dtype\n32-bit nullable signed integer, use \"Int32\" when passing as string\n\n\nInt64Dtype\n64-bit nullable signed integer, use \"Int64\" when passing as string\n\n\nUInt8Dtype\n8-bit nullable unsigned integer, use \"UInt8\" when passing as string\n\n\nUInt16Dtype\n16-bit nullable unsigned integer, use \"UInt16\" when passing as string\n\n\nUInt32Dtype\n32-bit nullable unsigned integer, use \"UInt32\" when passing as string\n\n\nUInt64Dtype\n64-bit nullable unsigned integer, use \"UInt64\" when passing as string"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation",
    "href": "qmd/pandas3ed7.html#string-manipulation",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation",
    "text": "7.4 String Manipulation\n\nPython is popular for string/text processing.\nString object methods are often sufficient.\nRegular expressions (regex) provide more power.\nPandas combines these, handling missing data gracefully."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods-part-1",
    "href": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods-part-1",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Python Built-In String Methods (Part 1)",
    "text": "7.4 String Manipulation: Python Built-In String Methods (Part 1)\n\nval = \"a,b,  guido\"\nval.split(\",\")\n\n['a', 'b', '  guido']\n\n\n\nsplit(): Breaks a string into a list of substrings based on a delimiter."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods-part-2",
    "href": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods-part-2",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Python Built-In String Methods (Part 2)",
    "text": "7.4 String Manipulation: Python Built-In String Methods (Part 2)\n\npieces = [x.strip() for x in val.split(\",\")]\npieces\n\n['a', 'b', 'guido']\n\n\n\nstrip(): Removes leading/trailing whitespace. Often used with split()."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-string-concatenation-part-1",
    "href": "qmd/pandas3ed7.html#string-manipulation-string-concatenation-part-1",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: String Concatenation (Part 1)",
    "text": "7.4 String Manipulation: String Concatenation (Part 1)\n\nfirst, second, third = pieces\nfirst + \"::\" + second + \"::\" + third  # Using + operator\n\n'a::b::guido'"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-string-concatenation-part-2",
    "href": "qmd/pandas3ed7.html#string-manipulation-string-concatenation-part-2",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: String Concatenation (Part 2)",
    "text": "7.4 String Manipulation: String Concatenation (Part 2)\n\n\"::\".join(pieces) # More Pythonic way,using join()\n\n'a::b::guido'\n\n\n\njoin(): A more Pythonic way to concatenate strings with a delimiter."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-substring-detection-part-1",
    "href": "qmd/pandas3ed7.html#string-manipulation-substring-detection-part-1",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Substring Detection (Part 1)",
    "text": "7.4 String Manipulation: Substring Detection (Part 1)\n\n\"guido\" in val\n\nTrue\n\n\n\nval.index(\",\")  # Raises ValueError if not found\n\n1"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-substring-detection-part-2",
    "href": "qmd/pandas3ed7.html#string-manipulation-substring-detection-part-2",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Substring Detection (Part 2)",
    "text": "7.4 String Manipulation: Substring Detection (Part 2)\n\nval.find(\":\")   # Returns -1 if not found\n\n-1\n\n\n\nin: The best way to check if a substring exists.\nindex(): Finds the first occurrence of a substring; raises an error if not found.\nfind(): Similar to index(), but returns -1 if not found."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-count-and-replace-part-1",
    "href": "qmd/pandas3ed7.html#string-manipulation-count-and-replace-part-1",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: count() and replace() (Part 1)",
    "text": "7.4 String Manipulation: count() and replace() (Part 1)\n\nval.count(\",\") # Counts occurrences of a substring\n\n2\n\n\n\nval.replace(\",\", \"::\")\n\n'a::b::  guido'"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-count-and-replace-part-2",
    "href": "qmd/pandas3ed7.html#string-manipulation-count-and-replace-part-2",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: count() and replace() (Part 2)",
    "text": "7.4 String Manipulation: count() and replace() (Part 2)\n\nval.replace(\",\", \"\")  # Delete occurrences by replacing with empty string\n\n'ab  guido'\n\n\n\ncount(): Counts the number of occurrences of a substring.\nreplace(): Substitutes occurrences of one pattern with another."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods---summary",
    "href": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods---summary",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Python Built-in string methods - Summary",
    "text": "7.4 String Manipulation: Python Built-in string methods - Summary\n\nOverview of common string operations.\n\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\ncount\nReturn the number of nonoverlapping occurrences of substring in the string\n\n\nendswith\nReturn True if string ends with suffix\n\n\nstartswith\nReturn True if string starts with prefix\n\n\njoin\nUse string as delimiter for concatenating a sequence of other strings\n\n\nindex\nReturn starting index of the first occurrence of passed substring if found in the string; otherwise, raises ValueError if not found\n\n\nfind\nReturn position of first character of first occurrence of substring in the string; like index, but returns -1 if not found\n\n\nrfind\nReturn position of first character of last occurrence of substring in the string; returns -1 if not found\n\n\nreplace\nReplace occurrences of string with another string\n\n\nstrip\nTrim whitespace, including newlines on both sides\n\n\nrstrip\nTrim whitespace on right side\n\n\n\n#| echo: false\nimport re"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods---summary-continued",
    "href": "qmd/pandas3ed7.html#string-manipulation-python-built-in-string-methods---summary-continued",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Python Built-in string methods - Summary (Continued)",
    "text": "7.4 String Manipulation: Python Built-in string methods - Summary (Continued)\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nlstrip\nTrim whitespace on left side\n\n\nsplit\nBreak string into list of substrings using passed delimiter\n\n\nlower\nConvert alphabet characters to lowercase\n\n\nupper\nConvert alphabet characters to uppercase\n\n\ncasefold\nConvert characters to lowercase, handling region-specific variations\n\n\nljust\nLeft justify; pad right side with spaces (or other fill character)\n\n\nrjust\nRight justify; pad left side with spaces (or other fill character)"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-regular-expressions",
    "href": "qmd/pandas3ed7.html#string-manipulation-regular-expressions",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Regular Expressions",
    "text": "7.4 String Manipulation: Regular Expressions\n\nRegular expressions (regex) provide a powerful way to search, match, and manipulate text patterns.\nPython‚Äôs built-in re module handles regular expressions.\nRegex functions fall into three categories:\n\nPattern matching.\nSubstitution.\nSplitting."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-regex-example---splitting",
    "href": "qmd/pandas3ed7.html#string-manipulation-regex-example---splitting",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Regex Example - Splitting",
    "text": "7.4 String Manipulation: Regex Example - Splitting\n\nimport re\ntext = \"foo    bar\\t baz  \\tqux\"\nre.split(r\"\\s+\", text)  # Split on one or more whitespace characters\n\n['foo', 'bar', 'baz', 'qux']\n\n\n\n\\s+: Regex for one or more whitespace characters.\nre.split(pattern, text): Splits the text based on the regex pattern."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-compiling-regex-objects",
    "href": "qmd/pandas3ed7.html#string-manipulation-compiling-regex-objects",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Compiling Regex Objects",
    "text": "7.4 String Manipulation: Compiling Regex Objects\n\nregex = re.compile(r\"\\s+\")  # Compile the regex\nregex.split(text)\n\n['foo', 'bar', 'baz', 'qux']\n\n\n\nre.compile(pattern): Compiles a regex into a reusable regex object.\nRecommended if you‚Äôll apply the same regex to multiple strings (saves CPU cycles)."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-findall",
    "href": "qmd/pandas3ed7.html#string-manipulation-findall",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: findall()",
    "text": "7.4 String Manipulation: findall()\n\nregex.findall(text)\n\n['    ', '\\t ', '  \\t']\n\n\n\nfindall(): Returns a list of all non-overlapping matches of the pattern in the string."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-regex-example---email-matching",
    "href": "qmd/pandas3ed7.html#string-manipulation-regex-example---email-matching",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Regex Example - Email Matching",
    "text": "7.4 String Manipulation: Regex Example - Email Matching\n\ntext = \"\"\"Dave dave@google.com\nSteve steve@gmail.com\nRob rob@gmail.com\nRyan ryan@yahoo.com\"\"\"\n\npattern = r\"[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\"  # Basic email regex\n\n# re.IGNORECASE makes the regex case-insensitive\nregex = re.compile(pattern, flags=re.IGNORECASE)\n\n\nA more complex regex to match email addresses.\nre.IGNORECASE flag makes the match case-insensitive."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-findall-with-email-regex",
    "href": "qmd/pandas3ed7.html#string-manipulation-findall-with-email-regex",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: findall() with Email Regex",
    "text": "7.4 String Manipulation: findall() with Email Regex\n\nregex.findall(text)\n\n['dave@google.com', 'steve@gmail.com', 'rob@gmail.com', 'ryan@yahoo.com']\n\n\n\nfindall() returns a list of all matched email addresses."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-search-part-1",
    "href": "qmd/pandas3ed7.html#string-manipulation-search-part-1",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: search() (Part 1)",
    "text": "7.4 String Manipulation: search() (Part 1)\n\nm = regex.search(text)\nm\n\n&lt;re.Match object; span=(5, 20), match='dave@google.com'&gt;"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-search-part-2",
    "href": "qmd/pandas3ed7.html#string-manipulation-search-part-2",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: search() (Part 2)",
    "text": "7.4 String Manipulation: search() (Part 2)\n\ntext[m.start():m.end()]\n\n'dave@google.com'\n\n\n\nsearch(): Returns a match object for the first match in the string.\nThe match object gives the start and end positions of the match.\nregex.match() Returns None."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-sub",
    "href": "qmd/pandas3ed7.html#string-manipulation-sub",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: sub()",
    "text": "7.4 String Manipulation: sub()\n\nprint(regex.sub(\"REDACTED\", text))\n\nDave REDACTED\nSteve REDACTED\nRob REDACTED\nRyan REDACTED\n\n\n\nsub(replacement, text): Returns a new string with occurrences of the pattern replaced by the replacement string."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-regex-groups-part-1",
    "href": "qmd/pandas3ed7.html#string-manipulation-regex-groups-part-1",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Regex Groups (Part 1)",
    "text": "7.4 String Manipulation: Regex Groups (Part 1)\n\npattern = r\"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})\"  # Regex with groups\nregex = re.compile(pattern, flags=re.IGNORECASE)\n\nm = regex.match(\"wesm@bright.net\")\nm.groups()\n\n('wesm', 'bright', 'net')\n\n\n\nParentheses () in a regex define capture groups."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-regex-groups-part-2",
    "href": "qmd/pandas3ed7.html#string-manipulation-regex-groups-part-2",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Regex Groups (Part 2)",
    "text": "7.4 String Manipulation: Regex Groups (Part 2)\n\ngroups() method of a match object returns a tuple of the captured group contents."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-findall-with-groups",
    "href": "qmd/pandas3ed7.html#string-manipulation-findall-with-groups",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: findall() with Groups",
    "text": "7.4 String Manipulation: findall() with Groups\n\nregex.findall(text)\n\n[('dave', 'google', 'com'),\n ('steve', 'gmail', 'com'),\n ('rob', 'gmail', 'com'),\n ('ryan', 'yahoo', 'com')]\n\n\n\nWhen a regex has groups, findall() returns a list of tuples, where each tuple contains the captured groups."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-sub-with-group-references",
    "href": "qmd/pandas3ed7.html#string-manipulation-sub-with-group-references",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: sub() with Group References",
    "text": "7.4 String Manipulation: sub() with Group References\n\nprint(regex.sub(r\"Username: \\1, Domain: \\2, Suffix: \\3\", text))\n\nDave Username: dave, Domain: google, Suffix: com\nSteve Username: steve, Domain: gmail, Suffix: com\nRob Username: rob, Domain: gmail, Suffix: com\nRyan Username: ryan, Domain: yahoo, Suffix: com\n\n\n\nIn sub(), \\1, \\2, etc., refer to the captured groups (backreferences)."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-regular-expression-methods---summary",
    "href": "qmd/pandas3ed7.html#string-manipulation-regular-expression-methods---summary",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Regular expression methods - Summary",
    "text": "7.4 String Manipulation: Regular expression methods - Summary\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nfindall\nReturn all nonoverlapping matching patterns in a string as a list\n\n\nfinditer\nLike findall, but returns an iterator\n\n\nmatch\nMatch pattern at start of string and optionally segment pattern components into groups; if the pattern matches, return a match object, and otherwise None\n\n\nsearch\nScan string for match to pattern, returning a match object if so; unlike match, the match can be anywhere in the string\n\n\nsplit\nBreak string into pieces at each occurrence of pattern\n\n\nsub, subn\nReplace all (sub) or first n occurrences (subn) of pattern in string with replacement expression; use symbols \\1, \\2, ‚Ä¶"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-string-functions-in-pandas",
    "href": "qmd/pandas3ed7.html#string-manipulation-string-functions-in-pandas",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: String Functions in pandas",
    "text": "7.4 String Manipulation: String Functions in pandas\n\nPandas extends string manipulation to Series and DataFrames.\nHandles missing data gracefully.\n\n\ndata = {\"Dave\": \"dave@google.com\", \"Steve\": \"steve@gmail.com\",\n        \"Rob\": \"rob@gmail.com\", \"Wes\": np.nan}\ndata = pd.Series(data)\ndata\n\nDave     dave@google.com\nSteve    steve@gmail.com\nRob        rob@gmail.com\nWes                  NaN\ndtype: object\n\n\n\ndata.isna()\n\nDave     False\nSteve    False\nRob      False\nWes       True\ndtype: bool\n\n\n\nExample Series with string data and a missing value."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-str-accessor",
    "href": "qmd/pandas3ed7.html#string-manipulation-str-accessor",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: str Accessor",
    "text": "7.4 String Manipulation: str Accessor\n\ndata.str.contains(\"gmail\")\n\nDave     False\nSteve     True\nRob       True\nWes        NaN\ndtype: object\n\n\n\nSeries has a str attribute that provides access to string methods.\nThese methods skip over and propagate NA values."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-str.contains",
    "href": "qmd/pandas3ed7.html#string-manipulation-str.contains",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: str.contains()",
    "text": "7.4 String Manipulation: str.contains()\n\nstr.contains(substring): Checks if each string contains the given substring.\nReturns a Boolean Series."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-using-regex-with-str-methods",
    "href": "qmd/pandas3ed7.html#string-manipulation-using-regex-with-str-methods",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Using Regex with str Methods",
    "text": "7.4 String Manipulation: Using Regex with str Methods\n\npattern = r\"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})\"\ndata.str.findall(pattern, flags=re.IGNORECASE)\n\nDave     [(dave, google, com)]\nSteve    [(steve, gmail, com)]\nRob        [(rob, gmail, com)]\nWes                        NaN\ndtype: object\n\n\n\nRegular expressions can be used with str methods.\nflags (like re.IGNORECASE) can be passed."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-vectorized-element-retrieval-part-1",
    "href": "qmd/pandas3ed7.html#string-manipulation-vectorized-element-retrieval-part-1",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Vectorized Element Retrieval (Part 1)",
    "text": "7.4 String Manipulation: Vectorized Element Retrieval (Part 1)\n\nmatches = data.str.findall(pattern, flags=re.IGNORECASE).str[0]\nmatches\n\nDave     (dave, google, com)\nSteve    (steve, gmail, com)\nRob        (rob, gmail, com)\nWes                      NaN\ndtype: object\n\n\n\nmatches.str.get(1) # Accessing the group\n\nDave     google\nSteve     gmail\nRob       gmail\nWes         NaN\ndtype: object"
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-vectorized-element-retrieval-part-2",
    "href": "qmd/pandas3ed7.html#string-manipulation-vectorized-element-retrieval-part-2",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Vectorized Element Retrieval (Part 2)",
    "text": "7.4 String Manipulation: Vectorized Element Retrieval (Part 2)\n\ndata.str[:5]  # String slicing\n\nDave     dave@\nSteve    steve\nRob      rob@g\nWes        NaN\ndtype: object\n\n\n\nVectorized element retrieval: Use str.get(i) or index into the str attribute (str[i])."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-str.extract",
    "href": "qmd/pandas3ed7.html#string-manipulation-str.extract",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: str.extract()",
    "text": "7.4 String Manipulation: str.extract()\n\ndata.str.extract(pattern, flags=re.IGNORECASE)\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\nDave\ndave\ngoogle\ncom\n\n\nSteve\nsteve\ngmail\ncom\n\n\nRob\nrob\ngmail\ncom\n\n\nWes\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\nstr.extract(pattern): Returns a DataFrame where each captured group in the regex becomes a column."
  },
  {
    "objectID": "qmd/pandas3ed7.html#string-manipulation-partial-listing-of-series-string-methods---summary",
    "href": "qmd/pandas3ed7.html#string-manipulation-partial-listing-of-series-string-methods---summary",
    "title": "Python for Data Analysis",
    "section": "7.4 String Manipulation: Partial listing of Series string methods - Summary",
    "text": "7.4 String Manipulation: Partial listing of Series string methods - Summary\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\ncat\nConcatenate strings element-wise with optional delimiter\n\n\ncontains\nReturn Boolean array if each string contains pattern/regex\n\n\ncount\nCount occurrences of pattern\n\n\nextract\nUse a regular expression with groups to extract one or more strings from a Series of strings; the result will be a DataFrame with one column per group\n\n\nendswith\nEquivalent to x.endswith(pattern) for each element\n\n\nstartswith\nEquivalent to x.startswith(pattern) for each element\n\n\nfindall\nCompute list of all occurrences of pattern/regex for each string\n\n\nget\nIndex into each element (retrieve i-th element)\n\n\nisalnum\nEquivalent to built-in str.isalnum\n\n\nisalpha\nEquivalent to built-in str.isalpha\n\n\nisdecimal\nEquivalent to built-in str.isdecimal\n\n\nisdigit\nEquivalent to built-in str.isdigit\n\n\nislower\nEquivalent to built-in str.islower\n\n\nisnumeric\nEquivalent to built-in str.isnumeric\n\n\nisupper\nEquivalent to built-in str.isupper\n\n\njoin\nJoin strings in each element of the Series with passed separator\n\n\nlen\nCompute length of each string\n\n\nlower, upper\nConvert cases; equivalent to x.lower() or x.upper() for each element\n\n\nmatch\nUse re.match with the passed regular expression on each element, returning True or False whether it matches\n\n\npad\nAdd whitespace to left, right, or both sides of strings\n\n\ncenter\nEquivalent to pad(side=\"both\")\n\n\nrepeat\nDuplicate values (e.g., s.str.repeat(3) is equivalent to x * 3 for each string)\n\n\nreplace\nReplace occurrences of pattern/regex with some other string\n\n\nslice\nSlice each string in the Series\n\n\nsplit\nSplit strings on delimiter or regular expression\n\n\nstrip\nTrim whitespace from both sides, including newlines\n\n\nrstrip\nTrim whitespace on right side\n\n\nlstrip\nTrim whitespace on left side"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data",
    "href": "qmd/pandas3ed7.html#categorical-data",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data",
    "text": "7.5 Categorical Data\n\nIntroduces the pandas Categorical type.\nImproves performance and memory use in some pandas operations.\nUseful for statistical and machine learning applications."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-background-and-motivation-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-background-and-motivation-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Background and Motivation (Part 1)",
    "text": "7.5 Categorical Data: Background and Motivation (Part 1)\n\nColumns often contain repeated instances of a smaller set of distinct values.\nDimension tables are a common technique in data warehousing.\n\nDistinct values are stored in the dimension table.\nPrimary observations are stored as integer keys referencing the dimension table.\n\nMore efficient storage and computation."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-background-and-motivation-part-2",
    "href": "qmd/pandas3ed7.html#categorical-data-background-and-motivation-part-2",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Background and Motivation (Part 2)",
    "text": "7.5 Categorical Data: Background and Motivation (Part 2)\n\nvalues = pd.Series(['apple', 'orange', 'apple',\n                    'apple'] * 2)\nvalues\n\n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\ndtype: object\n\n\n\npd.unique(values)\n\narray(['apple', 'orange'], dtype=object)\n\n\n\npd.value_counts(values)\n\n/tmp/ipykernel_3050/3297668723.py:1: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n  pd.value_counts(values)\n\n\napple     6\norange    2\nName: count, dtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-dimension-table-representation-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-dimension-table-representation-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Dimension Table Representation (Part 1)",
    "text": "7.5 Categorical Data: Dimension Table Representation (Part 1)\n\nvalues = pd.Series([0, 1, 0, 0] * 2)\ndim = pd.Series(['apple', 'orange'])\nvalues\n\n0    0\n1    1\n2    0\n3    0\n4    0\n5    1\n6    0\n7    0\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-dimension-table-representation-part-2",
    "href": "qmd/pandas3ed7.html#categorical-data-dimension-table-representation-part-2",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Dimension Table Representation (Part 2)",
    "text": "7.5 Categorical Data: Dimension Table Representation (Part 2)\n\ndim\n\n0     apple\n1    orange\ndtype: object\n\n\n\nvalues: Integer keys referencing the dimension table.\ndim: Dimension table containing the distinct values."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-restoring-original-data-with-take",
    "href": "qmd/pandas3ed7.html#categorical-data-restoring-original-data-with-take",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Restoring Original Data with take()",
    "text": "7.5 Categorical Data: Restoring Original Data with take()\n\ndim.take(values)\n\n0     apple\n1    orange\n0     apple\n0     apple\n0     apple\n1    orange\n0     apple\n0     apple\ndtype: object\n\n\n\ntake() method can be used to restore the original Series of strings."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-terminology",
    "href": "qmd/pandas3ed7.html#categorical-data-terminology",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Terminology",
    "text": "7.5 Categorical Data: Terminology\n\nCategorical or dictionary-encoded representation: Representing data with repeated values as integers.\nCategories, dictionary, or levels: The array of distinct values.\nCategory codes or codes: The integer values referencing the categories."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-benefits",
    "href": "qmd/pandas3ed7.html#categorical-data-benefits",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Benefits",
    "text": "7.5 Categorical Data: Benefits\n\nSignificant performance improvements in analytics.\nTransformations on categories while leaving codes unmodified.\n\nRenaming categories.\nAppending new categories."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-categorical-extension-type-in-pandas-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-categorical-extension-type-in-pandas-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Categorical Extension Type in pandas (Part 1)",
    "text": "7.5 Categorical Data: Categorical Extension Type in pandas (Part 1)\n\nfruits = ['apple', 'orange', 'apple', 'apple'] * 2\nN = len(fruits)\nrng = np.random.default_rng(seed=12345)\ndf = pd.DataFrame({'fruit': fruits,\n                   'basket_id': np.arange(N),\n                   'count': rng.integers(3, 15, size=N),\n                   'weight': rng.uniform(0, 4, size=N)},\n                  columns=['basket_id', 'fruit', 'count', 'weight'])\ndf\n\n\n\n\n\n\n\n\nbasket_id\nfruit\ncount\nweight\n\n\n\n\n0\n0\napple\n11\n1.564438\n\n\n1\n1\norange\n5\n1.331256\n\n\n2\n2\napple\n12\n2.393235\n\n\n3\n3\napple\n6\n0.746937\n\n\n4\n4\napple\n5\n2.691024\n\n\n5\n5\norange\n12\n3.767211\n\n\n6\n6\napple\n10\n0.992983\n\n\n7\n7\napple\n11\n3.795525\n\n\n\n\n\n\n\n\nExample DataFrame with a ‚Äúfruit‚Äù column (string objects)."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-converting-to-categorical",
    "href": "qmd/pandas3ed7.html#categorical-data-converting-to-categorical",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Converting to Categorical",
    "text": "7.5 Categorical Data: Converting to Categorical\n\nfruit_cat = df['fruit'].astype('category')\nfruit_cat\n\n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\nName: fruit, dtype: category\nCategories (2, object): ['apple', 'orange']\n\n\n\nastype('category'): Converts a column to the Categorical type."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-accessing-the-categorical-object",
    "href": "qmd/pandas3ed7.html#categorical-data-accessing-the-categorical-object",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Accessing the Categorical Object",
    "text": "7.5 Categorical Data: Accessing the Categorical Object\n\nc = fruit_cat.array\ntype(c)\n\npandas.core.arrays.categorical.Categorical\n\n\n\nThe .array attribute accesses the underlying Categorical object."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-categories-and-codes-attributes-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-categories-and-codes-attributes-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: categories and codes Attributes (Part 1)",
    "text": "7.5 Categorical Data: categories and codes Attributes (Part 1)\n\nc.categories\n\nIndex(['apple', 'orange'], dtype='object')\n\n\n\nc.codes\n\narray([0, 1, 0, 0, 0, 1, 0, 0], dtype=int8)\n\n\n\ncategories: The distinct values."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-categories-and-codes-attributes-part-2",
    "href": "qmd/pandas3ed7.html#categorical-data-categories-and-codes-attributes-part-2",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: categories and codes Attributes (Part 2)",
    "text": "7.5 Categorical Data: categories and codes Attributes (Part 2)\n\ncodes: Integer codes representing each value‚Äôs category."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-converting-a-dataframe-column",
    "href": "qmd/pandas3ed7.html#categorical-data-converting-a-dataframe-column",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Converting a DataFrame Column",
    "text": "7.5 Categorical Data: Converting a DataFrame Column\n\ndf['fruit'] = df['fruit'].astype('category')\ndf[\"fruit\"]\n\n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\nName: fruit, dtype: category\nCategories (2, object): ['apple', 'orange']\n\n\n\nConvert a DataFrame column to categorical by assigning the result of astype('category')."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-creating-categorical-directly",
    "href": "qmd/pandas3ed7.html#categorical-data-creating-categorical-directly",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Creating Categorical Directly",
    "text": "7.5 Categorical Data: Creating Categorical Directly\n\nmy_categories = pd.Categorical(['foo', 'bar', 'baz', 'foo', 'bar'])\nmy_categories\n\n['foo', 'bar', 'baz', 'foo', 'bar']\nCategories (3, object): ['bar', 'baz', 'foo']\n\n\n\nCreate Categorical objects directly from Python sequences."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-from_codes-constructor",
    "href": "qmd/pandas3ed7.html#categorical-data-from_codes-constructor",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: from_codes() Constructor",
    "text": "7.5 Categorical Data: from_codes() Constructor\n\ncategories = ['foo', 'bar', 'baz']\ncodes = [0, 1, 2, 0, 0, 1]\nmy_cats_2 = pd.Categorical.from_codes(codes, categories)\nmy_cats_2\n\n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo', 'bar', 'baz']\n\n\n\nfrom_codes(codes, categories): Creates a Categorical from existing codes and categories."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-ordered-categories-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-ordered-categories-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Ordered Categories (Part 1)",
    "text": "7.5 Categorical Data: Ordered Categories (Part 1)\n\nordered_cat = pd.Categorical.from_codes(codes, categories,\n                                        ordered=True)\nordered_cat\n\n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo' &lt; 'bar' &lt; 'baz']"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-ordered-categories-part-2",
    "href": "qmd/pandas3ed7.html#categorical-data-ordered-categories-part-2",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Ordered Categories (Part 2)",
    "text": "7.5 Categorical Data: Ordered Categories (Part 2)\n\nmy_cats_2.as_ordered() # unordered categorical instance can be made ordered\n\n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo' &lt; 'bar' &lt; 'baz']\n\n\n\nordered=True: Indicates that the categories have a meaningful order.\nBy default, categories are unordered."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-computations-with-categoricals-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-computations-with-categoricals-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Computations with Categoricals (Part 1)",
    "text": "7.5 Categorical Data: Computations with Categoricals (Part 1)\n\nUsing Categorical generally behaves the same as the non-encoded version (e.g., string array).\nSome pandas functions (like groupby) perform better with categoricals.\n\n\nrng = np.random.default_rng(seed=12345)\ndraws = rng.standard_normal(1000)\ndraws[:5]\n\narray([-1.42382504,  1.26372846, -0.87066174, -0.25917323, -0.07534331])"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-qcut-and-categoricals-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-qcut-and-categoricals-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: qcut() and Categoricals (Part 1)",
    "text": "7.5 Categorical Data: qcut() and Categoricals (Part 1)\n\nbins = pd.qcut(draws, 4) # quartile binning\nbins\n\n[(-3.121, -0.675], (0.687, 3.211], (-3.121, -0.675], (-0.675, 0.0134], (-0.675, 0.0134], ..., (0.0134, 0.687], (0.0134, 0.687], (-0.675, 0.0134], (0.0134, 0.687], (-0.675, 0.0134]]\nLength: 1000\nCategories (4, interval[float64, right]): [(-3.121, -0.675] &lt; (-0.675, 0.0134] &lt; (0.0134, 0.687] &lt; (0.687, 3.211]]"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-qcut-and-categoricals-part-2",
    "href": "qmd/pandas3ed7.html#categorical-data-qcut-and-categoricals-part-2",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: qcut() and Categoricals (Part 2)",
    "text": "7.5 Categorical Data: qcut() and Categoricals (Part 2)\n\nbins = pd.qcut(draws, 4, labels=['Q1', 'Q2', 'Q3', 'Q4'])\nbins\n\n['Q1', 'Q4', 'Q1', 'Q2', 'Q2', ..., 'Q3', 'Q3', 'Q2', 'Q3', 'Q2']\nLength: 1000\nCategories (4, object): ['Q1' &lt; 'Q2' &lt; 'Q3' &lt; 'Q4']\n\n\n\nbins.codes[:10]\n\narray([0, 3, 0, 1, 1, 0, 0, 2, 2, 0], dtype=int8)\n\n\n\npd.qcut() returns a Categorical object.\nlabels argument to give names."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-groupby-with-categoricals-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-groupby-with-categoricals-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: groupby() with Categoricals (Part 1)",
    "text": "7.5 Categorical Data: groupby() with Categoricals (Part 1)\n\nbins = pd.Series(bins, name='quartile')\nresults = (pd.Series(draws)\n           .groupby(bins)\n           .agg(['count', 'min', 'max'])\n           .reset_index())\nresults\n\n/tmp/ipykernel_3050/2483392743.py:3: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  .groupby(bins)\n\n\n\n\n\n\n\n\n\nquartile\ncount\nmin\nmax\n\n\n\n\n0\nQ1\n250\n-3.119609\n-0.678494\n\n\n1\nQ2\n250\n-0.673305\n0.008009\n\n\n2\nQ3\n250\n0.018753\n0.686183\n\n\n3\nQ4\n250\n0.688282\n3.211418"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-groupby-with-categoricals-part-2",
    "href": "qmd/pandas3ed7.html#categorical-data-groupby-with-categoricals-part-2",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: groupby() with Categoricals (Part 2)",
    "text": "7.5 Categorical Data: groupby() with Categoricals (Part 2)\n\nresults['quartile']\n\n0    Q1\n1    Q2\n2    Q3\n3    Q4\nName: quartile, dtype: category\nCategories (4, object): ['Q1' &lt; 'Q2' &lt; 'Q3' &lt; 'Q4']\n\n\n\nThe ‚Äòquartile‚Äô column in the result retains the original categorical information."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-performance-benefits-part-1",
    "href": "qmd/pandas3ed7.html#categorical-data-performance-benefits-part-1",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Performance Benefits (Part 1)",
    "text": "7.5 Categorical Data: Performance Benefits (Part 1)\n\nN = 10_000_000\nlabels = pd.Series(['foo', 'bar', 'baz', 'qux'] * (N // 4))\ncategories = labels.astype('category')"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-performance-benefits-part-2",
    "href": "qmd/pandas3ed7.html#categorical-data-performance-benefits-part-2",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Performance Benefits (Part 2)",
    "text": "7.5 Categorical Data: Performance Benefits (Part 2)\n\nlabels.memory_usage(deep=True)\n\n520000132\n\n\n\ncategories.memory_usage(deep=True)\n\n10000512\n\n\n\nCategoricals use significantly less memory than strings."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-categorical-methods",
    "href": "qmd/pandas3ed7.html#categorical-data-categorical-methods",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Categorical Methods",
    "text": "7.5 Categorical Data: Categorical Methods\n\nSeries containing categorical data have special methods (similar to Series.str).\nAccessed via the cat accessor.\n\n\ns = pd.Series(['a', 'b', 'c', 'd'] * 2)\ncat_s = s.astype('category')\ncat_s\n\n0    a\n1    b\n2    c\n3    d\n4    a\n5    b\n6    c\n7    d\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-cat-accessor",
    "href": "qmd/pandas3ed7.html#categorical-data-cat-accessor",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: cat Accessor",
    "text": "7.5 Categorical Data: cat Accessor\n\ncat_s.cat.codes\n\n0    0\n1    1\n2    2\n3    3\n4    0\n5    1\n6    2\n7    3\ndtype: int8\n\n\n\ncat_s.cat.categories\n\nIndex(['a', 'b', 'c', 'd'], dtype='object')\n\n\n\nThe cat accessor provides access to categorical methods and attributes."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-set_categories",
    "href": "qmd/pandas3ed7.html#categorical-data-set_categories",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: set_categories()",
    "text": "7.5 Categorical Data: set_categories()\n\nactual_categories = ['a', 'b', 'c', 'd', 'e']\ncat_s2 = cat_s.cat.set_categories(actual_categories)\ncat_s2\n\n0    a\n1    b\n2    c\n3    d\n4    a\n5    b\n6    c\n7    d\ndtype: category\nCategories (5, object): ['a', 'b', 'c', 'd', 'e']\n\n\n\nset_categories(): Changes the set of categories.\nUseful when the data doesn‚Äôt include all possible categories."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-value_counts-with-set_categories",
    "href": "qmd/pandas3ed7.html#categorical-data-value_counts-with-set_categories",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: value_counts() with set_categories()",
    "text": "7.5 Categorical Data: value_counts() with set_categories()\n\ncat_s.value_counts()\n\na    2\nb    2\nc    2\nd    2\nName: count, dtype: int64\n\n\n\ncat_s2.value_counts()\n\na    2\nb    2\nc    2\nd    2\ne    0\nName: count, dtype: int64\n\n\n\nvalue_counts() respects the categories defined, even if some aren‚Äôt present in the data."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-remove_unused_categories",
    "href": "qmd/pandas3ed7.html#categorical-data-remove_unused_categories",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: remove_unused_categories()",
    "text": "7.5 Categorical Data: remove_unused_categories()\n\ncat_s3 = cat_s[cat_s.isin(['a', 'b'])]\ncat_s3\n\n0    a\n1    b\n4    a\n5    b\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\n\n\ncat_s3.cat.remove_unused_categories()\n\n0    a\n1    b\n4    a\n5    b\ndtype: category\nCategories (2, object): ['a', 'b']\n\n\n\nremove_unused_categories(): Removes categories that don‚Äôt appear in the data.\nUseful for memory savings after filtering."
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-categorical-methods---summary",
    "href": "qmd/pandas3ed7.html#categorical-data-categorical-methods---summary",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Categorical methods - Summary",
    "text": "7.5 Categorical Data: Categorical methods - Summary\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\nadd_categories\nAppend new (unused) categories at end of existing categories\n\n\nas_ordered\nMake categories ordered\n\n\nas_unordered\nMake categories unordered\n\n\nremove_categories\nRemove categories, setting any removed values to null\n\n\nremove_unused_categories\nRemove any category values that do not appear in the data\n\n\nrename_categories\nReplace categories with indicated set of new category names; cannot change the number of categories\n\n\nreorder_categories\nBehaves like rename_categories, but can also change the result to have ordered categories\n\n\nset_categories\nReplace the categories with the indicated set of new categories; can add or remove categories"
  },
  {
    "objectID": "qmd/pandas3ed7.html#categorical-data-creating-dummy-variables",
    "href": "qmd/pandas3ed7.html#categorical-data-creating-dummy-variables",
    "title": "Python for Data Analysis",
    "section": "7.5 Categorical Data: Creating Dummy Variables",
    "text": "7.5 Categorical Data: Creating Dummy Variables\n\nConverting categorical data into dummy variables (one-hot encoding).\nUsed in statistics and machine learning.\n\n\ncat_s = pd.Series(['a', 'b', 'c', 'd'] * 2, dtype='category')\npd.get_dummies(cat_s)\n\n\n\n\n\n\n\n\na\nb\nc\nd\n\n\n\n\n0\nTrue\nFalse\nFalse\nFalse\n\n\n1\nFalse\nTrue\nFalse\nFalse\n\n\n2\nFalse\nFalse\nTrue\nFalse\n\n\n3\nFalse\nFalse\nFalse\nTrue\n\n\n4\nTrue\nFalse\nFalse\nFalse\n\n\n5\nFalse\nTrue\nFalse\nFalse\n\n\n6\nFalse\nFalse\nTrue\nFalse\n\n\n7\nFalse\nFalse\nFalse\nTrue\n\n\n\n\n\n\n\n\npd.get_dummies(categorical_series) creates a DataFrame with dummy variables."
  },
  {
    "objectID": "qmd/pandas3ed7.html#conclusion",
    "href": "qmd/pandas3ed7.html#conclusion",
    "title": "Python for Data Analysis",
    "section": "7.6 Conclusion",
    "text": "7.6 Conclusion\n\nEffective data preparation is crucial for efficient data analysis.\nThis chapter covered many data cleaning and transformation techniques.\nThe next chapter explores joining and grouping functionality in pandas."
  },
  {
    "objectID": "qmd/pandas3ed7.html#summary",
    "href": "qmd/pandas3ed7.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary",
    "text": "Summary\n\nData cleaning is a significant part of data analysis, often taking up 80% or more of an analyst‚Äôs time.\nPandas provides powerful tools for handling missing data (NaN, None), including dropna, fillna, isna, and notna.\nData transformation operations include removing duplicates (duplicated, drop_duplicates), mapping values (map), replacing values (replace), renaming indexes (rename), binning (cut, qcut), outlier detection, permutation, sampling (sample), and creating dummy variables (get_dummies).\nExtension data types (Int64Dtype, StringDtype, CategoricalDtype, etc.) offer improved handling of specific data types and missing values.\nString manipulation can be done efficiently with Python‚Äôs built-in string methods, regular expressions (re module), and pandas‚Äô str accessor.\nThe Categorical type provides memory and performance benefits for data with repeated values, offering methods like cat.codes, cat.categories, set_categories, and remove_unused_categories."
  },
  {
    "objectID": "qmd/pandas3ed7.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed7.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion ü§î",
    "text": "Thoughts and Discussion ü§î\n\nReflect on a time you encountered messy data. Which of the techniques discussed in this chapter would have been most helpful?\nWhy is it important to handle missing data appropriately? What are the potential consequences of ignoring or mishandling it?\nHow does the Categorical type improve efficiency compared to storing data as strings? When would you choose to use Categorical data?\nCan you think of situations where you might not want to drop duplicate data?\nExplore the documentation for the re module and pandas‚Äô str accessor. What other useful functions can you find?\nConsider the tradeoffs between cut() and qcut(). When would you use one versus the other?\nDiscuss scenarios for using ordered vs.¬†unordered categorical data.\nWhy might you want to cap outlier to a certain range instead of simply remove all outliers?"
  },
  {
    "objectID": "qmd/pandas3ed10.html",
    "href": "qmd/pandas3ed10.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This section focuses on data aggregation and group operations, a critical part of data analysis. We‚Äôll see how to categorize data and apply functions to each group‚Äîa fundamental step in many data workflows."
  },
  {
    "objectID": "qmd/pandas3ed10.html#what-well-learn",
    "href": "qmd/pandas3ed10.html#what-well-learn",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This section focuses on data aggregation and group operations, a critical part of data analysis. We‚Äôll see how to categorize data and apply functions to each group‚Äîa fundamental step in many data workflows."
  },
  {
    "objectID": "qmd/pandas3ed10.html#key-operations",
    "href": "qmd/pandas3ed10.html#key-operations",
    "title": "Python for Data Analysis",
    "section": "Key Operations ‚öôÔ∏è",
    "text": "Key Operations ‚öôÔ∏è\nWe‚Äôll cover:\n\nSplitting a pandas object into groups.\nCalculating group summary statistics (count, mean, etc.).\nApplying transformations within groups.\nComputing pivot tables and cross-tabulations.\nPerforming quantile analysis.\nUsing transform and apply."
  },
  {
    "objectID": "qmd/pandas3ed10.html#why-is-this-important",
    "href": "qmd/pandas3ed10.html#why-is-this-important",
    "title": "Python for Data Analysis",
    "section": "Why is this important? üìà",
    "text": "Why is this important? üìà\nGrouping and aggregating data helps us:\n\nGain insights by summarizing large datasets.\nCompare different groups.\nPrepare data for analysis or visualization.\nUncover patterns."
  },
  {
    "objectID": "qmd/pandas3ed10.html#the-split-apply-combine-paradigm",
    "href": "qmd/pandas3ed10.html#the-split-apply-combine-paradigm",
    "title": "Python for Data Analysis",
    "section": "The Split-Apply-Combine Paradigm üí°",
    "text": "The Split-Apply-Combine Paradigm üí°\nHadley Wickham‚Äôs ‚Äúsplit-apply-combine‚Äù paradigm is a powerful way to think about data manipulation.\n\nSplit: Divide data into groups based on ‚Äúkeys‚Äù.\nApply: Apply a function to each group.\nCombine: Combine results into a final output."
  },
  {
    "objectID": "qmd/pandas3ed10.html#visualizing-split-apply-combine",
    "href": "qmd/pandas3ed10.html#visualizing-split-apply-combine",
    "title": "Python for Data Analysis",
    "section": "Visualizing Split-Apply-Combine üìä",
    "text": "Visualizing Split-Apply-Combine üìä\n\n\n\n\n\ngraph LR\n    A[Data] --&gt; B(Split by Key)\n    B --&gt; C1[Group 1]\n    B --&gt; C2[Group 2]\n    B --&gt; C3[Group 3]\n    C1 --&gt; D1(Apply Function)\n    C2 --&gt; D2(Apply Function)\n    C3 --&gt; D3(Apply Function)\n    D1 --&gt; E[Combine Results]\n    D2 --&gt; E\n    D3 --&gt; E"
  },
  {
    "objectID": "qmd/pandas3ed10.html#grouping-keys",
    "href": "qmd/pandas3ed10.html#grouping-keys",
    "title": "Python for Data Analysis",
    "section": "Grouping Keys üîë",
    "text": "Grouping Keys üîë\nKeys can be:\n\nLists or arrays.\nDataFrame column names.\nDictionaries or Series mapping values to group names.\nFunctions applied to the index.\n\nThese are essentially shortcuts for an array of values to split the object."
  },
  {
    "objectID": "qmd/pandas3ed10.html#example-simple-group-aggregation",
    "href": "qmd/pandas3ed10.html#example-simple-group-aggregation",
    "title": "Python for Data Analysis",
    "section": "Example: Simple Group Aggregation",
    "text": "Example: Simple Group Aggregation\n\n\n\nSplit-Apply-Combine\n\n\n\nKey and Data: Table with ‚ÄòKey‚Äô and ‚ÄòData‚Äô columns.\nSplit: Data split into groups (A, B, C) by ‚ÄòKey‚Äô.\nApply: Sum function applied to each group‚Äôs ‚ÄòData‚Äô.\nCombine: Sums combined into a new table."
  },
  {
    "objectID": "qmd/pandas3ed10.html#grouping-by-a-single-column",
    "href": "qmd/pandas3ed10.html#grouping-by-a-single-column",
    "title": "Python for Data Analysis",
    "section": "Grouping by a Single Column",
    "text": "Grouping by a Single Column\nCalculate the mean of data1 for each group in key1:\n\ngrouped = df[\"data1\"].groupby(df[\"key1\"])\ngrouped.mean()\n\nkey1\na   -0.572646\nb   -0.816846\nName: data1, dtype: float64\n\n\n\ndf[\"data1\"]: Selects data1.\n.groupby(df[\"key1\"]): Groups by key1.\ngrouped: A GroupBy object storing group info.\n.mean(): Calculates the mean for each group."
  },
  {
    "objectID": "qmd/pandas3ed10.html#grouping-by-multiple-columns",
    "href": "qmd/pandas3ed10.html#grouping-by-multiple-columns",
    "title": "Python for Data Analysis",
    "section": "Grouping by Multiple Columns",
    "text": "Grouping by Multiple Columns\nGroup by multiple columns (hierarchical index):\n\ngrouped = df.groupby([\"key1\", \"key2\"])\ngrouped.agg({\"data1\": [\"mean\", \"std\"],\n             \"data2\": [\"mean\", \"std\"]})\n\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\n\n\nmean\nstd\nmean\nstd\n\n\nkey1\nkey2\n\n\n\n\n\n\n\n\na\n1\n-0.910569\n0.116449\n-1.252908\n1.180116\n\n\n2\n0.103200\nNaN\n0.044061\nNaN\n\n\nb\n1\n-0.453123\nNaN\n0.925069\nNaN\n\n\n2\n-1.180570\nNaN\n-0.347519\nNaN\n\n\n\n\n\n\n\nData is grouped by combinations of key1 and key2."
  },
  {
    "objectID": "qmd/pandas3ed10.html#unstacking",
    "href": "qmd/pandas3ed10.html#unstacking",
    "title": "Python for Data Analysis",
    "section": "Unstacking",
    "text": "Unstacking\nunstack() reshapes the result:\n\nmeans = df.groupby([\"key1\", \"key2\"])[\"data1\"].mean()\nmeans.unstack()\n\n\n\n\n\n\n\nkey2\n1\n2\n\n\nkey1\n\n\n\n\n\n\na\n-0.910569\n0.10320\n\n\nb\n-0.453123\n-1.18057"
  },
  {
    "objectID": "qmd/pandas3ed10.html#grouping-with-series-and-arrays",
    "href": "qmd/pandas3ed10.html#grouping-with-series-and-arrays",
    "title": "Python for Data Analysis",
    "section": "Grouping with Series and Arrays",
    "text": "Grouping with Series and Arrays\nKeys can be external Series or arrays:\n\nstates = np.array([\"OH\", \"CA\", \"CA\", \"OH\", \"OH\", \"CA\", \"OH\"])\nyears = np.array([2005, 2005, 2006, 2005, 2006, 2005, 2006])\n\n# Create new df to match length of states and years\ndf_ext = pd.DataFrame({\n    \"key1\": [\"a\", \"a\", \"b\", \"b\", \"a\", \"b\", \"a\"],\n    \"key2\": [1, 2, 1, 2, 1, 2, 1],\n    \"data1\": np.random.randn(7),\n    \"data2\": np.random.randn(7)\n})\n\nresult = df_ext[\"data1\"].groupby([states, years]).mean()\nprint(\"\\nGrouping Result:\")\nprint(result)\n\nprint(\"\\nUnstacked Result:\")\nprint(result.unstack())\n\n\nGrouping Result:\nCA  2005    0.637000\n    2006   -0.206435\nOH  2005   -0.266919\n    2006   -0.390504\nName: data1, dtype: float64\n\nUnstacked Result:\n        2005      2006\nCA  0.637000 -0.206435\nOH -0.266919 -0.390504\n\n\nHere, we group data1 by external arrays states and years."
  },
  {
    "objectID": "qmd/pandas3ed10.html#grouping-using-column-names-directly",
    "href": "qmd/pandas3ed10.html#grouping-using-column-names-directly",
    "title": "Python for Data Analysis",
    "section": "Grouping Using Column Names Directly",
    "text": "Grouping Using Column Names Directly\nUse column names directly if grouping info is in the DataFrame:\n\ndf.groupby(\"key1\").mean()\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\nkey1\n\n\n\n\n\n\n\na\n1.333333\n-0.572646\n-0.820585\n\n\nb\n1.500000\n-0.816846\n0.288775\n\n\n\n\n\n\n\nNon-numeric column key1 is automatically excluded as a nuisance column\n\ndf.groupby([\"key1\", \"key2\"]).mean()\n\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\nkey1\nkey2\n\n\n\n\n\n\na\n1\n-0.910569\n-1.252908\n\n\n2\n0.103200\n0.044061\n\n\nb\n1\n-0.453123\n0.925069\n\n\n2\n-1.180570\n-0.347519"
  },
  {
    "objectID": "qmd/pandas3ed10.html#group-size",
    "href": "qmd/pandas3ed10.html#group-size",
    "title": "Python for Data Analysis",
    "section": "Group Size",
    "text": "Group Size\nsize() shows the number of data points in each group:\n\ndf.groupby([\"key1\", \"key2\"]).size()\n\nkey1  key2\na     1       2\n      2       1\nb     1       1\n      2       1\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#handling-missing-values-in-group-keys",
    "href": "qmd/pandas3ed10.html#handling-missing-values-in-group-keys",
    "title": "Python for Data Analysis",
    "section": "Handling Missing Values in Group Keys",
    "text": "Handling Missing Values in Group Keys\nMissing values in group keys are excluded by default. Include them with dropna=False:\n\ndf.groupby(\"key1\", dropna=False).size()\n\nkey1\na    3\nb    2\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#iterating-with-a-single-key",
    "href": "qmd/pandas3ed10.html#iterating-with-a-single-key",
    "title": "Python for Data Analysis",
    "section": "Iterating with a Single Key",
    "text": "Iterating with a Single Key\nGroupBy supports iteration, yielding group name and data chunk:\n\nfor name, group in df.groupby(\"key1\"):\n    print(f\"Group Name: {name}\")\n    print(group)\n\nGroup Name: a\n  key1  key2     data1     data2\n0    a     1 -0.828227 -2.087376\n1    a     2  0.103200  0.044061\n4    a     1 -0.992911 -0.418440\nGroup Name: b\n  key1  key2     data1     data2\n2    b     1 -0.453123  0.925069\n3    b     2 -1.180570 -0.347519"
  },
  {
    "objectID": "qmd/pandas3ed10.html#iterating-with-multiple-keys",
    "href": "qmd/pandas3ed10.html#iterating-with-multiple-keys",
    "title": "Python for Data Analysis",
    "section": "Iterating with Multiple Keys",
    "text": "Iterating with Multiple Keys\nWith multiple keys, the group name is a tuple:\n\nfor (k1, k2), group in df.groupby([\"key1\", \"key2\"]):\n    print(f\"Group Keys: {(k1, k2)}\")\n    print(group)\n\nGroup Keys: ('a', np.int64(1))\n  key1  key2     data1     data2\n0    a     1 -0.828227 -2.087376\n4    a     1 -0.992911 -0.418440\nGroup Keys: ('a', np.int64(2))\n  key1  key2   data1     data2\n1    a     2  0.1032  0.044061\nGroup Keys: ('b', np.int64(1))\n  key1  key2     data1     data2\n2    b     1 -0.453123  0.925069\nGroup Keys: ('b', np.int64(2))\n  key1  key2    data1     data2\n3    b     2 -1.18057 -0.347519"
  },
  {
    "objectID": "qmd/pandas3ed10.html#creating-a-dictionary-of-data-pieces",
    "href": "qmd/pandas3ed10.html#creating-a-dictionary-of-data-pieces",
    "title": "Python for Data Analysis",
    "section": "Creating a Dictionary of Data Pieces",
    "text": "Creating a Dictionary of Data Pieces\nCreate a dictionary of group data:\n\npieces = dict(list(df.groupby(\"key1\")))\npieces[\"b\"]\n\n\n\n\n\n\n\n\nkey1\nkey2\ndata1\ndata2\n\n\n\n\n2\nb\n1\n-0.453123\n0.925069\n\n\n3\nb\n2\n-1.180570\n-0.347519"
  },
  {
    "objectID": "qmd/pandas3ed10.html#selecting-a-single-column-seriesgroupby",
    "href": "qmd/pandas3ed10.html#selecting-a-single-column-seriesgroupby",
    "title": "Python for Data Analysis",
    "section": "Selecting a Single Column (SeriesGroupBy)",
    "text": "Selecting a Single Column (SeriesGroupBy)\nIndex the GroupBy object to aggregate specific columns:\n\ndf.groupby([\"key1\", \"key2\"])[\"data2\"].mean()\n\nkey1  key2\na     1      -1.252908\n      2       0.044061\nb     1       0.925069\n      2      -0.347519\nName: data2, dtype: float64\n\n\nThis is shorthand for df[\"data2\"].groupby([df[\"key1\"], df[\"key2\"]]).mean()."
  },
  {
    "objectID": "qmd/pandas3ed10.html#selecting-multiple-columns-dataframegroupby",
    "href": "qmd/pandas3ed10.html#selecting-multiple-columns-dataframegroupby",
    "title": "Python for Data Analysis",
    "section": "Selecting Multiple Columns (DataFrameGroupBy)",
    "text": "Selecting Multiple Columns (DataFrameGroupBy)\n\ndf.groupby([\"key1\", \"key2\"])[[\"data2\"]].mean()\n\n\n\n\n\n\n\n\n\ndata2\n\n\nkey1\nkey2\n\n\n\n\n\na\n1\n-1.252908\n\n\n2\n0.044061\n\n\nb\n1\n0.925069\n\n\n2\n-0.347519\n\n\n\n\n\n\n\nThis is equivalent to df[[\"data2\"]].groupby([df[\"key1\"], df[\"key2\"]]).mean()."
  },
  {
    "objectID": "qmd/pandas3ed10.html#optimized-aggregation-methods",
    "href": "qmd/pandas3ed10.html#optimized-aggregation-methods",
    "title": "Python for Data Analysis",
    "section": "Optimized Aggregation Methods",
    "text": "Optimized Aggregation Methods\nAggregation transforms arrays into scalars. Optimized methods:\n\ncount, sum, mean, median, std, var\nmin, max, prod, first, last\nany, all, cummin, cummax, cumsum, cumprod\nnth, ohlc, quantile, rank, size"
  },
  {
    "objectID": "qmd/pandas3ed10.html#using-your-own-aggregation-functions",
    "href": "qmd/pandas3ed10.html#using-your-own-aggregation-functions",
    "title": "Python for Data Analysis",
    "section": "Using Your Own Aggregation Functions",
    "text": "Using Your Own Aggregation Functions\nDefine custom functions with agg:\n\ndef peak_to_peak(arr):\n    return arr.max() - arr.min()\n\ngrouped = df.groupby(\"key1\")\ngrouped.agg(peak_to_peak)\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\nkey1\n\n\n\n\n\n\n\na\n1\n1.096112\n2.131437\n\n\nb\n1\n0.727447\n1.272588"
  },
  {
    "objectID": "qmd/pandas3ed10.html#the-describe-method",
    "href": "qmd/pandas3ed10.html#the-describe-method",
    "title": "Python for Data Analysis",
    "section": "The describe Method",
    "text": "The describe Method\nUse non-aggregation methods like describe:\n\ngrouped.describe()\n\n\n\n\n\n\n\n\nkey2\ndata1\ndata2\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\ncount\nmean\n...\n75%\nmax\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nkey1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\na\n3.0\n1.333333\n0.577350\n1.0\n1.00\n1.0\n1.50\n2.0\n3.0\n-0.572646\n...\n-0.362514\n0.103200\n3.0\n-0.820585\n1.121181\n-2.087376\n-1.252908\n-0.418440\n-0.187190\n0.044061\n\n\nb\n2.0\n1.500000\n0.707107\n1.0\n1.25\n1.5\n1.75\n2.0\n2.0\n-0.816846\n...\n-0.634985\n-0.453123\n2.0\n0.288775\n0.899855\n-0.347519\n-0.029372\n0.288775\n0.606922\n0.925069\n\n\n\n\n2 rows √ó 24 columns"
  },
  {
    "objectID": "qmd/pandas3ed10.html#multiple-functions-on-a-single-column",
    "href": "qmd/pandas3ed10.html#multiple-functions-on-a-single-column",
    "title": "Python for Data Analysis",
    "section": "Multiple Functions on a Single Column",
    "text": "Multiple Functions on a Single Column\nLoad a tips dataset:\n\ntips = pd.read_csv(\"examples/tips.csv\")  # Ensure 'examples' folder with 'tips.csv' exists\ntips[\"tip_pct\"] = tips[\"tip\"] / tips[\"total_bill\"]\n\nApply multiple functions:\n\ngrouped = tips.groupby([\"day\", \"smoker\"])\ngrouped_pct = grouped[\"tip_pct\"]\ngrouped_pct.agg([\"mean\", \"std\", peak_to_peak])\n\n\n\n\n\n\n\n\n\nmean\nstd\npeak_to_peak\n\n\nday\nsmoker\n\n\n\n\n\n\n\nFri\nNo\n0.151650\n0.028123\n0.067349\n\n\nYes\n0.174783\n0.051293\n0.159925\n\n\nSat\nNo\n0.158048\n0.039767\n0.235193\n\n\nYes\n0.147906\n0.061375\n0.290095\n\n\nSun\nNo\n0.160113\n0.042347\n0.193226\n\n\nYes\n0.187250\n0.154134\n0.644685\n\n\nThur\nNo\n0.160298\n0.038774\n0.193350\n\n\nYes\n0.163863\n0.039389\n0.151240"
  },
  {
    "objectID": "qmd/pandas3ed10.html#custom-column-names",
    "href": "qmd/pandas3ed10.html#custom-column-names",
    "title": "Python for Data Analysis",
    "section": "Custom Column Names",
    "text": "Custom Column Names\nProvide custom names:\n\ngrouped_pct.agg([(\"average\", \"mean\"), (\"stdev\", np.std)])\n\n/tmp/ipykernel_3111/1734782830.py:1: FutureWarning: The provided callable &lt;function std at 0x7f30d8137d80&gt; is currently using SeriesGroupBy.std. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"std\" instead.\n  grouped_pct.agg([(\"average\", \"mean\"), (\"stdev\", np.std)])\n\n\n\n\n\n\n\n\n\n\naverage\nstdev\n\n\nday\nsmoker\n\n\n\n\n\n\nFri\nNo\n0.151650\n0.028123\n\n\nYes\n0.174783\n0.051293\n\n\nSat\nNo\n0.158048\n0.039767\n\n\nYes\n0.147906\n0.061375\n\n\nSun\nNo\n0.160113\n0.042347\n\n\nYes\n0.187250\n0.154134\n\n\nThur\nNo\n0.160298\n0.038774\n\n\nYes\n0.163863\n0.039389"
  },
  {
    "objectID": "qmd/pandas3ed10.html#different-functions-for-different-columns",
    "href": "qmd/pandas3ed10.html#different-functions-for-different-columns",
    "title": "Python for Data Analysis",
    "section": "Different Functions for Different Columns",
    "text": "Different Functions for Different Columns\nApply different functions to different columns:\n\nfunctions = [\"count\", \"mean\", \"max\"]\nresult = grouped[[\"tip_pct\", \"total_bill\"]].agg(functions)\nresult\n\n\n\n\n\n\n\n\n\ntip_pct\ntotal_bill\n\n\n\n\ncount\nmean\nmax\ncount\nmean\nmax\n\n\nday\nsmoker\n\n\n\n\n\n\n\n\n\n\nFri\nNo\n4\n0.151650\n0.187735\n4\n18.420000\n22.75\n\n\nYes\n15\n0.174783\n0.263480\n15\n16.813333\n40.17\n\n\nSat\nNo\n45\n0.158048\n0.291990\n45\n19.661778\n48.33\n\n\nYes\n42\n0.147906\n0.325733\n42\n21.276667\n50.81\n\n\nSun\nNo\n57\n0.160113\n0.252672\n57\n20.506667\n48.17\n\n\nYes\n19\n0.187250\n0.710345\n19\n24.120000\n45.35\n\n\nThur\nNo\n45\n0.160298\n0.266312\n45\n17.113111\n41.19\n\n\nYes\n17\n0.163863\n0.241255\n17\n19.190588\n43.11\n\n\n\n\n\n\n\n\ngrouped.agg({\"tip\" : np.max, \"size\" : \"sum\"})\n\n/tmp/ipykernel_3111/2044707828.py:1: FutureWarning: The provided callable &lt;function max at 0x7f30d8137240&gt; is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n  grouped.agg({\"tip\" : np.max, \"size\" : \"sum\"})\n\n\n\n\n\n\n\n\n\n\ntip\nsize\n\n\nday\nsmoker\n\n\n\n\n\n\nFri\nNo\n3.50\n9\n\n\nYes\n4.73\n31\n\n\nSat\nNo\n9.00\n115\n\n\nYes\n10.00\n104\n\n\nSun\nNo\n6.00\n167\n\n\nYes\n6.50\n49\n\n\nThur\nNo\n6.70\n112\n\n\nYes\n5.00\n40\n\n\n\n\n\n\n\n\ngrouped.agg({\"tip_pct\" : [\"min\", \"max\", \"mean\", \"std\"],\n             \"size\" : \"sum\"})\n\n\n\n\n\n\n\n\n\ntip_pct\nsize\n\n\n\n\nmin\nmax\nmean\nstd\nsum\n\n\nday\nsmoker\n\n\n\n\n\n\n\n\n\nFri\nNo\n0.120385\n0.187735\n0.151650\n0.028123\n9\n\n\nYes\n0.103555\n0.263480\n0.174783\n0.051293\n31\n\n\nSat\nNo\n0.056797\n0.291990\n0.158048\n0.039767\n115\n\n\nYes\n0.035638\n0.325733\n0.147906\n0.061375\n104\n\n\nSun\nNo\n0.059447\n0.252672\n0.160113\n0.042347\n167\n\n\nYes\n0.065660\n0.710345\n0.187250\n0.154134\n49\n\n\nThur\nNo\n0.072961\n0.266312\n0.160298\n0.038774\n112\n\n\nYes\n0.090014\n0.241255\n0.163863\n0.039389\n40"
  },
  {
    "objectID": "qmd/pandas3ed10.html#the-power-of-apply",
    "href": "qmd/pandas3ed10.html#the-power-of-apply",
    "title": "Python for Data Analysis",
    "section": "The Power of apply üí™",
    "text": "The Power of apply üí™\napply is the most general GroupBy method. Splits, applies a function, concatenates."
  },
  {
    "objectID": "qmd/pandas3ed10.html#example-selecting-top-rows",
    "href": "qmd/pandas3ed10.html#example-selecting-top-rows",
    "title": "Python for Data Analysis",
    "section": "Example: Selecting Top Rows",
    "text": "Example: Selecting Top Rows\n\ndef top(df, n=5, column=\"tip_pct\"):\n    return df.sort_values(column, ascending=False)[:n]\n\ntips.groupby(\"smoker\").apply(top)\n\n/tmp/ipykernel_3111/2138158964.py:4: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  tips.groupby(\"smoker\").apply(top)\n\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\ntip_pct\n\n\nsmoker\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n232\n11.61\n3.39\nNo\nSat\nDinner\n2\n0.291990\n\n\n149\n7.51\n2.00\nNo\nThur\nLunch\n2\n0.266312\n\n\n51\n10.29\n2.60\nNo\nSun\nDinner\n2\n0.252672\n\n\n185\n20.69\n5.00\nNo\nSun\nDinner\n5\n0.241663\n\n\n88\n24.71\n5.85\nNo\nThur\nLunch\n2\n0.236746\n\n\nYes\n172\n7.25\n5.15\nYes\nSun\nDinner\n2\n0.710345\n\n\n178\n9.60\n4.00\nYes\nSun\nDinner\n2\n0.416667\n\n\n67\n3.07\n1.00\nYes\nSat\nDinner\n1\n0.325733\n\n\n183\n23.17\n6.50\nYes\nSun\nDinner\n4\n0.280535\n\n\n109\n14.31\n4.00\nYes\nSat\nDinner\n2\n0.279525"
  },
  {
    "objectID": "qmd/pandas3ed10.html#passing-arguments-to-apply",
    "href": "qmd/pandas3ed10.html#passing-arguments-to-apply",
    "title": "Python for Data Analysis",
    "section": "Passing Arguments to apply",
    "text": "Passing Arguments to apply\n\ntips.groupby([\"smoker\", \"day\"]).apply(top, n=1, column=\"total_bill\")\n\n/tmp/ipykernel_3111/643835440.py:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  tips.groupby([\"smoker\", \"day\"]).apply(top, n=1, column=\"total_bill\")\n\n\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\ntip_pct\n\n\nsmoker\nday\n\n\n\n\n\n\n\n\n\n\n\n\nNo\nFri\n94\n22.75\n3.25\nNo\nFri\nDinner\n2\n0.142857\n\n\nSat\n212\n48.33\n9.00\nNo\nSat\nDinner\n4\n0.186220\n\n\nSun\n156\n48.17\n5.00\nNo\nSun\nDinner\n6\n0.103799\n\n\nThur\n142\n41.19\n5.00\nNo\nThur\nLunch\n5\n0.121389\n\n\nYes\nFri\n95\n40.17\n4.73\nYes\nFri\nDinner\n4\n0.117750\n\n\nSat\n170\n50.81\n10.00\nYes\nSat\nDinner\n3\n0.196812\n\n\nSun\n182\n45.35\n3.50\nYes\nSun\nDinner\n3\n0.077178\n\n\nThur\n197\n43.11\n5.00\nYes\nThur\nLunch\n4\n0.115982"
  },
  {
    "objectID": "qmd/pandas3ed10.html#suppressing-group-keys-in-apply",
    "href": "qmd/pandas3ed10.html#suppressing-group-keys-in-apply",
    "title": "Python for Data Analysis",
    "section": "Suppressing Group Keys in apply",
    "text": "Suppressing Group Keys in apply\nUse group_keys=False:\n\ntips.groupby(\"smoker\", group_keys=False).apply(top)\n\n/tmp/ipykernel_3111/3851957478.py:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  tips.groupby(\"smoker\", group_keys=False).apply(top)\n\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsmoker\nday\ntime\nsize\ntip_pct\n\n\n\n\n232\n11.61\n3.39\nNo\nSat\nDinner\n2\n0.291990\n\n\n149\n7.51\n2.00\nNo\nThur\nLunch\n2\n0.266312\n\n\n51\n10.29\n2.60\nNo\nSun\nDinner\n2\n0.252672\n\n\n185\n20.69\n5.00\nNo\nSun\nDinner\n5\n0.241663\n\n\n88\n24.71\n5.85\nNo\nThur\nLunch\n2\n0.236746\n\n\n172\n7.25\n5.15\nYes\nSun\nDinner\n2\n0.710345\n\n\n178\n9.60\n4.00\nYes\nSun\nDinner\n2\n0.416667\n\n\n67\n3.07\n1.00\nYes\nSat\nDinner\n1\n0.325733\n\n\n183\n23.17\n6.50\nYes\nSun\nDinner\n4\n0.280535\n\n\n109\n14.31\n4.00\nYes\nSat\nDinner\n2\n0.279525"
  },
  {
    "objectID": "qmd/pandas3ed10.html#using-cut-and-qcut-with-groupby",
    "href": "qmd/pandas3ed10.html#using-cut-and-qcut-with-groupby",
    "title": "Python for Data Analysis",
    "section": "Using cut and qcut with groupby",
    "text": "Using cut and qcut with groupby\nCombine cut/qcut with groupby for bucket/quantile analysis:\n\nframe = pd.DataFrame({\"data1\": np.random.standard_normal(1000),\n                      \"data2\": np.random.standard_normal(1000)})\nquartiles = pd.cut(frame[\"data1\"], 4)\n\ndef get_stats(group):\n    return pd.DataFrame(\n        {\"min\": group.min(), \"max\": group.max(),\n        \"count\": group.count(), \"mean\": group.mean()}\n    )\n\ngrouped = frame.groupby(quartiles)\ngrouped.apply(get_stats)\n\n/tmp/ipykernel_3111/1865646795.py:11: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n  grouped = frame.groupby(quartiles)\n\n\n\n\n\n\n\n\n\n\nmin\nmax\ncount\nmean\n\n\ndata1\n\n\n\n\n\n\n\n\n\n(-3.228, -1.637]\ndata1\n-3.221288\n-1.639488\n50\n-2.066513\n\n\ndata2\n-1.918682\n2.684554\n50\n0.149250\n\n\n(-1.637, -0.0521]\ndata1\n-1.630251\n-0.058553\n402\n-0.677207\n\n\ndata2\n-3.226470\n3.136015\n402\n0.027638\n\n\n(-0.0521, 1.533]\ndata1\n-0.051526\n1.530982\n494\n0.591743\n\n\ndata2\n-2.599320\n2.938889\n494\n0.089709\n\n\n(1.533, 3.117]\ndata1\n1.538144\n3.117138\n54\n1.940202\n\n\ndata2\n-2.846213\n2.187925\n54\n0.069491\n\n\n\n\n\n\n\nSame result could have been computed more simply with:\n\ngrouped.agg([\"min\", \"max\", \"count\", \"mean\"])\n\n\n\n\n\n\n\n\ndata1\ndata2\n\n\n\nmin\nmax\ncount\nmean\nmin\nmax\ncount\nmean\n\n\ndata1\n\n\n\n\n\n\n\n\n\n\n\n\n(-3.228, -1.637]\n-3.221288\n-1.639488\n50\n-2.066513\n-1.918682\n2.684554\n50\n0.149250\n\n\n(-1.637, -0.0521]\n-1.630251\n-0.058553\n402\n-0.677207\n-3.226470\n3.136015\n402\n0.027638\n\n\n(-0.0521, 1.533]\n-0.051526\n1.530982\n494\n0.591743\n-2.599320\n2.938889\n494\n0.089709\n\n\n(1.533, 3.117]\n1.538144\n3.117138\n54\n1.940202\n-2.846213\n2.187925\n54\n0.069491"
  },
  {
    "objectID": "qmd/pandas3ed10.html#equal-size-buckets-with-qcut",
    "href": "qmd/pandas3ed10.html#equal-size-buckets-with-qcut",
    "title": "Python for Data Analysis",
    "section": "Equal-Size Buckets with qcut",
    "text": "Equal-Size Buckets with qcut\n\nquartiles_samp = pd.qcut(frame[\"data1\"], 4, labels=False)\ngrouped = frame.groupby(quartiles_samp)\ngrouped.apply(get_stats)\n\n\n\n\n\n\n\n\n\nmin\nmax\ncount\nmean\n\n\ndata1\n\n\n\n\n\n\n\n\n\n0\ndata1\n-3.221288\n-0.610421\n250\n-1.219739\n\n\ndata2\n-2.870115\n3.136015\n250\n0.115811\n\n\n1\ndata1\n-0.609759\n0.079342\n250\n-0.280482\n\n\ndata2\n-3.226470\n3.015023\n250\n0.017650\n\n\n2\ndata1\n0.081676\n0.676443\n250\n0.370340\n\n\ndata2\n-2.512032\n2.938889\n250\n0.073670\n\n\n3\ndata1\n0.676470\n3.117138\n250\n1.215997\n\n\ndata2\n-2.846213\n2.576452\n250\n0.059437"
  },
  {
    "objectID": "qmd/pandas3ed10.html#filling-with-the-mean",
    "href": "qmd/pandas3ed10.html#filling-with-the-mean",
    "title": "Python for Data Analysis",
    "section": "Filling with the Mean",
    "text": "Filling with the Mean\n\ns = pd.Series(np.random.standard_normal(6))\ns[::2] = np.nan\ns.fillna(s.mean())\n\n0   -0.298818\n1    0.051989\n2   -0.298818\n3    0.446553\n4   -0.298818\n5   -1.394998\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#filling-with-group-specific-means",
    "href": "qmd/pandas3ed10.html#filling-with-group-specific-means",
    "title": "Python for Data Analysis",
    "section": "Filling with Group-Specific Means",
    "text": "Filling with Group-Specific Means\n\nstates = [\"Ohio\", \"New York\", \"Vermont\", \"Florida\",\n          \"Oregon\", \"Nevada\", \"California\", \"Idaho\"]\ngroup_key = [\"East\"] * 4 + [\"West\"] * 4\ndata = pd.Series(np.random.standard_normal(8), index=states)\ndata[[\"Vermont\", \"Nevada\", \"Idaho\"]] = np.nan\n\ndef fill_mean(group):\n    return group.fillna(group.mean())\n\ndata.groupby(group_key).apply(fill_mean)\n\nEast  Ohio          0.676004\n      New York     -0.107882\n      Vermont      -0.522394\n      Florida      -2.135306\nWest  Oregon       -0.916350\n      Nevada       -0.758723\n      California   -0.601097\n      Idaho        -0.758723\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#predefined-fill-values",
    "href": "qmd/pandas3ed10.html#predefined-fill-values",
    "title": "Python for Data Analysis",
    "section": "Predefined Fill Values",
    "text": "Predefined Fill Values\n\nfill_values = {\"East\": 0.5, \"West\": -1}\ndef fill_func(group):\n    return group.fillna(fill_values[group.name])\n\ndata.groupby(group_key).apply(fill_func)\n\nEast  Ohio          0.676004\n      New York     -0.107882\n      Vermont       0.500000\n      Florida      -2.135306\nWest  Oregon       -0.916350\n      Nevada       -1.000000\n      California   -0.601097\n      Idaho        -1.000000\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#simulating-a-deck-of-cards",
    "href": "qmd/pandas3ed10.html#simulating-a-deck-of-cards",
    "title": "Python for Data Analysis",
    "section": "Simulating a Deck of Cards",
    "text": "Simulating a Deck of Cards\n\nsuits = [\"H\", \"S\", \"C\", \"D\"]\ncard_val = (list(range(1, 11)) + [10] * 3) * 4\nbase_names = [\"A\"] + list(range(2, 11)) + [\"J\", \"K\", \"Q\"]\ncards = []\nfor suit in suits:\n    cards.extend(str(num) + suit for num in base_names)\n\ndeck = pd.Series(card_val, index=cards)"
  },
  {
    "objectID": "qmd/pandas3ed10.html#drawing-a-random-hand",
    "href": "qmd/pandas3ed10.html#drawing-a-random-hand",
    "title": "Python for Data Analysis",
    "section": "Drawing a Random Hand",
    "text": "Drawing a Random Hand\n\ndef draw(deck, n=5):\n    return deck.sample(n)\n\ndraw(deck)\n\nKD     10\n8S      8\n2S      2\n10C    10\nQC     10\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#drawing-two-random-cards-from-each-suit",
    "href": "qmd/pandas3ed10.html#drawing-two-random-cards-from-each-suit",
    "title": "Python for Data Analysis",
    "section": "Drawing Two Random Cards from Each Suit",
    "text": "Drawing Two Random Cards from Each Suit\n\ndef get_suit(card):\n    return card[-1]\n\ndeck.groupby(get_suit).apply(draw, n=2)\n\nC  3C      3\n   10C    10\nD  5D      5\n   8D      8\nH  7H      7\n   9H      9\nS  3S      3\n   7S      7\ndtype: int64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#group-weighted-average",
    "href": "qmd/pandas3ed10.html#group-weighted-average",
    "title": "Python for Data Analysis",
    "section": "Group Weighted Average",
    "text": "Group Weighted Average\n\ndf = pd.DataFrame({\"category\": [\"a\", \"a\", \"a\", \"a\",\n                                \"b\", \"b\", \"b\", \"b\"],\n                   \"data\": np.random.standard_normal(8),\n                   \"weights\": np.random.uniform(size=8)})\n\ngrouped = df.groupby(\"category\")\ndef get_wavg(group):\n    return np.average(group[\"data\"], weights=group[\"weights\"])\n\ngrouped.apply(get_wavg)\n\n/tmp/ipykernel_3111/783275467.py:10: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  grouped.apply(get_wavg)\n\n\ncategory\na   -0.128884\nb   -0.185380\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#correlation-with-spx-sp-500-index",
    "href": "qmd/pandas3ed10.html#correlation-with-spx-sp-500-index",
    "title": "Python for Data Analysis",
    "section": "Correlation with SPX (S&P 500 Index)",
    "text": "Correlation with SPX (S&P 500 Index)\n\n# Assuming 'examples' folder with 'stock_px.csv' exists\nclose_px = pd.read_csv(\"examples/stock_px.csv\", parse_dates=True, index_col=0)\n\nrets = close_px.pct_change().dropna()\n\ndef get_year(x):\n    return x.year\n\nby_year = rets.groupby(get_year)\n\ndef spx_corr(group):\n    return group.corrwith(group[\"SPX\"])\n\nby_year.apply(spx_corr)\n\n\n\n\n\n\n\n\nAAPL\nMSFT\nXOM\nSPX\n\n\n\n\n2003\n0.541124\n0.745174\n0.661265\n1.0\n\n\n2004\n0.374283\n0.588531\n0.557742\n1.0\n\n\n2005\n0.467540\n0.562374\n0.631010\n1.0\n\n\n2006\n0.428267\n0.406126\n0.518514\n1.0\n\n\n2007\n0.508118\n0.658770\n0.786264\n1.0\n\n\n2008\n0.681434\n0.804626\n0.828303\n1.0\n\n\n2009\n0.707103\n0.654902\n0.797921\n1.0\n\n\n2010\n0.710105\n0.730118\n0.839057\n1.0\n\n\n2011\n0.691931\n0.800996\n0.859975\n1.0"
  },
  {
    "objectID": "qmd/pandas3ed10.html#intercolumn-correlation-apple-and-microsoft",
    "href": "qmd/pandas3ed10.html#intercolumn-correlation-apple-and-microsoft",
    "title": "Python for Data Analysis",
    "section": "Intercolumn Correlation (Apple and Microsoft)",
    "text": "Intercolumn Correlation (Apple and Microsoft)\n\ndef corr_aapl_msft(group):\n    return group[\"AAPL\"].corr(group[\"MSFT\"])\n\nby_year.apply(corr_aapl_msft)\n\n2003    0.480868\n2004    0.259024\n2005    0.300093\n2006    0.161735\n2007    0.417738\n2008    0.611901\n2009    0.432738\n2010    0.571946\n2011    0.581987\ndtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#the-transform-method",
    "href": "qmd/pandas3ed10.html#the-transform-method",
    "title": "Python for Data Analysis",
    "section": "The transform Method",
    "text": "The transform Method\ntransform is like apply but:\n\nCan produce a scalar to broadcast.\nProduces an object of the same shape as the input.\nMust not mutate its input.\n\n\ndf = pd.DataFrame({'key': ['a', 'b', 'c'] * 4,\n                   'value': np.arange(12.)})\ng = df.groupby('key')['value']\n\ndef get_mean(group):\n    return group.mean()\ng.transform(get_mean)\n\n0     4.5\n1     5.5\n2     6.5\n3     4.5\n4     5.5\n5     6.5\n6     4.5\n7     5.5\n8     6.5\n9     4.5\n10    5.5\n11    6.5\nName: value, dtype: float64\n\n\nWe can pass a string alias as with the GroupBy agg method:\n\ng.transform('mean')\n\n0     4.5\n1     5.5\n2     6.5\n3     4.5\n4     5.5\n5     6.5\n6     4.5\n7     5.5\n8     6.5\n9     4.5\n10    5.5\n11    6.5\nName: value, dtype: float64\n\n\nLike apply, transform works with functions that return Series, but the result must be the same size as the input. For example, we can multiply each group by 2 using a helper function:\n\ndef times_two(group):\n      return group * 2\ng.transform(times_two)\n\n0      0.0\n1      2.0\n2      4.0\n3      6.0\n4      8.0\n5     10.0\n6     12.0\n7     14.0\n8     16.0\n9     18.0\n10    20.0\n11    22.0\nName: value, dtype: float64\n\n\nAs a more complicated example, we can compute the ranks in descending order for each group:\n\ndef get_ranks(group):\n    return group.rank(ascending=False)\ng.transform(get_ranks)\n\n0     4.0\n1     4.0\n2     4.0\n3     3.0\n4     3.0\n5     3.0\n6     2.0\n7     2.0\n8     2.0\n9     1.0\n10    1.0\n11    1.0\nName: value, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#unwrapped-group-operations",
    "href": "qmd/pandas3ed10.html#unwrapped-group-operations",
    "title": "Python for Data Analysis",
    "section": "‚ÄúUnwrapped‚Äù Group Operations",
    "text": "‚ÄúUnwrapped‚Äù Group Operations\n‚ÄúUnwrapped‚Äù operations are often faster than apply:\n\ndef normalize(x):\n    return (x - x.mean()) / x.std()\n\ng.transform(normalize)\n\n0    -1.161895\n1    -1.161895\n2    -1.161895\n3    -0.387298\n4    -0.387298\n5    -0.387298\n6     0.387298\n7     0.387298\n8     0.387298\n9     1.161895\n10    1.161895\n11    1.161895\nName: value, dtype: float64\n\n\n\ng.apply(normalize)\n\nkey    \na    0    -1.161895\n     3    -0.387298\n     6     0.387298\n     9     1.161895\nb    1    -1.161895\n     4    -0.387298\n     7     0.387298\n     10    1.161895\nc    2    -1.161895\n     5    -0.387298\n     8     0.387298\n     11    1.161895\nName: value, dtype: float64\n\n\n\nnormalized = (df['value'] - g.transform('mean')) / g.transform('std')\nnormalized\n\n0    -1.161895\n1    -1.161895\n2    -1.161895\n3    -0.387298\n4    -0.387298\n5    -0.387298\n6     0.387298\n7     0.387298\n8     0.387298\n9     1.161895\n10    1.161895\n11    1.161895\nName: value, dtype: float64"
  },
  {
    "objectID": "qmd/pandas3ed10.html#what-is-a-pivot-table",
    "href": "qmd/pandas3ed10.html#what-is-a-pivot-table",
    "title": "Python for Data Analysis",
    "section": "What is a Pivot Table? ü§î",
    "text": "What is a Pivot Table? ü§î\nAggregates data by keys, arranging it in a rectangle. Common in spreadsheets."
  },
  {
    "objectID": "qmd/pandas3ed10.html#pivot-tables-with-pandas",
    "href": "qmd/pandas3ed10.html#pivot-tables-with-pandas",
    "title": "Python for Data Analysis",
    "section": "Pivot Tables with pandas",
    "text": "Pivot Tables with pandas\npivot_table leverages groupby and hierarchical indexing:\n\ntips.pivot_table(\n    values=['total_bill', 'tip'],\n    index=['day', 'smoker'],\n    aggfunc='mean'\n)\n\n\n\n\n\n\n\n\n\ntip\ntotal_bill\n\n\nday\nsmoker\n\n\n\n\n\n\nFri\nNo\n2.812500\n18.420000\n\n\nYes\n2.714000\n16.813333\n\n\nSat\nNo\n3.102889\n19.661778\n\n\nYes\n2.875476\n21.276667\n\n\nSun\nNo\n3.167895\n20.506667\n\n\nYes\n3.516842\n24.120000\n\n\nThur\nNo\n2.673778\n17.113111\n\n\nYes\n3.030000\n19.190588"
  },
  {
    "objectID": "qmd/pandas3ed10.html#grouping-by-multiple-variables",
    "href": "qmd/pandas3ed10.html#grouping-by-multiple-variables",
    "title": "Python for Data Analysis",
    "section": "Grouping by Multiple Variables",
    "text": "Grouping by Multiple Variables\n\ntips.pivot_table(index=[\"time\", \"day\"], columns=\"smoker\",\n                 values=[\"tip_pct\", \"size\"])\n\n\n\n\n\n\n\n\n\nsize\ntip_pct\n\n\n\nsmoker\nNo\nYes\nNo\nYes\n\n\ntime\nday\n\n\n\n\n\n\n\n\nDinner\nFri\n2.000000\n2.222222\n0.139622\n0.165347\n\n\nSat\n2.555556\n2.476190\n0.158048\n0.147906\n\n\nSun\n2.929825\n2.578947\n0.160113\n0.187250\n\n\nThur\n2.000000\nNaN\n0.159744\nNaN\n\n\nLunch\nFri\n3.000000\n1.833333\n0.187735\n0.188937\n\n\nThur\n2.500000\n2.352941\n0.160311\n0.163863"
  },
  {
    "objectID": "qmd/pandas3ed10.html#adding-margins-partial-totals",
    "href": "qmd/pandas3ed10.html#adding-margins-partial-totals",
    "title": "Python for Data Analysis",
    "section": "Adding Margins (Partial Totals)",
    "text": "Adding Margins (Partial Totals)\n\ntips.pivot_table(index=[\"time\", \"day\"], columns=\"smoker\",\n                 values=[\"tip_pct\", \"size\"], margins=True)\n\n\n\n\n\n\n\n\n\nsize\ntip_pct\n\n\n\nsmoker\nNo\nYes\nAll\nNo\nYes\nAll\n\n\ntime\nday\n\n\n\n\n\n\n\n\n\n\nDinner\nFri\n2.000000\n2.222222\n2.166667\n0.139622\n0.165347\n0.158916\n\n\nSat\n2.555556\n2.476190\n2.517241\n0.158048\n0.147906\n0.153152\n\n\nSun\n2.929825\n2.578947\n2.842105\n0.160113\n0.187250\n0.166897\n\n\nThur\n2.000000\nNaN\n2.000000\n0.159744\nNaN\n0.159744\n\n\nLunch\nFri\n3.000000\n1.833333\n2.000000\n0.187735\n0.188937\n0.188765\n\n\nThur\n2.500000\n2.352941\n2.459016\n0.160311\n0.163863\n0.161301\n\n\nAll\n\n2.668874\n2.408602\n2.569672\n0.159328\n0.163196\n0.160803"
  },
  {
    "objectID": "qmd/pandas3ed10.html#using-different-aggregation-functions",
    "href": "qmd/pandas3ed10.html#using-different-aggregation-functions",
    "title": "Python for Data Analysis",
    "section": "Using Different Aggregation Functions",
    "text": "Using Different Aggregation Functions\n\ntips.pivot_table(index=[\"time\", \"smoker\"], columns=\"day\",\n                 values=\"tip_pct\", aggfunc=len, margins=True)\n\n\n\n\n\n\n\n\nday\nFri\nSat\nSun\nThur\nAll\n\n\ntime\nsmoker\n\n\n\n\n\n\n\n\n\nDinner\nNo\n3.0\n45.0\n57.0\n1.0\n106\n\n\nYes\n9.0\n42.0\n19.0\nNaN\n70\n\n\nLunch\nNo\n1.0\nNaN\nNaN\n44.0\n45\n\n\nYes\n6.0\nNaN\nNaN\n17.0\n23\n\n\nAll\n\n19.0\n87.0\n76.0\n62.0\n244"
  },
  {
    "objectID": "qmd/pandas3ed10.html#cross-tabulations-crosstab",
    "href": "qmd/pandas3ed10.html#cross-tabulations-crosstab",
    "title": "Python for Data Analysis",
    "section": "Cross-Tabulations (Crosstab)",
    "text": "Cross-Tabulations (Crosstab)\nCrosstab computes group frequencies:\n\nfrom io import StringIO\n\ndata = pd.read_table(StringIO(\"\"\"Sample Nationality Handedness\n1 USA Right-handed\n2 Japan Left-handed\n3 USA Right-handed\n4 Japan Right-handed\n5 Japan Left-handed\n6 Japan Right-handed\n7 USA Right-handed\n8 USA Left-handed\n9 Japan Right-handed\n10 USA Right-handed\"\"\"), sep=\"\\s+\")\n\npd.crosstab(data[\"Nationality\"], data[\"Handedness\"], margins=True)\n\n&lt;&gt;:13: SyntaxWarning: invalid escape sequence '\\s'\n&lt;&gt;:13: SyntaxWarning: invalid escape sequence '\\s'\n/tmp/ipykernel_3111/3956268491.py:13: SyntaxWarning: invalid escape sequence '\\s'\n  10 USA Right-handed\"\"\"), sep=\"\\s+\")\n\n\n\n\n\n\n\n\nHandedness\nLeft-handed\nRight-handed\nAll\n\n\nNationality\n\n\n\n\n\n\n\nJapan\n2\n3\n5\n\n\nUSA\n1\n4\n5\n\n\nAll\n3\n7\n10\n\n\n\n\n\n\n\n\npd.crosstab([tips[\"time\"], tips[\"day\"]], tips[\"smoker\"], margins=True)\n\n\n\n\n\n\n\n\nsmoker\nNo\nYes\nAll\n\n\ntime\nday\n\n\n\n\n\n\n\nDinner\nFri\n3\n9\n12\n\n\nSat\n45\n42\n87\n\n\nSun\n57\n19\n76\n\n\nThur\n1\n0\n1\n\n\nLunch\nFri\n1\n6\n7\n\n\nThur\n44\n17\n61\n\n\nAll\n\n151\n93\n244"
  },
  {
    "objectID": "qmd/pandas3edA1.html",
    "href": "qmd/pandas3edA1.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "import numpy as np\nrng = np.random.default_rng(seed=12345)"
  },
  {
    "objectID": "qmd/pandas3edA1.html#introduction",
    "href": "qmd/pandas3edA1.html#introduction",
    "title": "Python for Data Analysis",
    "section": "Introduction",
    "text": "Introduction\nWe‚Äôve covered NumPy basics. Now, let‚Äôs dive deeper! ü§ø We‚Äôll explore:\n\nndarray internals.\nAdvanced array manipulations.\nAnd some cool tricks! üòé"
  },
  {
    "objectID": "qmd/pandas3edA1.html#topics-covered",
    "href": "qmd/pandas3edA1.html#topics-covered",
    "title": "Python for Data Analysis",
    "section": "Topics Covered",
    "text": "Topics Covered\n\nndarray Object Internals\nData Type Hierarchy\nArray Manipulation\nBroadcasting\nAdvanced ufunc Usage\nStructured Arrays\nSorting\nWriting Fast NumPy Functions with Numba"
  },
  {
    "objectID": "qmd/pandas3edA1.html#ndarray-object-internals",
    "href": "qmd/pandas3edA1.html#ndarray-object-internals",
    "title": "Python for Data Analysis",
    "section": "ndarray Object Internals ü§î",
    "text": "ndarray Object Internals ü§î\n\nNumPy‚Äôs ndarray interprets a block of homogeneously typed data (all elements have the same data type) as a multidimensional array.\nIt can be contiguous or strided.\nKey Components:\n\nData Type (dtype): How data is interpreted (float, int, bool, etc.).\nStrided View: Allows operations like arr[::2, ::-1] without copying data! ‚ö°Ô∏è"
  },
  {
    "objectID": "qmd/pandas3edA1.html#ndarray-internal-structure",
    "href": "qmd/pandas3edA1.html#ndarray-internal-structure",
    "title": "Python for Data Analysis",
    "section": "ndarray Internal Structure",
    "text": "ndarray Internal Structure\nAn ndarray consists of:\n\nData Pointer: A block of data in RAM or a memory-mapped file.\nData Type (dtype): Describes fixed-size value cells (e.g., float64, int32).\nShape Tuple: Array dimensions (e.g., (10, 5) for a 10x5 array).\nStrides Tuple: Bytes to ‚Äústep‚Äù to advance one element along a dimension."
  },
  {
    "objectID": "qmd/pandas3edA1.html#visualizing-ndarray",
    "href": "qmd/pandas3edA1.html#visualizing-ndarray",
    "title": "Python for Data Analysis",
    "section": "Visualizing ndarray üñºÔ∏è",
    "text": "Visualizing ndarray üñºÔ∏è\n\nData: The actual array data.\ndtype: Data type information (e.g., float64).\nShape: Array dimensions (e.g., (3, 4, 5)).\nStrides: Bytes to jump to the next element in each dimension."
  },
  {
    "objectID": "qmd/pandas3edA1.html#shape-and-strides-example",
    "href": "qmd/pandas3edA1.html#shape-and-strides-example",
    "title": "Python for Data Analysis",
    "section": "Shape and Strides Example",
    "text": "Shape and Strides Example\n\nA 10 x 5 array has shape (10, 5):\n\n\narr_2d = np.ones((10, 5))\narr_2d.shape\n\n(10, 5)\n\n\n\nA 3 x 4 x 5 array of float64 (8 bytes) typically has strides (160, 40, 8) (C order):\n\n\narr_3d = np.ones((3, 4, 5), dtype=np.float64)\narr_3d.strides\n\n(160, 40, 8)"
  },
  {
    "objectID": "qmd/pandas3edA1.html#understanding-strides",
    "href": "qmd/pandas3edA1.html#understanding-strides",
    "title": "Python for Data Analysis",
    "section": "Understanding Strides üö∂",
    "text": "Understanding Strides üö∂\n\nStrides: Bytes to move in memory to reach the next element along each dimension.\nExample: arr_3d.strides = (160, 40, 8)\n\nFirst dimension (rows): Move 160 bytes.\nSecond dimension (columns): Move 40 bytes.\nThird dimension: Move 8 bytes (float64 size).\n\nLarger strides on an axis usually mean computations along that axis are more costly.\nStrides can be negative!"
  },
  {
    "objectID": "qmd/pandas3edA1.html#numpy-data-type-hierarchy",
    "href": "qmd/pandas3edA1.html#numpy-data-type-hierarchy",
    "title": "Python for Data Analysis",
    "section": "NumPy Data Type Hierarchy üå≥",
    "text": "NumPy Data Type Hierarchy üå≥\n\nNumPy has a rich data type hierarchy.\nUse superclasses (e.g., np.integer, np.floating) and np.issubdtype to check array types:\n\n\nints = np.ones(10, dtype=np.uint16)\nfloats = np.ones(10, dtype=np.float32)\nprint(np.issubdtype(ints.dtype, np.integer))\nprint(np.issubdtype(floats.dtype, np.floating))\n\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3edA1.html#data-type-hierarchy-contd",
    "href": "qmd/pandas3edA1.html#data-type-hierarchy-contd",
    "title": "Python for Data Analysis",
    "section": "Data Type Hierarchy (Cont‚Äôd)",
    "text": "Data Type Hierarchy (Cont‚Äôd)\n\nSee parent classes with .mro() (Method Resolution Order):\n\n\nnp.float64.mro()\n\n[numpy.float64,\n numpy.floating,\n numpy.inexact,\n numpy.number,\n numpy.generic,\n float,\n object]\n\n\n\nThis shows np.float64 inherits from np.floating, np.inexact, ‚Ä¶, object."
  },
  {
    "objectID": "qmd/pandas3edA1.html#visualizing-numpy-data-type-hierarchy",
    "href": "qmd/pandas3edA1.html#visualizing-numpy-data-type-hierarchy",
    "title": "Python for Data Analysis",
    "section": "Visualizing NumPy Data Type Hierarchy üìä",
    "text": "Visualizing NumPy Data Type Hierarchy üìä\n\ngeneric is root\nnumber, bool_ etc., are subclasses of generic"
  },
  {
    "objectID": "qmd/pandas3edA1.html#advanced-array-manipulation-reshaping",
    "href": "qmd/pandas3edA1.html#advanced-array-manipulation-reshaping",
    "title": "Python for Data Analysis",
    "section": "Advanced Array Manipulation: Reshaping üîÑ",
    "text": "Advanced Array Manipulation: Reshaping üîÑ\n\nReshaping: Change an array‚Äôs shape without copying data.\nUse the reshape() method with a shape tuple:\n\n\narr = np.arange(8)\narr.reshape((4, 2))\n\narray([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#reshaping-multidimensional-arrays",
    "href": "qmd/pandas3edA1.html#reshaping-multidimensional-arrays",
    "title": "Python for Data Analysis",
    "section": "Reshaping Multidimensional Arrays",
    "text": "Reshaping Multidimensional Arrays\n\narr.reshape((4, 2)).reshape((2, 4))\n\narray([[0, 1, 2, 3],\n       [4, 5, 6, 7]])\n\n\n\nUse -1 for one dimension to infer the size:\n\n\narr = np.arange(15)\narr.reshape((5, -1))\n\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#reshaping-with-shape-attribute",
    "href": "qmd/pandas3edA1.html#reshaping-with-shape-attribute",
    "title": "Python for Data Analysis",
    "section": "Reshaping with Shape Attribute",
    "text": "Reshaping with Shape Attribute\n\nother_arr = np.ones((3, 5))\narr.reshape(other_arr.shape) # Reuse shape from another array\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#flattening-or-raveling",
    "href": "qmd/pandas3edA1.html#flattening-or-raveling",
    "title": "Python for Data Analysis",
    "section": "Flattening or Raveling ‚û°Ô∏è",
    "text": "Flattening or Raveling ‚û°Ô∏è\n\nFlattening/Raveling: Convert multidimensional array to 1D.\nravel(): Does not copy if values were contiguous.\n\n\narr = np.arange(15).reshape((5, 3))\narr.ravel()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\n\n\nflatten(): Always returns a copy.\n\n\narr.flatten()\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#c-vs.-fortran-order",
    "href": "qmd/pandas3edA1.html#c-vs.-fortran-order",
    "title": "Python for Data Analysis",
    "section": "C vs.¬†FORTRAN Order üîÄ",
    "text": "C vs.¬†FORTRAN Order üîÄ\n\nRow major (C): Consecutive row elements are stored together.\nColumn major (FORTRAN): Consecutive column elements are stored together.\nreshape and ravel accept an order argument ('C' or 'F').\n\n\narr = np.arange(12).reshape((3, 4))\nprint(arr.ravel())      # Default: 'C' order\nprint(arr.ravel('F'))  # FORTRAN order\n\n[ 0  1  2  3  4  5  6  7  8  9 10 11]\n[ 0  4  8  1  5  9  2  6 10  3  7 11]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#c-vs.-fortran-order-visual",
    "href": "qmd/pandas3edA1.html#c-vs.-fortran-order-visual",
    "title": "Python for Data Analysis",
    "section": "C vs.¬†FORTRAN Order (Visual)",
    "text": "C vs.¬†FORTRAN Order (Visual)\n\nC/row major: Traverse higher dimensions first.\nFORTRAN/column major: Traverse higher dimensions last."
  },
  {
    "objectID": "qmd/pandas3edA1.html#concatenating-arrays",
    "href": "qmd/pandas3edA1.html#concatenating-arrays",
    "title": "Python for Data Analysis",
    "section": "Concatenating Arrays ‚ûï",
    "text": "Concatenating Arrays ‚ûï\n\nnumpy.concatenate: Joins arrays along an existing axis.\n\n\narr1 = np.array([[1, 2, 3], [4, 5, 6]])\narr2 = np.array([[7, 8, 9], [10, 11, 12]])\nprint(np.concatenate([arr1, arr2], axis=0))  # Stack vertically\nprint(np.concatenate([arr1, arr2], axis=1))  # Stack horizontally\n\n[[ 1  2  3]\n [ 4  5  6]\n [ 7  8  9]\n [10 11 12]]\n[[ 1  2  3  7  8  9]\n [ 4  5  6 10 11 12]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#concatenation-helpers",
    "href": "qmd/pandas3edA1.html#concatenation-helpers",
    "title": "Python for Data Analysis",
    "section": "Concatenation Helpers",
    "text": "Concatenation Helpers\n\nvstack, row_stack: Stack by rows (axis 0).\nhstack: Stack by columns (axis 1).\ncolumn_stack: Like hstack, but converts 1D arrays to 2D columns first.\ndstack: Stack by ‚Äúdepth‚Äù (axis 2).\n\n\nprint(np.vstack((arr1, arr2)))\nprint(np.hstack((arr1, arr2)))\n\n[[ 1  2  3]\n [ 4  5  6]\n [ 7  8  9]\n [10 11 12]]\n[[ 1  2  3  7  8  9]\n [ 4  5  6 10 11 12]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#splitting-arrays",
    "href": "qmd/pandas3edA1.html#splitting-arrays",
    "title": "Python for Data Analysis",
    "section": "Splitting Arrays ‚ûó",
    "text": "Splitting Arrays ‚ûó\n\nsplit: Slices an array into multiple arrays along an axis.\n\n\narr = rng.standard_normal((5, 2))\nfirst, second, third = np.split(arr, [1, 3])\nprint(f\"{first=}\")\nprint(f\"{second=}\")\nprint(f\"{third=}\")\n\nfirst=array([[-1.42382504,  1.26372846]])\nsecond=array([[-0.87066174, -0.25917323],\n       [-0.07534331, -0.74088465]])\nthird=array([[-1.3677927 ,  0.6488928 ],\n       [ 0.36105811, -1.95286306]])\n\n\n\nhsplit/vsplit: Split on axis 0 and 1, respectively."
  },
  {
    "objectID": "qmd/pandas3edA1.html#array-concatenation-functions-table",
    "href": "qmd/pandas3edA1.html#array-concatenation-functions-table",
    "title": "Python for Data Analysis",
    "section": "Array Concatenation Functions Table",
    "text": "Array Concatenation Functions Table\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nconcatenate\nGeneral function, joins arrays along an axis.\n\n\nvstack, row_stack\nStack arrays by rows (axis 0).\n\n\nhstack\nStack arrays by columns (axis 1).\n\n\ncolumn_stack\nLike hstack, but converts 1D arrays to 2D columns.\n\n\ndstack\nStack arrays by ‚Äúdepth‚Äù (axis 2).\n\n\nsplit\nSplit array at locations along an axis.\n\n\nhsplit/vsplit\nSplit on axis 0 and 1, respectively."
  },
  {
    "objectID": "qmd/pandas3edA1.html#stacking-helpers-r_-and-c_",
    "href": "qmd/pandas3edA1.html#stacking-helpers-r_-and-c_",
    "title": "Python for Data Analysis",
    "section": "Stacking Helpers: r_ and c_",
    "text": "Stacking Helpers: r_ and c_\n\nr_ and c_ make stacking more concise:\n\n\narr = np.arange(6)\narr1 = arr.reshape((3, 2))\narr2 = rng.standard_normal((3, 2))\nprint(np.r_[arr1, arr2])  # Like row_stack\nprint(np.c_[np.r_[arr1, arr2], arr])  # Concatenate arr as a new column\n\n[[ 0.          1.        ]\n [ 2.          3.        ]\n [ 4.          5.        ]\n [ 2.34740965  0.96849691]\n [-0.75938718  0.90219827]\n [-0.46695317 -0.06068952]]\n[[ 0.          1.          0.        ]\n [ 2.          3.          1.        ]\n [ 4.          5.          2.        ]\n [ 2.34740965  0.96849691  3.        ]\n [-0.75938718  0.90219827  4.        ]\n [-0.46695317 -0.06068952  5.        ]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#repeating-elements-tile-and-repeat",
    "href": "qmd/pandas3edA1.html#repeating-elements-tile-and-repeat",
    "title": "Python for Data Analysis",
    "section": "Repeating Elements: tile and repeat üîÅ",
    "text": "Repeating Elements: tile and repeat üîÅ\n\nrepeat: Replicates each element:\n\n\narr = np.arange(3)\nprint(arr.repeat(3))\nprint(arr.repeat([2, 3, 4]))  # Different repetition for each element\n\n[0 0 0 1 1 1 2 2 2]\n[0 0 1 1 1 2 2 2 2]\n\n\n\n2D array example:\n\n\narr = rng.standard_normal((2, 2))\narr.repeat(2, axis=0) # repeat along rows\n\narray([[ 0.78884434, -1.25666813],\n       [ 0.78884434, -1.25666813],\n       [ 0.57585751,  1.39897899],\n       [ 0.57585751,  1.39897899]])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#tile-stacking-copies",
    "href": "qmd/pandas3edA1.html#tile-stacking-copies",
    "title": "Python for Data Analysis",
    "section": "tile: Stacking Copies",
    "text": "tile: Stacking Copies\n\ntile: Stacks copies of an array along an axis:\n\n\narr = rng.standard_normal((2, 2))\nprint(np.tile(arr, 2))  # Repeat array twice along rows\nprint(np.tile(arr, (2, 1)))  # 2 repetitions along rows, 1 along columns\nprint(np.tile(arr, (3, 2)))  # 3 repetitions along rows, 2 along columns\n\n[[ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]]\n[[ 1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273]\n [ 1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273]]\n[[ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]\n [ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]\n [ 1.32229806 -0.29969852  1.32229806 -0.29969852]\n [ 0.90291934 -1.62158273  0.90291934 -1.62158273]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#fancy-indexing-with-take-and-put",
    "href": "qmd/pandas3edA1.html#fancy-indexing-with-take-and-put",
    "title": "Python for Data Analysis",
    "section": "Fancy Indexing with take and put",
    "text": "Fancy Indexing with take and put\n\ntake: Selects elements by integer indices:\n\n\narr = np.arange(10) * 100\ninds = [7, 1, 2, 6]\narr.take(inds)  # Like arr[inds]\n\narray([700, 100, 200, 600])\n\n\n\nput: Assigns values to indices (in-place). Doesn‚Äôt accept axis argument:\n\n\narr.put(inds, 42)\nprint(arr)\narr.put(inds, [40, 41, 42, 43])\nprint(arr)\n\n[  0  42  42 300 400 500  42  42 800 900]\n[  0  41  42 300 400 500  43  40 800 900]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#broadcasting",
    "href": "qmd/pandas3edA1.html#broadcasting",
    "title": "Python for Data Analysis",
    "section": "Broadcasting üì°",
    "text": "Broadcasting üì°\n\nBroadcasting: How operations work between arrays of different shapes.\nSimplest: Scalar and array:\n\n\narr = np.arange(5)\narr * 4  # 4 is \"broadcast\" to all elements\n\narray([ 0,  4,  8, 12, 16])\n\n\n\nDemeaning:\n\n\narr = rng.standard_normal((4, 3))\ndemeaned = arr - arr.mean(0)  # mean(0) is mean of each column\ndemeaned\n\narray([[ 0.00978669,  0.05184267, -1.55788029],\n       [ 0.08628836,  1.32709867,  2.40388021],\n       [ 0.94533729,  0.43099193, -1.17326753],\n       [-1.04141234, -1.80993328,  0.32726761]])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#broadcasting-rule",
    "href": "qmd/pandas3edA1.html#broadcasting-rule",
    "title": "Python for Data Analysis",
    "section": "Broadcasting Rule üìè",
    "text": "Broadcasting Rule üìè\n\nArrays are compatible if, for each trailing dimension:\n\nAxis lengths match, OR\nOne length is 1.\n\nBroadcasting occurs over missing or length 1 dimensions."
  },
  {
    "objectID": "qmd/pandas3edA1.html#broadcasting-rule-visual",
    "href": "qmd/pandas3edA1.html#broadcasting-rule-visual",
    "title": "Python for Data Analysis",
    "section": "Broadcasting Rule (visual)",
    "text": "Broadcasting Rule (visual)\n\nIt is an example of broadcasting a 1D array of shape (3,) over a 2D array of shape (4, 3) along axis 0"
  },
  {
    "objectID": "qmd/pandas3edA1.html#broadcasting-example-subtracting-row-means",
    "href": "qmd/pandas3edA1.html#broadcasting-example-subtracting-row-means",
    "title": "Python for Data Analysis",
    "section": "Broadcasting Example: Subtracting Row Means",
    "text": "Broadcasting Example: Subtracting Row Means\n\narr = rng.standard_normal((4, 3))\nrow_means = arr.mean(1)  # Mean of each row\nprint(row_means.shape)\n\n# Reshape row_means to (4, 1) for broadcasting\ndemeaned = arr - row_means.reshape((4, 1))\nprint(demeaned.mean(1))\n\n(4,)\n[ 3.70074342e-17 -1.85037171e-17 -1.85037171e-17  0.00000000e+00]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#broadcasting-over-other-axes",
    "href": "qmd/pandas3edA1.html#broadcasting-over-other-axes",
    "title": "Python for Data Analysis",
    "section": "Broadcasting Over Other Axes",
    "text": "Broadcasting Over Other Axes\n\nReshape for broadcasting over axes other than 0.\nUse np.newaxis and slicing to add a new axis of length 1:\n\n\narr = np.zeros((4, 4))\narr_3d = arr[:, np.newaxis, :]  # New axis in the middle\nprint(arr_3d.shape)\n\narr_1d = rng.standard_normal(3)\nprint(arr_1d[:, np.newaxis])  # Column vector\nprint(arr_1d[np.newaxis, :])  # Row vector\n\n(4, 1, 4)\n[[0.06114402]\n [0.0709146 ]\n [0.43365454]]\n[[0.06114402 0.0709146  0.43365454]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#setting-values-by-broadcasting",
    "href": "qmd/pandas3edA1.html#setting-values-by-broadcasting",
    "title": "Python for Data Analysis",
    "section": "Setting Values by Broadcasting",
    "text": "Setting Values by Broadcasting\n\nBroadcasting applies to setting values:\n\n\narr = np.zeros((4, 3))\narr[:] = 5  # Set all to 5\nprint(arr)\n\ncol = np.array([1.28, -0.42, 0.44, 1.6])\narr[:] = col[:, np.newaxis]  # Set columns\nprint(arr)\n\n[[5. 5. 5.]\n [5. 5. 5.]\n [5. 5. 5.]\n [5. 5. 5.]]\n[[ 1.28  1.28  1.28]\n [-0.42 -0.42 -0.42]\n [ 0.44  0.44  0.44]\n [ 1.6   1.6   1.6 ]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#advanced-ufunc-usage",
    "href": "qmd/pandas3edA1.html#advanced-ufunc-usage",
    "title": "Python for Data Analysis",
    "section": "Advanced ufunc Usage üöÄ",
    "text": "Advanced ufunc Usage üöÄ\n\nUniversal functions (ufuncs) have methods for vectorized operations.\nreduce: Aggregates by binary operations:\n\n\narr = np.arange(10)\nnp.add.reduce(arr)  # Like arr.sum()\n\nnp.int64(45)"
  },
  {
    "objectID": "qmd/pandas3edA1.html#ufunc-methods-accumulate-and-outer",
    "href": "qmd/pandas3edA1.html#ufunc-methods-accumulate-and-outer",
    "title": "Python for Data Analysis",
    "section": "ufunc Methods: accumulate and outer",
    "text": "ufunc Methods: accumulate and outer\n\naccumulate: Intermediate ‚Äúaccumulated‚Äù values:\n\n\narr = np.arange(15).reshape((3, 5))\nnp.add.accumulate(arr, axis=1)  # Cumulative sum along rows\n\narray([[ 0,  1,  3,  6, 10],\n       [ 5, 11, 18, 26, 35],\n       [10, 21, 33, 46, 60]])\n\n\n\nouter: Pair-wise cross product:\n\n\narr = np.arange(3).repeat([1, 2, 2])\nnp.multiply.outer(arr, np.arange(5))\n\narray([[0, 0, 0, 0, 0],\n       [0, 1, 2, 3, 4],\n       [0, 1, 2, 3, 4],\n       [0, 2, 4, 6, 8],\n       [0, 2, 4, 6, 8]])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#ufunc-method-reduceat",
    "href": "qmd/pandas3edA1.html#ufunc-method-reduceat",
    "title": "Python for Data Analysis",
    "section": "ufunc Method: reduceat",
    "text": "ufunc Method: reduceat\n\nreduceat: ‚ÄúLocal reduce‚Äù (array groupby):\n\n\narr = np.arange(10)\nnp.add.reduceat(arr, [0, 5, 8])  # Reduce [0:5], [5:8], [8:]\n\narray([10, 18, 17])\n\n\n\narr = np.multiply.outer(np.arange(4), np.arange(5))\nnp.add.reduceat(arr, [0, 2, 4], axis=1) # Reduce along columns\n\narray([[ 0,  0,  0],\n       [ 1,  5,  4],\n       [ 2, 10,  8],\n       [ 3, 15, 12]])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#ufunc-methods-table",
    "href": "qmd/pandas3edA1.html#ufunc-methods-table",
    "title": "Python for Data Analysis",
    "section": "ufunc Methods Table",
    "text": "ufunc Methods Table\n\n\n\n\n\n\n\nMethod\nDescription\n\n\n\n\naccumulate(x)\nAggregate, preserving partial aggregates.\n\n\nat(x, i, b=None)\nIn-place operation on x at indices i.\n\n\nreduce(x)\nAggregate by successive operations.\n\n\nreduceat(x, bins)\n‚ÄúLocal‚Äù reduce/groupby; reduce slices to produce aggregated array.\n\n\nouter(x, y)\nApply operation to all pairs; result has shape x.shape + y.shape."
  },
  {
    "objectID": "qmd/pandas3edA1.html#numba-fast-numpy-functions",
    "href": "qmd/pandas3edA1.html#numba-fast-numpy-functions",
    "title": "Python for Data Analysis",
    "section": "Numba: Fast NumPy Functions üèéÔ∏è",
    "text": "Numba: Fast NumPy Functions üèéÔ∏è\n\nNumba: Creates fast functions for NumPy-like data (CPUs, GPUs, etc.).\nUses LLVM to translate Python to machine code.\nExample: Pure Python function:\n\n\nimport numpy as np\n\ndef mean_distance(x, y):\n    nx = len(x)\n    result = 0.0\n    count = 0\n    for i in range(nx):\n        result += x[i] - y[i]\n        count += 1\n    return result / count"
  },
  {
    "objectID": "qmd/pandas3edA1.html#numba-compilation",
    "href": "qmd/pandas3edA1.html#numba-compilation",
    "title": "Python for Data Analysis",
    "section": "Numba Compilation",
    "text": "Numba Compilation\n\nThis is slow. Compile with numba.jit:\n\n\nimport numba as nb\n\nnumba_mean_distance = nb.jit(mean_distance)\n\n# OR, with a decorator:\n@nb.jit\ndef numba_mean_distance(x, y):\n    nx = len(x)\n    result = 0.0\n    count = 0\n    for i in range(nx):\n        result += x[i] - y[i]\n        count += 1\n    return result / count\n\n\nnumba_mean_distance is much faster (potentially even faster than NumPy‚Äôs version!)."
  },
  {
    "objectID": "qmd/pandas3edA1.html#custom-ufuncs-with-numba",
    "href": "qmd/pandas3edA1.html#custom-ufuncs-with-numba",
    "title": "Python for Data Analysis",
    "section": "Custom ufuncs with Numba",
    "text": "Custom ufuncs with Numba\n\nnumba.vectorize creates compiled NumPy ufuncs:\n\n\nfrom numba import vectorize\n\n@vectorize\ndef nb_add(x, y):\n    return x + y\n\n\nNow, nb_add acts as a ufunc."
  },
  {
    "objectID": "qmd/pandas3edA1.html#structured-arrays",
    "href": "qmd/pandas3edA1.html#structured-arrays",
    "title": "Python for Data Analysis",
    "section": "Structured Arrays üè¢",
    "text": "Structured Arrays üè¢\n\nndarray is usually homogeneous.\nStructured arrays: Each element represents a ‚Äústruct‚Äù (like in C) or SQL table row.\n\n\ndtype = [('x', np.float64), ('y', np.int32)]  # Field names and types\nsarr = np.array([(1.5, 6), (np.pi, -2)], dtype=dtype)\nprint(sarr)\nprint(sarr[0])\nprint(sarr[0]['y'])\n\n[(1.5       ,  6) (3.14159265, -2)]\n(1.5, 6)\n6"
  },
  {
    "objectID": "qmd/pandas3edA1.html#nested-data-types-and-multidimensional-fields",
    "href": "qmd/pandas3edA1.html#nested-data-types-and-multidimensional-fields",
    "title": "Python for Data Analysis",
    "section": "Nested Data Types and Multidimensional Fields",
    "text": "Nested Data Types and Multidimensional Fields\n\ndtype = [('x', np.int64, 3), ('y', np.int32)]  # 'x' is an array of 3 int64\narr = np.zeros(4, dtype=dtype)\nprint(arr)\nprint(arr[0]['x'])\n\n[([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0) ([0, 0, 0], 0)]\n[0 0 0]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#why-structured-arrays",
    "href": "qmd/pandas3edA1.html#why-structured-arrays",
    "title": "Python for Data Analysis",
    "section": "Why Structured Arrays?",
    "text": "Why Structured Arrays?\n\nInterpret memory as a tabular structure.\nEfficient for disk I/O (including memory maps).\nRepresent data from C/C++ code.\nLower level than pandas DataFrames."
  },
  {
    "objectID": "qmd/pandas3edA1.html#sorting",
    "href": "qmd/pandas3edA1.html#sorting",
    "title": "Python for Data Analysis",
    "section": "Sorting Ô∏èÔ∏èÔ∏èÔ∏èÔ∏è‚¨ÜÔ∏è",
    "text": "Sorting Ô∏èÔ∏èÔ∏èÔ∏èÔ∏è‚¨ÜÔ∏è\n\nndarray.sort(): In-place sort:\n\n\narr = rng.standard_normal(6)\narr.sort()  # Ascending\nprint(arr)\n\n[-0.79501746  0.27748366  0.30003095  0.53025239  0.53672097  0.61835001]\n\n\n\nnumpy.sort(): Creates a new, sorted copy.\n\n\narr = rng.standard_normal(5)\nprint(np.sort(arr))  # Sorted copy\n\n[-1.60270159 -1.26162378 -0.07127081  0.26679883  0.47404973]\n\n\n\nBoth methods accept axis\n\n\narr = rng.standard_normal((3, 5))\narr.sort(axis=1)  # Sort each row\nprint(arr)\n\n[[-1.64041784 -0.85725882 -0.41485376  0.0977165   0.68828179]\n [-1.38835995 -1.15452958 -1.09542531 -0.90738246  0.65045239]\n [-1.06580785 -0.18147274  0.00714569  0.5343599   1.6219518 ]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#indirect-sorts-argsort-and-lexsort",
    "href": "qmd/pandas3edA1.html#indirect-sorts-argsort-and-lexsort",
    "title": "Python for Data Analysis",
    "section": "Indirect Sorts: argsort and lexsort",
    "text": "Indirect Sorts: argsort and lexsort\n\nIndirect sorts: Return integer indices to reorder data.\nargsort(): Indices that would sort:\n\n\nvalues = np.array([5, 0, 1, 3, 2])\nindexer = values.argsort()\nprint(indexer)\nprint(values[indexer])\n\n[1 2 4 3 0]\n[0 1 2 3 5]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#lexsort-multiple-keys",
    "href": "qmd/pandas3edA1.html#lexsort-multiple-keys",
    "title": "Python for Data Analysis",
    "section": "lexsort: Multiple Keys",
    "text": "lexsort: Multiple Keys\n\nlexsort(): Lexicographical sort on multiple keys (last array is primary key):\n\n\nfirst_name = np.array(['Bob', 'Jane', 'Steve', 'Bill', 'Barbara'])\nlast_name = np.array(['Jones', 'Arnold', 'Arnold', 'Jones', 'Walters'])\nsorter = np.lexsort((first_name, last_name))  # Sort by last_name, then first_name\nprint(list(zip(last_name[sorter], first_name[sorter])))\n\n[(np.str_('Arnold'), np.str_('Jane')), (np.str_('Arnold'), np.str_('Steve')), (np.str_('Jones'), np.str_('Bill')), (np.str_('Jones'), np.str_('Bob')), (np.str_('Walters'), np.str_('Barbara'))]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#alternative-sort-algorithms",
    "href": "qmd/pandas3edA1.html#alternative-sort-algorithms",
    "title": "Python for Data Analysis",
    "section": "Alternative Sort Algorithms",
    "text": "Alternative Sort Algorithms\n\nAlgorithms: quicksort (default), mergesort, heapsort, timsort.\nStable sort: Preserves relative position of equal elements (mergesort is stable).\n\n\nvalues = np.array(['2:first', '2:second', '1:first', '1:second', '1:third'])\nkey = np.array([2, 2, 1, 1, 1])\nindexer = key.argsort(kind='mergesort')  # For stability\nprint(values.take(indexer))\n\n['1:first' '1:second' '1:third' '2:first' '2:second']"
  },
  {
    "objectID": "qmd/pandas3edA1.html#array-sorting-methods-table",
    "href": "qmd/pandas3edA1.html#array-sorting-methods-table",
    "title": "Python for Data Analysis",
    "section": "Array Sorting Methods Table",
    "text": "Array Sorting Methods Table\n\n\n\nKind\nSpeed\nStable\nWork Space\nWorst Case\n\n\n\n\n‚Äòquicksort‚Äô\n1\nNo\n0\nO(n^2)\n\n\n‚Äòmergesort‚Äô\n2\nYes\n~n/2\nO(n log n)\n\n\n‚Äòheapsort‚Äô\n3\nNo\n0\nO(n log n)\n\n\n‚Äòtimsort‚Äô\n4\nYes\n~n/2\nO(n log n)\n\n\n\n\nNote: timsort is also stable and often very efficient."
  },
  {
    "objectID": "qmd/pandas3edA1.html#partially-sorting-arrays",
    "href": "qmd/pandas3edA1.html#partially-sorting-arrays",
    "title": "Python for Data Analysis",
    "section": "Partially Sorting Arrays",
    "text": "Partially Sorting Arrays\n\nnumpy.partition, np.argpartition: Partition around k-th smallest element.\n\n\nrng = np.random.default_rng(12345)\narr = rng.standard_normal(20)\nnp.partition(arr, 3)  # First 3 are smallest (unsorted)\n\narray([-1.95286306, -1.42382504, -1.3677927 , -1.25666813, -0.87066174,\n       -0.75938718, -0.74088465, -0.46695317, -0.25917323, -0.07534331,\n       -0.06068952,  0.36105811,  0.57585751,  0.6488928 ,  0.78884434,\n        0.90219827,  0.96849691,  1.26372846,  1.39897899,  2.34740965])\n\n\n\nnp.argpartition returns indices:\n\n\nindices = np.argpartition(arr, 3)\narr.take(indices)  # Partial sort\n\narray([-1.95286306, -1.42382504, -1.3677927 , -1.25666813, -0.87066174,\n       -0.75938718, -0.74088465, -0.46695317, -0.25917323, -0.07534331,\n       -0.06068952,  0.36105811,  0.57585751,  0.6488928 ,  0.78884434,\n        0.90219827,  0.96849691,  1.26372846,  1.39897899,  2.34740965])"
  },
  {
    "objectID": "qmd/pandas3edA1.html#numpy.searchsorted-finding-elements",
    "href": "qmd/pandas3edA1.html#numpy.searchsorted-finding-elements",
    "title": "Python for Data Analysis",
    "section": "numpy.searchsorted: Finding Elements üîé",
    "text": "numpy.searchsorted: Finding Elements üîé\n\nsearchsorted: Binary search on sorted array; returns insertion index.\n\n\narr = np.array([0, 1, 7, 12, 15])\nprint(arr.searchsorted(9))   # Where to insert 9?\nprint(arr.searchsorted([0, 8, 11, 16]))\n\n3\n[0 3 3 5]\n\n\n\nside='right' changes behavior for equal values."
  },
  {
    "objectID": "qmd/pandas3edA1.html#searchsorted-example-binning",
    "href": "qmd/pandas3edA1.html#searchsorted-example-binning",
    "title": "Python for Data Analysis",
    "section": "searchsorted Example: Binning",
    "text": "searchsorted Example: Binning\n\ndata = np.floor(rng.uniform(0, 10000, size=50))\nbins = np.array([0, 100, 1000, 5000, 10000])\nlabels = bins.searchsorted(data)  # Bin each data point\nprint(labels)\n\n[2 3 3 3 3 4 3 3 2 4 4 4 4 4 4 4 4 4 3 3 3 4 3 4 3 3 3 3 1 4 3 2 4 3 3 3 3\n 3 3 3 3 3 3 3 3 3 3 3 4 3]\n\n\n\nCombine with pandas‚Äôs groupby for bin statistics."
  },
  {
    "objectID": "qmd/pandas3edA1.html#memory-mapped-files",
    "href": "qmd/pandas3edA1.html#memory-mapped-files",
    "title": "Python for Data Analysis",
    "section": "Memory-Mapped Files üíæ",
    "text": "Memory-Mapped Files üíæ\n\nMemory-mapped files: Interact with on-disk binary data as if in memory.\nmemmap: NumPy‚Äôs ndarray-like object. Read/write segments without loading whole file.\nCreate with np.memmap: specify path, dtype, shape, mode:\n\n\nmmap = np.memmap('mymmap', dtype='float64', mode='w+',\n                 shape=(10000, 10000))\nprint(mmap)\n\n[[0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n ...\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]\n [0. 0. 0. ... 0. 0. 0.]]"
  },
  {
    "objectID": "qmd/pandas3edA1.html#memory-mapped-files-contd",
    "href": "qmd/pandas3edA1.html#memory-mapped-files-contd",
    "title": "Python for Data Analysis",
    "section": "Memory-Mapped Files (Cont‚Äôd)",
    "text": "Memory-Mapped Files (Cont‚Äôd)\n\nSlicing returns views on disk:\n\n\nsection = mmap[:5]  # First 5 rows\n\n\nAssigning buffers in memory; use flush() to write:\n\n\nsection[:] = rng.standard_normal((5, 10000))\nmmap.flush()\n\n\nOpening existing map still requires dtype and shape:\n\n\nmmap = np.memmap('mymmap', dtype='float64', shape=(10000, 10000))\nprint(mmap)\n\n[[-0.90738246 -1.09542531  0.00714569 ...  0.27528689 -1.164065\n   0.85209933]\n [-0.01030507 -0.06457559 -1.06146483 ... -1.10033268  0.25046196\n   0.58323566]\n [ 0.45830978  1.2992377   1.71366921 ...  0.86913463 -0.78886549\n  -0.24314164]\n ...\n [ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ...  0.          0.\n   0.        ]\n [ 0.          0.          0.         ...  0.          0.\n   0.        ]]\n\n\n\nmemmap works with structured dtypes."
  },
  {
    "objectID": "qmd/pandas3edA1.html#performance-tips",
    "href": "qmd/pandas3edA1.html#performance-tips",
    "title": "Python for Data Analysis",
    "section": "Performance Tips üöÄ",
    "text": "Performance Tips üöÄ\n\nKey: Replace loops/conditionals with NumPy array/boolean operations.\nUse broadcasting.\nUse array views (slicing) ‚Äì avoid copying.\nUse ufuncs and ufunc methods.\nConsider C, FORTRAN, or Cython if needed."
  },
  {
    "objectID": "qmd/pandas3edA1.html#contiguous-memory",
    "href": "qmd/pandas3edA1.html#contiguous-memory",
    "title": "Python for Data Analysis",
    "section": "Contiguous Memory üß†",
    "text": "Contiguous Memory üß†\n\nMemory layout affects performance.\nContiguous: Elements stored in order (C or FORTRAN).\nAccessing contiguous blocks is fastest (CPU cache).\nNumPy arrays are C-contiguous by default; transpose is Fortran-contiguous.\nCheck with flags:\n\n\narr_c = np.ones((100, 10000), order='C')\narr_f = np.ones((100, 10000), order='F')\nprint(arr_c.flags)  # C_CONTIGUOUS: True, F_CONTIGUOUS: False\nprint(arr_f.flags)  # C_CONTIGUOUS: False, F_CONTIGUOUS: True\n\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n\n  C_CONTIGUOUS : False\n  F_CONTIGUOUS : True\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False"
  },
  {
    "objectID": "qmd/pandas3edA1.html#contiguous-memory-contd",
    "href": "qmd/pandas3edA1.html#contiguous-memory-contd",
    "title": "Python for Data Analysis",
    "section": "Contiguous Memory (Cont‚Äôd)",
    "text": "Contiguous Memory (Cont‚Äôd)\n\nSumming rows of C-contiguous array is usually faster.\nIf needed, use copy() with 'C' or 'F':\n\n\narr_f.copy('C').flags\n\n  C_CONTIGUOUS : True\n  F_CONTIGUOUS : False\n  OWNDATA : True\n  WRITEABLE : True\n  ALIGNED : True\n  WRITEBACKIFCOPY : False\n\n\n\nImportant: Views are not guaranteed contiguous; check flags.contiguous."
  },
  {
    "objectID": "qmd/pandas3edA1.html#summary",
    "href": "qmd/pandas3edA1.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary üìö",
    "text": "Summary üìö\n\nndarray internals: dtype, shape, strides.\nArray manipulations: reshaping, concatenation, splitting, repeating.\nBroadcasting.\nAdvanced ufunc methods.\nStructured arrays.\nSorting (indirect, partial).\nMemory-mapped files.\nPerformance: contiguous memory.\nNumba!"
  },
  {
    "objectID": "qmd/pandas3edA1.html#thoughts-and-discussion",
    "href": "qmd/pandas3edA1.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion üí≠",
    "text": "Thoughts and Discussion üí≠\n\nHow can you apply these techniques?\nWhen are memory-mapped files useful?\nWhen to use Numba?\nStructured arrays vs.¬†pandas DataFrames?\nSorting algorithm choice?\nVectorized operations vs.¬†loops?\nExplore Numba further!"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html",
    "href": "qmd/pandas3ed2cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨Á´†‰ªãÁªç Python„ÄÅIPython Âíå Jupyter Notebooks ÁöÑÂü∫Êú¨Ê¶ÇÂøµÔºåËøô‰∫õÊòØÊï∞ÊçÆÂàÜÊûêÁöÑÂøÖÂ§áÂ∑•ÂÖ∑„ÄÇÊàë‰ª¨Â∞ÜÊ∂µÁõñÔºö\n\nPython ËØ≠Ë®ÄÂü∫Á°ÄÔºöÊ†∏ÂøÉËØ≠Ê≥ïÂíåËØ≠‰πâ„ÄÇ\nIPythonÔºöÂ¢ûÂº∫ÁöÑ‰∫§‰∫íÂºè Python shell„ÄÇ\nJupyter NotebooksÔºöÂü∫‰∫é Web ÁöÑ‰∫§‰∫íÂºèËÆ°ÁÆóÁéØÂ¢É„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#python-ËØ≠Ë®ÄÂü∫Á°Äipython-Âíå-jupyter-notebooks",
    "href": "qmd/pandas3ed2cn.html#python-ËØ≠Ë®ÄÂü∫Á°Äipython-Âíå-jupyter-notebooks",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "Êú¨Á´†‰ªãÁªç Python„ÄÅIPython Âíå Jupyter Notebooks ÁöÑÂü∫Êú¨Ê¶ÇÂøµÔºåËøô‰∫õÊòØÊï∞ÊçÆÂàÜÊûêÁöÑÂøÖÂ§áÂ∑•ÂÖ∑„ÄÇÊàë‰ª¨Â∞ÜÊ∂µÁõñÔºö\n\nPython ËØ≠Ë®ÄÂü∫Á°ÄÔºöÊ†∏ÂøÉËØ≠Ê≥ïÂíåËØ≠‰πâ„ÄÇ\nIPythonÔºöÂ¢ûÂº∫ÁöÑ‰∫§‰∫íÂºè Python shell„ÄÇ\nJupyter NotebooksÔºöÂü∫‰∫é Web ÁöÑ‰∫§‰∫íÂºèËÆ°ÁÆóÁéØÂ¢É„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÁÆÄ‰ªãÁª≠",
    "href": "qmd/pandas3ed2cn.html#ÁÆÄ‰ªãÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁÆÄ‰ªãÔºàÁª≠Ôºâ",
    "text": "ÁÆÄ‰ªãÔºàÁª≠Ôºâ\nPython Êï∞ÊçÆÂàÜÊûêËÉΩÂäõÁöÑÊºîÂèòÂ∞±ÂÉè‰∏Ä‰∏™‚ÄúÂÖàÊúâÈ∏°ËøòÊòØÂÖàÊúâËõã‚ÄùÁöÑÂú∫ÊôØ„ÄÇÊúÄÂàùÔºåÂÉè pandas„ÄÅscikit-learn Âíå statsmodels ËøôÊ†∑ÁöÑÂ∫ìËøò‰∏çÂ§™ÊàêÁÜü„ÄÇ\nÂ¶Ç‰ªäÔºåËøô‰∫õÂ∫ìÂ∑≤ÁªèÊàêÁÜüÔºåÂΩ¢Êàê‰∫Ü‰∏Ä‰∏™Âº∫Â§ßÁöÑÁîüÊÄÅÁ≥ªÁªüÔºåÁî®‰∫éÊï∞ÊçÆÁßëÂ≠¶„ÄÅÊú∫Âô®Â≠¶‰π†ÂíåÁªüËÆ°ËÆ°ÁÆó„ÄÇËøô‰ΩøÂæó Python Êàê‰∏∫‰ªª‰ΩïÂ§ÑÁêÜÊï∞ÊçÆÁöÑ‰∫∫ÁöÑÁªù‰Ω≥Â∑•ÂÖ∑„ÄÇüéâ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûê",
    "href": "qmd/pandas3ed2cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûê",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºü\n\nÊï∞ÊçÆÊï¥ÁêÜÁöÑÁêÜÊÉ≥ÈÄâÊã©ÔºöPython ÊìÖÈïøÂ∞ÜÊùÇ‰π±Êó†Á´†ÁöÑÈùûÁªìÊûÑÂåñÊï∞ÊçÆËΩ¨Êç¢‰∏∫Âπ≤ÂáÄÁöÑË°®Ê†ºÊ†ºÂºè„ÄÇËøôÂØπ‰∫éÂáÜÂ§áÁî®‰∫éÂàÜÊûêÁöÑÊï∞ÊçÆÈõÜËá≥ÂÖ≥ÈáçË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÁª≠",
    "href": "qmd/pandas3ed2cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºüÔºàÁª≠Ôºâ",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºüÔºàÁª≠Ôºâ\n\n‰∏∞ÂØåÁöÑÂ∫ìÁîüÊÄÅÁ≥ªÁªüÔºöpandas„ÄÅNumPy„ÄÅscikit-learn Âíå Matplotlib Á≠âÂ∫ì‰∏∫Êï∞ÊçÆÊìç‰Ωú„ÄÅÂàÜÊûêÂíåÂèØËßÜÂåñÊèê‰æõ‰∫ÜÂº∫Â§ßÁöÑÂ∑•ÂÖ∑„ÄÇ\nÂØåÊúâË°®Áé∞ÂäõÂíåÂèØËØªÊÄßÁöÑËØ≠Ê≥ïÔºöÂèØËØªÊÄß‰Ωø Python Êòì‰∫éÂ≠¶‰π†Âíå‰ΩøÁî®ÔºåÁâπÂà´ÊòØÂØπ‰∫éÂàùÂ≠¶ËÄÖ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed2cn.html#‰∏∫‰ªÄ‰πàÈÄâÊã©-python-ËøõË°åÊï∞ÊçÆÂàÜÊûêÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºüÔºàÂèØËßÜÂåñÔºâ",
    "text": "‰∏∫‰ªÄ‰πàÈÄâÊã© Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÔºüÔºàÂèØËßÜÂåñÔºâ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂÖ•Èó®ÂÆûÊó∂ÁºñÁ†Å",
    "href": "qmd/pandas3ed2cn.html#ÂÖ•Èó®ÂÆûÊó∂ÁºñÁ†Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ•Èó®ÔºöÂÆûÊó∂ÁºñÁ†Å üíª",
    "text": "ÂÖ•Èó®ÔºöÂÆûÊó∂ÁºñÁ†Å üíª\nÊúÄÂ•ΩÁöÑÂ≠¶‰π†ÊñπÊ≥ïÊòØÂÆûË∑µÔºÅÊàë‰ª¨Â∞ÜÈÄöËøá IPython Êàñ Jupyter ‰ºöËØùÊù•Êé¢Á¥¢Ëøô‰∫õÊ¶ÇÂøµ„ÄÇË∑üÁùÄÁ§∫‰æã‰∏ÄËµ∑Â≠¶‰π†Ôºå‰ª•ÊúÄÂ§ßÁ®ãÂ∫¶Âú∞ÊèêÈ´òÂ≠¶‰π†ÊïàÊûú„ÄÇ\nÁÜüÊÇâÈîÆÁõòÈ©±Âä®„ÄÅÁ±ª‰ººÊéßÂà∂Âè∞ÁöÑÂºÄÂèë‰πüÊòØÂ≠¶‰π†ËøáÁ®ãÁöÑ‰∏ÄÈÉ®ÂàÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#python-Ëß£ÈáäÂô®",
    "href": "qmd/pandas3ed2cn.html#python-Ëß£ÈáäÂô®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "2.1 Python Ëß£ÈáäÂô®",
    "text": "2.1 Python Ëß£ÈáäÂô®\n\nPython ÊòØ‰∏ÄÁßçËß£ÈáäÂûãËØ≠Ë®Ä„ÄÇËß£ÈáäÂô®ÈÄêË°åÊâßË°å‰ª£Á†Å„ÄÇ\n‰ΩøÁî® python ÂëΩ‰ª§ÂêØÂä®Ê†áÂáÜËß£ÈáäÂô®„ÄÇ\n\n$ python\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\n[GCC 10.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; a = 5  # ÂÆö‰πâ‰∏Ä‰∏™ÂèòÈáè aÔºåÂπ∂ËµãÂÄº‰∏∫ 5\n&gt;&gt;&gt; print(a)  # ÊâìÂç∞ÂèòÈáè a ÁöÑÂÄº\n5"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#python-Ëß£ÈáäÂô®Áª≠",
    "href": "qmd/pandas3ed2cn.html#python-Ëß£ÈáäÂô®Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Python Ëß£ÈáäÂô®ÔºàÁª≠Ôºâ",
    "text": "Python Ëß£ÈáäÂô®ÔºàÁª≠Ôºâ\n\n&gt;&gt;&gt; ÊòØÊÇ®ÈîÆÂÖ•‰ª£Á†ÅÁöÑÊèêÁ§∫Á¨¶„ÄÇ\n‰ΩøÁî® exit() Êàñ Ctrl-DÔºàLinux/macOSÔºâÈÄÄÂá∫„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ËøêË°å-python-Á®ãÂ∫è",
    "href": "qmd/pandas3ed2cn.html#ËøêË°å-python-Á®ãÂ∫è",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøêË°å Python Á®ãÂ∫è",
    "text": "ËøêË°å Python Á®ãÂ∫è\n\nÂàõÂª∫‰∏Ä‰∏™ .py Êñá‰ª∂Ôºà‰æãÂ¶ÇÔºåhello_world.pyÔºâ„ÄÇ\n‰ªéÁªàÁ´ØËøêË°åÔºöpython hello_world.py„ÄÇÁ°Æ‰øùÊñá‰ª∂‰Ωç‰∫éÊÇ®ÁöÑÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï‰∏≠„ÄÇ\n\n\n# hello_world.py\nprint(\"Hello world\")  # ÊâìÂç∞ \"Hello world\"\n\nHello world"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ËøêË°å-python-Á®ãÂ∫èÁª≠",
    "href": "qmd/pandas3ed2cn.html#ËøêË°å-python-Á®ãÂ∫èÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøêË°å Python Á®ãÂ∫èÔºàÁª≠Ôºâ",
    "text": "ËøêË°å Python Á®ãÂ∫èÔºàÁª≠Ôºâ\n$ python hello_world.py\nHello world"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ipython-Âü∫Á°Ä",
    "href": "qmd/pandas3ed2cn.html#ipython-Âü∫Á°Ä",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "2.2 IPython Âü∫Á°Ä",
    "text": "2.2 IPython Âü∫Á°Ä\n\nIPython ÊòØ‰∏Ä‰∏™Â¢ûÂº∫ÁöÑ Python Ëß£ÈáäÂô®„ÄÇÂÆÉ‰∏ì‰∏∫‰∫§‰∫íÂºèÊï∞ÊçÆÂàÜÊûêËÄåËÆæËÆ°„ÄÇ\nJupyter Notebooks ÊòØÊûÑÂª∫Âú® IPython ‰πã‰∏äÁöÑÂü∫‰∫é Web ÁöÑÁéØÂ¢É„ÄÇÂÆÉ‰ª¨Êèê‰æõ‰∫Ü‰∏∞ÂØåÁöÑ‰∫§‰∫íÂºè‰ΩìÈ™å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ipython-Âü∫Á°ÄÁª≠",
    "href": "qmd/pandas3ed2cn.html#ipython-Âü∫Á°ÄÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "2.2 IPython Âü∫Á°ÄÔºàÁª≠Ôºâ",
    "text": "2.2 IPython Âü∫Á°ÄÔºàÁª≠Ôºâ\n\n‰ΩøÁî® ipython ÂëΩ‰ª§ÂêØÂä® IPython„ÄÇ\n\n$ ipython\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.31.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]:\n\nËØ∑Ê≥®ÊÑè In [1]: ÊèêÁ§∫Á¨¶ÔºåÂÆÉ‰∏éÊ†áÂáÜÁöÑ &gt;&gt;&gt; ‰∏çÂêå„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ipythonËøêË°å‰ª£Á†Å",
    "href": "qmd/pandas3ed2cn.html#ipythonËøêË°å‰ª£Á†Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPythonÔºöËøêË°å‰ª£Á†Å",
    "text": "IPythonÔºöËøêË°å‰ª£Á†Å\n\nÈÄöËøáÈîÆÂÖ•‰ª£Á†ÅÂπ∂Êåâ Enter ÈîÆÊù•ÊâßË°å‰ª£Á†Å„ÄÇ\nÂΩìÊÇ®ÈîÆÂÖ•ÂØπË±°ÁöÑÂêçÁß∞Êó∂ÔºåIPython ‰ºöÊòæÁ§∫ÂØπË±°ÁöÑÂ≠óÁ¨¶‰∏≤Ë°®Á§∫ÂΩ¢Âºè„ÄÇ\n\n\nIn [1]: a = 5  # ÂÆö‰πâÂèòÈáè a Âπ∂ËµãÂÄº‰∏∫ 5\n\nIn [2]: a  # Áõ¥Êé•ËæìÂÖ•ÂèòÈáèÂêçÔºåIPython ‰ºöÊòæÁ§∫ÂÖ∂ÂÄº\nOut[2]: 5\n\nIn [3]: import numpy as np  # ÂØºÂÖ• numpy Â∫ìÔºåÂπ∂ÁÆÄÂÜô‰∏∫ np\n\nIn [4]: data = [np.random.standard_normal() for i in range(7)]  # ÁîüÊàêÂåÖÂê´ 7 ‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞ÁöÑÂàóË°®"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ipythonËøêË°å‰ª£Á†ÅÁª≠",
    "href": "qmd/pandas3ed2cn.html#ipythonËøêË°å‰ª£Á†ÅÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPythonÔºöËøêË°å‰ª£Á†ÅÔºàÁª≠Ôºâ",
    "text": "IPythonÔºöËøêË°å‰ª£Á†ÅÔºàÁª≠Ôºâ\n\nIn [5]: data  # ÊòæÁ§∫ data ÂàóË°®\nOut[5]:\n[-0.20470765948471295,\n 0.47894333805754824,\n -0.5194387150567381,\n -0.55573030434749,\n 1.9657805725027142,\n 1.3934058329729904,\n 0.09290787674371767]\n\n\nIPython ÁöÑËæìÂá∫ÈÄöÂ∏∏ÊØîÊ†áÂáÜ Python ÁöÑ print() Êõ¥ÂÖ∑ÂèØËØªÊÄß„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ËøêË°å-jupyter-notebook",
    "href": "qmd/pandas3ed2cn.html#ËøêË°å-jupyter-notebook",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøêË°å Jupyter Notebook",
    "text": "ËøêË°å Jupyter Notebook\n\nJupyter Notebook ÊòØ‰∏Ä‰∏™ÂäüËÉΩÂº∫Â§ßÁöÑ‰∫§‰∫íÂºèÊñáÊ°£ÔºåÈÄÇÁî®‰∫é‰ª£Á†Å„ÄÅÊñáÊú¨Ôºà‰ΩøÁî® MarkdownÔºâ„ÄÅÂèØËßÜÂåñÁ≠â„ÄÇ\n‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§ÂêØÂä®Ôºöjupyter notebook\n\n$ jupyter notebook\n[I 15:20:52.739 NotebookApp] Serving notebooks from local directory:\n/home/wesm/code/pydata-book\n...\n[I 15:20:52.740 NotebookApp] Use Control-C to stop this server and shut down\nall kernels..."
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ËøêË°å-jupyter-notebookÁª≠",
    "href": "qmd/pandas3ed2cn.html#ËøêË°å-jupyter-notebookÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËøêË°å Jupyter NotebookÔºàÁª≠Ôºâ",
    "text": "ËøêË°å Jupyter NotebookÔºàÁª≠Ôºâ\n\nJupyter ÈÄöÂ∏∏‰ºöÂú®ÊÇ®ÁöÑ Web ÊµèËßàÂô®‰∏≠Ëá™Âä®ÊâìÂºÄ„ÄÇÂ¶ÇÊûúÊ≤°ÊúâÔºåËØ∑ÂØºËà™Âà∞Êèê‰æõÁöÑÂú∞ÂùÄÔºà‰æãÂ¶ÇÔºåhttp://localhost:8888Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#jupyter-notebookÁïåÈù¢",
    "href": "qmd/pandas3ed2cn.html#jupyter-notebookÁïåÈù¢",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Jupyter NotebookÔºöÁïåÈù¢",
    "text": "Jupyter NotebookÔºöÁïåÈù¢\n\n\nÁôªÂΩïÈ°µÈù¢ÔºöÊòæÁ§∫ÊÇ®ÂêØÂä® Jupyter ÁöÑÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#jupyter-notebookÁïåÈù¢Áª≠",
    "href": "qmd/pandas3ed2cn.html#jupyter-notebookÁïåÈù¢Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Jupyter NotebookÔºöÁïåÈù¢ÔºàÁª≠Ôºâ",
    "text": "Jupyter NotebookÔºöÁïåÈù¢ÔºàÁª≠Ôºâ\n\nÊñ∞Âª∫ NotebookÔºöÂçïÂáª‚ÄúNew‚Äù-&gt;‚ÄúPython 3‚Äù‰ª•ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ Notebook„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#jupyter-notebookÂçïÂÖÉÊ†º",
    "href": "qmd/pandas3ed2cn.html#jupyter-notebookÂçïÂÖÉÊ†º",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Jupyter NotebookÔºöÂçïÂÖÉÊ†º",
    "text": "Jupyter NotebookÔºöÂçïÂÖÉÊ†º"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#jupyter-notebookÂçïÂÖÉÊ†ºÁª≠",
    "href": "qmd/pandas3ed2cn.html#jupyter-notebookÂçïÂÖÉÊ†ºÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Jupyter NotebookÔºöÂçïÂÖÉÊ†ºÔºàÁª≠Ôºâ",
    "text": "Jupyter NotebookÔºöÂçïÂÖÉÊ†ºÔºàÁª≠Ôºâ\n\n‰ª£Á†ÅÂçïÂÖÉÊ†ºÔºöÊÇ®ÁºñÂÜôÂíåÊâßË°å Python ‰ª£Á†ÅÁöÑÂú∞Êñπ„ÄÇÊåâ Shift-Enter ËøêË°åÂçïÂÖÉÊ†º„ÄÇ\nMarkdown ÂçïÂÖÉÊ†ºÔºöÁî®‰∫éÊñáÊú¨„ÄÅËß£ÈáäÂíåÊñáÊ°£Ôºà‰ΩøÁî® Markdown ËØ≠Ê≥ïÔºâ„ÄÇ\n‰øùÂ≠ò Notebook„ÄÇÂÆÉÂ∞ÜÂàõÂª∫‰∏Ä‰∏™Êâ©Â±ïÂêç‰∏∫ .ipynb ÁöÑÊñá‰ª∂ÔºåËøôÊòØ‰∏Ä‰∏™ÂåÖÂê´ÊâÄÊúâÂÜÖÂÆπÁöÑËá™ÂåÖÂê´Ê†ºÂºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#jupyter-notebookÁ§∫‰æãËßÜÂõæ",
    "href": "qmd/pandas3ed2cn.html#jupyter-notebookÁ§∫‰æãËßÜÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Jupyter NotebookÔºöÁ§∫‰æãËßÜÂõæ",
    "text": "Jupyter NotebookÔºöÁ§∫‰æãËßÜÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#jupyter-notebookÁ§∫‰æãËßÜÂõæÊèèËø∞",
    "href": "qmd/pandas3ed2cn.html#jupyter-notebookÁ§∫‰æãËßÜÂõæÊèèËø∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Jupyter NotebookÔºöÁ§∫‰æãËßÜÂõæÊèèËø∞",
    "text": "Jupyter NotebookÔºöÁ§∫‰æãËßÜÂõæÊèèËø∞\nÊ≠§ÂõæÊòæÁ§∫‰∫Ü‰∏Ä‰∏™ Jupyter NotebookÔºåÂÖ∂‰∏≠ÂåÖÂê´Êï∞ÊçÆÂàÜÊûêÂíåÊñáÊú¨ÁöÑ‰ª£Á†ÅÔºö\n\nÊ†áÈ¢òÔºö‚ÄúIntroductory examples‚Äù„ÄÇ\nÁ´†ËäÇÊ†áÈ¢òÔºö‚Äú1.usa.gov data from bit.ly‚Äù„ÄÇ\n‰ª£Á†ÅÂçïÂÖÉÊ†ºÔºö\n\n%pwdÔºöÊòæÁ§∫ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩï„ÄÇ\n‰ªéÊñá‰ª∂ËØªÂèñÂíåÂ§ÑÁêÜÊï∞ÊçÆ„ÄÇ\n‰ΩøÁî® json Â∫ì„ÄÇ\nËÆøÈóÆÁâπÂÆöÁöÑÊï∞ÊçÆÂÖÉÁ¥†„ÄÇ\n\nÊñáÊú¨ÂçïÂÖÉÊ†ºÔºö‚ÄúCounting time zones in pure Python‚Äù„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ipython-Âíå-jupytertab-Ë°•ÂÖ®",
    "href": "qmd/pandas3ed2cn.html#ipython-Âíå-jupytertab-Ë°•ÂÖ®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPython Âíå JupyterÔºöTab Ë°•ÂÖ® ‚å®Ô∏è",
    "text": "IPython Âíå JupyterÔºöTab Ë°•ÂÖ® ‚å®Ô∏è\n\nTab Ë°•ÂÖ®Ôºö‰∏Ä‰∏™Â∑®Â§ßÁöÑËäÇÁúÅÊó∂Èó¥ÁöÑÂ∑•ÂÖ∑ÔºÅÂú®ÈîÆÂÖ•Êó∂Êåâ Tab ÈîÆÂèØ‰ª•Ôºö\n\nË°•ÂÖ®ÂèòÈáèÂêç„ÄÇ\nÊòæÁ§∫ÂØπË±°ÁöÑÊñπÊ≥ïÂíåÂ±ûÊÄß„ÄÇ\nË°•ÂÖ®Êñá‰ª∂Ë∑ØÂæÑ„ÄÇ\nÊü•ÁúãÂáΩÊï∞ÁöÑÂÖ≥ÈîÆÂ≠óÂèÇÊï∞„ÄÇ\n\n\n\nIn [1]: an_apple = 27  # ÂÆö‰πâ‰∏Ä‰∏™ÂèòÈáè an_apple\n\nIn [2]: an_example = 42  # ÂÆö‰πâÂè¶‰∏Ä‰∏™ÂèòÈáè an_example\n\nIn [3]: an&lt;Tab&gt;  # Âú®ËøôÈáåÊåâ Tab ÈîÆ\nan_apple  an_example  any  # IPython ‰ºöÊòæÁ§∫ÂèØËÉΩÁöÑË°•ÂÖ®"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#tab-Ë°•ÂÖ®ÊñπÊ≥ïÂíåÊ®°Âùó",
    "href": "qmd/pandas3ed2cn.html#tab-Ë°•ÂÖ®ÊñπÊ≥ïÂíåÊ®°Âùó",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Tab Ë°•ÂÖ®ÔºöÊñπÊ≥ïÂíåÊ®°Âùó",
    "text": "Tab Ë°•ÂÖ®ÔºöÊñπÊ≥ïÂíåÊ®°Âùó\n\nIn [3]: b = [1, 2, 3]  # ÂÆö‰πâ‰∏Ä‰∏™ÂàóË°® b\n\nIn [4]: b.&lt;Tab&gt;  # Âú®ÁÇπÂè∑ÂêéÊåâ Tab ÈîÆ\nappend()  count()   insert()  reverse()  # ÊòæÁ§∫ÂàóË°® b ÁöÑÊâÄÊúâÂèØÁî®ÊñπÊ≥ï\nclear()   extend()  pop()     sort()\ncopy()    index()   remove()"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#tab-Ë°•ÂÖ®ÊñπÊ≥ïÂíåÊ®°ÂùóÁª≠",
    "href": "qmd/pandas3ed2cn.html#tab-Ë°•ÂÖ®ÊñπÊ≥ïÂíåÊ®°ÂùóÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Tab Ë°•ÂÖ®ÔºöÊñπÊ≥ïÂíåÊ®°ÂùóÔºàÁª≠Ôºâ",
    "text": "Tab Ë°•ÂÖ®ÔºöÊñπÊ≥ïÂíåÊ®°ÂùóÔºàÁª≠Ôºâ\n\nIn [1]: import datetime  # ÂØºÂÖ• datetime Ê®°Âùó\n\nIn [2]: datetime.&lt;Tab&gt;  # Âú®ÁÇπÂè∑ÂêéÊåâ Tab ÈîÆ\ndate       MAXYEAR    timedelta  # ÊòæÁ§∫ datetime Ê®°ÂùóÁöÑÊâÄÊúâÂèØÁî®ÊàêÂëò\ndatetime   MINYEAR    timezone\ndatetime_CAPI time      tzinfo\n\n\nIPython ÈªòËÆ§ÈöêËóè‰ª•‰∏ãÂàíÁ∫øÂºÄÂ§¥ÁöÑÊñπÊ≥ïÂíåÂ±ûÊÄß„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#tab-Ë°•ÂÖ®ÂáΩÊï∞ÂèÇÊï∞",
    "href": "qmd/pandas3ed2cn.html#tab-Ë°•ÂÖ®ÂáΩÊï∞ÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Tab Ë°•ÂÖ®ÔºöÂáΩÊï∞ÂèÇÊï∞",
    "text": "Tab Ë°•ÂÖ®ÔºöÂáΩÊï∞ÂèÇÊï∞\n\n\nTab Ë°•ÂÖ®‰πüÈÄÇÁî®‰∫éÂáΩÊï∞ÂÖ≥ÈîÆÂ≠óÂèÇÊï∞ÔºåÂåÖÊã¨ = Á¨¶Âè∑ÔºÅ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ipython-Âíå-jupyterÂÜÖÁúÅ",
    "href": "qmd/pandas3ed2cn.html#ipython-Âíå-jupyterÂÜÖÁúÅ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "IPython Âíå JupyterÔºöÂÜÖÁúÅ üîç",
    "text": "IPython Âíå JupyterÔºöÂÜÖÁúÅ üîç\n\nÂÜÖÁúÅÔºö‰ΩøÁî® ? Ëé∑ÂèñÊúâÂÖ≥ÂØπË±°ÁöÑ‰ø°ÊÅØ„ÄÇ\n\n\nIn [1]: b = [1, 2, 3]  # ÂÆö‰πâ‰∏Ä‰∏™ÂàóË°® b\n\nIn [2]: b?  # Âú®ÂèòÈáèÂêçÂêéÂä†‰∏äÈóÆÂè∑ÔºåËøõË°åÂÜÖÁúÅ\nType:        list  # Á±ªÂûãÔºöÂàóË°®\nString form: [1, 2, 3]  # Â≠óÁ¨¶‰∏≤ÂΩ¢Âºè\nLength:      3  # ÈïøÂ∫¶Ôºö3\nDocstring:  # ÊñáÊ°£Â≠óÁ¨¶‰∏≤\nBuilt-in mutable sequence.  # ÂÜÖÁΩÆÁöÑÂèØÂèòÂ∫èÂàó\n\nIf no argument is given, the constructor creates a new empty list.  # Â¶ÇÊûúÊ≤°ÊúâÁªôÂá∫ÂèÇÊï∞ÔºåÊûÑÈÄ†ÂáΩÊï∞Â∞ÜÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÁ©∫ÂàóË°®„ÄÇ\nThe argument must be an iterable if specified.  # Â¶ÇÊûúÊåáÂÆö‰∫ÜÂèÇÊï∞ÔºåÂàôÂèÇÊï∞ÂøÖÈ°ªÊòØÂèØËø≠‰ª£ÂØπË±°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂÜÖÁúÅÂáΩÊï∞Á§∫‰æã",
    "href": "qmd/pandas3ed2cn.html#ÂÜÖÁúÅÂáΩÊï∞Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁúÅÔºöÂáΩÊï∞Á§∫‰æã",
    "text": "ÂÜÖÁúÅÔºöÂáΩÊï∞Á§∫‰æã\n\ndef add_numbers(a, b):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ add_numbers\n    \"\"\"\n    Add two numbers together  # ÂáΩÊï∞ÁöÑÊñáÊ°£Â≠óÁ¨¶‰∏≤\n\n    Returns\n    -------\n    the_sum : type of arguments  # ËøîÂõûÂÄºÁöÑÊèèËø∞\n    \"\"\"\n    return a + b  # ËøîÂõû a Âíå b ÁöÑÂíå\n\nIn [6]: add_numbers?  # ÂØπÂáΩÊï∞ËøõË°åÂÜÖÁúÅ\nSignature: add_numbers(a, b)  # ÂáΩÊï∞Á≠æÂêç\nDocstring:  # ÊñáÊ°£Â≠óÁ¨¶‰∏≤\nAdd two numbers together  # Â∞Ü‰∏§‰∏™Êï∞Â≠óÁõ∏Âä†\n\nReturns\n-------\nthe_sum : type of arguments  # ËøîÂõûÂÄºÁöÑÁ±ªÂûã\nFile:      &lt;ipython-input-9-6a548a216e27&gt;  # Êñá‰ª∂Âêç\nType:      function  # Á±ªÂûãÔºöÂáΩÊï∞\n\n\n? ËøêÁÆóÁ¨¶ÊòæÁ§∫ÊñáÊ°£Â≠óÁ¨¶‰∏≤ÔºåÊèê‰æõÊúâÂÖ≥ÂáΩÊï∞ÁöÑ‰ø°ÊÅØ„ÄÇ\nÂÜÖÁúÅËøòÊòæÁ§∫ÂáΩÊï∞ÊàñÂÆû‰æãÊñπÊ≥ïÂíåÊñáÊ°£Â≠óÁ¨¶‰∏≤„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂÜÖÁúÅÈÄöÈÖçÁ¨¶ÊêúÁ¥¢",
    "href": "qmd/pandas3ed2cn.html#ÂÜÖÁúÅÈÄöÈÖçÁ¨¶ÊêúÁ¥¢",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÜÖÁúÅÔºöÈÄöÈÖçÁ¨¶ÊêúÁ¥¢",
    "text": "ÂÜÖÁúÅÔºöÈÄöÈÖçÁ¨¶ÊêúÁ¥¢\n\nÂ∞Ü * ‰∏é ? ‰∏ÄËµ∑‰ΩøÁî®‰ª•ÊêúÁ¥¢ IPython ÂëΩÂêçÁ©∫Èó¥„ÄÇ\n\n\nIn [9]: import numpy as np  # ÂØºÂÖ• numpy Â∫ì\n\nIn [10]: np.*load*?  # ÊêúÁ¥¢ numpy ‰∏≠ÊâÄÊúâÂåÖÂê´ \"load\" ÁöÑÂêçÁß∞\nnp.__loader__  # ÂåπÈÖçÂà∞ÁöÑÂêçÁß∞\nnp.load\nnp.loads\nnp.loadtxt\n\n\nËøôÂ∞ÜÊòæÁ§∫ NumPy ÂëΩÂêçÁ©∫Èó¥‰∏≠ÊâÄÊúâÂåÖÂê´ ‚Äúload‚Äù ÁöÑÂêçÁß∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#python-ËØ≠Ë®ÄÂü∫Á°Ä",
    "href": "qmd/pandas3ed2cn.html#python-ËØ≠Ë®ÄÂü∫Á°Ä",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "2.3 Python ËØ≠Ë®ÄÂü∫Á°Ä",
    "text": "2.3 Python ËØ≠Ë®ÄÂü∫Á°Ä\nÁé∞Âú®ÔºåËÆ©Êàë‰ª¨Ê∑±ÂÖ•‰∫ÜËß£ Python ËØ≠Ë®ÄÊú¨Ë∫´ÁöÑÊ†∏ÂøÉËØ≠Ê≥ïÂíåËØ≠‰πâ„ÄÇ\n\nËØ≠Ë®ÄËØ≠‰πâ\n\nPython Âº∫Ë∞ÉÂèØËØªÊÄß„ÄÅÁÆÄÂçïÊÄßÂíåÊòéÁ°ÆÊÄß„ÄÇÂÆÉÈÄöÂ∏∏Ë¢´ÊèèËø∞‰∏∫‚ÄúÂèØÊâßË°åÁöÑ‰º™‰ª£Á†Å‚Äù„ÄÇ\n\n\n\nÁº©ËøõÔºåËÄå‰∏çÊòØÂ§ßÊã¨Âè∑ üìè\n\nPython ‰ΩøÁî®Áº©ËøõÔºàÁ©∫Ê†ºÊàñÂà∂Ë°®Á¨¶ÔºâÊù•ÊûÑÈÄ†‰ª£Á†ÅÔºåËÄå‰∏çÊòØÂ§ßÊã¨Âè∑ {}„ÄÇ\n\n\nfor x in array:  # for Âæ™ÁéØÔºåÈÅçÂéÜÊï∞ÁªÑ array\n    if x &lt; pivot:  # if Êù°‰ª∂ËØ≠Âè•ÔºåÂ¶ÇÊûú x Â∞è‰∫é pivot\n        less.append(x)  # Â∞Ü x Ê∑ªÂä†Âà∞ less ÂàóË°®\n    else:  # Âê¶Âàô\n        greater.append(x)  # Â∞Ü x Ê∑ªÂä†Âà∞ greater ÂàóË°®\n\n\nÂÜíÂè∑ : Ë°®Á§∫Áº©ËøõÂùóÁöÑÂºÄÂßã„ÄÇ\n‰∏ÄËá¥ÁöÑÁº©ËøõËá≥ÂÖ≥ÈáçË¶ÅÔºÅ ‰ΩøÁî®Âõõ‰∏™Á©∫Ê†º„ÄÇ\n\n\n\n\n\n\n\nNote\n\n\n\nÂº∫ÁÉàÂª∫ËÆÆ‰ΩøÁî®Âõõ‰∏™Á©∫Ê†º‰Ωú‰∏∫ÈªòËÆ§Áº©ËøõÔºåÂπ∂Â∞ÜÂà∂Ë°®Á¨¶ÊõøÊç¢‰∏∫Âõõ‰∏™Á©∫Ê†º„ÄÇËÆ∏Â§öÊñáÊú¨ÁºñËæëÂô®ÈÉΩÊúâËá™Âä®Â∞ÜÂà∂Ë°®Á¨¶ÊõøÊç¢‰∏∫Á©∫Ê†ºÁöÑËÆæÁΩÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂàÜÂè∑",
    "href": "qmd/pandas3ed2cn.html#ÂàÜÂè∑",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÂè∑",
    "text": "ÂàÜÂè∑\n\nPython ËØ≠Âè•ÈÄöÂ∏∏‰∏çÈúÄË¶ÅÂàÜÂè∑„ÄÇ\nÂàÜÂè∑ÂèØ‰ª•ÂàÜÈöîÂçïË°å‰∏äÁöÑÂ§ö‰∏™ËØ≠Âè•Ôºå‰ΩÜÈÄöÂ∏∏‰∏çÈºìÂä±ËøôÊ†∑ÂÅöÔºå‰ª•ÊèêÈ´òÂèØËØªÊÄß„ÄÇ\n\n\na = 5; b = 6; c = 7  # ÈÄöÂ∏∏ÈÅøÂÖçËøôÁßçÈ£éÊ†ºÔºåÂÜôÊàêÂ§öË°åÊõ¥Ê∏ÖÊô∞"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∏ÄÂàáÁöÜÂØπË±°",
    "href": "qmd/pandas3ed2cn.html#‰∏ÄÂàáÁöÜÂØπË±°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏ÄÂàáÁöÜÂØπË±° üçé",
    "text": "‰∏ÄÂàáÁöÜÂØπË±° üçé\n\nÂú® Python ‰∏≠Ôºå‰∏ÄÂàáÈÉΩÊòØÂØπË±°ÔºöÊï∞Â≠ó„ÄÅÂ≠óÁ¨¶‰∏≤„ÄÅÂàóË°®„ÄÅÂáΩÊï∞„ÄÅÁ±ª„ÄÅÊ®°ÂùóÁ≠â„ÄÇ\nÊØè‰∏™ÂØπË±°ÈÉΩÊúâ‰∏Ä‰∏™Á±ªÂûãÔºà‰æãÂ¶ÇÔºåint„ÄÅstr„ÄÅlist„ÄÅfunctionÔºâÂíåÂÜÖÈÉ®Êï∞ÊçÆ„ÄÇ\nËøô‰ΩøÂæó Python ÈùûÂ∏∏ÁÅµÊ¥ª„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Ê≥®Èáä",
    "href": "qmd/pandas3ed2cn.html#Ê≥®Èáä",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≥®Èáä üí¨",
    "text": "Ê≥®Èáä üí¨\n\n‰ΩøÁî®‰∫ïÂè∑ # ÂàõÂª∫Ê≥®Èáä„ÄÇ‰∏ÄË°å‰∏≠ # ‰πãÂêéÁöÑ‰ªª‰ΩïÂÜÖÂÆπÈÉΩÂ∞ÜË¢´ÂøΩÁï•„ÄÇ\n\n\nresults = []  # ÂàùÂßãÂåñ‰∏Ä‰∏™Á©∫ÂàóË°® results\nfor line in file_handle:  # ÈÅçÂéÜÊñá‰ª∂Âè•ÊüÑ file_handle ‰∏≠ÁöÑÊØè‰∏ÄË°å\n    # keep the empty lines for now  # ÊöÇÊó∂‰øùÁïôÁ©∫Ë°å\n    # if len(line) == 0:  # Â¶ÇÊûúË°åÁöÑÈïøÂ∫¶‰∏∫ 0\n    #     continue  # Ë∑≥ËøáÂΩìÂâçËø≠‰ª£\n    results.append(line.replace(\"foo\", \"bar\"))  # Â∞ÜË°å‰∏≠ÁöÑ \"foo\" ÊõøÊç¢‰∏∫ \"bar\"ÔºåÂπ∂Â∞ÜÁªìÊûúÊ∑ªÂä†Âà∞ results ÂàóË°®\n\nprint(\"Reached this line\")  # ÁÆÄÂçïÁöÑÁä∂ÊÄÅÊä•ÂëäÔºåÊâìÂç∞ \"Reached this line\""
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂáΩÊï∞ÂíåÂØπË±°ÊñπÊ≥ïË∞ÉÁî®",
    "href": "qmd/pandas3ed2cn.html#ÂáΩÊï∞ÂíåÂØπË±°ÊñπÊ≥ïË∞ÉÁî®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂáΩÊï∞ÂíåÂØπË±°ÊñπÊ≥ïË∞ÉÁî® üìû",
    "text": "ÂáΩÊï∞ÂíåÂØπË±°ÊñπÊ≥ïË∞ÉÁî® üìû\n\n‰ΩøÁî®Êã¨Âè∑ () Ë∞ÉÁî®ÂáΩÊï∞Âπ∂‰º†ÈÄíÂèÇÊï∞ÔºàÂ¶ÇÊûúÊúâÔºâ„ÄÇ\nÂØπË±°ÈÄöÂ∏∏ÂÖ∑ÊúâÊñπÊ≥ïÔºàÈôÑÂä†Âà∞ÂØπË±°ÁöÑÂáΩÊï∞ÔºâÔºåÊÇ®ÂèØ‰ª•‰ΩøÁî®ÁÇπÂè∑ . ËØ≠Ê≥ïË∞ÉÁî®ÂÆÉ‰ª¨„ÄÇ\n\n\nresult = f(x, y, z)  # Ë∞ÉÁî®ÂáΩÊï∞ fÔºåÂπ∂‰º†ÂÖ•ÂèÇÊï∞ x, y, z\ng()  # Ë∞ÉÁî®ÂáΩÊï∞ gÔºå‰∏ç‰º†ÂÖ•‰ªª‰ΩïÂèÇÊï∞\n\nobj.some_method(x, y, z)  # Ë∞ÉÁî®ÂØπË±° obj ÁöÑ some_method ÊñπÊ≥ïÔºåÂπ∂‰º†ÂÖ•ÂèÇÊï∞ x, y, z\n\nresult = f(a, b, c, d=5, e=\"foo\")  # Ë∞ÉÁî®ÂáΩÊï∞ fÔºå‰º†ÂÖ•‰ΩçÁΩÆÂèÇÊï∞ a, b, c ÂíåÂÖ≥ÈîÆÂ≠óÂèÇÊï∞ d, e"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂèòÈáèÂíåÂèÇÊï∞‰º†ÈÄí",
    "href": "qmd/pandas3ed2cn.html#ÂèòÈáèÂíåÂèÇÊï∞‰º†ÈÄí",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂèòÈáèÂíåÂèÇÊï∞‰º†ÈÄí üîó",
    "text": "ÂèòÈáèÂíåÂèÇÊï∞‰º†ÈÄí üîó\n\nËµãÂÄºÂèòÈáè‰ºöÂàõÂª∫ÂØπ = Âè≥‰æßÂØπË±°ÁöÑÂºïÁî®„ÄÇ\n\n\na = [1, 2, 3]  # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°® [1, 2, 3]ÔºåÂπ∂Â∞ÜÂÖ∂ËµãÂÄºÁªôÂèòÈáè a\nb = a  # Â∞Ü a ËµãÂÄºÁªô bÔºåb Áé∞Âú®ÂºïÁî®‰∏é a *Áõ∏Âêå*ÁöÑÂàóË°®\na.append(4)  # ÂêëÂàóË°® a ‰∏≠ËøΩÂä†ÂÖÉÁ¥† 4\nprint(b)  # ËæìÂá∫: [1, 2, 3, 4]ÔºåÂõ†‰∏∫ a Âíå b ÊåáÂêëÂêå‰∏Ä‰∏™ÂàóË°®\n\n[1, 2, 3, 4]\n\n\n\nÈáçË¶ÅÊèêÁ§∫ÔºöÂú® Python ‰∏≠Ôºåa Âíå b ÊåáÂêëÂÜÖÂ≠ò‰∏≠ÁöÑÂêå‰∏Ä‰∏™ÂØπË±°ÔºåËÄå‰∏çÊòØÂâØÊú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂèòÈáèÂºïÁî®ÂõæÁ§∫",
    "href": "qmd/pandas3ed2cn.html#ÂèòÈáèÂºïÁî®ÂõæÁ§∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂèòÈáèÂºïÁî®ÔºàÂõæÁ§∫Ôºâ",
    "text": "ÂèòÈáèÂºïÁî®ÔºàÂõæÁ§∫Ôºâ\n\n\nÊ≠§ÂõæËØ¥Êòé a Âíå b Âè™ÊòØÂºïÁî®ÂÜÖÂ≠ò‰∏≠Âêå‰∏Ä‰∏™ÂàóË°®ÂØπË±°ÁöÑÂêçÁß∞„ÄÇ\n\n\n\n\n\n\n\nNote\n\n\n\nËµãÂÄº‰πüÁß∞‰∏∫ÁªëÂÆöÔºåÂõ†‰∏∫Êàë‰ª¨Â∞ÜÂêçÁß∞ÁªëÂÆöÂà∞ÂØπË±°„ÄÇÂ∑≤ËµãÂÄºÁöÑÂèòÈáèÂêçÊúâÊó∂Áß∞‰∏∫ÁªëÂÆöÂèòÈáè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Âä®ÊÄÅÂºïÁî®Âº∫Á±ªÂûã",
    "href": "qmd/pandas3ed2cn.html#Âä®ÊÄÅÂºïÁî®Âº∫Á±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âä®ÊÄÅÂºïÁî®ÔºåÂº∫Á±ªÂûã üí™",
    "text": "Âä®ÊÄÅÂºïÁî®ÔºåÂº∫Á±ªÂûã üí™\n\nPython ‰∏≠ÁöÑÂèòÈáèÊ≤°ÊúâÂõ∫ÊúâÁöÑÁ±ªÂûã„ÄÇÁ±ªÂûã‰∏éÂèòÈáèÂºïÁî®ÁöÑÂØπË±°Áõ∏ÂÖ≥ËÅî„ÄÇ\n\n\na = 5  # Â∞ÜÊï¥Êï∞ 5 ËµãÂÄºÁªôÂèòÈáè a\nprint(type(a))  # ËæìÂá∫: &lt;class 'int'&gt;Ôºåa ÁöÑÁ±ªÂûãÊòØ int\n\na = \"foo\"  # Â∞ÜÂ≠óÁ¨¶‰∏≤ \"foo\" ËµãÂÄºÁªôÂèòÈáè a\nprint(type(a))  # ËæìÂá∫: &lt;class 'str'&gt;Ôºåa ÁöÑÁ±ªÂûãÁé∞Âú®ÊòØ str\n\n&lt;class 'int'&gt;\n&lt;class 'str'&gt;"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Âä®ÊÄÅÂºïÁî®Âº∫Á±ªÂûã-Áª≠",
    "href": "qmd/pandas3ed2cn.html#Âä®ÊÄÅÂºïÁî®Âº∫Á±ªÂûã-Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âä®ÊÄÅÂºïÁî®ÔºåÂº∫Á±ªÂûã üí™ÔºàÁª≠Ôºâ",
    "text": "Âä®ÊÄÅÂºïÁî®ÔºåÂº∫Á±ªÂûã üí™ÔºàÁª≠Ôºâ\n\nPython ÊòØÂº∫Á±ªÂûãÁöÑÔºöÂØπË±°ÂÖ∑ÊúâÁâπÂÆöÁöÑÁ±ªÂûãÔºåÈöêÂºèËΩ¨Êç¢ÊòØÊúâÈôêÁöÑ„ÄÇ\n\n\n\"5\" + 5  # ËøôÂ∞ÜÂØºËá¥ TypeErrorÔºåÂõ†‰∏∫Â≠óÁ¨¶‰∏≤ÂíåÊï¥Êï∞‰∏çËÉΩÁõ¥Êé•Áõ∏Âä†"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Âº∫Á±ªÂûãÁ§∫‰æã",
    "href": "qmd/pandas3ed2cn.html#Âº∫Á±ªÂûãÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âº∫Á±ªÂûãÔºöÁ§∫‰æã",
    "text": "Âº∫Á±ªÂûãÔºöÁ§∫‰æã\n\na = 4.5  # ÊµÆÁÇπÊï∞ 4.5\nb = 2  # Êï¥Êï∞ 2\nprint(f\"a is {type(a)}, b is {type(b)}\")  # Â≠óÁ¨¶‰∏≤Ê†ºÂºèÂåñÔºåÊâìÂç∞ a Âíå b ÁöÑÁ±ªÂûã\nprint(a / b)  # a Èô§‰ª• bÔºåÁªìÊûúÊòØÊµÆÁÇπÊï∞ 2.25\n\na is &lt;class 'float'&gt;, b is &lt;class 'int'&gt;\n2.25\n\n\n\nÂç≥‰Ωø b ÊòØÊï¥Êï∞ÔºåÂÆÉ‰πü‰ºöË¢´ÈöêÂºèËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞ËøõË°åÈô§Ê≥ïËøêÁÆó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰ΩøÁî®-isinstance-Ê£ÄÊü•Á±ªÂûã",
    "href": "qmd/pandas3ed2cn.html#‰ΩøÁî®-isinstance-Ê£ÄÊü•Á±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® isinstance Ê£ÄÊü•Á±ªÂûã",
    "text": "‰ΩøÁî® isinstance Ê£ÄÊü•Á±ªÂûã\n\n‰ΩøÁî® isinstance() Ê£ÄÊü•ÂØπË±°ÊòØÂê¶ÊòØÁâπÂÆöÁ±ªÂûãÔºàÊàñÂá†ÁßçÁ±ªÂûã‰πã‰∏ÄÔºâÁöÑÂÆû‰æã„ÄÇ\n\n\na = 5  # Êï¥Êï∞ 5\nprint(isinstance(a, int))  # ËæìÂá∫: TrueÔºåa ÊòØ int Á±ªÂûãÁöÑÂÆû‰æã\n\nb = 4.5  # ÊµÆÁÇπÊï∞ 4.5\nprint(isinstance(a, (int, float)))  # ËæìÂá∫: TrueÔºåa ÊòØ int Êàñ float Á±ªÂûãÁöÑÂÆû‰æã\nprint(isinstance(b, (int, float)))  # ËæìÂá∫: TrueÔºåb ÊòØ int Êàñ float Á±ªÂûãÁöÑÂÆû‰æã\n\nTrue\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â±ûÊÄßÂíåÊñπÊ≥ï",
    "href": "qmd/pandas3ed2cn.html#Â±ûÊÄßÂíåÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â±ûÊÄßÂíåÊñπÊ≥ï",
    "text": "Â±ûÊÄßÂíåÊñπÊ≥ï\n\nÂØπË±°ÂÖ∑ÊúâÂ±ûÊÄßÔºàÂ≠òÂÇ®Âú®ÂØπË±°‚ÄúÂÜÖÈÉ®‚ÄùÁöÑÊï∞ÊçÆÔºâÂíåÊñπÊ≥ïÔºà‰∏éÂØπË±°ÂÖ≥ËÅîÁöÑÂáΩÊï∞Ôºâ„ÄÇ\n‰ΩøÁî® obj.attribute_name ËÆøÈóÆÂÆÉ‰ª¨„ÄÇ\nÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®getattrÂáΩÊï∞ÈÄöËøáÂêçÁß∞Ëé∑ÂèñÂØπË±°ÁöÑÂ±ûÊÄßÂíåÊñπÊ≥ï„ÄÇ\n\n\na = \"foo\"  # Â≠óÁ¨¶‰∏≤ \"foo\"\n# a.&lt;Press Tab&gt;  # Êü•ÁúãÂèØÁî®ÁöÑÂ±ûÊÄßÂíåÊñπÊ≥ï\n\nprint(getattr(a, \"split\")) # ÈÄöËøáÂ≠óÁ¨¶‰∏≤'split'ÔºåËé∑ÂèñÂØπË±°aÁöÑsplitÂ±ûÊÄß„ÄÇ\n\n&lt;built-in method split of str object at 0x7f425abc1950&gt;"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#È∏≠Â≠êÁ±ªÂûã",
    "href": "qmd/pandas3ed2cn.html#È∏≠Â≠êÁ±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È∏≠Â≠êÁ±ªÂûã ü¶Ü",
    "text": "È∏≠Â≠êÁ±ªÂûã ü¶Ü\n\n‚ÄúÂ¶ÇÊûúÂÆÉËµ∞Ëµ∑Êù•ÂÉèÈ∏≠Â≠êÔºåÂè´Ëµ∑Êù•ÂÉèÈ∏≠Â≠êÔºåÈÇ£‰πàÂÆÉÂ∞±ÊòØÈ∏≠Â≠ê„ÄÇ‚Äù\nÊ£ÄÊü•ÁâπÂÆöË°å‰∏∫Ôºà‰æãÂ¶ÇÔºåÂèØËø≠‰ª£ÊÄßÔºâÔºåËÄå‰∏çÊòØ‰∏•Ê†ºÁöÑÁ±ªÂûã„ÄÇ\n\n\ndef isiterable(obj):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ isiterableÔºåÁî®‰∫éÊ£ÄÊü•ÂØπË±°ÊòØÂê¶ÂèØËø≠‰ª£\n    try:\n        iter(obj)  # Â∞ùËØïÂØπ obj ËøõË°åËø≠‰ª£\n        return True  # Â¶ÇÊûúÂèØ‰ª•Ëø≠‰ª£ÔºåËøîÂõû True\n    except TypeError:  # Â¶ÇÊûúÂèëÁîü TypeErrorÔºà‰∏çÂèØËø≠‰ª£Ôºâ\n        return False  # ËøîÂõû False\n\nprint(isiterable(\"a string\"))  # ËæìÂá∫: TrueÔºåÂ≠óÁ¨¶‰∏≤ÊòØÂèØËø≠‰ª£ÁöÑ\nprint(isiterable([1, 2, 3]))  # ËæìÂá∫: TrueÔºåÂàóË°®ÊòØÂèØËø≠‰ª£ÁöÑ\nprint(isiterable(5))  # ËæìÂá∫: FalseÔºåÊï¥Êï∞‰∏çÂèØËø≠‰ª£\n\nTrue\nTrue\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂØºÂÖ•",
    "href": "qmd/pandas3ed2cn.html#ÂØºÂÖ•",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºÂÖ• üì¶",
    "text": "ÂØºÂÖ• üì¶\n\nÊ®°ÂùóÊòØÂåÖÂê´ Python ‰ª£Á†ÅÁöÑ .py Êñá‰ª∂„ÄÇ\n‰ΩøÁî® import ‰ªéÂÖ∂‰ªñÊ®°ÂùóËÆøÈóÆÂèòÈáèÂíåÂáΩÊï∞„ÄÇ\n\n\n# some_module.py  # ÂÆö‰πâ‰∏Ä‰∏™Âêç‰∏∫ some_module.py ÁöÑÊ®°Âùó\nPI = 3.14159  # ÂÆö‰πâ‰∏Ä‰∏™Â∏∏Èáè PI\n\ndef f(x):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ f\n    return x + 2  # ËøîÂõû x + 2\n\ndef g(a, b):  # ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ g\n    return a + b  # ËøîÂõû a + b"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂØºÂÖ•Áª≠",
    "href": "qmd/pandas3ed2cn.html#ÂØºÂÖ•Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØºÂÖ•ÔºàÁª≠Ôºâ",
    "text": "ÂØºÂÖ•ÔºàÁª≠Ôºâ\n\n# In another file:  # Âú®Âè¶‰∏Ä‰∏™Êñá‰ª∂‰∏≠\nimport some_module  # ÂØºÂÖ• some_module Ê®°Âùó\nresult = some_module.f(5)  # Ë∞ÉÁî® some_module Ê®°Âùó‰∏≠ÁöÑ f ÂáΩÊï∞\npi = some_module.PI  # ËÆøÈóÆ some_module Ê®°Âùó‰∏≠ÁöÑ PI Â∏∏Èáè\n\n# Or:  # ÊàñËÄÖ\nfrom some_module import g, PI  # ‰ªé some_module Ê®°ÂùóÂØºÂÖ• g ÂáΩÊï∞Âíå PI Â∏∏Èáè\nresult = g(5, PI)  # Ë∞ÉÁî® g ÂáΩÊï∞\n\n# Or with different names:  # ÊàñËÄÖ‰ΩøÁî®‰∏çÂêåÁöÑÂêçÁß∞\nimport some_module as sm  # ÂØºÂÖ• some_module Ê®°ÂùóÔºåÂπ∂Â∞ÜÂÖ∂ÈáçÂëΩÂêç‰∏∫ sm\nfrom some_module import PI as pi, g as gf  # ‰ªé some_module Ê®°ÂùóÂØºÂÖ• PI Âíå gÔºåÂπ∂ÂàÜÂà´ÈáçÂëΩÂêç‰∏∫ pi Âíå gf"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶ÂíåÊØîËæÉ",
    "href": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶ÂíåÊØîËæÉ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÂíåÊØîËæÉ ‚öôÔ∏è",
    "text": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÂíåÊØîËæÉ ‚öôÔ∏è\n\nPython ‰ΩøÁî®Ê†áÂáÜÊï∞Â≠¶ËØ≠Ê≥ïËøõË°å‰∫åÂÖÉËøêÁÆóÂíåÊØîËæÉ„ÄÇ\n\n\nprint(5 - 7)  # ÂáèÊ≥ï\nprint(12 + 21.5)  # Âä†Ê≥ï\nprint(5 &lt;= 2)  # Â∞è‰∫éÁ≠â‰∫éÊØîËæÉ\n\n-2\n33.5\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶Ë°®",
    "href": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶Ë°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÔºàË°®Ôºâ",
    "text": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÔºàË°®Ôºâ\nËøêÁÆó | ÊèèËø∞ |\n‚Äì | |\na + b | a Âä† b |\na - b | a Âáè b |\na * b | a ‰πò‰ª• b |\na / b | a Èô§‰ª• b |\na // b | a Êï¥Èô§ bÔºåÂêë‰∏ãÂèñÊï¥ |\na ** b | a ÁöÑ b Ê¨°Êñπ |"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶Ë°®--Áª≠",
    "href": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶Ë°®--Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÔºàË°®Ôºâ- Áª≠",
    "text": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÔºàË°®Ôºâ- Áª≠\nËøêÁÆó | ÊèèËø∞ |\n‚Äì | |\na & b | Â¶ÇÊûú a Âíå b ÈÉΩ‰∏∫ TrueÔºåÂàô‰∏∫ TrueÔºõÂØπ‰∫éÊï¥Êï∞ÔºåÊåâ‰Ωç‰∏é |\na \\| b | Â¶ÇÊûú a Êàñ b ‰∏∫ TrueÔºåÂàô‰∏∫ TrueÔºõÂØπ‰∫éÊï¥Êï∞ÔºåÊåâ‰ΩçÊàñ |\na ^ b | ÂØπ‰∫éÂ∏ÉÂ∞îÂÄºÔºåÂ¶ÇÊûú a Êàñ b ‰∏∫ TrueÔºå‰ΩÜ‰∏çÂêåÊó∂‰∏∫ TrueÔºåÂàô‰∏∫ TrueÔºõÂØπ‰∫éÊï¥Êï∞ÔºåÊåâ‰ΩçÂºÇÊàñ |\na == b | Â¶ÇÊûú a Á≠â‰∫é bÔºåÂàô‰∏∫ True |\na != b | Â¶ÇÊûú a ‰∏çÁ≠â‰∫é bÔºåÂàô‰∏∫ True |"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶Ë°®--Áª≠-1",
    "href": "qmd/pandas3ed2cn.html#‰∫åÂÖÉËøêÁÆóÁ¨¶Ë°®--Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÔºàË°®Ôºâ- Áª≠",
    "text": "‰∫åÂÖÉËøêÁÆóÁ¨¶ÔºàË°®Ôºâ- Áª≠\nËøêÁÆó | ÊèèËø∞ |\n‚Äì | |\na &lt; b, a &lt;= b | Â¶ÇÊûú a Â∞è‰∫éÔºàÂ∞è‰∫éÊàñÁ≠â‰∫éÔºâbÔºåÂàô‰∏∫ True |\na &gt; b, a &gt;= b | Â¶ÇÊûú a Â§ß‰∫éÔºàÂ§ß‰∫éÊàñÁ≠â‰∫éÔºâbÔºåÂàô‰∏∫ True |\na is b | Â¶ÇÊûú a Âíå b ÂºïÁî®Âêå‰∏Ä‰∏™ Python ÂØπË±°ÔºåÂàô‰∏∫ True |\na is not b | Â¶ÇÊûú a Âíå b ÂºïÁî®‰∏çÂêåÁöÑ Python ÂØπË±°ÔºåÂàô‰∏∫ True |"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#is-Âíå-is-not",
    "href": "qmd/pandas3ed2cn.html#is-Âíå-is-not",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "is Âíå is not",
    "text": "is Âíå is not\n\nis Ê£ÄÊü•‰∏§‰∏™ÂèòÈáèÊòØÂê¶ÂºïÁî®Âêå‰∏Ä‰∏™ÂØπË±°„ÄÇ\nis not Ê£ÄÊü•‰∏§‰∏™ÂèòÈáèÊòØÂê¶ÂºïÁî®‰∏çÂêåÁöÑÂØπË±°„ÄÇ\n== Ê£ÄÊü•ÂÄºÊòØÂê¶Áõ∏Á≠â„ÄÇ\n\n\na = [1, 2, 3]  # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°® [1, 2, 3]\nb = a  # b ÂºïÁî® a\nc = list(a)  # ÂàõÂª∫‰∏Ä‰∏™ a ÁöÑÊñ∞ÂâØÊú¨ÔºåÂπ∂Â∞ÜÂÖ∂ËµãÂÄºÁªô c\n\nprint(a is b)      # ËæìÂá∫: TrueÔºåa Âíå b ÂºïÁî®Âêå‰∏Ä‰∏™ÂØπË±°\nprint(a is not c)  # ËæìÂá∫: TrueÔºåa Âíå c ÂºïÁî®‰∏çÂêåÁöÑÂØπË±°\nprint(a == c)      # ËæìÂá∫: TrueÔºåa Âíå c ÁöÑÂÄºÁõ∏Á≠â\n\nTrue\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂèØÂèòÂíå‰∏çÂèØÂèòÂØπË±°",
    "href": "qmd/pandas3ed2cn.html#ÂèØÂèòÂíå‰∏çÂèØÂèòÂØπË±°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂèØÂèòÂíå‰∏çÂèØÂèòÂØπË±° üîÑ",
    "text": "ÂèØÂèòÂíå‰∏çÂèØÂèòÂØπË±° üîÑ\n\nÂèØÂèòÂØπË±°ÔºàÂàóË°®„ÄÅÂ≠óÂÖ∏„ÄÅNumPy Êï∞ÁªÑÁ≠âÔºâÂèØ‰ª•Âú®ÂéüÂú∞‰øÆÊîπ„ÄÇ\n‰∏çÂèØÂèòÂØπË±°ÔºàÂ≠óÁ¨¶‰∏≤„ÄÅÂÖÉÁªÑÔºâÂú®ÂàõÂª∫ÂêéÊó†Ê≥ïÊõ¥Êîπ„ÄÇ\n\n\na_list = [\"foo\", 2, [4, 5]]  # ÂàõÂª∫‰∏Ä‰∏™ÂàóË°®\na_list[2] = (3, 4)  # ‰øÆÊîπÂàóË°®ÁöÑÁ¨¨‰∏â‰∏™ÂÖÉÁ¥†\nprint(a_list)  # ËæìÂá∫: ['foo', 2, (3, 4)]\n\na_tuple = (3, 5, (4, 5))  # ÂàõÂª∫‰∏Ä‰∏™ÂÖÉÁªÑ\na_tuple[1] = \"four\"  # ËøôÂ∞ÜÂØºËá¥ TypeErrorÔºåÂõ†‰∏∫ÂÖÉÁªÑÊòØ‰∏çÂèØÂèòÁöÑ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Ê†áÈáèÁ±ªÂûã",
    "href": "qmd/pandas3ed2cn.html#Ê†áÈáèÁ±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê†áÈáèÁ±ªÂûã",
    "text": "Ê†áÈáèÁ±ªÂûã\n\nPython ÂÖ∑ÊúâÁî®‰∫éÂ§ÑÁêÜÊï∞ÂÄºÊï∞ÊçÆ„ÄÅÂ≠óÁ¨¶‰∏≤„ÄÅÂ∏ÉÂ∞îÂÄºÂíåÊó•Êúü/Êó∂Èó¥ÁöÑÂÜÖÁΩÆÁ±ªÂûã„ÄÇËøô‰∫õË¢´Áß∞‰∏∫Ê†áÈáèÁ±ªÂûã„ÄÇ\n\nÁ±ªÂûã | ÊèèËø∞ |\n:‚Äì | : |\nNone | Python ÁöÑ ‚Äúnull‚Äù ÂÄº |\nstr | Â≠óÁ¨¶‰∏≤Á±ªÂûãÔºõ‰øùÂ≠ò Unicode Â≠óÁ¨¶‰∏≤ |\nbytes| ÂéüÂßã‰∫åËøõÂà∂Êï∞ÊçÆ |\nfloat| ÂèåÁ≤æÂ∫¶ÊµÆÁÇπÊï∞ |\nbool | Â∏ÉÂ∞îÂÄº True Êàñ False |\nint | ‰ªªÊÑèÁ≤æÂ∫¶Êï¥Êï∞ |"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Êï∞ÂÄºÁ±ªÂûãint-Âíå-float",
    "href": "qmd/pandas3ed2cn.html#Êï∞ÂÄºÁ±ªÂûãint-Âíå-float",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÂÄºÁ±ªÂûãÔºöint Âíå float",
    "text": "Êï∞ÂÄºÁ±ªÂûãÔºöint Âíå float\n\nintÔºöÂèØ‰ª•Â≠òÂÇ®‰ªªÊÑèÂ§ßÁöÑÊï¥Êï∞„ÄÇ\nfloatÔºöË°®Á§∫ÂèåÁ≤æÂ∫¶ÊµÆÁÇπÊï∞ÔºàÁ±ª‰ºº‰∫é C/C++ ‰∏≠ÁöÑ doubleÔºâ„ÄÇ\n\n\nival = 17239871\nprint(ival ** 6)  # Êï¥Êï∞ÁöÑÂπÇËøêÁÆó\n\nfval = 7.243\nfval2 = 6.78e-5  # ÁßëÂ≠¶ËÆ°Êï∞Ê≥ï\n\n26254519291092456596965462913230729701102721"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Êï∞ÂÄºÁ±ªÂûãint-Âíå-floatÁª≠",
    "href": "qmd/pandas3ed2cn.html#Êï∞ÂÄºÁ±ªÂûãint-Âíå-floatÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÂÄºÁ±ªÂûãÔºöint Âíå floatÔºàÁª≠Ôºâ",
    "text": "Êï∞ÂÄºÁ±ªÂûãÔºöint Âíå floatÔºàÁª≠Ôºâ\n\nÊï¥Êï∞Èô§Ê≥ïÂ¶ÇÊûú‰∫ßÁîüÈùûÊï¥Êï∞ÁªìÊûúÔºåÊÄªÊòØÂæóÂà∞‰∏Ä‰∏™ÊµÆÁÇπÊï∞„ÄÇ‰ΩøÁî®//ËøõË°åÂêë‰∏ãÂèñÊï¥Èô§Ê≥ï„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤",
    "href": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤ üìù",
    "text": "Â≠óÁ¨¶‰∏≤ üìù\n\n‰ΩøÁî®ÂçïÂºïÂè∑ '...' ÊàñÂèåÂºïÂè∑ \"...\" ÂàõÂª∫Â≠óÁ¨¶‰∏≤Â≠óÈù¢Èáè„ÄÇ\nÂØπ‰∫éÂ§öË°åÂ≠óÁ¨¶‰∏≤Ôºå‰ΩøÁî®‰∏âÂºïÂè∑ '''...''' Êàñ \"\"\"...\"\"\"„ÄÇ\n\n\na = 'one way of writing a string'\nb = \"another way\"\nc = \"\"\"\nThis is a longer string that\nspans multiple lines\n\"\"\"  # Â§öË°åÂ≠óÁ¨¶‰∏≤\n\n\nPython Â≠óÁ¨¶‰∏≤ÊòØ‰∏çÂèØÂèòÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωú",
    "href": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤Êìç‰Ωú",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤Êìç‰Ωú",
    "text": "Â≠óÁ¨¶‰∏≤Êìç‰Ωú\n\nÊúâËÆ∏Â§öÂÜÖÁΩÆÁöÑÂ≠óÁ¨¶‰∏≤ÊñπÊ≥ïÂèØÁî®Ôºà‰æãÂ¶ÇÔºåcount()„ÄÅreplace()„ÄÅsplit()Ôºâ„ÄÇ\n\n\na = \"this is a string\"\n# a[10] = 'f'  # TypeError: 'str' ÂØπË±°‰∏çÊîØÊåÅÈ°πËµãÂÄºÔºåÂõ†‰∏∫Â≠óÁ¨¶‰∏≤ÊòØ‰∏çÂèØÂèòÁöÑ\n\nb = a.replace(\"string\", \"longer string\")  # ÊõøÊç¢Â≠óÁ¨¶‰∏≤‰∏≠ÁöÑÂ≠ê‰∏≤\nprint(b) # ËæìÂá∫Ôºöthis is a longer string\nprint(a) # ËæìÂá∫Ôºöthis is a string, aÁöÑÂÄº‰∏ç‰ºöÊîπÂèò\n\nthis is a longer string\nthis is a string\n\n\n\n‰ΩøÁî® str() Â∞ÜÂÖ∂‰ªñÂØπË±°ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤",
    "href": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤",
    "text": "Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤\n\nÂ≠óÁ¨¶‰∏≤ÊòØ Unicode Â≠óÁ¨¶Â∫èÂàóÔºåÂèØ‰ª•ÂÉèÂàóË°®/ÂÖÉÁªÑ‰∏ÄÊ†∑Â§ÑÁêÜ„ÄÇ\n\n\ns = \"python\"\nprint(list(s))  # ËæìÂá∫: ['p', 'y', 't', 'h', 'o', 'n']\nprint(s[:3])  # ËæìÂá∫: 'pyt'ÔºåÂ≠óÁ¨¶‰∏≤ÂàáÁâá\n\n['p', 'y', 't', 'h', 'o', 'n']\npyt"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤Áª≠",
    "href": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤ÔºàÁª≠Ôºâ",
    "text": "Â≠óÁ¨¶‰∏≤ÂàáÁâáÂíåÂéüÂßãÂ≠óÁ¨¶‰∏≤ÔºàÁª≠Ôºâ\n\nÂèçÊñúÊù† \\ ÊòØËΩ¨‰πâÂ≠óÁ¨¶„ÄÇ‰ΩøÁî®ÂéüÂßãÂ≠óÁ¨¶‰∏≤Ôºà‰ª• r ‰∏∫ÂâçÁºÄÔºâÂèØ‰ª•ÈÅøÂÖçËΩ¨‰πâ„ÄÇ\n\n\ns = \"12\\\\\\\\34\"  # ÂåÖÂê´‰∏§‰∏™ÂèçÊñúÊù†ÁöÑÂ≠óÁ¨¶‰∏≤\nprint(s)  # ËæìÂá∫: 12\\34\n\nraw_string = r\"this\\has\\no\\special\\characters\"  # ÂéüÂßãÂ≠óÁ¨¶‰∏≤ÔºåÂèçÊñúÊù†‰∏çËΩ¨‰πâ\nprint(raw_string)  # ËæìÂá∫: this\\has\\no\\special\\characters\n\n12\\\\34\nthis\\has\\no\\special\\characters"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤ËøûÊé•ÂíåÊ†ºÂºèÂåñ",
    "href": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤ËøûÊé•ÂíåÊ†ºÂºèÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤ËøûÊé•ÂíåÊ†ºÂºèÂåñ",
    "text": "Â≠óÁ¨¶‰∏≤ËøûÊé•ÂíåÊ†ºÂºèÂåñ\n\nÂ∞ÜÂ≠óÁ¨¶‰∏≤Áõ∏Âä†‰ºöËøûÊé•ÂÆÉ‰ª¨„ÄÇ\n\n\na = \"this is the first half \"\nb = \"and this is the second half\"\nprint(a + b)  # Â≠óÁ¨¶‰∏≤ËøûÊé•\n\nthis is the first half and this is the second half\n\n\n\nÂØπ‰∫éÊõ¥Â§çÊùÇÁöÑÂ≠óÁ¨¶‰∏≤ÊûÑÈÄ†Ôºå‰ΩøÁî®Â≠óÁ¨¶‰∏≤Ê†ºÂºèÂåñÔºàformat() ÊñπÊ≥ïÊàñ f-stringsÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤Ê†ºÂºèÂåñ-f-strings",
    "href": "qmd/pandas3ed2cn.html#Â≠óÁ¨¶‰∏≤Ê†ºÂºèÂåñ-f-strings",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óÁ¨¶‰∏≤Ê†ºÂºèÂåñ (f-strings)",
    "text": "Â≠óÁ¨¶‰∏≤Ê†ºÂºèÂåñ (f-strings)\n\namount = 10\nrate = 88.46\ncurrency = \"Pesos\"\nresult = f\"{amount} {currency} is worth US${amount / rate:.2f}\"  # f-string Ê†ºÂºèÂåñ\nprint(result) # ËæìÂá∫Ôºö10 Pesos is worth US$0.11\n\n10 Pesos is worth US$0.11\n\n\n\nf-stringsÔºàÊ†ºÂºèÂåñÂ≠óÁ¨¶‰∏≤Â≠óÈù¢ÈáèÔºâÊòØ‰∏ÄÁßçÂ∞ÜË°®ËææÂºèÂµåÂÖ•Â≠óÁ¨¶‰∏≤‰∏≠ÁöÑÁÆÄÊ¥ÅÊñπÂºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â≠óËäÇÂíå-unicode",
    "href": "qmd/pandas3ed2cn.html#Â≠óËäÇÂíå-unicode",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â≠óËäÇÂíå Unicode",
    "text": "Â≠óËäÇÂíå Unicode\n\nÂú® Python 3 ‰∏≠ÔºåUnicode ÊòØ‰∏ªË¶ÅÁöÑÂ≠óÁ¨¶‰∏≤Á±ªÂûã„ÄÇ\nencode() Â∞Ü Unicode Â≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫Â≠óËäÇÔºà‰æãÂ¶ÇÔºåUTF-8Ôºâ„ÄÇ\ndecode() Â∞ÜÂ≠óËäÇËΩ¨Êç¢Âõû Unicode Â≠óÁ¨¶‰∏≤„ÄÇ\n\n\nval = \"espa√±ol\"  # Unicode Â≠óÁ¨¶‰∏≤\nval_utf8 = val.encode(\"utf-8\")  # ÁºñÁ†Å‰∏∫ UTF-8 Â≠óËäÇ\nprint(val_utf8)  # ËæìÂá∫: b'espa\\xc3\\xb1ol'\nprint(type(val_utf8))  # ËæìÂá∫: &lt;class 'bytes'&gt;\n\nprint(val_utf8.decode(\"utf-8\"))  # Ëß£Á†Å‰∏∫ Unicode Â≠óÁ¨¶‰∏≤\n\nb'espa\\xc3\\xb1ol'\n&lt;class 'bytes'&gt;\nespa√±ol"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Â∏ÉÂ∞îÂÄº",
    "href": "qmd/pandas3ed2cn.html#Â∏ÉÂ∞îÂÄº",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏ÉÂ∞îÂÄº",
    "text": "Â∏ÉÂ∞îÂÄº\n\nTrue Âíå False ÊòØÂ∏ÉÂ∞îÂÄº„ÄÇ\nÊØîËæÉÂíåÊù°‰ª∂Ë°®ËææÂºèÁöÑËÆ°ÁÆóÁªìÊûú‰∏∫ True Êàñ False„ÄÇ\n‰∏é and„ÄÅor Âíå not ÁªìÂêà‰ΩøÁî®„ÄÇ\n\n\nprint(True and True)  # ËæìÂá∫: True\nprint(False or True)  # ËæìÂá∫: True\n\nprint(int(False))  # ËæìÂá∫: 0ÔºåFalse ÂèØ‰ª•ËΩ¨Êç¢‰∏∫Êï¥Êï∞ 0\nprint(int(True))   # ËæìÂá∫: 1ÔºåTrue ÂèØ‰ª•ËΩ¨Êç¢‰∏∫Êï¥Êï∞ 1\n\nTrue\nTrue\n0\n1"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Á±ªÂûãËΩ¨Êç¢",
    "href": "qmd/pandas3ed2cn.html#Á±ªÂûãËΩ¨Êç¢",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á±ªÂûãËΩ¨Êç¢ üß±",
    "text": "Á±ªÂûãËΩ¨Êç¢ üß±\n\nstr()„ÄÅbool()„ÄÅint() Âíå float() ÂèØÁî®‰∫éÂ∞ÜÂÄºËΩ¨Êç¢‰∏∫‰∏çÂêåÁöÑÁ±ªÂûã„ÄÇ\n\n\ns = \"3.14159\"\nfval = float(s)  # Â∞ÜÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞\nprint(type(fval))  # ËæìÂá∫: &lt;class 'float'&gt;\nprint(int(fval))  # Â∞ÜÊµÆÁÇπÊï∞ËΩ¨Êç¢‰∏∫Êï¥Êï∞ÔºåÂêë‰∏ãÂèñÊï¥\nprint(bool(fval))  # Â∞ÜÊµÆÁÇπÊï∞ËΩ¨Êç¢‰∏∫Â∏ÉÂ∞îÂÄºÔºåÈùûÈõ∂ÂÄº‰∏∫ True\nprint(bool(0))  # Â∞ÜÊï¥Êï∞ 0 ËΩ¨Êç¢‰∏∫Â∏ÉÂ∞îÂÄºÔºåÁªìÊûú‰∏∫ False\n\n&lt;class 'float'&gt;\n3\nTrue\nFalse"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#none",
    "href": "qmd/pandas3ed2cn.html#none",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "None",
    "text": "None\n\nNone ÊòØ Python ÁöÑ null ÂÄºÁ±ªÂûã„ÄÇÂÆÉË°®Á§∫Áº∫Â∞ëÂÄº„ÄÇ\nÂ¶ÇÊûúÂáΩÊï∞Ê≤°ÊúâreturnËØ≠Âè•ÔºåÂàôÂÆÉ‰πüÊòØÂáΩÊï∞ÁöÑÈªòËÆ§ËøîÂõûÂÄº„ÄÇ\n\n\na = None\nprint(a is None)  # ËæìÂá∫: True\n\nb = 5\nprint(b is not None)  # ËæìÂá∫: True\n\nTrue\nTrue\n\n\n\nNone ÈÄöÂ∏∏Áî®‰ΩúÂáΩÊï∞ÂèÇÊï∞ÁöÑÈªòËÆ§ÂÄº„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Êó•ÊúüÂíåÊó∂Èó¥",
    "href": "qmd/pandas3ed2cn.html#Êó•ÊúüÂíåÊó∂Èó¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó•ÊúüÂíåÊó∂Èó¥ üìÖ",
    "text": "Êó•ÊúüÂíåÊó∂Èó¥ üìÖ\n\ndatetime Ê®°ÂùóÊèê‰æõ‰∫Ü datetime„ÄÅdate Âíå time Á±ªÂûã„ÄÇ\n\n\nfrom datetime import datetime, date, time  # ÂØºÂÖ• datetime Ê®°Âùó\n\ndt = datetime(2011, 10, 29, 20, 30, 21)  # ÂàõÂª∫‰∏Ä‰∏™ datetime ÂØπË±°\nprint(dt.day)  # ËæìÂá∫: 29ÔºåËé∑ÂèñÊó•\nprint(dt.minute)  # ËæìÂá∫: 30ÔºåËé∑ÂèñÂàÜÈíü\nprint(dt.date())  # ËæìÂá∫: 2011-10-29ÔºåËé∑ÂèñÊó•ÊúüÈÉ®ÂàÜ\nprint(dt.time())  # ËæìÂá∫: 20:30:21ÔºåËé∑ÂèñÊó∂Èó¥ÈÉ®ÂàÜ\n\n29\n30\n2011-10-29\n20:30:21"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Ê†ºÂºèÂåñÊó•ÊúüÂíåÊó∂Èó¥",
    "href": "qmd/pandas3ed2cn.html#Ê†ºÂºèÂåñÊó•ÊúüÂíåÊó∂Èó¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê†ºÂºèÂåñÊó•ÊúüÂíåÊó∂Èó¥",
    "text": "Ê†ºÂºèÂåñÊó•ÊúüÂíåÊó∂Èó¥\n\nstrftime() Â∞Ü datetime ÂØπË±°Ê†ºÂºèÂåñ‰∏∫Â≠óÁ¨¶‰∏≤„ÄÇ\nstrptime() Â∞ÜÂ≠óÁ¨¶‰∏≤Ëß£Êûê‰∏∫ datetime ÂØπË±°„ÄÇ\n\n\nprint(dt.strftime(\"%Y-%m-%d %H:%M\"))  # Ê†ºÂºèÂåñÊó•ÊúüÂíåÊó∂Èó¥\n\ndt2 = datetime.strptime(\"20091031\", \"%Y%m%d\")  # Ëß£ÊûêÂ≠óÁ¨¶‰∏≤‰∏∫ datetime ÂØπË±°\nprint(dt2) # ËæìÂá∫Ôºö2009-10-31 00:00:00\n\n2011-10-29 20:30\n2009-10-31 00:00:00\n\n\n\nÊúâÂÖ≥Ê†ºÂºè‰ª£Á†ÅÁöÑÂÆåÊï¥ÂàóË°®ÔºåËØ∑ÂèÇÈòÖ Python ÁöÑÊñáÊ°£„ÄÇ\nÁî±‰∫édatetime.datetimeÊòØ‰∏çÂèØÂèòÁ±ªÂûãÔºåstrftimeÂíåstrptimeÁ≠âÊñπÊ≥ïÊÄªÊòØ‰∫ßÁîüÊñ∞ÂØπË±°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#Êó•ÊúüÊó∂Èó¥ÁÆóÊúØ",
    "href": "qmd/pandas3ed2cn.html#Êó•ÊúüÊó∂Èó¥ÁÆóÊúØ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó•Êúü/Êó∂Èó¥ÁÆóÊúØ",
    "text": "Êó•Êúü/Êó∂Èó¥ÁÆóÊúØ\n\n‰∏§‰∏™ datetime ÂØπË±°Áõ∏Âáè‰ºö‰∫ßÁîü‰∏Ä‰∏™ timedelta ÂØπË±°„ÄÇ\nÂ∞Ü timedelta Ê∑ªÂä†Âà∞ datetime ‰ºö‰∫ßÁîü‰∏Ä‰∏™Êñ∞ÁöÑ„ÄÅÂÅèÁßªÁöÑ datetime„ÄÇ\n\n\ndt2 = datetime(2011, 11, 15, 22, 30)\ndelta = dt2 - dt  # ËÆ°ÁÆó‰∏§‰∏™ datetime ÂØπË±°ÁöÑÊó∂Èó¥Â∑Æ\nprint(delta)  # ËæìÂá∫: 17 days, 1:59:39\nprint(type(delta))  # ËæìÂá∫: &lt;class 'datetime.timedelta'&gt;\nprint(dt + delta)  # Â∞ÜÊó∂Èó¥Â∑ÆÂä†Âà∞ dt ‰∏ä\n\n17 days, 1:59:39\n&lt;class 'datetime.timedelta'&gt;\n2011-11-15 22:30:00"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÊéßÂà∂ÊµÅifelifelse",
    "href": "qmd/pandas3ed2cn.html#ÊéßÂà∂ÊµÅifelifelse",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊéßÂà∂ÊµÅÔºöif„ÄÅelif„ÄÅelse üö¶",
    "text": "ÊéßÂà∂ÊµÅÔºöif„ÄÅelif„ÄÅelse üö¶\n\nÂ¶ÇÊûúÊù°‰ª∂‰∏∫ÁúüÔºåif ËØ≠Âè•ÊâßË°å‰∏ÄÊÆµ‰ª£Á†Å„ÄÇ\nelifÔºàelse ifÔºâÊèê‰æõÂÖ∂‰ªñÊù°‰ª∂„ÄÇ\nelse ÊòØ‰∏Ä‰∏™ÂåÖÁΩó‰∏áË±°ÁöÑÂùó„ÄÇ\n\n\nx = -5\nif x &lt; 0:  # Â¶ÇÊûú x Â∞è‰∫é 0\n    print(\"It's negative\")  # ÊâìÂç∞ \"It's negative\"\nelif x == 0:  # Âê¶ÂàôÔºåÂ¶ÇÊûú x Á≠â‰∫é 0\n    print(\"Equal to zero\")  # ÊâìÂç∞ \"Equal to zero\"\nelif 0 &lt; x &lt; 5:  # Âê¶ÂàôÔºåÂ¶ÇÊûú x Â§ß‰∫é 0 ‰∏îÂ∞è‰∫é 5\n    print(\"Positive but smaller than 5\")  # ÊâìÂç∞ \"Positive but smaller than 5\"\nelse:  # Âê¶Âàô\n    print(\"Positive and larger than or equal to 5\")  # ÊâìÂç∞ \"Positive and larger than or equal to 5\"\n\nIt's negative\n\n\n\nÂ∏¶Êúâ and Âíå or ÁöÑÊù°‰ª∂‰ªéÂ∑¶Âà∞Âè≥ËÆ°ÁÆóÔºåÂπ∂‰∏îÊòØÁü≠Ë∑ØÁöÑ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#for-Âæ™ÁéØ",
    "href": "qmd/pandas3ed2cn.html#for-Âæ™ÁéØ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "for Âæ™ÁéØ ‚ûø",
    "text": "for Âæ™ÁéØ ‚ûø\n\nËø≠‰ª£ÈõÜÂêàÔºàÂàóË°®„ÄÅÂÖÉÁªÑÁ≠âÔºâÊàñËø≠‰ª£Âô®„ÄÇ\n\n\nfor value in collection:  # ÈÅçÂéÜÈõÜÂêà‰∏≠ÁöÑÊØè‰∏™ÂÄº\n    # do something with value  # ÂØπÂÄºÊâßË°åÊüê‰∫õÊìç‰Ωú\n\n\ncontinue Ë∑≥ËøáÂΩìÂâçËø≠‰ª£ÁöÑÂÖ∂‰ΩôÈÉ®ÂàÜ„ÄÇ\nbreak ÂÆåÂÖ®ÈÄÄÂá∫Âæ™ÁéØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#for-Âæ™ÁéØÁ§∫‰æã",
    "href": "qmd/pandas3ed2cn.html#for-Âæ™ÁéØÁ§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "for Âæ™ÁéØÁ§∫‰æã",
    "text": "for Âæ™ÁéØÁ§∫‰æã\n\nsequence = [1, 2, None, 4, None, 5]  # ÂÆö‰πâ‰∏Ä‰∏™ÂàóË°®\ntotal = 0  # ÂàùÂßãÂåñ total ‰∏∫ 0\nfor value in sequence:  # ÈÅçÂéÜÂàóË°®‰∏≠ÁöÑÊØè‰∏™ÂÄº\n    if value is None:  # Â¶ÇÊûúÂÄº‰∏∫ None\n        continue  # Ë∑≥ËøáÂΩìÂâçËø≠‰ª£\n    total += value  # Â∞Ü value Âä†Âà∞ total ‰∏ä\nprint(total) # ËæìÂá∫Ôºö12\n\n12"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#for-Âæ™ÁéØÁ§∫‰æãÁª≠",
    "href": "qmd/pandas3ed2cn.html#for-Âæ™ÁéØÁ§∫‰æãÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "for Âæ™ÁéØÁ§∫‰æãÔºàÁª≠Ôºâ",
    "text": "for Âæ™ÁéØÁ§∫‰æãÔºàÁª≠Ôºâ\n\nsequence = [1, 2, 0, 4, 6, 5, 2, 1]  # ÂÆö‰πâ‰∏Ä‰∏™ÂàóË°®\ntotal_until_5 = 0  # ÂàùÂßãÂåñ total_until_5 ‰∏∫ 0\nfor value in sequence:  # ÈÅçÂéÜÂàóË°®‰∏≠ÁöÑÊØè‰∏™ÂÄº\n    if value == 5:  # Â¶ÇÊûúÂÄºÁ≠â‰∫é 5\n        break  # ÈÄÄÂá∫Âæ™ÁéØ\n    total_until_5 += value  # Â∞Ü value Âä†Âà∞ total_until_5 ‰∏ä\nprint(total_until_5) # ËæìÂá∫Ôºö13\n\n13"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÂµåÂ•ó-for-Âæ™ÁéØ",
    "href": "qmd/pandas3ed2cn.html#ÂµåÂ•ó-for-Âæ™ÁéØ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂµåÂ•ó for Âæ™ÁéØ",
    "text": "ÂµåÂ•ó for Âæ™ÁéØ\n\nfor i in range(4):  # Â§ñÂ±ÇÂæ™ÁéØÔºåi ‰ªé 0 Âà∞ 3\n    for j in range(4):  # ÂÜÖÂ±ÇÂæ™ÁéØÔºåj ‰ªé 0 Âà∞ 3\n        if j &gt; i:  # Â¶ÇÊûú j Â§ß‰∫é i\n            break  # ÈÄÄÂá∫ÂÜÖÂ±ÇÂæ™ÁéØ\n        print((i, j))  # ÊâìÂç∞ (i, j)\n\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#while-Âæ™ÁéØ",
    "href": "qmd/pandas3ed2cn.html#while-Âæ™ÁéØ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "while Âæ™ÁéØ",
    "text": "while Âæ™ÁéØ\n\nÂè™Ë¶ÅÊù°‰ª∂‰∏∫ÁúüÔºåÂ∞±ÈáçÂ§çÊâßË°å‰∏ÄÊÆµ‰ª£Á†Å„ÄÇ\n\n\nx = 256  # ÂàùÂßãÂåñ x ‰∏∫ 256\ntotal = 0  # ÂàùÂßãÂåñ total ‰∏∫ 0\nwhile x &gt; 0:  # ÂΩì x Â§ß‰∫é 0 Êó∂Âæ™ÁéØ\n    if total &gt; 500:  # Â¶ÇÊûú total Â§ß‰∫é 500\n        break  # ÈÄÄÂá∫Âæ™ÁéØ\n    total += x  # Â∞Ü x Âä†Âà∞ total ‰∏ä\n    x = x // 2  # Â∞Ü x Êï¥Èô§ 2\nprint(total) # ËæìÂá∫ 504\n\n504"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#pass",
    "href": "qmd/pandas3ed2cn.html#pass",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "pass üõë",
    "text": "pass üõë\n\npass ÊòØ‰∏Ä‰∏™‚ÄúÊó†Êìç‰Ωú‚ÄùËØ≠Âè•„ÄÇÂÆÉ‰ªÄ‰πà‰πü‰∏çÂÅö„ÄÇÂÆÉÁî®‰∫éÂú®ËØ≠Ê≥ï‰∏äÈúÄË¶ÅËØ≠Âè•‰ΩÜÊÇ®‰∏çÊÉ≥ÊâßË°å‰ªª‰Ωï‰ª£Á†ÅÁöÑÂú∞Êñπ„ÄÇ\n\n\nif x &lt; 0:\n    print(\"negative!\")\nelif x == 0:\n    # TODO: put something smart here  # ËøôÊòØ‰∏Ä‰∏™ÂæÖÂäû‰∫ãÈ°πÔºåË°®Á§∫Â∞ÜÊù•ÈúÄË¶ÅÂú®Ê≠§Â§ÑÊ∑ªÂä†‰ª£Á†Å\n    pass  # ‰ªÄ‰πà‰πü‰∏çÂÅö\nelse:\n    print(\"positive!\")\n\npositive!"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#range",
    "href": "qmd/pandas3ed2cn.html#range",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "range üî¢",
    "text": "range üî¢\n\nrange() ÁîüÊàê‰∏ÄÁ≥ªÂàóÁ≠âÈó¥ÈöîÁöÑÊï¥Êï∞„ÄÇ\nrange(stop)ÔºöÁîüÊàê‰ªé 0 Âà∞Ôºà‰ΩÜ‰∏çÂåÖÊã¨Ôºâstop ÁöÑÊï¥Êï∞„ÄÇ\nrange(start, stop)ÔºöÁîüÊàê‰ªé start Âà∞Ôºà‰ΩÜ‰∏çÂåÖÊã¨Ôºâstop ÁöÑÊï¥Êï∞„ÄÇ\nrange(start, stop, step)ÔºöÁîüÊàêÂÖ∑ÊúâÊåáÂÆö step ÁöÑÊï¥Êï∞„ÄÇ\n\n\nprint(list(range(10)))  # ËæìÂá∫: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(list(range(0, 20, 2)))  # ËæìÂá∫: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\nprint(list(range(5, 0, -1)))  # ËæìÂá∫: [5, 4, 3, 2, 1]\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n[5, 4, 3, 2, 1]"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#range-Á§∫‰æã",
    "href": "qmd/pandas3ed2cn.html#range-Á§∫‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "range Á§∫‰æã",
    "text": "range Á§∫‰æã\n\nseq = [1, 2, 3, 4]  # ÂÆö‰πâ‰∏Ä‰∏™ÂàóË°®\nfor i in range(len(seq)):  # ÈÅçÂéÜÂàóË°®ÁöÑÁ¥¢Âºï\n    print(f\"element {i}: {seq[i]}\")  # ÊâìÂç∞ÊØè‰∏™ÂÖÉÁ¥†ÂèäÂÖ∂Á¥¢Âºï\n\nelement 0: 1\nelement 1: 2\nelement 2: 3\nelement 3: 4\n\n\n\nrange ÁöÑ‰∏Ä‰∏™Â∏∏ËßÅÁî®ÈÄîÊòØÊåâÁ¥¢ÂºïÈÅçÂéÜÂ∫èÂàó„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed2cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nÊàë‰ª¨Â∑≤Áªè‰ªãÁªç‰∫Ü Python ÁöÑÊ†∏ÂøÉÊûÑÂª∫ÂùóÔºöÊï∞ÊçÆÁ±ªÂûã„ÄÅËøêÁÆóÁ¨¶„ÄÅÊéßÂà∂ÊµÅ‰ª•Âèä IPython Âíå Jupyter Notebooks ÁöÑÂü∫Êú¨Áî®Ê≥ï„ÄÇ\nËøô‰∫õÊ¶ÇÂøµÊûÑÊàê‰∫Ü‰ΩøÁî® Python ËøõË°åÊï∞ÊçÆÂàÜÊûêÁöÑÂü∫Á°Ä„ÄÇ\nËÆ∞‰ΩèË¶ÅÁªÉ‰π†ÂíåÂÆûÈ™åÔºÅüß™"
  },
  {
    "objectID": "qmd/pandas3ed2cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "href": "qmd/pandas3ed2cn.html#ÊÄùËÄÉÂíåËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉÂíåËÆ®ËÆ∫ ü§î\n\nPython ÁöÑ‚Äú‰∏ÄÂàáÁöÜÂØπË±°‚ÄùÁöÑÁêÜÂøµ‰∏éÂÖ∂‰ªñËØ≠Ë®ÄÁõ∏ÊØîÂ¶Ç‰ΩïÔºü\n‰∏éÁºñÂÜôËÑöÊú¨Áõ∏ÊØîÔºå‰ΩøÁî® Jupyter Notebooks ËøõË°åÊï∞ÊçÆÂàÜÊûêÊúâÂì™‰∫õ‰ºòÂäøÔºü\nÊÇ®ËÉΩÊÉ≥Âà∞È∏≠Â≠êÁ±ªÂûãÁâπÂà´ÊúâÁî®ÁöÑÊÉÖÂÜµÂêóÔºü\nÊÇ®Â¶Ç‰ΩïÂú®ÂÆûÈôÖÁöÑÊï∞ÊçÆÂàÜÊûêÈ°πÁõÆ‰∏≠‰ΩøÁî® datetime Ê®°ÂùóÔºü\nÂèØÂèòÂØπË±°Âíå‰∏çÂèØÂèòÂØπË±°‰πãÈó¥Êúâ‰ªÄ‰πàÂå∫Âà´ÔºüÂÆÉ‰ª¨ÂêÑËá™ÁöÑ‰ºòÁº∫ÁÇπÊòØ‰ªÄ‰πàÔºü"
  },
  {
    "objectID": "qmd/pandas3ed9.html",
    "href": "qmd/pandas3ed9.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Making informative visualizations (sometimes called plots) is one of the most important tasks in data analysis.\n\n\nExploratory Process: Helps identify outliers or needed data transformations.\nModel Generation: Aids in generating ideas for models.\nWeb Visualization: Building interactive visualizations can be the end goal.\n\n\n\n\n\n\n\nNote\n\n\n\nPython has many add-on libraries for visualizations, but we‚Äôll focus on matplotlib and libraries built on top of it, such as seaborn."
  },
  {
    "objectID": "qmd/pandas3ed9.html#introduction",
    "href": "qmd/pandas3ed9.html#introduction",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "Making informative visualizations (sometimes called plots) is one of the most important tasks in data analysis.\n\n\nExploratory Process: Helps identify outliers or needed data transformations.\nModel Generation: Aids in generating ideas for models.\nWeb Visualization: Building interactive visualizations can be the end goal.\n\n\n\n\n\n\n\nNote\n\n\n\nPython has many add-on libraries for visualizations, but we‚Äôll focus on matplotlib and libraries built on top of it, such as seaborn."
  },
  {
    "objectID": "qmd/pandas3ed9.html#what-is-matplotlib",
    "href": "qmd/pandas3ed9.html#what-is-matplotlib",
    "title": "Python for Data Analysis",
    "section": "What is matplotlib? üñºÔ∏è",
    "text": "What is matplotlib? üñºÔ∏è\n\nA desktop plotting package for creating publication-quality plots and figures.\nStarted by John Hunter in 2002 to provide a MATLAB-like plotting interface in Python.\n\nWhy? ü§î To make it easier for scientists and engineers to create plots in Python, just like they did in MATLAB!\n\nCollaborated with IPython to simplify interactive plotting.\nSupports various GUI backends and export formats (PDF, SVG, JPG, PNG, BMP, GIF, etc.).\nMost graphics in many books and publications are produced using matplotlib.\n\n\n\n\n\n\n\nTip\n\n\n\nMatplotlib has spawned add-on toolkits like seaborn, enhancing its capabilities."
  },
  {
    "objectID": "qmd/pandas3ed9.html#setting-up-matplotlib-in-jupyter",
    "href": "qmd/pandas3ed9.html#setting-up-matplotlib-in-jupyter",
    "title": "Python for Data Analysis",
    "section": "Setting Up matplotlib in Jupyter ‚öôÔ∏è",
    "text": "Setting Up matplotlib in Jupyter ‚öôÔ∏è\nTo display plots inline in Jupyter Notebook, use the magic command:\n%matplotlib inline\n\n\n\n\n\n\nNote\n\n\n\nThis command tells Jupyter to display matplotlib plots directly in the notebook output. Without it, you might not see your plots!"
  },
  {
    "objectID": "qmd/pandas3ed9.html#data-visualization-libraries-evolution",
    "href": "qmd/pandas3ed9.html#data-visualization-libraries-evolution",
    "title": "Python for Data Analysis",
    "section": "Data Visualization Libraries Evolution",
    "text": "Data Visualization Libraries Evolution\n\nMany new visualization libraries have emerged since 2012.\n\nBokeh and Altair: Leverage modern web tech for interactive visualizations.\n\nThis course focuses on matplotlib due to its fundamental nature and integration with pandas.\n\nWhy matplotlib? ü§î It‚Äôs like learning to walk before you run! Understanding matplotlib helps you grasp the basics, making it easier to learn other libraries later.\n\n\n\n\n\n\n\n\nTip\n\n\n\nPrinciples learned here are adaptable to other visualization libraries."
  },
  {
    "objectID": "qmd/pandas3ed9.html#a-brief-matplotlib-api-primer",
    "href": "qmd/pandas3ed9.html#a-brief-matplotlib-api-primer",
    "title": "Python for Data Analysis",
    "section": "A Brief matplotlib API Primer",
    "text": "A Brief matplotlib API Primer\nImport convention for matplotlib:\nimport matplotlib.pyplot as plt\n\n\n\n\n\n\nNote\n\n\n\nThis line imports the pyplot module from matplotlib and gives it a shorter name, plt. This is a common practice to make your code cleaner and easier to read."
  },
  {
    "objectID": "qmd/pandas3ed9.html#creating-a-simple-plot",
    "href": "qmd/pandas3ed9.html#creating-a-simple-plot",
    "title": "Python for Data Analysis",
    "section": "Creating a Simple Plot",
    "text": "Creating a Simple Plot\nimport numpy as np\ndata = np.arange(10)\nplt.plot(data)\n\nnp.arange(10): Creates an array of numbers from 0 to 9.\nplt.plot(data): Plots the data as a line chart."
  },
  {
    "objectID": "qmd/pandas3ed9.html#simple-line-plot-result",
    "href": "qmd/pandas3ed9.html#simple-line-plot-result",
    "title": "Python for Data Analysis",
    "section": "Simple Line Plot Result",
    "text": "Simple Line Plot Result\n\n\n\n\n\n\n\n\n\nFigure 9-1. Simple line plot"
  },
  {
    "objectID": "qmd/pandas3ed9.html#figures-and-subplots",
    "href": "qmd/pandas3ed9.html#figures-and-subplots",
    "title": "Python for Data Analysis",
    "section": "Figures and Subplots üìê",
    "text": "Figures and Subplots üìê\n\nPlots in matplotlib reside within a Figure object.\n\nWhat‚Äôs a Figure? ü§î Think of it as a blank canvas where you can draw your plots.\n\nCreate a new figure using plt.figure():\n\nfig = plt.figure()\n\nplt.figure options:\n\nfigsize: Guarantees figure size and aspect ratio."
  },
  {
    "objectID": "qmd/pandas3ed9.html#adding-subplots",
    "href": "qmd/pandas3ed9.html#adding-subplots",
    "title": "Python for Data Analysis",
    "section": "Adding Subplots ‚ûï",
    "text": "Adding Subplots ‚ûï\n\nYou can‚Äôt plot on a blank figure; create subplots using add_subplot:\n\nax1 = fig.add_subplot(2, 2, 1)\n\nadd_subplot(2, 2, 1) means:\n\nA 2x2 grid of subplots (4 plots total).\nSelect the 1st subplot (numbered from 1).\nAnalogy: It is just like the form in Excel to select a range of cells."
  },
  {
    "objectID": "qmd/pandas3ed9.html#create-additional-subplots",
    "href": "qmd/pandas3ed9.html#create-additional-subplots",
    "title": "Python for Data Analysis",
    "section": "Create Additional Subplots",
    "text": "Create Additional Subplots\n\nCreate additional subplots:\n\nax2 = fig.add_subplot(2, 2, 2)\nax3 = fig.add_subplot(2, 2, 3)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#an-empty-figure-with-three-subplots",
    "href": "qmd/pandas3ed9.html#an-empty-figure-with-three-subplots",
    "title": "Python for Data Analysis",
    "section": "An Empty Figure with Three Subplots",
    "text": "An Empty Figure with Three Subplots\n\n\n\n\n\n\n\n\n\nFigure 9-2. An empty matplotlib figure with three subplots"
  },
  {
    "objectID": "qmd/pandas3ed9.html#plotting-commands-in-jupyter",
    "href": "qmd/pandas3ed9.html#plotting-commands-in-jupyter",
    "title": "Python for Data Analysis",
    "section": "Plotting Commands in Jupyter üìù",
    "text": "Plotting Commands in Jupyter üìù\n\n\n\n\n\n\nNote\n\n\n\nIn Jupyter Notebook, plots are reset after each cell. Put all plotting commands in a single cell.\n\nWhy? ü§î Jupyter runs each cell independently. If you split your plotting commands, you might only see the last plot!\n\n\n\nfig = plt.figure()\nax1 = fig.add_subplot(2, 2, 1)\nax2 = fig.add_subplot(2, 2, 2)\nax3 = fig.add_subplot(2, 2, 3)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#using-axes-methods",
    "href": "qmd/pandas3ed9.html#using-axes-methods",
    "title": "Python for Data Analysis",
    "section": "Using Axes Methods üéØ",
    "text": "Using Axes Methods üéØ\n\nAxesSubplot objects have methods to create different plot types.\nPreferred over top-level functions like plt.plot.\nExample:\n\nax3.plot(np.random.standard_normal(50).cumsum(), color=\"black\", linestyle=\"dashed\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#data-visualization-after-a-single-plot",
    "href": "qmd/pandas3ed9.html#data-visualization-after-a-single-plot",
    "title": "Python for Data Analysis",
    "section": "Data Visualization After a Single Plot",
    "text": "Data Visualization After a Single Plot\n\n\n\n\n\n\n\n\n\nFigure 9-3. Data visualization after a single plot"
  },
  {
    "objectID": "qmd/pandas3ed9.html#understanding-matplotlib-output",
    "href": "qmd/pandas3ed9.html#understanding-matplotlib-output",
    "title": "Python for Data Analysis",
    "section": "Understanding Matplotlib Output üí¨",
    "text": "Understanding Matplotlib Output üí¨\n\nYou might see output like &lt;matplotlib.lines.Line2D at ...&gt;.\n\nWhat does this mean? ü§î It‚Äôs a reference to the plot element you just added. You can usually ignore it.\n\nTo suppress the output, add a semicolon (;) at the end of the line.\n\nWhy suppress? üßπ Keeps your notebook output clean and focused on the plots.\n\n\nax3.plot(np.random.standard_normal(50).cumsum(), color=\"black\", linestyle=\"dashed\"); # Note the semicolon"
  },
  {
    "objectID": "qmd/pandas3ed9.html#adding-more-plots-to-subplots",
    "href": "qmd/pandas3ed9.html#adding-more-plots-to-subplots",
    "title": "Python for Data Analysis",
    "section": "Adding More Plots to Subplots ‚ûï",
    "text": "Adding More Plots to Subplots ‚ûï\nax1.hist(np.random.standard_normal(100), bins=20, color=\"black\", alpha=0.3)\nax2.scatter(np.arange(30), np.arange(30) + 3 * np.random.standard_normal(30))\n\nax1.hist(...): Creates a histogram.\nax2.scatter(...): Creates a scatter plot.\nalpha=0.3: Sets the transparency of the plot."
  },
  {
    "objectID": "qmd/pandas3ed9.html#data-visualization-after-additional-plots",
    "href": "qmd/pandas3ed9.html#data-visualization-after-additional-plots",
    "title": "Python for Data Analysis",
    "section": "Data Visualization After Additional Plots",
    "text": "Data Visualization After Additional Plots\n\n\n\n\n\n\n\n\n\nFigure 9-4. Data visualization after additional plots"
  },
  {
    "objectID": "qmd/pandas3ed9.html#convenient-subplot-creation-with-plt.subplots",
    "href": "qmd/pandas3ed9.html#convenient-subplot-creation-with-plt.subplots",
    "title": "Python for Data Analysis",
    "section": "Convenient Subplot Creation with plt.subplots",
    "text": "Convenient Subplot Creation with plt.subplots\n\nplt.subplots creates a figure and a NumPy array of subplot objects:\n\nfig, axes = plt.subplots(2, 3)\naxes\narray([[&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;],\n       [&lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;]], dtype=object)\n\nAccess subplots like a 2D array: axes[0, 1].\nsharex and sharey: Share the same x or y-axis for comparing data."
  },
  {
    "objectID": "qmd/pandas3ed9.html#plt.subplots-options",
    "href": "qmd/pandas3ed9.html#plt.subplots-options",
    "title": "Python for Data Analysis",
    "section": "plt.subplots Options ‚öôÔ∏è",
    "text": "plt.subplots Options ‚öôÔ∏è\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nnrows\nNumber of rows of subplots\n\n\nncols\nNumber of columns of subplots\n\n\nsharex\nAll subplots use the same x-axis ticks\n\n\nsharey\nAll subplots use the same y-axis ticks\n\n\nsubplot_kw\nDictionary of keywords passed to add_subplot\n\n\n**fig_kw\nAdditional keywords passed to subplots (e.g., figsize=(8, 6))\n\n\n\n\n\n\n\n\n\nTable 9-1. matplotlib.pyplot.subplots options"
  },
  {
    "objectID": "qmd/pandas3ed9.html#adjusting-spacing-around-subplots",
    "href": "qmd/pandas3ed9.html#adjusting-spacing-around-subplots",
    "title": "Python for Data Analysis",
    "section": "Adjusting Spacing Around Subplots üìè",
    "text": "Adjusting Spacing Around Subplots üìè\n\nDefault padding and spacing between subplots.\nChange spacing using the subplots_adjust method:\n\nfig.subplots_adjust(left=None, bottom=None, right=None, top=None,\n                    wspace=None, hspace=None)\n\nwspace and hspace: Control the percentage of figure width/height for spacing."
  },
  {
    "objectID": "qmd/pandas3ed9.html#example-shrinking-spacing-to-zero",
    "href": "qmd/pandas3ed9.html#example-shrinking-spacing-to-zero",
    "title": "Python for Data Analysis",
    "section": "Example: Shrinking Spacing to Zero üö´",
    "text": "Example: Shrinking Spacing to Zero üö´\nfig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\nfor i in range(2):\n    for j in range(2):\n        axes[i, j].hist(np.random.standard_normal(500), bins=50,\n                        color=\"black\", alpha=0.5)\nfig.subplots_adjust(wspace=0, hspace=0)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#data-visualization-with-no-inter-subplot-spacing",
    "href": "qmd/pandas3ed9.html#data-visualization-with-no-inter-subplot-spacing",
    "title": "Python for Data Analysis",
    "section": "Data Visualization with No Inter-Subplot Spacing",
    "text": "Data Visualization with No Inter-Subplot Spacing\n\n\n\n\n\n\n\n\n\nFigure 9-5. Data visualization with no inter-subplot spacing"
  },
  {
    "objectID": "qmd/pandas3ed9.html#overlapping-axis-labels",
    "href": "qmd/pandas3ed9.html#overlapping-axis-labels",
    "title": "Python for Data Analysis",
    "section": "Overlapping Axis Labels",
    "text": "Overlapping Axis Labels\n\nmatplotlib doesn‚Äôt check for overlapping labels.\nFix labels by specifying tick locations and labels.\nCovered in the ‚ÄúTicks, Labels, and Legends‚Äù section."
  },
  {
    "objectID": "qmd/pandas3ed9.html#colors-markers-and-line-styles",
    "href": "qmd/pandas3ed9.html#colors-markers-and-line-styles",
    "title": "Python for Data Analysis",
    "section": "Colors, Markers, and Line Styles üé®",
    "text": "Colors, Markers, and Line Styles üé®\n\nCustomize line plots with color, markers, and line styles.\nExample:\n\nax.plot(x, y, linestyle=\"--\", color=\"green\")\n\nUse color names or hex codes (e.g., \"#CECECE\").\nLine styles: Check plt.plot docstring (use plt.plot?)."
  },
  {
    "objectID": "qmd/pandas3ed9.html#markers-for-highlighting-data-points",
    "href": "qmd/pandas3ed9.html#markers-for-highlighting-data-points",
    "title": "Python for Data Analysis",
    "section": "Markers for Highlighting Data Points üìç",
    "text": "Markers for Highlighting Data Points üìç\n\nLine plots can have markers to show actual data points.\nUseful when interpolation might obscure point locations.\nExample:\n\nax.plot(np.random.standard_normal(30).cumsum(), color=\"black\",\n        linestyle=\"dashed\", marker=\"o\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#line-plot-with-markers",
    "href": "qmd/pandas3ed9.html#line-plot-with-markers",
    "title": "Python for Data Analysis",
    "section": "Line Plot with Markers",
    "text": "Line Plot with Markers\n\n\n\n\n\n\n\n\n\nFigure 9-6. Line plot with markers"
  },
  {
    "objectID": "qmd/pandas3ed9.html#drawstyle-option",
    "href": "qmd/pandas3ed9.html#drawstyle-option",
    "title": "Python for Data Analysis",
    "section": "drawstyle Option üé®",
    "text": "drawstyle Option üé®\n\nLinear interpolation is the default.\nChange with the drawstyle option:\n\nax.plot(data, color=\"black\", linestyle=\"dashed\", label=\"Default\")\nax.plot(data, color=\"black\", linestyle=\"dashed\",\n        drawstyle=\"steps-post\", label=\"steps-post\")\nax.legend()"
  },
  {
    "objectID": "qmd/pandas3ed9.html#line-plot-with-different-drawstyle-options",
    "href": "qmd/pandas3ed9.html#line-plot-with-different-drawstyle-options",
    "title": "Python for Data Analysis",
    "section": "Line Plot with Different drawstyle Options",
    "text": "Line Plot with Different drawstyle Options\n\n\n\n\n\n\n\n\n\nFigure 9-7. Line plot with different drawstyle options"
  },
  {
    "objectID": "qmd/pandas3ed9.html#ticks-labels-and-legends",
    "href": "qmd/pandas3ed9.html#ticks-labels-and-legends",
    "title": "Python for Data Analysis",
    "section": "Ticks, Labels, and Legends üè∑Ô∏è",
    "text": "Ticks, Labels, and Legends üè∑Ô∏è\n\nPlot decorations are accessed through matplotlib axes object methods.\nxlim, xticks, xticklabels: Control plot range, tick locations, and labels.\nTwo ways to use:\n\nNo arguments: Returns the current value (e.g., ax.xlim()).\nWith parameters: Sets the value (e.g., ax.xlim([0, 10]))."
  },
  {
    "objectID": "qmd/pandas3ed9.html#customizing-axes",
    "href": "qmd/pandas3ed9.html#customizing-axes",
    "title": "Python for Data Analysis",
    "section": "Customizing Axes üõ†Ô∏è",
    "text": "Customizing Axes üõ†Ô∏è\n\nExample: Random walk plot.\n\nfig, ax = plt.subplots()\nax.plot(np.random.standard_normal(1000).cumsum())"
  },
  {
    "objectID": "qmd/pandas3ed9.html#simple-plot-for-illustrating-xticks",
    "href": "qmd/pandas3ed9.html#simple-plot-for-illustrating-xticks",
    "title": "Python for Data Analysis",
    "section": "Simple Plot for Illustrating xticks",
    "text": "Simple Plot for Illustrating xticks\n\n\n\n\n\n\n\n\n\nFigure 9-8. Simple plot for illustrating xticks (with default labels)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#set-ticks-and-tick-labels",
    "href": "qmd/pandas3ed9.html#set-ticks-and-tick-labels",
    "title": "Python for Data Analysis",
    "section": "Set Ticks and Tick Labels",
    "text": "Set Ticks and Tick Labels\nticks = ax.set_xticks([0, 250, 500, 750, 1000])\nlabels = ax.set_xticklabels([\"one\", \"two\", \"three\", \"four\", \"five\"],\n                            rotation=30, fontsize=8)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#setting-title-and-axis-labels",
    "href": "qmd/pandas3ed9.html#setting-title-and-axis-labels",
    "title": "Python for Data Analysis",
    "section": "Setting Title and Axis Labels üìù",
    "text": "Setting Title and Axis Labels üìù\nax.set_xlabel(\"Stages\")\nax.set_title(\"My first matplotlib plot\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#simple-plot-for-illustrating-custom-xticks",
    "href": "qmd/pandas3ed9.html#simple-plot-for-illustrating-custom-xticks",
    "title": "Python for Data Analysis",
    "section": "Simple Plot for Illustrating Custom xticks",
    "text": "Simple Plot for Illustrating Custom xticks\n\n\n\n\n\n\n\n\n\nFigure 9-9. Simple plot for illustrating custom xticks\n\n\n\n\n\n\nrotation: Sets tick label rotation (e.g., 30 degrees).\nset_xlabel: Names the x-axis.\nset_title: Sets the subplot title."
  },
  {
    "objectID": "qmd/pandas3ed9.html#batch-setting-of-plot-properties",
    "href": "qmd/pandas3ed9.html#batch-setting-of-plot-properties",
    "title": "Python for Data Analysis",
    "section": "Batch Setting of Plot Properties ‚öôÔ∏è",
    "text": "Batch Setting of Plot Properties ‚öôÔ∏è\n\nAxes class has a set method:\n\nax.set(title=\"My first matplotlib plot\", xlabel=\"Stages\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#adding-legends",
    "href": "qmd/pandas3ed9.html#adding-legends",
    "title": "Python for Data Analysis",
    "section": "Adding Legends ‚ûï",
    "text": "Adding Legends ‚ûï\n\nLegends identify plot elements.\nPass the label argument when adding plot elements:\n\nfig, ax = plt.subplots()\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", label=\"one\")\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dashed\", label=\"two\")\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dotted\", label=\"three\")\nax.legend()"
  },
  {
    "objectID": "qmd/pandas3ed9.html#simple-plot-with-three-lines-and-legend",
    "href": "qmd/pandas3ed9.html#simple-plot-with-three-lines-and-legend",
    "title": "Python for Data Analysis",
    "section": "Simple Plot with Three Lines and Legend",
    "text": "Simple Plot with Three Lines and Legend\n\n\n\n\n\n\n\n\n\nFigure 9-10. Simple plot with three lines and legend"
  },
  {
    "objectID": "qmd/pandas3ed9.html#ax.legend-options",
    "href": "qmd/pandas3ed9.html#ax.legend-options",
    "title": "Python for Data Analysis",
    "section": "ax.legend() Options ‚öôÔ∏è",
    "text": "ax.legend() Options ‚öôÔ∏è\n\nax.legend(): Automatically creates a legend.\nloc: Specifies legend location (default is \"best\").\nExclude elements: Pass no label or label=\"_nolegend_\"."
  },
  {
    "objectID": "qmd/pandas3ed9.html#annotations-and-drawing-on-a-subplot",
    "href": "qmd/pandas3ed9.html#annotations-and-drawing-on-a-subplot",
    "title": "Python for Data Analysis",
    "section": "Annotations and Drawing on a Subplot ‚úçÔ∏è",
    "text": "Annotations and Drawing on a Subplot ‚úçÔ∏è\n\nAdd custom annotations: text, arrows, shapes.\ntext, arrow, annotate functions.\nax.text(x, y, \"Hello world!\", family=\"monospace\", fontsize=10): Draws text at (x, y)."
  },
  {
    "objectID": "qmd/pandas3ed9.html#annotating-the-sp-500-index",
    "href": "qmd/pandas3ed9.html#annotating-the-sp-500-index",
    "title": "Python for Data Analysis",
    "section": "Annotating the S&P 500 Index üìà",
    "text": "Annotating the S&P 500 Index üìà\n\nExample: Plotting S&P 500 closing price since 2007 with annotations.\n\nfrom datetime import datetime\n\nfig, ax = plt.subplots()\n\ndata = pd.read_csv(\"examples/spx.csv\", index_col=0, parse_dates=True)\nspx = data[\"SPX\"]\n\nspx.plot(ax=ax, color=\"black\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#annotating-the-sp-500-index-continued",
    "href": "qmd/pandas3ed9.html#annotating-the-sp-500-index-continued",
    "title": "Python for Data Analysis",
    "section": "Annotating the S&P 500 Index (Continued)",
    "text": "Annotating the S&P 500 Index (Continued)\ncrisis_data = [\n    (datetime(2007, 10, 11), \"Peak of bull market\"),\n    (datetime(2008, 3, 12), \"Bear Stearns Fails\"),\n    (datetime(2008, 9, 15), \"Lehman Bankruptcy\")\n]\n\nfor date, label in crisis_data:\n    ax.annotate(label, xy=(date, spx.asof(date) + 75),\n                xytext=(date, spx.asof(date) + 225),\n                arrowprops=dict(facecolor=\"black\", headwidth=4, width=2,\n                                headlength=4),\n                horizontalalignment=\"left\", verticalalignment=\"top\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#annotating-the-sp-500-index-continued-1",
    "href": "qmd/pandas3ed9.html#annotating-the-sp-500-index-continued-1",
    "title": "Python for Data Analysis",
    "section": "Annotating the S&P 500 Index (Continued)",
    "text": "Annotating the S&P 500 Index (Continued)\n# Zoom in on 2007-2010\nax.set_xlim([\"1/1/2007\", \"1/1/2011\"])\nax.set_ylim([600, 1800])\n\nax.set_title(\"Important dates in the 2008-2009 financial crisis\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#important-dates-in-the-20082009-financial-crisis",
    "href": "qmd/pandas3ed9.html#important-dates-in-the-20082009-financial-crisis",
    "title": "Python for Data Analysis",
    "section": "Important Dates in the 2008‚Äì2009 Financial Crisis",
    "text": "Important Dates in the 2008‚Äì2009 Financial Crisis\n\n\n\n\n\n\n\n\n\nFigure 9-11. Important dates in the 2008‚Äì2009 financial crisis"
  },
  {
    "objectID": "qmd/pandas3ed9.html#important-points-on-the-sp-500-plot",
    "href": "qmd/pandas3ed9.html#important-points-on-the-sp-500-plot",
    "title": "Python for Data Analysis",
    "section": "Important Points on the S&P 500 Plot",
    "text": "Important Points on the S&P 500 Plot\n\nax.annotate: Draws labels at specified (x, y) coordinates.\nset_xlim, set_ylim: Manually set plot boundaries.\nax.set_title: Adds a main title."
  },
  {
    "objectID": "qmd/pandas3ed9.html#drawing-shapes-patches",
    "href": "qmd/pandas3ed9.html#drawing-shapes-patches",
    "title": "Python for Data Analysis",
    "section": "Drawing Shapes (Patches) üîµüî∫üü•",
    "text": "Drawing Shapes (Patches) üîµüî∫üü•\n\nmatplotlib has objects called patches representing shapes.\nRectangle, Circle: Found in matplotlib.pyplot.\nFull set: matplotlib.patches.\nAdd to plot using ax.add_patch:\n\nfig, ax = plt.subplots()\n\nrect = plt.Rectangle((0.2, 0.75), 0.4, 0.15, color=\"black\", alpha=0.3)\ncirc = plt.Circle((0.7, 0.2), 0.15, color=\"blue\", alpha=0.3)\npgon = plt.Polygon([[0.15, 0.15], [0.35, 0.4], [0.2, 0.6]],\n                    color=\"green\", alpha=0.5)\n\nax.add_patch(rect)\nax.add_patch(circ)\nax.add_patch(pgon)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#data-visualization-composed-from-three-different-patches",
    "href": "qmd/pandas3ed9.html#data-visualization-composed-from-three-different-patches",
    "title": "Python for Data Analysis",
    "section": "Data Visualization Composed from Three Different Patches",
    "text": "Data Visualization Composed from Three Different Patches\n\n\n\n\n\n\n\n\n\nFigure 9-12. Data visualization composed from three different patches"
  },
  {
    "objectID": "qmd/pandas3ed9.html#saving-plots-to-file",
    "href": "qmd/pandas3ed9.html#saving-plots-to-file",
    "title": "Python for Data Analysis",
    "section": "Saving Plots to File üíæ",
    "text": "Saving Plots to File üíæ\n\nsavefig instance method: Saves the active figure.\nExample:\n\nfig.savefig(\"figpath.svg\")\n\nFile type inferred from extension (e.g., .pdf, .png).\ndpi: Controls dots-per-inch resolution.\n\nfig.savefig(\"figpath.png\", dpi=400)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#savefig-options",
    "href": "qmd/pandas3ed9.html#savefig-options",
    "title": "Python for Data Analysis",
    "section": "savefig Options ‚öôÔ∏è",
    "text": "savefig Options ‚öôÔ∏è\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nfname\nFilepath or Python file-like object; format inferred from extension\n\n\ndpi\nResolution in dots per inch\n\n\nfacecolor\nFigure background color outside subplots (default: \"w\" - white)\n\n\nedgecolor\nColor of the figure edge\n\n\nformat\nExplicit file format (e.g., \"png\", \"pdf\", \"svg\")\n\n\n\n\n\n\n\n\n\nTable 9-2. Some fig.savefig options"
  },
  {
    "objectID": "qmd/pandas3ed9.html#matplotlib-configuration",
    "href": "qmd/pandas3ed9.html#matplotlib-configuration",
    "title": "Python for Data Analysis",
    "section": "matplotlib Configuration ‚öôÔ∏è",
    "text": "matplotlib Configuration ‚öôÔ∏è\n\nmatplotlib has configurations for color schemes and defaults.\nCustomize via global parameters: figure size, subplot spacing, colors, fonts, etc.\nrc method: Modifies configuration programmatically.\nExample: Set default figure size to 10x10.\n\nplt.rc(\"figure\", figsize=(10, 10))"
  },
  {
    "objectID": "qmd/pandas3ed9.html#restoring-default-configuration-values",
    "href": "qmd/pandas3ed9.html#restoring-default-configuration-values",
    "title": "Python for Data Analysis",
    "section": "Restoring Default Configuration Values üîÑ",
    "text": "Restoring Default Configuration Values üîÑ\n\nCurrent settings: plt.rcParams dictionary.\nRestore defaults: plt.rcdefaults()."
  },
  {
    "objectID": "qmd/pandas3ed9.html#customizing-specific-components",
    "href": "qmd/pandas3ed9.html#customizing-specific-components",
    "title": "Python for Data Analysis",
    "section": "Customizing Specific Components üß©",
    "text": "Customizing Specific Components üß©\n\nFirst rc argument: Component to customize (e.g., \"figure\", \"axes\", \"xtick\").\nFollowed by keyword arguments for new parameters.\nExample:\n\nplt.rc(\"font\", family=\"monospace\", weight=\"bold\", size=8)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#matplotlibrc-configuration-file",
    "href": "qmd/pandas3ed9.html#matplotlibrc-configuration-file",
    "title": "Python for Data Analysis",
    "section": "matplotlibrc Configuration File üìù",
    "text": "matplotlibrc Configuration File üìù\n\nExtensive customization: matplotlibrc file in matplotlib/mpl-data.\nPlace a customized matplotlibrc in your home directory as .matplotlibrc.\nLoaded each time you use matplotlib."
  },
  {
    "objectID": "qmd/pandas3ed9.html#seaborn-and-matplotlib-configuration",
    "href": "qmd/pandas3ed9.html#seaborn-and-matplotlib-configuration",
    "title": "Python for Data Analysis",
    "section": "seaborn and matplotlib Configuration üé®",
    "text": "seaborn and matplotlib Configuration üé®\n\nseaborn uses matplotlib‚Äôs configuration system internally.\nseaborn has built-in plot themes and styles."
  },
  {
    "objectID": "qmd/pandas3ed9.html#plotting-with-pandas-and-seaborn",
    "href": "qmd/pandas3ed9.html#plotting-with-pandas-and-seaborn",
    "title": "Python for Data Analysis",
    "section": "Plotting with pandas and seaborn",
    "text": "Plotting with pandas and seaborn\n\nMatplotlib can be low-level.\npandas: Built-in methods for visualizing DataFrame and Series objects.\nseaborn: High-level statistical graphics library built on matplotlib.\nseaborn simplifies creating common visualization types."
  },
  {
    "objectID": "qmd/pandas3ed9.html#line-plots-with-pandas",
    "href": "qmd/pandas3ed9.html#line-plots-with-pandas",
    "title": "Python for Data Analysis",
    "section": "Line Plots with pandas üìà",
    "text": "Line Plots with pandas üìà\n\nSeries and DataFrame have a plot attribute.\nplot() makes line plots by default:\n\ns = pd.Series(np.random.standard_normal(10).cumsum(), index=np.arange(0, 100, 10))\ns.plot()"
  },
  {
    "objectID": "qmd/pandas3ed9.html#simple-series-plot",
    "href": "qmd/pandas3ed9.html#simple-series-plot",
    "title": "Python for Data Analysis",
    "section": "Simple Series Plot",
    "text": "Simple Series Plot\n\n\n\n\n\n\n\n\n\nFigure 9-13. Simple Series plot\n\n\n\n\n\n\nSeries index: Used for x-axis (disable with use_index=False).\nxticks, xlim, yticks, ylim: Adjust axis ticks and limits."
  },
  {
    "objectID": "qmd/pandas3ed9.html#series.plot-method-arguments",
    "href": "qmd/pandas3ed9.html#series.plot-method-arguments",
    "title": "Python for Data Analysis",
    "section": "Series.plot Method Arguments ‚öôÔ∏è",
    "text": "Series.plot Method Arguments ‚öôÔ∏è\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nlabel\nLabel for plot legend\n\n\nax\nmatplotlib subplot object to plot on\n\n\nstyle\nStyle string (e.g., \"ko--\")\n\n\nalpha\nPlot fill opacity (0 to 1)\n\n\nkind\nPlot type: \"area\", \"bar\", \"barh\", \"density\", \"hist\", \"kde\", \"line\", \"pie\"\n\n\nfigsize\nSize of the figure object\n\n\nlogx\nLogarithmic scaling on x-axis\n\n\nlogy\nLogarithmic scaling on y-axis\n\n\ntitle\nTitle for the plot\n\n\nuse_index\nUse object index for tick labels\n\n\nrot\nRotation of tick labels (0-360)\n\n\nxticks\nValues for x-axis ticks\n\n\nyticks\nValues for y-axis ticks\n\n\nxlim\nx-axis limits (e.g., [0, 10])\n\n\nylim\ny-axis limits\n\n\ngrid\nDisplay axis grid (off by default)\n\n\n\n\n\n\n\n\n\nTable 9-3. Series.plot method arguments\n\n\n\n\npandas plotting methods accept an optional ax parameter for a matplotlib subplot object."
  },
  {
    "objectID": "qmd/pandas3ed9.html#dataframe-line-plots",
    "href": "qmd/pandas3ed9.html#dataframe-line-plots",
    "title": "Python for Data Analysis",
    "section": "DataFrame Line Plots üìä",
    "text": "DataFrame Line Plots üìä\ndf = pd.DataFrame(np.random.standard_normal((10, 4)).cumsum(0),\n                  columns=[\"A\", \"B\", \"C\", \"D\"],\n                  index=np.arange(0, 100, 10))\nplt.style.use('grayscale') #use grayscale style to adapt to black and white publication\ndf.plot()"
  },
  {
    "objectID": "qmd/pandas3ed9.html#simple-dataframe-plot",
    "href": "qmd/pandas3ed9.html#simple-dataframe-plot",
    "title": "Python for Data Analysis",
    "section": "Simple DataFrame Plot",
    "text": "Simple DataFrame Plot\n\n\n\n\n\n\n\n\n\nFigure 9-14. Simple DataFrame plot\n\n\n\n\n\n\nPlots each column as a separate line on the same subplot.\nCreates a legend automatically.\ndf.plot() is equivalent to df.plot.line()."
  },
  {
    "objectID": "qmd/pandas3ed9.html#dataframe.plot-options",
    "href": "qmd/pandas3ed9.html#dataframe.plot-options",
    "title": "Python for Data Analysis",
    "section": "DataFrame.plot Options ‚öôÔ∏è",
    "text": "DataFrame.plot Options ‚öôÔ∏è\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nsubplots\nPlot each DataFrame column in a separate subplot\n\n\nlayout\n2-tuple (rows, columns) for subplot layout\n\n\nsharex\nIf subplots=True, share x-axis ticks and limits\n\n\nsharey\nIf subplots=True, share y-axis\n\n\nlegend\nAdd a subplot legend (True by default)\n\n\nsort_columns\nPlot columns in alphabetical order (default: use existing order)\n\n\n\n\n\n\n\n\n\nTable 9-4. DataFrame-specific plot arguments\n\n\n\n\nAdditional keyword arguments are passed to matplotlib plotting functions."
  },
  {
    "objectID": "qmd/pandas3ed9.html#bar-plots",
    "href": "qmd/pandas3ed9.html#bar-plots",
    "title": "Python for Data Analysis",
    "section": "Bar Plots üìä",
    "text": "Bar Plots üìä\n\nplot.bar(): Vertical bar plots.\nplot.barh(): Horizontal bar plots.\nSeries/DataFrame index: Used for x (bar) or y (barh) ticks.\n\nfig, axes = plt.subplots(2, 1)\ndata = pd.Series(np.random.uniform(size=16), index=list(\"abcdefghijklmnop\"))\ndata.plot.bar(ax=axes[0], color=\"black\", alpha=0.7)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#bar-plots-continued",
    "href": "qmd/pandas3ed9.html#bar-plots-continued",
    "title": "Python for Data Analysis",
    "section": "Bar Plots (Continued)",
    "text": "Bar Plots (Continued)\ndata.plot.barh(ax=axes[1], color=\"black\", alpha=0.7)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#horizontal-and-vertical-bar-plot",
    "href": "qmd/pandas3ed9.html#horizontal-and-vertical-bar-plot",
    "title": "Python for Data Analysis",
    "section": "Horizontal and Vertical Bar Plot",
    "text": "Horizontal and Vertical Bar Plot\n\n\n\n\n\n\n\n\n\nFigure 9-15. Horizonal and vertical bar plot"
  },
  {
    "objectID": "qmd/pandas3ed9.html#dataframe-bar-plots",
    "href": "qmd/pandas3ed9.html#dataframe-bar-plots",
    "title": "Python for Data Analysis",
    "section": "DataFrame Bar Plots üìä",
    "text": "DataFrame Bar Plots üìä\ndf = pd.DataFrame(np.random.uniform(size=(6, 4)),\n                  index=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"],\n                  columns=pd.Index([\"A\", \"B\", \"C\", \"D\"], name=\"Genus\"))\ndf.plot.bar()"
  },
  {
    "objectID": "qmd/pandas3ed9.html#dataframe-bar-plot",
    "href": "qmd/pandas3ed9.html#dataframe-bar-plot",
    "title": "Python for Data Analysis",
    "section": "DataFrame Bar Plot",
    "text": "DataFrame Bar Plot\n\n\n\n\n\n\n\n\n\nFigure 9-16. DataFrame bar plot\n\n\n\n\n\n\nGroups values in each row in bars, side by side.\nDataFrame column name: Used for legend title."
  },
  {
    "objectID": "qmd/pandas3ed9.html#stacked-bar-plots",
    "href": "qmd/pandas3ed9.html#stacked-bar-plots",
    "title": "Python for Data Analysis",
    "section": "Stacked Bar Plots üìö",
    "text": "Stacked Bar Plots üìö\n\nstacked=True: Creates stacked bar plots.\nValues in each row are stacked together.\n\ndf.plot.barh(stacked=True, alpha=0.5)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#dataframe-stacked-bar-plot",
    "href": "qmd/pandas3ed9.html#dataframe-stacked-bar-plot",
    "title": "Python for Data Analysis",
    "section": "DataFrame Stacked Bar Plot",
    "text": "DataFrame Stacked Bar Plot\n\n\n\n\n\n\n\n\n\nFigure 9-17. DataFrame stacked bar plot"
  },
  {
    "objectID": "qmd/pandas3ed9.html#example-restaurant-tipping-data",
    "href": "qmd/pandas3ed9.html#example-restaurant-tipping-data",
    "title": "Python for Data Analysis",
    "section": "Example: Restaurant Tipping Data üçΩÔ∏è",
    "text": "Example: Restaurant Tipping Data üçΩÔ∏è\n\nVisualize tipping data: Percentage of data points for each party size, per day.\nread_csv: Load data.\ncrosstab: Cross-tabulation by day and party size.\n\ntips = pd.read_csv(\"examples/tips.csv\")\nparty_counts = pd.crosstab(tips[\"day\"], tips[\"size\"])\nparty_counts = party_counts.reindex(index=[\"Thur\", \"Fri\", \"Sat\", \"Sun\"])"
  },
  {
    "objectID": "qmd/pandas3ed9.html#restaurant-tipping-data-continued",
    "href": "qmd/pandas3ed9.html#restaurant-tipping-data-continued",
    "title": "Python for Data Analysis",
    "section": "Restaurant Tipping Data (Continued)",
    "text": "Restaurant Tipping Data (Continued)\n\nCalculate the frequency of two columns in the dataframe.\n\n# Remove 1- and 6-person parties\nparty_counts = party_counts.loc[:, 2:5]\n\n# Normalize to sum to 1\nparty_pcts = party_counts.div(party_counts.sum(axis=\"columns\"), axis=\"index\")\nparty_pcts.plot.bar(stacked=True)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#fraction-of-parties-by-size-within-each-day",
    "href": "qmd/pandas3ed9.html#fraction-of-parties-by-size-within-each-day",
    "title": "Python for Data Analysis",
    "section": "Fraction of Parties by Size within Each Day",
    "text": "Fraction of Parties by Size within Each Day\n\n\n\n\n\n\n\n\n\nFigure 9-18. Fraction of parties by size within each day"
  },
  {
    "objectID": "qmd/pandas3ed9.html#seaborn-for-simpler-aggregation-and-summarization",
    "href": "qmd/pandas3ed9.html#seaborn-for-simpler-aggregation-and-summarization",
    "title": "Python for Data Analysis",
    "section": "seaborn for Simpler Aggregation and Summarization üìä",
    "text": "seaborn for Simpler Aggregation and Summarization üìä\n\nseaborn simplifies plotting with aggregated/summarized data.\nExample: Tipping percentage by day.\n\nimport seaborn as sns\n\ntips[\"tip_pct\"] = tips[\"tip\"] / (tips[\"total_bill\"] - tips[\"tip\"])\nsns.barplot(x=\"tip_pct\", y=\"day\", data=tips, orient=\"h\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#tipping-percentage-by-day-with-error-bars",
    "href": "qmd/pandas3ed9.html#tipping-percentage-by-day-with-error-bars",
    "title": "Python for Data Analysis",
    "section": "Tipping Percentage by Day with Error Bars",
    "text": "Tipping Percentage by Day with Error Bars\n\n\n\n\n\n\n\n\n\nFigure 9-19. Tipping percentage by day with error bars\n\n\n\n\n\n\ndata: pandas DataFrame.\nOther arguments: Column names.\nBars: Average value of tip_pct.\nBlack lines: 95% confidence interval."
  },
  {
    "objectID": "qmd/pandas3ed9.html#splitting-by-additional-categorical-values",
    "href": "qmd/pandas3ed9.html#splitting-by-additional-categorical-values",
    "title": "Python for Data Analysis",
    "section": "Splitting by Additional Categorical Values üåà",
    "text": "Splitting by Additional Categorical Values üåà\n\nhue option in seaborn.barplot: Split by another categorical value.\n\nsns.barplot(x=\"tip_pct\", y=\"day\", hue=\"time\", data=tips, orient=\"h\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#tipping-percentage-by-day-and-time",
    "href": "qmd/pandas3ed9.html#tipping-percentage-by-day-and-time",
    "title": "Python for Data Analysis",
    "section": "Tipping Percentage by Day and Time",
    "text": "Tipping Percentage by Day and Time\n\n\n\n\n\n\n\n\n\nFigure 9-20. Tipping percentage by day and time"
  },
  {
    "objectID": "qmd/pandas3ed9.html#seaborn-plot-aesthetics",
    "href": "qmd/pandas3ed9.html#seaborn-plot-aesthetics",
    "title": "Python for Data Analysis",
    "section": "seaborn Plot Aesthetics üé®",
    "text": "seaborn Plot Aesthetics üé®\n\nseaborn automatically adjusts plot aesthetics:\n\nColor palette.\nPlot background.\nGrid line colors.\n\nseaborn.set_style: Switch between plot appearances.\n\nsns.set_style(\"whitegrid\")\n\nFor grayscale, set a greyscale color palette:\n\nsns.set_palette(\"Greys_r\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#histograms-and-density-plots",
    "href": "qmd/pandas3ed9.html#histograms-and-density-plots",
    "title": "Python for Data Analysis",
    "section": "Histograms and Density Plots üìä",
    "text": "Histograms and Density Plots üìä\n\nHistogram: Discretized display of value frequency.\nData points are binned, and the count in each bin is plotted.\nplot.hist: Create a histogram.\n\ntips[\"tip_pct\"].plot.hist(bins=50)"
  },
  {
    "objectID": "qmd/pandas3ed9.html#histogram-of-tip-percentages",
    "href": "qmd/pandas3ed9.html#histogram-of-tip-percentages",
    "title": "Python for Data Analysis",
    "section": "Histogram of Tip Percentages",
    "text": "Histogram of Tip Percentages\n\n\n\n\n\n\n\n\n\nFigure 9-21. Histogram of tip percentages"
  },
  {
    "objectID": "qmd/pandas3ed9.html#density-plots",
    "href": "qmd/pandas3ed9.html#density-plots",
    "title": "Python for Data Analysis",
    "section": "Density Plots üìà",
    "text": "Density Plots üìà\n\nDensity plot: Estimate of a continuous probability distribution.\nApproximated as a mixture of kernels (e.g., normal distribution).\nAlso known as kernel density estimate (KDE) plots.\nplot.density: Create a density plot.\n\ntips[\"tip_pct\"].plot.density()"
  },
  {
    "objectID": "qmd/pandas3ed9.html#density-plot-of-tip-percentages",
    "href": "qmd/pandas3ed9.html#density-plot-of-tip-percentages",
    "title": "Python for Data Analysis",
    "section": "Density Plot of Tip Percentages",
    "text": "Density Plot of Tip Percentages\n\n\n\n\n\n\n\n\n\nFigure 9-22. Density plot of tip percentages\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDensity plot require SciPy: conda install scipy"
  },
  {
    "objectID": "qmd/pandas3ed9.html#seaborns-histplot",
    "href": "qmd/pandas3ed9.html#seaborns-histplot",
    "title": "Python for Data Analysis",
    "section": "seaborn‚Äôs histplot üìä",
    "text": "seaborn‚Äôs histplot üìä\n\nseaborn simplifies histograms and density plots.\nhistplot: Plots both histogram and continuous density estimate.\nExample: Bimodal distribution.\n\ncomp1 = np.random.standard_normal(200)\ncomp2 = 10 + 2 * np.random.standard_normal(200)\nvalues = pd.Series(np.concatenate([comp1, comp2]))\nsns.histplot(values, bins=100, color=\"black\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#normalized-histogram-of-normal-mixture",
    "href": "qmd/pandas3ed9.html#normalized-histogram-of-normal-mixture",
    "title": "Python for Data Analysis",
    "section": "Normalized Histogram of Normal Mixture",
    "text": "Normalized Histogram of Normal Mixture\n\n\n\n\n\n\n\n\n\nFigure 9-23. Normalized histogram of normal mixture"
  },
  {
    "objectID": "qmd/pandas3ed9.html#scatter-or-point-plots",
    "href": "qmd/pandas3ed9.html#scatter-or-point-plots",
    "title": "Python for Data Analysis",
    "section": "Scatter or Point Plots üîç",
    "text": "Scatter or Point Plots üîç\n\nExamine the relationship between two 1D data series.\nExample: Load macrodata, compute log differences.\n\nmacro = pd.read_csv(\"examples/macrodata.csv\")\ndata = macro[[\"cpi\", \"m1\", \"tbilrate\", \"unemp\"]]\ntrans_data = np.log(data).diff().dropna()"
  },
  {
    "objectID": "qmd/pandas3ed9.html#seaborns-regplot",
    "href": "qmd/pandas3ed9.html#seaborns-regplot",
    "title": "Python for Data Analysis",
    "section": "seaborn‚Äôs regplot üìà",
    "text": "seaborn‚Äôs regplot üìà\n\nregplot: Makes a scatter plot and fits a linear regression line.\n\nax = sns.regplot(x=\"m1\", y=\"unemp\", data=trans_data)\nax.title(\"Changes in log(m1) versus log(unemp)\")"
  },
  {
    "objectID": "qmd/pandas3ed9.html#a-seaborn-regressionscatter-plot",
    "href": "qmd/pandas3ed9.html#a-seaborn-regressionscatter-plot",
    "title": "Python for Data Analysis",
    "section": "A seaborn Regression/Scatter Plot",
    "text": "A seaborn Regression/Scatter Plot\n\n\n\n\n\n\n\n\n\nFigure 9-24. A seaborn regression/scatter plot"
  },
  {
    "objectID": "qmd/pandas3ed9.html#pairs-plot-or-scatter-plot-matrix",
    "href": "qmd/pandas3ed9.html#pairs-plot-or-scatter-plot-matrix",
    "title": "Python for Data Analysis",
    "section": "Pairs Plot or Scatter Plot Matrix üîç",
    "text": "Pairs Plot or Scatter Plot Matrix üîç\n\nExplore scatter plots among a group of variables.\nseaborn.pairplot: Creates a pairs plot.\nSupports histograms/density estimates on the diagonal.\n\nsns.pairplot(trans_data, diag_kind=\"kde\", plot_kws={\"alpha\": 0.2})"
  },
  {
    "objectID": "qmd/pandas3ed9.html#pair-plot-matrix-of-statsmodels-macro-data",
    "href": "qmd/pandas3ed9.html#pair-plot-matrix-of-statsmodels-macro-data",
    "title": "Python for Data Analysis",
    "section": "Pair Plot Matrix of Statsmodels Macro Data",
    "text": "Pair Plot Matrix of Statsmodels Macro Data\n\n\n\n\n\n\n\n\n\nFigure 9-25. Pair plot matrix of statsmodels macro data"
  },
  {
    "objectID": "qmd/pandas3ed9.html#plot_kws-argument",
    "href": "qmd/pandas3ed9.html#plot_kws-argument",
    "title": "Python for Data Analysis",
    "section": "plot_kws Argument ‚öôÔ∏è",
    "text": "plot_kws Argument ‚öôÔ∏è\n\nPass down configuration options to individual plotting calls.\nCheck seaborn.pairplot docstring for details."
  },
  {
    "objectID": "qmd/pandas3ed9.html#facet-grids-and-categorical-data",
    "href": "qmd/pandas3ed9.html#facet-grids-and-categorical-data",
    "title": "Python for Data Analysis",
    "section": "Facet Grids and Categorical Data üìä",
    "text": "Facet Grids and Categorical Data üìä\n\nVisualize data with many categorical variables.\nFacet grid: 2D layout, data split across plots based on variable values.\nseaborn.catplot: Simplifies faceted plots.\n\nsns.catplot(x=\"day\", y=\"tip_pct\", hue=\"time\", col=\"smoker\",\n            kind=\"bar\", data=tips[tips.tip_pct &lt; 1])"
  },
  {
    "objectID": "qmd/pandas3ed9.html#tipping-percentage-by-daytimesmoker",
    "href": "qmd/pandas3ed9.html#tipping-percentage-by-daytimesmoker",
    "title": "Python for Data Analysis",
    "section": "Tipping Percentage by Day/Time/Smoker",
    "text": "Tipping Percentage by Day/Time/Smoker\n\n\n\n\n\n\n\n\n\nFigure 9-26. Tipping percentage by day/time/smoker"
  },
  {
    "objectID": "qmd/pandas3ed9.html#expanding-facet-grids",
    "href": "qmd/pandas3ed9.html#expanding-facet-grids",
    "title": "Python for Data Analysis",
    "section": "Expanding Facet Grids ‚ûï",
    "text": "Expanding Facet Grids ‚ûï\n\nAdd one row per time value:\n\nsns.catplot(x=\"day\", y=\"tip_pct\", row=\"time\",\n            col=\"smoker\", kind=\"bar\", data=tips[tips.tip_pct &lt; 1])"
  },
  {
    "objectID": "qmd/pandas3ed9.html#tipping-percentage-by-day-split-by-timesmoker",
    "href": "qmd/pandas3ed9.html#tipping-percentage-by-day-split-by-timesmoker",
    "title": "Python for Data Analysis",
    "section": "Tipping Percentage by Day Split by Time/Smoker",
    "text": "Tipping Percentage by Day Split by Time/Smoker\n\n\n\n\n\n\n\n\n\nFigure 9-27. Tipping percentage by day split by time/smoker"
  },
  {
    "objectID": "qmd/pandas3ed9.html#other-plot-types-with-catplot",
    "href": "qmd/pandas3ed9.html#other-plot-types-with-catplot",
    "title": "Python for Data Analysis",
    "section": "Other Plot Types with catplot üìä",
    "text": "Other Plot Types with catplot üìä\n\ncatplot supports other plot types (e.g., box plots).\nBox plots show median, quartiles, and outliers.\n\nsns.catplot(x=\"tip_pct\", y=\"day\", kind=\"box\",\n            data=tips[tips.tip_pct &lt; 0.5])"
  },
  {
    "objectID": "qmd/pandas3ed9.html#box-plot-of-tipping-percentage-by-day",
    "href": "qmd/pandas3ed9.html#box-plot-of-tipping-percentage-by-day",
    "title": "Python for Data Analysis",
    "section": "Box Plot of Tipping Percentage by Day",
    "text": "Box Plot of Tipping Percentage by Day\n\n\n\n\n\n\n\n\n\nFigure 9-28. Box plot of tipping percentage by day"
  },
  {
    "objectID": "qmd/pandas3ed9.html#seaborn.facetgrid",
    "href": "qmd/pandas3ed9.html#seaborn.facetgrid",
    "title": "Python for Data Analysis",
    "section": "seaborn.FacetGrid üß©",
    "text": "seaborn.FacetGrid üß©\n\nCreate custom facet grid plots.\nSee seaborn documentation for details."
  },
  {
    "objectID": "qmd/pandas3ed9.html#other-python-visualization-tools",
    "href": "qmd/pandas3ed9.html#other-python-visualization-tools",
    "title": "Python for Data Analysis",
    "section": "Other Python Visualization Tools üõ†Ô∏è",
    "text": "Other Python Visualization Tools üõ†Ô∏è\n\nMany options for creating graphics in Python.\n\n```markdown - Focus on interactive graphics for the web: Altair, Bokeh, Plotly. - For static graphics: Use matplotlib and libraries built on it (pandas, seaborn)."
  },
  {
    "objectID": "qmd/pandas3ed9.html#recommended-reading",
    "href": "qmd/pandas3ed9.html#recommended-reading",
    "title": "Python for Data Analysis",
    "section": "Recommended Reading üìö",
    "text": "Recommended Reading üìö\n\nFundamentals of Data Visualization by Claus O. Wilke.\n\nAvailable in print or online: https://clauswilke.com/dataviz"
  },
  {
    "objectID": "qmd/pandas3ed9.html#conclusion",
    "href": "qmd/pandas3ed9.html#conclusion",
    "title": "Python for Data Analysis",
    "section": "Conclusion",
    "text": "Conclusion\n\nThis chapter introduced basic data visualization with pandas, matplotlib, and seaborn.\nEffective data visualization is an active research field.\nExplore resources to learn more."
  },
  {
    "objectID": "qmd/pandas3ed9.html#summary",
    "href": "qmd/pandas3ed9.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary",
    "text": "Summary\n\nmatplotlib is a powerful and flexible library for creating static plots in Python.\npandas provides convenient methods for plotting Series and DataFrame objects.\nseaborn simplifies creating many common statistical visualizations and integrates well with pandas.\nEffective data visualization is crucial for data analysis and communication."
  },
  {
    "objectID": "qmd/pandas3ed9.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed9.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion ü§î",
    "text": "Thoughts and Discussion ü§î\n\nHow can you apply the visualization techniques learned in this chapter to your own data analysis projects?\nWhat are the advantages and disadvantages of using matplotlib, pandas, and seaborn for different visualization tasks?\nHow can you effectively communicate your findings through visualizations?"
  },
  {
    "objectID": "qmd/pandas3ed9.html#thoughts-and-discussion-continued",
    "href": "qmd/pandas3ed9.html#thoughts-and-discussion-continued",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion (Continued) ü§î",
    "text": "Thoughts and Discussion (Continued) ü§î\n\nWhat other Python visualization tools have you explored, and how do they compare to matplotlib, pandas, and seaborn?\nWhat are some best practices for creating clear, informative, and visually appealing plots?"
  },
  {
    "objectID": "qmd/pandas3ed9.html#thoughts-and-discussion-continued-1",
    "href": "qmd/pandas3ed9.html#thoughts-and-discussion-continued-1",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion (Continued) ü§î",
    "text": "Thoughts and Discussion (Continued) ü§î\n\nCan you think of situations where a particular type of plot (e.g., histogram, scatter plot, box plot) would be most appropriate for conveying specific insights from your data?\nHow can you customize matplotlib plots to enhance their clarity and visual impact (e.g., adjusting colors, labels, legends)?"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html",
    "href": "qmd/pandas3ed9cn.html",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "ÁîüÊàê‰ø°ÊÅØ‰∏∞ÂØåÁöÑÂèØËßÜÂåñÂõæÂΩ¢ÔºàÊúâÊó∂Áß∞‰∏∫ÂõæË°®ÔºâÊòØÊï∞ÊçÆÂàÜÊûê‰∏≠ÊúÄÈáçË¶ÅÁöÑ‰ªªÂä°‰πã‰∏Ä„ÄÇ\n\n\nÊé¢Á¥¢ÊÄßËøáÁ®ãÔºöÊúâÂä©‰∫éËØÜÂà´ÂºÇÂ∏∏ÂÄºÊàñÈúÄË¶ÅÁöÑÊï∞ÊçÆËΩ¨Êç¢„ÄÇ\nÊ®°ÂûãÁîüÊàêÔºöÊúâÂä©‰∫é‰∫ßÁîüÊ®°ÂûãÊÉ≥Ê≥ï„ÄÇ\nWeb ÂèØËßÜÂåñÔºöÊûÑÂª∫‰∫§‰∫íÂºèÂèØËßÜÂåñÂèØËÉΩÊòØÊúÄÁªàÁõÆÊ†á„ÄÇ\n\n\n\n\n\n\n\nNote\n\n\n\nPython ÊúâËÆ∏Â§öÁî®‰∫éÂèØËßÜÂåñÁöÑÈôÑÂä†Â∫ìÔºå‰ΩÜÊàë‰ª¨Â∞ÜÈáçÁÇπÂÖ≥Ê≥® matplotlib ‰ª•ÂèäÊûÑÂª∫Âú®ÂÖ∂‰πã‰∏äÁöÑÂ∫ìÔºå‰æãÂ¶Ç seaborn„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂºïË®Ä",
    "href": "qmd/pandas3ed9cn.html#ÂºïË®Ä",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "",
    "text": "ÁîüÊàê‰ø°ÊÅØ‰∏∞ÂØåÁöÑÂèØËßÜÂåñÂõæÂΩ¢ÔºàÊúâÊó∂Áß∞‰∏∫ÂõæË°®ÔºâÊòØÊï∞ÊçÆÂàÜÊûê‰∏≠ÊúÄÈáçË¶ÅÁöÑ‰ªªÂä°‰πã‰∏Ä„ÄÇ\n\n\nÊé¢Á¥¢ÊÄßËøáÁ®ãÔºöÊúâÂä©‰∫éËØÜÂà´ÂºÇÂ∏∏ÂÄºÊàñÈúÄË¶ÅÁöÑÊï∞ÊçÆËΩ¨Êç¢„ÄÇ\nÊ®°ÂûãÁîüÊàêÔºöÊúâÂä©‰∫é‰∫ßÁîüÊ®°ÂûãÊÉ≥Ê≥ï„ÄÇ\nWeb ÂèØËßÜÂåñÔºöÊûÑÂª∫‰∫§‰∫íÂºèÂèØËßÜÂåñÂèØËÉΩÊòØÊúÄÁªàÁõÆÊ†á„ÄÇ\n\n\n\n\n\n\n\nNote\n\n\n\nPython ÊúâËÆ∏Â§öÁî®‰∫éÂèØËßÜÂåñÁöÑÈôÑÂä†Â∫ìÔºå‰ΩÜÊàë‰ª¨Â∞ÜÈáçÁÇπÂÖ≥Ê≥® matplotlib ‰ª•ÂèäÊûÑÂª∫Âú®ÂÖ∂‰πã‰∏äÁöÑÂ∫ìÔºå‰æãÂ¶Ç seaborn„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#‰ªÄ‰πàÊòØ-matplotlib",
    "href": "qmd/pandas3ed9cn.html#‰ªÄ‰πàÊòØ-matplotlib",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ªÄ‰πàÊòØ matplotlibÔºü üñºÔ∏è",
    "text": "‰ªÄ‰πàÊòØ matplotlibÔºü üñºÔ∏è\n\n‰∏Ä‰∏™Ê°åÈù¢ÁªòÂõæÂåÖÔºåÁî®‰∫éÂàõÂª∫Âá∫ÁâàË¥®ÈáèÁöÑÂõæË°®„ÄÇ\nÁî± John Hunter ‰∫é 2002 Âπ¥ÂèëËµ∑ÔºåÊó®Âú® Python ‰∏≠Êèê‰æõÁ±ª‰ºº MATLAB ÁöÑÁªòÂõæÁïåÈù¢„ÄÇ\n\n‰∏∫‰ªÄ‰πàÔºü ü§î ‰∏∫‰∫ÜËÆ©ÁßëÂ≠¶ÂÆ∂ÂíåÂ∑•Á®ãÂ∏àÊõ¥ÂÆπÊòìÂú® Python ‰∏≠ÂàõÂª∫ÂõæË°®ÔºåÂ∞±ÂÉè‰ªñ‰ª¨Âú® MATLAB ‰∏≠ÊâÄÂÅöÁöÑÈÇ£Ê†∑ÔºÅ\n\n‰∏é IPython Âêà‰ΩúÁÆÄÂåñ‰∫§‰∫íÂºèÁªòÂõæ„ÄÇ\nÊîØÊåÅÂêÑÁßç GUI ÂêéÁ´ØÂíåÂØºÂá∫Ê†ºÂºèÔºàPDF„ÄÅSVG„ÄÅJPG„ÄÅPNG„ÄÅBMP„ÄÅGIF Á≠âÔºâ„ÄÇ\nËÆ∏Â§ö‰π¶Á±çÂíåÂá∫ÁâàÁâ©‰∏≠ÁöÑÂ§ßÂ§öÊï∞ÂõæÂΩ¢ÈÉΩÊòØ‰ΩøÁî® matplotlib ÁîüÊàêÁöÑ„ÄÇ\n\n\n\n\n\n\n\nTip\n\n\n\nMatplotlib ÂÇ¨Áîü‰∫ÜÂÉè seaborn ËøôÊ†∑ÁöÑÈôÑÂä†Â∑•ÂÖ∑ÂåÖÔºåÂ¢ûÂº∫‰∫ÜÂÖ∂ÂäüËÉΩ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Âú®-jupyter-‰∏≠ËÆæÁΩÆ-matplotlib",
    "href": "qmd/pandas3ed9cn.html#Âú®-jupyter-‰∏≠ËÆæÁΩÆ-matplotlib",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âú® Jupyter ‰∏≠ËÆæÁΩÆ matplotlib ‚öôÔ∏è",
    "text": "Âú® Jupyter ‰∏≠ËÆæÁΩÆ matplotlib ‚öôÔ∏è\nË¶ÅÂú® Jupyter Notebook ‰∏≠‰ª•ÂÜÖËÅîÊñπÂºèÊòæÁ§∫ÂõæË°®ÔºåËØ∑‰ΩøÁî®È≠îÊúØÂëΩ‰ª§Ôºö\n\n%matplotlib inline \n# Ê≠§ÂëΩ‰ª§ÂëäËØâJupyterÁõ¥Êé•Âú®notebookËæìÂá∫‰∏≠ÊòæÁ§∫matplotlibÂõæË°®„ÄÇ\n# Ê≤°ÊúâÂÆÉÔºåÊÇ®ÂèØËÉΩÁúã‰∏çÂà∞ÊÇ®ÁöÑÂõæË°®ÔºÅ\n\n\n\n\n\n\n\nNote\n\n\n\nÊ≠§ÂëΩ‰ª§ÂëäËØâ Jupyter Áõ¥Êé•Âú®Á¨îËÆ∞Êú¨ËæìÂá∫‰∏≠ÊòæÁ§∫ matplotlib ÂõæË°®„ÄÇÊ≤°ÊúâÂÆÉÔºåÊÇ®ÂèØËÉΩÁúã‰∏çÂà∞ÊÇ®ÁöÑÂõæË°®ÔºÅ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Êï∞ÊçÆÂèØËßÜÂåñÂ∫ìÁöÑÊºîÂèò",
    "href": "qmd/pandas3ed9cn.html#Êï∞ÊçÆÂèØËßÜÂåñÂ∫ìÁöÑÊºîÂèò",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï∞ÊçÆÂèØËßÜÂåñÂ∫ìÁöÑÊºîÂèò",
    "text": "Êï∞ÊçÆÂèØËßÜÂåñÂ∫ìÁöÑÊºîÂèò\n\nËá™ 2012 Âπ¥‰ª•Êù•ÔºåÂá∫Áé∞‰∫ÜËÆ∏Â§öÊñ∞ÁöÑÂèØËßÜÂåñÂ∫ì„ÄÇ\n\nBokeh Âíå AltairÔºöÂà©Áî®Áé∞‰ª£ Web ÊäÄÊúØËøõË°å‰∫§‰∫íÂºèÂèØËßÜÂåñ„ÄÇ\n\nÊú¨ËØæÁ®ãÈáçÁÇπ‰ªãÁªç matplotlibÔºåÂõ†‰∏∫ÂÆÉÂÖ∑ÊúâÂü∫Á°ÄÊÄßÂíå‰∏é pandas ÁöÑÈõÜÊàêÊÄß„ÄÇ\n\n‰∏∫‰ªÄ‰πàÈÄâÊã© matplotlibÔºü ü§î ËøôÂ∞±ÂÉèÂú®Ë∑ëÊ≠•‰πãÂâçÂ≠¶‰ºöËµ∞Ë∑ØÔºÅÁêÜËß£ matplotlib ÂèØ‰ª•Â∏ÆÂä©ÊÇ®ÊéåÊè°Âü∫Á°ÄÁü•ËØÜÔºå‰ªéËÄåÊõ¥ÂÆπÊòìÂ≠¶‰π†ÂÖ∂‰ªñÂ∫ì„ÄÇ\n\n\n\n\n\n\n\n\nTip\n\n\n\nËøôÈáåÂ≠¶Âà∞ÁöÑÂéüÂàôÂèØ‰ª•ÈÄÇÁî®‰∫éÂÖ∂‰ªñÂèØËßÜÂåñÂ∫ì„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#matplotlib-api-ÁÆÄÊòéÂÖ•Èó®",
    "href": "qmd/pandas3ed9cn.html#matplotlib-api-ÁÆÄÊòéÂÖ•Èó®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "matplotlib API ÁÆÄÊòéÂÖ•Èó®",
    "text": "matplotlib API ÁÆÄÊòéÂÖ•Èó®\nmatplotlib ÁöÑÂØºÂÖ•ÊÉØ‰æãÔºö\n\nimport matplotlib.pyplot as plt \n# ËøôË°å‰ª£Á†Å‰ªématplotlibÂØºÂÖ•pyplotÊ®°ÂùóÔºåÂπ∂ÁªôÂÆÉ‰∏Ä‰∏™Êõ¥Áü≠ÁöÑÂêçÁß∞plt„ÄÇ\n# ËøôÊòØ‰∏ÄÁßçÂ∏∏ËßÅÁöÑÂÅöÊ≥ïÔºåÂèØ‰ª•‰ΩøÊÇ®ÁöÑ‰ª£Á†ÅÊõ¥ÁÆÄÊ¥ÅÊòìËØª„ÄÇ\n\n\n\n\n\n\n\nNote\n\n\n\nËøôË°å‰ª£Á†Å‰ªé matplotlib ÂØºÂÖ• pyplot Ê®°ÂùóÔºåÂπ∂ÁªôÂÆÉ‰∏Ä‰∏™Êõ¥Áü≠ÁöÑÂêçÁß∞ plt„ÄÇËøôÊòØ‰∏ÄÁßçÂ∏∏ËßÅÁöÑÂÅöÊ≥ïÔºåÂèØ‰ª•‰ΩøÊÇ®ÁöÑ‰ª£Á†ÅÊõ¥ÁÆÄÊ¥ÅÊòìËØª„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂõæË°®",
    "href": "qmd/pandas3ed9cn.html#ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂõæË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂõæË°®",
    "text": "ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂõæË°®\n\nimport numpy as np # ÂØºÂÖ•numpyÂ∫ìÔºåÂπ∂Â∞ÜÂÖ∂ÈáçÂëΩÂêç‰∏∫np\ndata = np.arange(10) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´0Âà∞9ÁöÑÊï¥Êï∞ÁöÑÊï∞ÁªÑ\nplt.plot(data) # ‰ΩøÁî®plt.plot()ÂáΩÊï∞ÁªòÂà∂dataÊï∞ÁªÑ‰∏≠ÁöÑÊï∞ÊçÆ\n\n\n\n\n\n\n\n\n\nnp.arange(10)ÔºöÂàõÂª∫‰∏Ä‰∏™‰ªé 0 Âà∞ 9 ÁöÑÊï∞Â≠óÊï∞ÁªÑ„ÄÇ\nplt.plot(data)ÔºöÂ∞ÜÊï∞ÊçÆÁªòÂà∂‰∏∫ÊäòÁ∫øÂõæ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÁÆÄÂçïÊäòÁ∫øÂõæÁªìÊûú",
    "href": "qmd/pandas3ed9cn.html#ÁÆÄÂçïÊäòÁ∫øÂõæÁªìÊûú",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁÆÄÂçïÊäòÁ∫øÂõæÁªìÊûú",
    "text": "ÁÆÄÂçïÊäòÁ∫øÂõæÁªìÊûú\n\n\n\n\n\n\n\n\n\nÂõæ 9-1. ÁÆÄÂçïÊäòÁ∫øÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂõæÂΩ¢ÂíåÂ≠êÂõæ",
    "href": "qmd/pandas3ed9cn.html#ÂõæÂΩ¢ÂíåÂ≠êÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂõæÂΩ¢ÂíåÂ≠êÂõæ üìê",
    "text": "ÂõæÂΩ¢ÂíåÂ≠êÂõæ üìê\n\nmatplotlib ‰∏≠ÁöÑÂõæË°®‰Ωç‰∫é Figure ÂØπË±°‰∏≠„ÄÇ\n\n‰ªÄ‰πàÊòØ FigureÔºü ü§î ÂèØ‰ª•ÊääÂÆÉÊÉ≥Ë±°Êàê‰∏Ä‰∏™Á©∫ÁôΩÁîªÂ∏ÉÔºåÊÇ®ÂèØ‰ª•Âú®‰∏äÈù¢ÁªòÂà∂ÂõæË°®„ÄÇ\n\n‰ΩøÁî® plt.figure() ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÂõæÂΩ¢Ôºö\n\n\nfig = plt.figure() # ÂàõÂª∫‰∏Ä‰∏™Á©∫ÁôΩÁöÑmatplotlibÂõæÂΩ¢ÂØπË±°\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\nplt.figure ÈÄâÈ°πÔºö\n\nfigsizeÔºö‰øùËØÅÂõæÂΩ¢Â§ßÂ∞èÂíåÁ∫µÊ®™ÊØî„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê∑ªÂä†Â≠êÂõæ",
    "href": "qmd/pandas3ed9cn.html#Ê∑ªÂä†Â≠êÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê∑ªÂä†Â≠êÂõæ ‚ûï",
    "text": "Ê∑ªÂä†Â≠êÂõæ ‚ûï\n\nÊÇ®‰∏çËÉΩÂú®Á©∫ÁôΩÂõæÂΩ¢‰∏äÁªòÂõæÔºõ‰ΩøÁî® add_subplot ÂàõÂª∫Â≠êÂõæÔºö\n\n\nax1 = fig.add_subplot(2, 2, 1) \n# ËøôË°å‰ª£Á†ÅÂú®ÂâçÈù¢ÂàõÂª∫ÁöÑfigureÂØπË±°‰∏äÊ∑ªÂä†‰∏Ä‰∏™Â≠êÂõæ„ÄÇ\n# ÂèÇÊï∞(2, 2, 1)Ë°®Á§∫Ôºö\n# ÂàõÂª∫‰∏Ä‰∏™2x2ÁöÑÂ≠êÂõæÁΩëÊ†ºÔºàÊÄªÂÖ±4‰∏™Â≠êÂõæÔºâ„ÄÇ\n# ÈÄâÊã©Á¨¨‰∏Ä‰∏™Â≠êÂõæÔºàÁºñÂè∑‰ªé1ÂºÄÂßãÔºâ„ÄÇ\n# Á±ªÊØîÔºöÂ∞±ÂÉèÂú®ExcelË°®Ê†º‰∏≠ÈÄâÊã©‰∏Ä‰∏™ÂçïÂÖÉÊ†ºÂå∫Âüü„ÄÇ\n\n\nadd_subplot(2, 2, 1) Ë°®Á§∫Ôºö\n\n‰∏Ä‰∏™ 2x2 ÁöÑÂ≠êÂõæÁΩëÊ†ºÔºàÊÄªÂÖ± 4 ‰∏™ÂõæË°®Ôºâ„ÄÇ\nÈÄâÊã©Á¨¨ 1 ‰∏™Â≠êÂõæÔºà‰ªé 1 ÂºÄÂßãÁºñÂè∑Ôºâ„ÄÇ\nÁ±ªÊØîÔºöÂ∞±ÂÉèÂú® Excel ‰∏≠ÈÄâÊã©ÂçïÂÖÉÊ†ºÂå∫Âüü‰∏ÄÊ†∑„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂàõÂª∫ÂÖ∂‰ªñÂ≠êÂõæ",
    "href": "qmd/pandas3ed9cn.html#ÂàõÂª∫ÂÖ∂‰ªñÂ≠êÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàõÂª∫ÂÖ∂‰ªñÂ≠êÂõæ",
    "text": "ÂàõÂª∫ÂÖ∂‰ªñÂ≠êÂõæ\n\nÂàõÂª∫ÂÖ∂‰ªñÂ≠êÂõæÔºö\n\n\nax2 = fig.add_subplot(2, 2, 2) # Âú®2x2ÁΩëÊ†º‰∏≠ÈÄâÊã©Á¨¨2‰∏™Â≠êÂõæ\nax3 = fig.add_subplot(2, 2, 3) # Âú®2x2ÁΩëÊ†º‰∏≠ÈÄâÊã©Á¨¨3‰∏™Â≠êÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#‰∏Ä‰∏™ÂåÖÂê´‰∏â‰∏™Â≠êÂõæÁöÑÁ©∫ÂõæÂΩ¢",
    "href": "qmd/pandas3ed9cn.html#‰∏Ä‰∏™ÂåÖÂê´‰∏â‰∏™Â≠êÂõæÁöÑÁ©∫ÂõæÂΩ¢",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰∏Ä‰∏™ÂåÖÂê´‰∏â‰∏™Â≠êÂõæÁöÑÁ©∫ÂõæÂΩ¢",
    "text": "‰∏Ä‰∏™ÂåÖÂê´‰∏â‰∏™Â≠êÂõæÁöÑÁ©∫ÂõæÂΩ¢\n\n\n\n\n\n\n\n\n\nÂõæ 9-2. ‰∏Ä‰∏™ÂåÖÂê´‰∏â‰∏™Â≠êÂõæÁöÑÁ©∫ matplotlib ÂõæÂΩ¢"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#jupyter-‰∏≠ÁöÑÁªòÂõæÂëΩ‰ª§",
    "href": "qmd/pandas3ed9cn.html#jupyter-‰∏≠ÁöÑÁªòÂõæÂëΩ‰ª§",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Jupyter ‰∏≠ÁöÑÁªòÂõæÂëΩ‰ª§ üìù",
    "text": "Jupyter ‰∏≠ÁöÑÁªòÂõæÂëΩ‰ª§ üìù\n\n\n\n\n\n\nNote\n\n\n\nÂú® Jupyter Notebook ‰∏≠ÔºåÂõæË°®Âú®ÊØè‰∏™ÂçïÂÖÉÊ†ºÂêéÈáçÁΩÆ„ÄÇÂ∞ÜÊâÄÊúâÁªòÂõæÂëΩ‰ª§ÊîæÂú®‰∏Ä‰∏™ÂçïÂÖÉÊ†º‰∏≠„ÄÇ\n\n‰∏∫‰ªÄ‰πàÔºü ü§î Jupyter Áã¨Á´ãËøêË°åÊØè‰∏™ÂçïÂÖÉÊ†º„ÄÇÂ¶ÇÊûúÊÇ®ÊãÜÂàÜÁªòÂõæÂëΩ‰ª§ÔºåÊÇ®ÂèØËÉΩÂè™‰ºöÁúãÂà∞ÊúÄÂêé‰∏Ä‰∏™ÂõæË°®ÔºÅ\n\n\n\n\nfig = plt.figure() # ÂàõÂª∫‰∏Ä‰∏™ÂõæÂΩ¢ÂØπË±°\nax1 = fig.add_subplot(2, 2, 1) # Âú®ÂõæÂΩ¢‰∏≠Ê∑ªÂä†Á¨¨‰∏Ä‰∏™Â≠êÂõæ\nax2 = fig.add_subplot(2, 2, 2) # Âú®ÂõæÂΩ¢‰∏≠Ê∑ªÂä†Á¨¨‰∫å‰∏™Â≠êÂõæ\nax3 = fig.add_subplot(2, 2, 3) # Âú®ÂõæÂΩ¢‰∏≠Ê∑ªÂä†Á¨¨‰∏â‰∏™Â≠êÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#‰ΩøÁî®-axes-ÊñπÊ≥ï",
    "href": "qmd/pandas3ed9cn.html#‰ΩøÁî®-axes-ÊñπÊ≥ï",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® Axes ÊñπÊ≥ï üéØ",
    "text": "‰ΩøÁî® Axes ÊñπÊ≥ï üéØ\n\nAxesSubplot ÂØπË±°ÂÖ∑ÊúâÂàõÂª∫‰∏çÂêåÂõæË°®Á±ªÂûãÁöÑÊñπÊ≥ï„ÄÇ\n‰ºòÂÖà‰∫é plt.plot Á≠âÈ°∂Á∫ßÂáΩÊï∞„ÄÇ\nÁ§∫‰æãÔºö\n\n\nax3.plot(np.random.standard_normal(50).cumsum(), color=\"black\", linestyle=\"dashed\")\n# Âú®Á¨¨‰∏â‰∏™Â≠êÂõæ(ax3)‰∏äÁªòÂà∂‰∏ÄÊù°Á∫ø„ÄÇ\n# np.random.standard_normal(50)ÁîüÊàê50‰∏™Êúç‰ªéÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞„ÄÇ\n# .cumsum()ËÆ°ÁÆóÁ¥ØÁßØÂíå„ÄÇ\n# color=\"black\"ËÆæÁΩÆÁ∫øÊù°È¢úËâ≤‰∏∫ÈªëËâ≤„ÄÇ\n# linestyle=\"dashed\"ËÆæÁΩÆÁ∫øÊù°Ê†∑Âºè‰∏∫ËôöÁ∫ø„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Âçï‰∏™ÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed9cn.html#Âçï‰∏™ÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Âçï‰∏™ÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "text": "Âçï‰∏™ÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ\n\n\n\n\n\n\n\n\n\nÂõæ 9-3. Âçï‰∏™ÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÁêÜËß£-matplotlib-ËæìÂá∫",
    "href": "qmd/pandas3ed9cn.html#ÁêÜËß£-matplotlib-ËæìÂá∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁêÜËß£ matplotlib ËæìÂá∫ üí¨",
    "text": "ÁêÜËß£ matplotlib ËæìÂá∫ üí¨\n\nÊÇ®ÂèØËÉΩ‰ºöÁúãÂà∞Á±ª‰ºº &lt;matplotlib.lines.Line2D at ...&gt; ÁöÑËæìÂá∫„ÄÇ\n\nËøôÊòØ‰ªÄ‰πàÊÑèÊÄùÔºü ü§î ÂÆÉÊòØÂØπÊÇ®ÂàöÂàöÊ∑ªÂä†ÁöÑÂõæË°®ÂÖÉÁ¥†ÁöÑÂºïÁî®„ÄÇÊÇ®ÈÄöÂ∏∏ÂèØ‰ª•ÂøΩÁï•ÂÆÉ„ÄÇ\n\nË¶ÅÊäëÂà∂ËæìÂá∫ÔºåËØ∑Âú®Ë°åÂ∞æÊ∑ªÂä†ÂàÜÂè∑ (;)„ÄÇ\n\n‰∏∫‰ªÄ‰πàË¶ÅÊäëÂà∂Ôºü üßπ ‰øùÊåÅÁ¨îËÆ∞Êú¨ËæìÂá∫Âπ≤ÂáÄÔºå‰∏ìÊ≥®‰∫éÂõæË°®„ÄÇ\n\n\n\nax3.plot(np.random.standard_normal(50).cumsum(), color=\"black\", linestyle=\"dashed\"); # Ê≥®ÊÑèÂàÜÂè∑ÔºåÁî®‰∫éÊäëÂà∂ËæìÂá∫"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂêëÂ≠êÂõæÊ∑ªÂä†Êõ¥Â§öÂõæË°®",
    "href": "qmd/pandas3ed9cn.html#ÂêëÂ≠êÂõæÊ∑ªÂä†Êõ¥Â§öÂõæË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂêëÂ≠êÂõæÊ∑ªÂä†Êõ¥Â§öÂõæË°® ‚ûï",
    "text": "ÂêëÂ≠êÂõæÊ∑ªÂä†Êõ¥Â§öÂõæË°® ‚ûï\n\nax1.hist(np.random.standard_normal(100), bins=20, color=\"black\", alpha=0.3)\n# Âú®Á¨¨‰∏Ä‰∏™Â≠êÂõæ(ax1)‰∏äÂàõÂª∫‰∏Ä‰∏™Áõ¥ÊñπÂõæ„ÄÇ\n# np.random.standard_normal(100)ÁîüÊàê100‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞„ÄÇ\n# bins=20Â∞ÜÊï∞ÊçÆÂàÜÊàê20‰∏™Êü±Â≠ê„ÄÇ\n# color=\"black\"ËÆæÁΩÆÊü±Â≠êÈ¢úËâ≤‰∏∫ÈªëËâ≤„ÄÇ\n# alpha=0.3ËÆæÁΩÆÈÄèÊòéÂ∫¶‰∏∫0.3„ÄÇ\n\nax2.scatter(np.arange(30), np.arange(30) + 3 * np.random.standard_normal(30))\n# Âú®Á¨¨‰∫å‰∏™Â≠êÂõæ(ax2)‰∏äÂàõÂª∫‰∏Ä‰∏™Êï£ÁÇπÂõæ„ÄÇ\n# np.arange(30)ÂàõÂª∫‰ªé0Âà∞29ÁöÑÊï¥Êï∞Êï∞ÁªÑ‰Ωú‰∏∫xÂùêÊ†á„ÄÇ\n# np.arange(30) + 3 * np.random.standard_normal(30)ÂàõÂª∫yÂùêÊ†áÔºåÂÖ∂‰∏≠Âä†ÂÖ•‰∫Ü‰∏Ä‰∫õÈöèÊú∫Âô™Â£∞„ÄÇ\n\n\nax1.hist(...)ÔºöÂàõÂª∫Áõ¥ÊñπÂõæ„ÄÇ\nax2.scatter(...)ÔºöÂàõÂª∫Êï£ÁÇπÂõæ„ÄÇ\nalpha=0.3ÔºöËÆæÁΩÆÂõæË°®ÁöÑÈÄèÊòéÂ∫¶„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂÖ∂‰ªñÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed9cn.html#ÂÖ∂‰ªñÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ∂‰ªñÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "text": "ÂÖ∂‰ªñÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ\n\n\n\n\n\n\n\n\n\nÂõæ 9-4. ÂÖ∂‰ªñÂõæË°®ÂêéÁöÑÊï∞ÊçÆÂèØËßÜÂåñ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#‰ΩøÁî®-plt.subplots-Êñπ‰æøÂú∞ÂàõÂª∫Â≠êÂõæ",
    "href": "qmd/pandas3ed9cn.html#‰ΩøÁî®-plt.subplots-Êñπ‰æøÂú∞ÂàõÂª∫Â≠êÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® plt.subplots Êñπ‰æøÂú∞ÂàõÂª∫Â≠êÂõæ",
    "text": "‰ΩøÁî® plt.subplots Êñπ‰æøÂú∞ÂàõÂª∫Â≠êÂõæ\n\nplt.subplots ÂàõÂª∫‰∏Ä‰∏™ÂõæÂΩ¢Âíå‰∏Ä‰∏™ÂåÖÂê´Â≠êÂõæÂØπË±°ÁöÑ NumPy Êï∞ÁªÑÔºö\n\n\nfig, axes = plt.subplots(2, 3) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´2Ë°å3ÂàóÂ≠êÂõæÁöÑÂõæÂΩ¢ÔºåÂπ∂ËøîÂõûÂõæÂΩ¢ÂØπË±°(fig)ÂíåÂ≠êÂõæÂØπË±°Êï∞ÁªÑ(axes)\naxes # ÊòæÁ§∫Â≠êÂõæÂØπË±°Êï∞ÁªÑ\n\narray([[&lt;Axes: &gt;, &lt;Axes: &gt;, &lt;Axes: &gt;],\n       [&lt;Axes: &gt;, &lt;Axes: &gt;, &lt;Axes: &gt;]], dtype=object)\n\n\n\n\n\n\n\n\n\n\nÂÉèËÆøÈóÆ 2D Êï∞ÁªÑ‰∏ÄÊ†∑ËÆøÈóÆÂ≠êÂõæÔºöaxes[0, 1]„ÄÇ\nsharex Âíå shareyÔºöÂÖ±‰∫´Áõ∏ÂêåÁöÑ x ËΩ¥Êàñ y ËΩ¥‰ª•ÊØîËæÉÊï∞ÊçÆ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#plt.subplots-ÈÄâÈ°π",
    "href": "qmd/pandas3ed9cn.html#plt.subplots-ÈÄâÈ°π",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "plt.subplots ÈÄâÈ°π ‚öôÔ∏è",
    "text": "plt.subplots ÈÄâÈ°π ‚öôÔ∏è\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\nnrows\nÂ≠êÂõæÁöÑË°åÊï∞\n\n\nncols\nÂ≠êÂõæÁöÑÂàóÊï∞\n\n\nsharex\nÊâÄÊúâÂ≠êÂõæ‰ΩøÁî®Áõ∏ÂêåÁöÑ x ËΩ¥ÂàªÂ∫¶\n\n\nsharey\nÊâÄÊúâÂ≠êÂõæ‰ΩøÁî®Áõ∏ÂêåÁöÑ y ËΩ¥ÂàªÂ∫¶\n\n\nsubplot_kw\n‰º†ÈÄíÁªô add_subplot ÁöÑÂÖ≥ÈîÆÂ≠óÂ≠óÂÖ∏\n\n\n**fig_kw\n‰º†ÈÄíÁªô subplots ÁöÑÂÖ∂‰ªñÂÖ≥ÈîÆÂ≠óÔºà‰æãÂ¶ÇÔºåfigsize=(8, 6)Ôºâ\n\n\n\n\n\n\n\n\n\nË°® 9-1. matplotlib.pyplot.subplots ÈÄâÈ°π"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ë∞ÉÊï¥Â≠êÂõæÂë®Âõ¥ÁöÑÈó¥Ë∑ù",
    "href": "qmd/pandas3ed9cn.html#Ë∞ÉÊï¥Â≠êÂõæÂë®Âõ¥ÁöÑÈó¥Ë∑ù",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ë∞ÉÊï¥Â≠êÂõæÂë®Âõ¥ÁöÑÈó¥Ë∑ù üìè",
    "text": "Ë∞ÉÊï¥Â≠êÂõæÂë®Âõ¥ÁöÑÈó¥Ë∑ù üìè\n\nÂ≠êÂõæ‰πãÈó¥ÊúâÈªòËÆ§ÁöÑÂ°´ÂÖÖÂíåÈó¥Ë∑ù„ÄÇ\n‰ΩøÁî® subplots_adjust ÊñπÊ≥ïÊõ¥ÊîπÈó¥Ë∑ùÔºö\n\n\nfig.subplots_adjust(left=None, bottom=None, right=None, top=None,\n                    wspace=None, hspace=None)\n# Ë∞ÉÊï¥Â≠êÂõæ‰πãÈó¥ÁöÑÈó¥Ë∑ù„ÄÇ\n# left, bottom, right, top: ÊéßÂà∂ÂõæÂΩ¢ËæπÁºò‰∏éÂ≠êÂõæ‰πãÈó¥ÁöÑË∑ùÁ¶ª„ÄÇ\n# wspace: ÊéßÂà∂Â≠êÂõæ‰πãÈó¥ÁöÑÊ∞¥Âπ≥Èó¥Ë∑ù„ÄÇ\n# hspace: ÊéßÂà∂Â≠êÂõæ‰πãÈó¥ÁöÑÂûÇÁõ¥Èó¥Ë∑ù„ÄÇ\n\n\nwspace Âíå hspaceÔºöÊéßÂà∂Áî®‰∫éÈó¥Ë∑ùÁöÑÂõæÂΩ¢ÂÆΩÂ∫¶/È´òÂ∫¶ÁöÑÁôæÂàÜÊØî„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Á§∫‰æãÂ∞ÜÈó¥Ë∑ùÁº©Â∞èÂà∞Èõ∂",
    "href": "qmd/pandas3ed9cn.html#Á§∫‰æãÂ∞ÜÈó¥Ë∑ùÁº©Â∞èÂà∞Èõ∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÂ∞ÜÈó¥Ë∑ùÁº©Â∞èÂà∞Èõ∂ üö´",
    "text": "Á§∫‰æãÔºöÂ∞ÜÈó¥Ë∑ùÁº©Â∞èÂà∞Èõ∂ üö´\n\nfig, axes = plt.subplots(2, 2, sharex=True, sharey=True) # ÂàõÂª∫‰∏Ä‰∏™2x2ÁöÑÂ≠êÂõæÁΩëÊ†ºÔºåÂÖ±‰∫´xËΩ¥ÂíåyËΩ¥\nfor i in range(2): # ÈÅçÂéÜË°å\n    for j in range(2): # ÈÅçÂéÜÂàó\n        axes[i, j].hist(np.random.standard_normal(500), bins=50,\n                        color=\"black\", alpha=0.5) # Âú®ÊØè‰∏™Â≠êÂõæ‰∏äÁªòÂà∂Áõ¥ÊñπÂõæ\nfig.subplots_adjust(wspace=0, hspace=0) # Â∞ÜÂ≠êÂõæ‰πãÈó¥ÁöÑÊ∞¥Âπ≥ÂíåÂûÇÁõ¥Èó¥Ë∑ùËÆæÁΩÆ‰∏∫0"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Êó†Â≠êÂõæÈó¥Ë∑ùÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed9cn.html#Êó†Â≠êÂõæÈó¥Ë∑ùÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êó†Â≠êÂõæÈó¥Ë∑ùÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "text": "Êó†Â≠êÂõæÈó¥Ë∑ùÁöÑÊï∞ÊçÆÂèØËßÜÂåñ\n\n\n\n\n\n\n\n\n\nÂõæ 9-5. Êó†Â≠êÂõæÈó¥Ë∑ùÁöÑÊï∞ÊçÆÂèØËßÜÂåñ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÈáçÂè†ÁöÑËΩ¥Ê†áÁ≠æ",
    "href": "qmd/pandas3ed9cn.html#ÈáçÂè†ÁöÑËΩ¥Ê†áÁ≠æ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈáçÂè†ÁöÑËΩ¥Ê†áÁ≠æ",
    "text": "ÈáçÂè†ÁöÑËΩ¥Ê†áÁ≠æ\n\nmatplotlib ‰∏çÊ£ÄÊü•ÈáçÂè†ÁöÑÊ†áÁ≠æ„ÄÇ\nÈÄöËøáÊåáÂÆöÂàªÂ∫¶‰ΩçÁΩÆÂíåÊ†áÁ≠æÊù•‰øÆÂ§çÊ†áÁ≠æ„ÄÇ\nÂú®‚ÄúÂàªÂ∫¶„ÄÅÊ†áÁ≠æÂíåÂõæ‰æã‚ÄùÈÉ®ÂàÜ‰∏≠‰ªãÁªç„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#È¢úËâ≤Ê†áËÆ∞ÂíåÁ∫øÂûã",
    "href": "qmd/pandas3ed9cn.html#È¢úËâ≤Ê†áËÆ∞ÂíåÁ∫øÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È¢úËâ≤„ÄÅÊ†áËÆ∞ÂíåÁ∫øÂûã üé®",
    "text": "È¢úËâ≤„ÄÅÊ†áËÆ∞ÂíåÁ∫øÂûã üé®\n\n‰ΩøÁî®È¢úËâ≤„ÄÅÊ†áËÆ∞ÂíåÁ∫øÂûãËá™ÂÆö‰πâÊäòÁ∫øÂõæ„ÄÇ\nÁ§∫‰æãÔºö\n\n\naxes.plot(x, y, linestyle=\"--\", color=\"green\") # ‰ΩøÁî®ÁªøËâ≤ËôöÁ∫øÁªòÂà∂(x, y)Êï∞ÊçÆ\n\n\n‰ΩøÁî®È¢úËâ≤ÂêçÁß∞ÊàñÂçÅÂÖ≠ËøõÂà∂‰ª£Á†ÅÔºà‰æãÂ¶ÇÔºå\"#CECECE\"Ôºâ„ÄÇ\nÁ∫øÂûãÔºöÊ£ÄÊü• plt.plot ÊñáÊ°£Â≠óÁ¨¶‰∏≤Ôºà‰ΩøÁî® plt.plot?Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Áî®‰∫éÁ™ÅÂá∫ÊòæÁ§∫Êï∞ÊçÆÁÇπÁöÑÊ†áËÆ∞",
    "href": "qmd/pandas3ed9cn.html#Áî®‰∫éÁ™ÅÂá∫ÊòæÁ§∫Êï∞ÊçÆÁÇπÁöÑÊ†áËÆ∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áî®‰∫éÁ™ÅÂá∫ÊòæÁ§∫Êï∞ÊçÆÁÇπÁöÑÊ†áËÆ∞ üìç",
    "text": "Áî®‰∫éÁ™ÅÂá∫ÊòæÁ§∫Êï∞ÊçÆÁÇπÁöÑÊ†áËÆ∞ üìç\n\nÊäòÁ∫øÂõæÂèØ‰ª•ÊúâÊ†áËÆ∞Êù•ÊòæÁ§∫ÂÆûÈôÖÊï∞ÊçÆÁÇπ„ÄÇ\nÂΩìÊèíÂÄºÂèØËÉΩ‰ºöÊé©ÁõñÁÇπÁöÑ‰ΩçÁΩÆÊó∂ÂæàÊúâÁî®„ÄÇ\nÁ§∫‰æãÔºö\n\n\naxes.plot(np.random.standard_normal(30).cumsum(), color=\"black\",\n        linestyle=\"dashed\", marker=\"o\")\n# ÁªòÂà∂‰∏ÄÊù°Â∏¶ÊúâÂúÜÂúàÊ†áËÆ∞ÁöÑÈªëËâ≤ËôöÁ∫ø„ÄÇ\n# np.random.standard_normal(30).cumsum()ÁîüÊàê30‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞ÁöÑÁ¥ØÁßØÂíå„ÄÇ\n# marker=\"o\"ËÆæÁΩÆÊ†áËÆ∞‰∏∫ÂúÜÂúà„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Â∏¶Ê†áËÆ∞ÁöÑÊäòÁ∫øÂõæ",
    "href": "qmd/pandas3ed9cn.html#Â∏¶Ê†áËÆ∞ÁöÑÊäòÁ∫øÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏¶Ê†áËÆ∞ÁöÑÊäòÁ∫øÂõæ",
    "text": "Â∏¶Ê†áËÆ∞ÁöÑÊäòÁ∫øÂõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-6. Â∏¶Ê†áËÆ∞ÁöÑÊäòÁ∫øÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#drawstyle-ÈÄâÈ°π",
    "href": "qmd/pandas3ed9cn.html#drawstyle-ÈÄâÈ°π",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "drawstyle ÈÄâÈ°π üé®",
    "text": "drawstyle ÈÄâÈ°π üé®\n\nÁ∫øÊÄßÊèíÂÄºÊòØÈªòËÆ§ÂÄº„ÄÇ\n‰ΩøÁî® drawstyle ÈÄâÈ°πÊõ¥ÊîπÔºö\n\n\nax.plot(data, color=\"black\", linestyle=\"dashed\", label=\"Default\") \n# ÁªòÂà∂‰∏ÄÊù°ÈªëËâ≤ËôöÁ∫øÔºåÊ†áÁ≠æ‰∏∫\"Default\"ÔºàÈªòËÆ§ÊèíÂÄºÊñπÂºèÔºâ„ÄÇ\n\nax.plot(data, color=\"black\", linestyle=\"dashed\",\n        drawstyle=\"steps-post\", label=\"steps-post\")\n# ÁªòÂà∂‰∏ÄÊù°ÈªëËâ≤ËôöÁ∫øÔºåÊ†áÁ≠æ‰∏∫\"steps-post\"Ôºå‰ΩøÁî®Èò∂Ê¢ØÂõæÁöÑÂêéÈò∂Ë∑ÉÊñπÂºè„ÄÇ\n\nax.legend() # ÊòæÁ§∫Âõæ‰æã"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂÖ∑Êúâ‰∏çÂêå-drawstyle-ÈÄâÈ°πÁöÑÊäòÁ∫øÂõæ",
    "href": "qmd/pandas3ed9cn.html#ÂÖ∑Êúâ‰∏çÂêå-drawstyle-ÈÄâÈ°πÁöÑÊäòÁ∫øÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ∑Êúâ‰∏çÂêå drawstyle ÈÄâÈ°πÁöÑÊäòÁ∫øÂõæ",
    "text": "ÂÖ∑Êúâ‰∏çÂêå drawstyle ÈÄâÈ°πÁöÑÊäòÁ∫øÂõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-7. ÂÖ∑Êúâ‰∏çÂêå drawstyle ÈÄâÈ°πÁöÑÊäòÁ∫øÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂàªÂ∫¶Ê†áÁ≠æÂíåÂõæ‰æã",
    "href": "qmd/pandas3ed9cn.html#ÂàªÂ∫¶Ê†áÁ≠æÂíåÂõæ‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàªÂ∫¶„ÄÅÊ†áÁ≠æÂíåÂõæ‰æã üè∑Ô∏è",
    "text": "ÂàªÂ∫¶„ÄÅÊ†áÁ≠æÂíåÂõæ‰æã üè∑Ô∏è\n\nÂõæË°®Ë£ÖÈ•∞ÈÄöËøá matplotlib ÂùêÊ†áËΩ¥ÂØπË±°ÊñπÊ≥ïËÆøÈóÆ„ÄÇ\nxlim„ÄÅxticks„ÄÅxticklabelsÔºöÊéßÂà∂ÂõæË°®ËåÉÂõ¥„ÄÅÂàªÂ∫¶‰ΩçÁΩÆÂíåÊ†áÁ≠æ„ÄÇ\n‰∏§Áßç‰ΩøÁî®ÊñπÂºèÔºö\n\nÊó†ÂèÇÊï∞ÔºöËøîÂõûÂΩìÂâçÂÄºÔºà‰æãÂ¶ÇÔºåax.xlim()Ôºâ„ÄÇ\nÂ∏¶ÂèÇÊï∞ÔºöËÆæÁΩÆÂÄºÔºà‰æãÂ¶ÇÔºåax.xlim([0, 10])Ôºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ëá™ÂÆö‰πâÂùêÊ†áËΩ¥",
    "href": "qmd/pandas3ed9cn.html#Ëá™ÂÆö‰πâÂùêÊ†áËΩ¥",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ëá™ÂÆö‰πâÂùêÊ†áËΩ¥ üõ†Ô∏è",
    "text": "Ëá™ÂÆö‰πâÂùêÊ†áËΩ¥ üõ†Ô∏è\n\nÁ§∫‰æãÔºöÈöèÊú∫Ê∏∏Ëµ∞Âõæ„ÄÇ\n\n\nfig, ax = plt.subplots() # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´‰∏Ä‰∏™Â≠êÂõæÁöÑÂõæÂΩ¢\nax.plot(np.random.standard_normal(1000).cumsum()) # ÁªòÂà∂1000‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞ÁöÑÁ¥ØÁßØÂíå"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Áî®‰∫éËØ¥Êòé-xticks-ÁöÑÁÆÄÂçïÂõæË°®",
    "href": "qmd/pandas3ed9cn.html#Áî®‰∫éËØ¥Êòé-xticks-ÁöÑÁÆÄÂçïÂõæË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áî®‰∫éËØ¥Êòé xticks ÁöÑÁÆÄÂçïÂõæË°®",
    "text": "Áî®‰∫éËØ¥Êòé xticks ÁöÑÁÆÄÂçïÂõæË°®\n\n\n\n\n\n\n\n\n\nÂõæ 9-8. Áî®‰∫éËØ¥Êòé xticks ÁöÑÁÆÄÂçïÂõæË°®ÔºàÂ∏¶ÊúâÈªòËÆ§Ê†áÁ≠æÔºâ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ËÆæÁΩÆÂàªÂ∫¶ÂíåÂàªÂ∫¶Ê†áÁ≠æ",
    "href": "qmd/pandas3ed9cn.html#ËÆæÁΩÆÂàªÂ∫¶ÂíåÂàªÂ∫¶Ê†áÁ≠æ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËÆæÁΩÆÂàªÂ∫¶ÂíåÂàªÂ∫¶Ê†áÁ≠æ",
    "text": "ËÆæÁΩÆÂàªÂ∫¶ÂíåÂàªÂ∫¶Ê†áÁ≠æ\n\nticks = ax.set_xticks([0, 250, 500, 750, 1000]) # ËÆæÁΩÆxËΩ¥ÂàªÂ∫¶‰ΩçÁΩÆ\nlabels = ax.set_xticklabels([\"one\", \"two\", \"three\", \"four\", \"five\"],\n                            rotation=30, fontsize=8)\n# ËÆæÁΩÆxËΩ¥ÂàªÂ∫¶Ê†áÁ≠æ„ÄÇ\n# rotation=30Â∞ÜÊ†áÁ≠æÊóãËΩ¨30Â∫¶„ÄÇ\n# fontsize=8ËÆæÁΩÆÊ†áÁ≠æÂ≠ó‰ΩìÂ§ßÂ∞è‰∏∫8„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ËÆæÁΩÆÊ†áÈ¢òÂíåËΩ¥Ê†áÁ≠æ",
    "href": "qmd/pandas3ed9cn.html#ËÆæÁΩÆÊ†áÈ¢òÂíåËΩ¥Ê†áÁ≠æ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ËÆæÁΩÆÊ†áÈ¢òÂíåËΩ¥Ê†áÁ≠æ üìù",
    "text": "ËÆæÁΩÆÊ†áÈ¢òÂíåËΩ¥Ê†áÁ≠æ üìù\n\nax.set_xlabel(\"Stages\") # ËÆæÁΩÆxËΩ¥Ê†áÁ≠æ‰∏∫\"Stages\"\nax.set_title(\"My first matplotlib plot\") # ËÆæÁΩÆÂ≠êÂõæÊ†áÈ¢ò‰∏∫\"My first matplotlib plot\"\n\nText(0.5, 1.0, 'My first matplotlib plot')"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Áî®‰∫éËØ¥ÊòéËá™ÂÆö‰πâ-xticks-ÁöÑÁÆÄÂçïÂõæË°®",
    "href": "qmd/pandas3ed9cn.html#Áî®‰∫éËØ¥ÊòéËá™ÂÆö‰πâ-xticks-ÁöÑÁÆÄÂçïÂõæË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áî®‰∫éËØ¥ÊòéËá™ÂÆö‰πâ xticks ÁöÑÁÆÄÂçïÂõæË°®",
    "text": "Áî®‰∫éËØ¥ÊòéËá™ÂÆö‰πâ xticks ÁöÑÁÆÄÂçïÂõæË°®\n\n\n\n\n\n\n\n\n\nÂõæ 9-9. Áî®‰∫éËØ¥ÊòéËá™ÂÆö‰πâ xticks ÁöÑÁÆÄÂçïÂõæË°®\n\n\n\n\n\n\nrotationÔºöËÆæÁΩÆÂàªÂ∫¶Ê†áÁ≠æÊóãËΩ¨Ôºà‰æãÂ¶ÇÔºå30 Â∫¶Ôºâ„ÄÇ\nset_xlabelÔºöÂëΩÂêç x ËΩ¥„ÄÇ\nset_titleÔºöËÆæÁΩÆÂ≠êÂõæÊ†áÈ¢ò„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊâπÈáèËÆæÁΩÆÂõæË°®Â±ûÊÄß",
    "href": "qmd/pandas3ed9cn.html#ÊâπÈáèËÆæÁΩÆÂõæË°®Â±ûÊÄß",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊâπÈáèËÆæÁΩÆÂõæË°®Â±ûÊÄß ‚öôÔ∏è",
    "text": "ÊâπÈáèËÆæÁΩÆÂõæË°®Â±ûÊÄß ‚öôÔ∏è\n\nAxes Á±ªÊúâ‰∏Ä‰∏™ set ÊñπÊ≥ïÔºö\n\n\nax.set(title=\"My first matplotlib plot\", xlabel=\"Stages\")\n# ‰ΩøÁî®setÊñπÊ≥ï‰∏ÄÊ¨°ÊÄßËÆæÁΩÆÂ§ö‰∏™Â±ûÊÄß„ÄÇ\n# Á≠âÂêå‰∫éÂàÜÂà´Ë∞ÉÁî®ax.set_title()Âíåax.set_xlabel()„ÄÇ\n\n[Text(0.5, 1.0, 'My first matplotlib plot'),\n Text(0.5, 8.533333333333337, 'Stages')]"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê∑ªÂä†Âõæ‰æã",
    "href": "qmd/pandas3ed9cn.html#Ê∑ªÂä†Âõæ‰æã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê∑ªÂä†Âõæ‰æã ‚ûï",
    "text": "Ê∑ªÂä†Âõæ‰æã ‚ûï\n\nÂõæ‰æãÊ†áËØÜÂõæË°®ÂÖÉÁ¥†„ÄÇ\nÊ∑ªÂä†ÂõæË°®ÂÖÉÁ¥†Êó∂‰º†ÈÄí label ÂèÇÊï∞Ôºö\n\n\nfig, ax = plt.subplots() # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´‰∏Ä‰∏™Â≠êÂõæÁöÑÂõæÂΩ¢\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", label=\"one\")\n# ÁªòÂà∂Á¨¨‰∏ÄÊù°Á∫øÔºåÊ†áÁ≠æ‰∏∫\"one\"„ÄÇ\n\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dashed\", label=\"two\")\n# ÁªòÂà∂Á¨¨‰∫åÊù°Á∫øÔºåÊ†áÁ≠æ‰∏∫\"two\"ÔºåÁ∫øÂûã‰∏∫ËôöÁ∫ø„ÄÇ\n\nax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dotted\", label=\"three\")\n# ÁªòÂà∂Á¨¨‰∏âÊù°Á∫øÔºåÊ†áÁ≠æ‰∏∫\"three\"ÔºåÁ∫øÂûã‰∏∫ÁÇπÁ∫ø„ÄÇ\n\nax.legend() # ÊòæÁ§∫Âõæ‰æã"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Â∏¶Êúâ‰∏âÊù°Á∫øÂíåÂõæ‰æãÁöÑÁÆÄÂçïÂõæË°®",
    "href": "qmd/pandas3ed9cn.html#Â∏¶Êúâ‰∏âÊù°Á∫øÂíåÂõæ‰æãÁöÑÁÆÄÂçïÂõæË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∏¶Êúâ‰∏âÊù°Á∫øÂíåÂõæ‰æãÁöÑÁÆÄÂçïÂõæË°®",
    "text": "Â∏¶Êúâ‰∏âÊù°Á∫øÂíåÂõæ‰æãÁöÑÁÆÄÂçïÂõæË°®\n\n\n\n\n\n\n\n\n\nÂõæ 9-10. Â∏¶Êúâ‰∏âÊù°Á∫øÂíåÂõæ‰æãÁöÑÁÆÄÂçïÂõæË°®"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ax.legend-ÈÄâÈ°π",
    "href": "qmd/pandas3ed9cn.html#ax.legend-ÈÄâÈ°π",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ax.legend() ÈÄâÈ°π ‚öôÔ∏è",
    "text": "ax.legend() ÈÄâÈ°π ‚öôÔ∏è\n\nax.legend()ÔºöËá™Âä®ÂàõÂª∫Âõæ‰æã„ÄÇ\nlocÔºöÊåáÂÆöÂõæ‰æã‰ΩçÁΩÆÔºàÈªòËÆ§‰∏∫ \"best\"Ôºâ„ÄÇ\nÊéíÈô§ÂÖÉÁ¥†Ôºö‰∏ç‰º†ÈÄíÊ†áÁ≠æÊàñ‰º†ÈÄí label=\"_nolegend_\"„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÂíåÂú®Â≠êÂõæ‰∏äÁªòÂõæ",
    "href": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÂíåÂú®Â≠êÂõæ‰∏äÁªòÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≥®ÈáäÂíåÂú®Â≠êÂõæ‰∏äÁªòÂõæ ‚úçÔ∏è",
    "text": "Ê≥®ÈáäÂíåÂú®Â≠êÂõæ‰∏äÁªòÂõæ ‚úçÔ∏è\n\nÊ∑ªÂä†Ëá™ÂÆö‰πâÊ≥®ÈáäÔºöÊñáÊú¨„ÄÅÁÆ≠Â§¥„ÄÅÂΩ¢Áä∂„ÄÇ\ntext„ÄÅarrow„ÄÅannotate ÂáΩÊï∞„ÄÇ\nax.text(x, y, \"Hello world!\", family=\"monospace\", fontsize=10)ÔºöÂú® (x, y) Â§ÑÁªòÂà∂ÊñáÊú¨„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞",
    "href": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ üìà",
    "text": "Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ üìà\n\nÁ§∫‰æãÔºöÁªòÂà∂ 2007 Âπ¥‰ª•Êù•ÁöÑÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞Êî∂Áõò‰ª∑Âπ∂Ê∑ªÂä†Ê≥®Èáä„ÄÇ\n\n\nimport pandas as pd # ÂØºÂÖ•pandasÂ∫ì\nfrom datetime import datetime # ÂØºÂÖ•datetimeÊ®°Âùó\n\nfig, ax = plt.subplots() # ÂàõÂª∫‰∏Ä‰∏™ÂõæÂΩ¢Âíå‰∏Ä‰∏™Â≠êÂõæ\n\ndata = pd.read_csv(\"examples/spx.csv\", index_col=0, parse_dates=True)\n# ‰ªéCSVÊñá‰ª∂ËØªÂèñÊï∞ÊçÆ„ÄÇ\n# index_col=0Â∞ÜÁ¨¨‰∏ÄÂàóËÆæÁΩÆ‰∏∫Á¥¢Âºï„ÄÇ\n# parse_dates=TrueÂ∞ùËØïÂ∞ÜÁ¥¢ÂºïËß£Êûê‰∏∫Êó•Êúü„ÄÇ\n\nspx = data[\"SPX\"] # Ëé∑Âèñ\"SPX\"ÂàóÔºàÊ†áÂáÜÊôÆÂ∞î500ÊåáÊï∞Ôºâ\n\nspx.plot(ax=ax, color=\"black\") # ÁªòÂà∂Ê†áÂáÜÊôÆÂ∞î500ÊåáÊï∞ÔºåÈ¢úËâ≤‰∏∫ÈªëËâ≤"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞Áª≠",
    "href": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÔºàÁª≠Ôºâ",
    "text": "Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÔºàÁª≠Ôºâ\n\ncrisis_data = [\n    (datetime(2007, 10, 11), \"Peak of bull market\"), # ÁâõÂ∏ÇÈ´òÂ≥∞\n    (datetime(2008, 3, 12), \"Bear Stearns Fails\"),   # Ë¥ùÂ∞îÊñØÁôªÂÄíÈó≠\n    (datetime(2008, 9, 15), \"Lehman Bankruptcy\")      # Èõ∑ÊõºÂÖÑÂºüÁ†¥‰∫ß\n]\n\nfor date, label in crisis_data: # ÈÅçÂéÜÂç±Êú∫Êï∞ÊçÆ\n    ax.annotate(label, xy=(date, spx.asof(date) + 75),\n                xytext=(date, spx.asof(date) + 225),\n                arrowprops=dict(facecolor=\"black\", headwidth=4, width=2,\n                                headlength=4),\n                horizontalalignment=\"left\", verticalalignment=\"top\")\n# ‰ΩøÁî®ax.annotate()Ê∑ªÂä†Ê≥®Èáä„ÄÇ\n# label: Ê≥®ÈáäÊñáÊú¨„ÄÇ\n# xy: ÁÆ≠Â§¥ÊåáÂêëÁöÑÂùêÊ†á(x, y)„ÄÇ\n# xytext: ÊñáÊú¨ÁöÑËµ∑ÂßãÂùêÊ†á„ÄÇ\n# arrowprops: ÁÆ≠Â§¥Â±ûÊÄßÔºàÈ¢úËâ≤„ÄÅÂ§¥ÈÉ®ÂÆΩÂ∫¶„ÄÅÁÆ≠Â§¥ÂÆΩÂ∫¶„ÄÅÂ§¥ÈÉ®ÈïøÂ∫¶Ôºâ„ÄÇ\n# horizontalalignment, verticalalignment: ÊñáÊú¨ÂØπÈΩêÊñπÂºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞Áª≠-1",
    "href": "qmd/pandas3ed9cn.html#Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÔºàÁª≠Ôºâ",
    "text": "Ê≥®ÈáäÊ†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÔºàÁª≠Ôºâ\n\n# ÊîæÂ§ß2007-2010Âπ¥\nax.set_xlim([\"1/1/2007\", \"1/1/2011\"]) # ËÆæÁΩÆxËΩ¥ËåÉÂõ¥\nax.set_ylim([600, 1800]) # ËÆæÁΩÆyËΩ¥ËåÉÂõ¥\n\nax.set_title(\"Important dates in the 2008-2009 financial crisis\") # ËÆæÁΩÆÂõæÂΩ¢Ê†áÈ¢ò\n\nText(0.5, 1.0, 'Important dates in the 2008-2009 financial crisis')"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Âπ¥ÈáëËûçÂç±Êú∫‰∏≠ÁöÑÈáçË¶ÅÊó•Êúü",
    "href": "qmd/pandas3ed9cn.html#Âπ¥ÈáëËûçÂç±Êú∫‰∏≠ÁöÑÈáçË¶ÅÊó•Êúü",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "2008-2009 Âπ¥ÈáëËûçÂç±Êú∫‰∏≠ÁöÑÈáçË¶ÅÊó•Êúü",
    "text": "2008-2009 Âπ¥ÈáëËûçÂç±Êú∫‰∏≠ÁöÑÈáçË¶ÅÊó•Êúü\n\n\n\n\n\n\n\n\n\nÂõæ 9-11. 2008-2009 Âπ¥ÈáëËûçÂç±Êú∫‰∏≠ÁöÑÈáçË¶ÅÊó•Êúü"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞ÂõæË°®‰∏äÁöÑÈáçË¶ÅÁÇπ",
    "href": "qmd/pandas3ed9cn.html#Ê†áÂáÜÊôÆÂ∞î-500-ÊåáÊï∞ÂõæË°®‰∏äÁöÑÈáçË¶ÅÁÇπ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÂõæË°®‰∏äÁöÑÈáçË¶ÅÁÇπ",
    "text": "Ê†áÂáÜÊôÆÂ∞î 500 ÊåáÊï∞ÂõæË°®‰∏äÁöÑÈáçË¶ÅÁÇπ\n\nax.annotateÔºöÂú®ÊåáÂÆöÁöÑ (x, y) ÂùêÊ†áÂ§ÑÁªòÂà∂Ê†áÁ≠æ„ÄÇ\nset_xlim„ÄÅset_ylimÔºöÊâãÂä®ËÆæÁΩÆÂõæË°®ËæπÁïå„ÄÇ\nax.set_titleÔºöÊ∑ªÂä†‰∏ªÊ†áÈ¢ò„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÁªòÂà∂ÂΩ¢Áä∂Ë°•‰∏Å",
    "href": "qmd/pandas3ed9cn.html#ÁªòÂà∂ÂΩ¢Áä∂Ë°•‰∏Å",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªòÂà∂ÂΩ¢Áä∂ÔºàË°•‰∏ÅÔºâ üîµüî∫üü•",
    "text": "ÁªòÂà∂ÂΩ¢Áä∂ÔºàË°•‰∏ÅÔºâ üîµüî∫üü•\n\nmatplotlib ÊúâÁß∞‰∏∫ patches ÁöÑÂØπË±°ÔºåË°®Á§∫ÂΩ¢Áä∂„ÄÇ\nRectangle„ÄÅCircleÔºöÂú® matplotlib.pyplot ‰∏≠ÊâæÂà∞„ÄÇ\nÂÆåÊï¥ÈõÜÂêàÔºömatplotlib.patches„ÄÇ\n‰ΩøÁî® ax.add_patch Ê∑ªÂä†Âà∞ÂõæË°®„ÄÇ\n\n\nfig, ax = plt.subplots() # ÂàõÂª∫‰∏Ä‰∏™ÂõæÂΩ¢Âíå‰∏Ä‰∏™Â≠êÂõæ\nrect = plt.Rectangle((0.2, 0.75), 0.4, 0.15, color=\"black\", alpha=0.3)\n# ÂàõÂª∫‰∏Ä‰∏™Áü©ÂΩ¢ÂØπË±°„ÄÇ\n# (0.2, 0.75): Â∑¶‰∏ãËßíÂùêÊ†á„ÄÇ\n# 0.4: ÂÆΩÂ∫¶„ÄÇ\n# 0.15: È´òÂ∫¶„ÄÇ\n# color=\"black\": È¢úËâ≤‰∏∫ÈªëËâ≤„ÄÇ\n# alpha=0.3: ÈÄèÊòéÂ∫¶‰∏∫0.3„ÄÇ\ncirc = plt.Circle((0.7, 0.2), 0.15, color=\"blue\", alpha=0.3)\n# ÂàõÂª∫‰∏Ä‰∏™ÂúÜÂΩ¢ÂØπË±°„ÄÇ\n# (0.7, 0.2): ÂúÜÂøÉÂùêÊ†á„ÄÇ\n# 0.15: ÂçäÂæÑ„ÄÇ\n# color=\"blue\": È¢úËâ≤‰∏∫ËìùËâ≤„ÄÇ\n# alpha=0.3: ÈÄèÊòéÂ∫¶‰∏∫0.3„ÄÇ\npgon = plt.Polygon([[0.15, 0.15], [0.35, 0.4], [0.2, 0.6]],\n                    color=\"green\", alpha=0.5)\n# ÂàõÂª∫‰∏Ä‰∏™Â§öËæπÂΩ¢ÂØπË±°„ÄÇ\n# [[0.15, 0.15], [0.35, 0.4], [0.2, 0.6]]: Â§öËæπÂΩ¢È°∂ÁÇπÂùêÊ†á„ÄÇ\n# color=\"green\": È¢úËâ≤‰∏∫ÁªøËâ≤„ÄÇ\n# alpha=0.5: ÈÄèÊòéÂ∫¶‰∏∫0.5„ÄÇ\nax.add_patch(rect) # Â∞ÜÁü©ÂΩ¢Ê∑ªÂä†Âà∞Â≠êÂõæ\nax.add_patch(circ) # Â∞ÜÂúÜÂΩ¢Ê∑ªÂä†Âà∞Â≠êÂõæ\nax.add_patch(pgon) # Â∞ÜÂ§öËæπÂΩ¢Ê∑ªÂä†Âà∞Â≠êÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Áî±‰∏â‰∏™‰∏çÂêåË°•‰∏ÅÁªÑÊàêÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "href": "qmd/pandas3ed9cn.html#Áî±‰∏â‰∏™‰∏çÂêåË°•‰∏ÅÁªÑÊàêÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áî±‰∏â‰∏™‰∏çÂêåË°•‰∏ÅÁªÑÊàêÁöÑÊï∞ÊçÆÂèØËßÜÂåñ",
    "text": "Áî±‰∏â‰∏™‰∏çÂêåË°•‰∏ÅÁªÑÊàêÁöÑÊï∞ÊçÆÂèØËßÜÂåñ\n\n\n\n\n\n\n\n\n\nÂõæ 9-12. Áî±‰∏â‰∏™‰∏çÂêåË°•‰∏ÅÁªÑÊàêÁöÑÊï∞ÊçÆÂèØËßÜÂåñ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Â∞ÜÂõæË°®‰øùÂ≠òÂà∞Êñá‰ª∂",
    "href": "qmd/pandas3ed9cn.html#Â∞ÜÂõæË°®‰øùÂ≠òÂà∞Êñá‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞ÜÂõæË°®‰øùÂ≠òÂà∞Êñá‰ª∂ üíæ",
    "text": "Â∞ÜÂõæË°®‰øùÂ≠òÂà∞Êñá‰ª∂ üíæ\n\nsavefig ÂÆû‰æãÊñπÊ≥ïÔºö‰øùÂ≠òÊ¥ªÂä®ÂõæÂΩ¢„ÄÇ\nÁ§∫‰æãÔºö\n\n\nfig.savefig(\"figpath.svg\") # Â∞ÜÂõæÂΩ¢‰øùÂ≠ò‰∏∫SVGÊñá‰ª∂\n\n\nÊñá‰ª∂Á±ªÂûã‰ªéÊâ©Â±ïÂêçÊé®Êñ≠Ôºà‰æãÂ¶ÇÔºå.pdf„ÄÅ.pngÔºâ„ÄÇ\ndpiÔºöÊéßÂà∂ÊØèËã±ÂØ∏ÁÇπÊï∞ÂàÜËæ®Áéá„ÄÇ\n\n\nfig.savefig(\"figpath.png\", dpi=400) # Â∞ÜÂõæÂΩ¢‰øùÂ≠ò‰∏∫PNGÊñá‰ª∂ÔºåÂàÜËæ®Áéá‰∏∫400 dpi"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#savefig-ÈÄâÈ°π",
    "href": "qmd/pandas3ed9cn.html#savefig-ÈÄâÈ°π",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "savefig ÈÄâÈ°π ‚öôÔ∏è",
    "text": "savefig ÈÄâÈ°π ‚öôÔ∏è\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\nfname\nÊñá‰ª∂Ë∑ØÂæÑÊàñ Python Á±ªÊñá‰ª∂ÂØπË±°ÔºõÊ†ºÂºè‰ªéÊâ©Â±ïÂêçÊé®Êñ≠\n\n\ndpi\nÊØèËã±ÂØ∏ÁÇπÊï∞ÂàÜËæ®Áéá\n\n\nfacecolor\nÂ≠êÂõæÂ§ñÈÉ®ÁöÑÂõæÂΩ¢ËÉåÊôØÈ¢úËâ≤ÔºàÈªòËÆ§ÂÄºÔºö\"w\" - ÁôΩËâ≤Ôºâ\n\n\nedgecolor\nÂõæÂΩ¢ËæπÁºòÁöÑÈ¢úËâ≤\n\n\nformat\nÊòæÂºèÊñá‰ª∂Ê†ºÂºèÔºà‰æãÂ¶ÇÔºå\"png\"„ÄÅ\"pdf\"„ÄÅ\"svg\"Ôºâ\n\n\n\n\n\n\n\n\n\nË°® 9-2. ÈÉ®ÂàÜ fig.savefig ÈÄâÈ°π"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#matplotlib-ÈÖçÁΩÆ",
    "href": "qmd/pandas3ed9cn.html#matplotlib-ÈÖçÁΩÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "matplotlib ÈÖçÁΩÆ ‚öôÔ∏è",
    "text": "matplotlib ÈÖçÁΩÆ ‚öôÔ∏è\n\nmatplotlib ÂÖ∑ÊúâÈ¢úËâ≤ÊñπÊ°àÂíåÈªòËÆ§ÂÄºÁöÑÈÖçÁΩÆ„ÄÇ\nÈÄöËøáÂÖ®Â±ÄÂèÇÊï∞Ëá™ÂÆö‰πâÔºöÂõæÂΩ¢Â§ßÂ∞è„ÄÅÂ≠êÂõæÈó¥Ë∑ù„ÄÅÈ¢úËâ≤„ÄÅÂ≠ó‰ΩìÁ≠â„ÄÇ\nrc ÊñπÊ≥ïÔºö‰ª•ÁºñÁ®ãÊñπÂºè‰øÆÊîπÈÖçÁΩÆ„ÄÇ\nÁ§∫‰æãÔºöÂ∞ÜÈªòËÆ§ÂõæÂΩ¢Â§ßÂ∞èËÆæÁΩÆ‰∏∫ 10x10„ÄÇ\n\n\nplt.rc(\"figure\", figsize=(10, 10)) # ËÆæÁΩÆÈªòËÆ§ÂõæÂΩ¢Â§ßÂ∞è‰∏∫10x10Ëã±ÂØ∏"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊÅ¢Â§çÈªòËÆ§ÈÖçÁΩÆÂÄº",
    "href": "qmd/pandas3ed9cn.html#ÊÅ¢Â§çÈªòËÆ§ÈÖçÁΩÆÂÄº",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÅ¢Â§çÈªòËÆ§ÈÖçÁΩÆÂÄº üîÑ",
    "text": "ÊÅ¢Â§çÈªòËÆ§ÈÖçÁΩÆÂÄº üîÑ\n\nÂΩìÂâçËÆæÁΩÆÔºöplt.rcParams Â≠óÂÖ∏„ÄÇ\nÊÅ¢Â§çÈªòËÆ§ÂÄºÔºöplt.rcdefaults()„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ëá™ÂÆö‰πâÁâπÂÆöÁªÑ‰ª∂",
    "href": "qmd/pandas3ed9cn.html#Ëá™ÂÆö‰πâÁâπÂÆöÁªÑ‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ëá™ÂÆö‰πâÁâπÂÆöÁªÑ‰ª∂ üß©",
    "text": "Ëá™ÂÆö‰πâÁâπÂÆöÁªÑ‰ª∂ üß©\n\nÁ¨¨‰∏Ä‰∏™ rc ÂèÇÊï∞ÔºöË¶ÅËá™ÂÆö‰πâÁöÑÁªÑ‰ª∂Ôºà‰æãÂ¶ÇÔºå\"figure\"„ÄÅ\"axes\"„ÄÅ\"xtick\"Ôºâ„ÄÇ\nÂêéË∑üÊñ∞ÂèÇÊï∞ÁöÑÂÖ≥ÈîÆÂ≠óÂèÇÊï∞„ÄÇ\nÁ§∫‰æãÔºö\n\n\nplt.rc(\"font\", family=\"monospace\", weight=\"bold\", size=8)\n# ËÆæÁΩÆÈªòËÆ§Â≠ó‰Ωì„ÄÇ\n# family=\"monospace\": ‰ΩøÁî®Á≠âÂÆΩÂ≠ó‰Ωì„ÄÇ\n# weight=\"bold\": ‰ΩøÁî®Á≤ó‰Ωì„ÄÇ\n# size=8: Â≠ó‰ΩìÂ§ßÂ∞è‰∏∫8„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#matplotlibrc-ÈÖçÁΩÆÊñá‰ª∂",
    "href": "qmd/pandas3ed9cn.html#matplotlibrc-ÈÖçÁΩÆÊñá‰ª∂",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "matplotlibrc ÈÖçÁΩÆÊñá‰ª∂ üìù",
    "text": "matplotlibrc ÈÖçÁΩÆÊñá‰ª∂ üìù\n\nÂπøÊ≥õËá™ÂÆö‰πâÔºömatplotlib/mpl-data ‰∏≠ÁöÑ matplotlibrc Êñá‰ª∂„ÄÇ\nÂ∞ÜËá™ÂÆö‰πâÁöÑ matplotlibrc ÊîæÂú®ÊÇ®ÁöÑ‰∏ªÁõÆÂΩï‰∏≠ÔºåÂëΩÂêç‰∏∫ .matplotlibrc„ÄÇ\nÊØèÊ¨°‰ΩøÁî® matplotlib Êó∂Âä†ËΩΩ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#seaborn-Âíå-matplotlib-ÈÖçÁΩÆ",
    "href": "qmd/pandas3ed9cn.html#seaborn-Âíå-matplotlib-ÈÖçÁΩÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "seaborn Âíå matplotlib ÈÖçÁΩÆ üé®",
    "text": "seaborn Âíå matplotlib ÈÖçÁΩÆ üé®\n\nseaborn Âú®ÂÜÖÈÉ®‰ΩøÁî® matplotlib ÁöÑÈÖçÁΩÆÁ≥ªÁªü„ÄÇ\nseaborn ÂÖ∑ÊúâÂÜÖÁΩÆÁöÑÂõæË°®‰∏ªÈ¢òÂíåÊ†∑Âºè„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#‰ΩøÁî®-pandas-Âíå-seaborn-ÁªòÂõæ",
    "href": "qmd/pandas3ed9cn.html#‰ΩøÁî®-pandas-Âíå-seaborn-ÁªòÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® pandas Âíå seaborn ÁªòÂõæ",
    "text": "‰ΩøÁî® pandas Âíå seaborn ÁªòÂõæ\n\nMatplotlib ÂèØËÉΩÊòØ‰ΩéÁ∫ßÁöÑ„ÄÇ\npandasÔºöÁî®‰∫éÂèØËßÜÂåñ DataFrame Âíå Series ÂØπË±°ÁöÑÂÜÖÁΩÆÊñπÊ≥ï„ÄÇ\nseabornÔºöÂü∫‰∫é matplotlib ÊûÑÂª∫ÁöÑÈ´òÁ∫ßÁªüËÆ°ÂõæÂΩ¢Â∫ì„ÄÇ\nseaborn ÁÆÄÂåñ‰∫ÜÂàõÂª∫Â∏∏ËßÅÂèØËßÜÂåñÁ±ªÂûãÁöÑËøáÁ®ã„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#‰ΩøÁî®-pandas-ÁöÑÊäòÁ∫øÂõæ",
    "href": "qmd/pandas3ed9cn.html#‰ΩøÁî®-pandas-ÁöÑÊäòÁ∫øÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "‰ΩøÁî® pandas ÁöÑÊäòÁ∫øÂõæ üìà",
    "text": "‰ΩøÁî® pandas ÁöÑÊäòÁ∫øÂõæ üìà\n\nSeries Âíå DataFrame Êúâ‰∏Ä‰∏™ plot Â±ûÊÄß„ÄÇ\nplot() ÈªòËÆ§ÂàõÂª∫ÊäòÁ∫øÂõæÔºö\n\n\ns = pd.Series(np.random.standard_normal(10).cumsum(), index=np.arange(0, 100, 10))\n# ÂàõÂª∫‰∏Ä‰∏™SeriesÂØπË±°„ÄÇ\n# np.random.standard_normal(10).cumsum(): ÁîüÊàê10‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞ÁöÑÁ¥ØÁßØÂíå„ÄÇ\n# index=np.arange(0, 100, 10): ËÆæÁΩÆÁ¥¢Âºï‰∏∫0, 10, 20, ..., 90„ÄÇ\n\ns.plot() # ÁªòÂà∂SeriesÁöÑÊäòÁ∫øÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÁÆÄÂçï-series-ÂõæË°®",
    "href": "qmd/pandas3ed9cn.html#ÁÆÄÂçï-series-ÂõæË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁÆÄÂçï Series ÂõæË°®",
    "text": "ÁÆÄÂçï Series ÂõæË°®\n\n\n\n\n\n\n\n\n\nÂõæ 9-13. ÁÆÄÂçï Series ÂõæË°®\n\n\n\n\n\n\nSeries Á¥¢ÂºïÔºöÁî®‰∫é x ËΩ¥Ôºà‰ΩøÁî® use_index=False Á¶ÅÁî®Ôºâ„ÄÇ\nxticks„ÄÅxlim„ÄÅyticks„ÄÅylimÔºöË∞ÉÊï¥ËΩ¥ÂàªÂ∫¶ÂíåÈôêÂà∂„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#series.plot-ÊñπÊ≥ïÂèÇÊï∞",
    "href": "qmd/pandas3ed9cn.html#series.plot-ÊñπÊ≥ïÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Series.plot ÊñπÊ≥ïÂèÇÊï∞ ‚öôÔ∏è",
    "text": "Series.plot ÊñπÊ≥ïÂèÇÊï∞ ‚öôÔ∏è\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\nlabel\nÂõæ‰æãÊ†áÁ≠æ\n\n\nax\nË¶ÅÁªòÂà∂ÁöÑ matplotlib Â≠êÂõæÂØπË±°\n\n\nstyle\nÊ†∑ÂºèÂ≠óÁ¨¶‰∏≤Ôºà‰æãÂ¶ÇÔºå\"ko--\"Ôºâ\n\n\nalpha\nÂõæË°®Â°´ÂÖÖ‰∏çÈÄèÊòéÂ∫¶Ôºà0 Âà∞ 1Ôºâ\n\n\nkind\nÂõæË°®Á±ªÂûãÔºö\"area\"„ÄÅ\"bar\"„ÄÅ\"barh\"„ÄÅ\"density\"„ÄÅ\"hist\"„ÄÅ\"kde\"„ÄÅ\"line\"„ÄÅ\"pie\"\n\n\nfigsize\nÂõæÂΩ¢ÂØπË±°ÁöÑÂ§ßÂ∞è\n\n\nlogx\nx ËΩ¥‰∏äÁöÑÂØπÊï∞Áº©Êîæ\n\n\nlogy\ny ËΩ¥‰∏äÁöÑÂØπÊï∞Áº©Êîæ\n\n\ntitle\nÂõæË°®Ê†áÈ¢ò\n\n\nuse_index\n‰ΩøÁî®ÂØπË±°Á¥¢Âºï‰Ωú‰∏∫ÂàªÂ∫¶Ê†áÁ≠æ\n\n\nrot\nÂàªÂ∫¶Ê†áÁ≠æÊóãËΩ¨Ôºà0-360Ôºâ\n\n\nxticks\nx ËΩ¥ÂàªÂ∫¶ÂÄº\n\n\nyticks\ny ËΩ¥ÂàªÂ∫¶ÂÄº\n\n\nxlim\nx ËΩ¥ÈôêÂà∂Ôºà‰æãÂ¶ÇÔºå[0, 10])\n\n\nylim\ny ËΩ¥ÈôêÂà∂\n\n\ngrid\nÊòæÁ§∫ËΩ¥ÁΩëÊ†ºÔºàÈªòËÆ§ÂÖ≥Èó≠Ôºâ\n\n\n\n\n\n\n\n\n\nË°® 9-3. Series.plot ÊñπÊ≥ïÂèÇÊï∞\n\n\n\n\npandas ÁªòÂõæÊñπÊ≥ïÊé•ÂèóÂèØÈÄâÁöÑ ax ÂèÇÊï∞ÔºåÁî®‰∫éÊåáÂÆö matplotlib Â≠êÂõæÂØπË±°„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#dataframe-ÊäòÁ∫øÂõæ",
    "href": "qmd/pandas3ed9cn.html#dataframe-ÊäòÁ∫øÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame ÊäòÁ∫øÂõæ üìä",
    "text": "DataFrame ÊäòÁ∫øÂõæ üìä\n\ndf = pd.DataFrame(np.random.standard_normal((10, 4)).cumsum(0),\n                  columns=[\"A\", \"B\", \"C\", \"D\"],\n                  index=np.arange(0, 100, 10))\n# ÂàõÂª∫‰∏Ä‰∏™DataFrameÂØπË±°„ÄÇ\n# np.random.standard_normal((10, 4)).cumsum(0): ÁîüÊàê10x4ÁöÑÊ†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞ÔºåÂπ∂Ê≤øÂàó(axis=0)ËÆ°ÁÆóÁ¥ØÁßØÂíå„ÄÇ\n# columns=[\"A\", \"B\", \"C\", \"D\"]: ËÆæÁΩÆÂàóÂêç‰∏∫A, B, C, D„ÄÇ\n# index=np.arange(0, 100, 10): ËÆæÁΩÆÁ¥¢Âºï‰∏∫0, 10, 20, ..., 90„ÄÇ\nplt.style.use('grayscale') # ‰ΩøÁî®ÁÅ∞Â∫¶Ê†∑ÂºèÔºå‰ª•ÈÄÇÂ∫îÈªëÁôΩÂá∫ÁâàÁâ©\ndf.plot() # ÁªòÂà∂DataFrameÁöÑÊäòÁ∫øÂõæÔºåÊØèÂàó‰∏ÄÊù°Á∫ø"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÁÆÄÂçï-dataframe-ÂõæË°®",
    "href": "qmd/pandas3ed9cn.html#ÁÆÄÂçï-dataframe-ÂõæË°®",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁÆÄÂçï DataFrame ÂõæË°®",
    "text": "ÁÆÄÂçï DataFrame ÂõæË°®\n\n\n\n\n\n\n\n\n\nÂõæ 9-14. ÁÆÄÂçï DataFrame ÂõæË°®\n\n\n\n\n\n\nÂ∞ÜÊØèÂàóÁªòÂà∂‰∏∫Âêå‰∏ÄÂ≠êÂõæ‰∏äÁöÑÂçïÁã¨Á∫øÊù°„ÄÇ\nËá™Âä®ÂàõÂª∫Âõæ‰æã„ÄÇ\ndf.plot() Á≠âÂêå‰∫é df.plot.line()."
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#dataframe.plot-ÈÄâÈ°π",
    "href": "qmd/pandas3ed9cn.html#dataframe.plot-ÈÄâÈ°π",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame.plot ÈÄâÈ°π ‚öôÔ∏è",
    "text": "DataFrame.plot ÈÄâÈ°π ‚öôÔ∏è\n\n\n\n\n\n\n\nÂèÇÊï∞\nÊèèËø∞\n\n\n\n\nsubplots\nÂú®ÂçïÁã¨ÁöÑÂ≠êÂõæ‰∏≠ÁªòÂà∂ÊØè‰∏™ DataFrame Âàó\n\n\nlayout\n2 ÂÖÉÁªÑÔºàË°å„ÄÅÂàóÔºâÔºåÁî®‰∫éÂ≠êÂõæÂ∏ÉÂ±Ä\n\n\nsharex\nÂ¶ÇÊûú subplots=TrueÔºåÂÖ±‰∫´ x ËΩ¥ÂàªÂ∫¶ÂíåÈôêÂà∂\n\n\nsharey\nÂ¶ÇÊûú subplots=TrueÔºåÂÖ±‰∫´ y ËΩ¥\n\n\nlegend\nÊ∑ªÂä†Â≠êÂõæÂõæ‰æãÔºàÈªòËÆ§‰∏∫ TrueÔºâ\n\n\nsort_columns\nÊåâÂ≠óÊØçÈ°∫Â∫èÁªòÂà∂ÂàóÔºàÈªòËÆ§ÂÄºÔºö‰ΩøÁî®Áé∞ÊúâÈ°∫Â∫èÔºâ\n\n\n\n\n\n\n\n\n\nË°® 9-4. DataFrame ÁâπÂÆöÁöÑÂõæË°®ÂèÇÊï∞\n\n\n\n\nÂÖ∂‰ªñÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Â∞Ü‰º†ÈÄíÁªô matplotlib ÁªòÂõæÂáΩÊï∞„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Êù°ÂΩ¢Âõæ",
    "href": "qmd/pandas3ed9cn.html#Êù°ÂΩ¢Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êù°ÂΩ¢Âõæ üìä",
    "text": "Êù°ÂΩ¢Âõæ üìä\n\nplot.bar(): ÂûÇÁõ¥Êù°ÂΩ¢Âõæ„ÄÇ\nplot.barh(): Ê∞¥Âπ≥Êù°ÂΩ¢Âõæ„ÄÇ\nSeries/DataFrame Á¥¢ÂºïÔºöÁî®‰∫é x (bar) Êàñ y (barh) ÂàªÂ∫¶„ÄÇ\n\n\nfig, axes = plt.subplots(2, 1) # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´2Ë°å1ÂàóÂ≠êÂõæÁöÑÂõæÂΩ¢\ndata = pd.Series(np.random.uniform(size=16), index=list(\"abcdefghijklmnop\"))\n# ÂàõÂª∫‰∏Ä‰∏™SeriesÂØπË±°„ÄÇ\n# np.random.uniform(size=16): ÁîüÊàê16‰∏™ÂùáÂåÄÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞„ÄÇ\n# index=list(\"abcdefghijklmnop\"): ËÆæÁΩÆÁ¥¢Âºï‰∏∫Â≠óÊØçaÂà∞p„ÄÇ\n\ndata.plot.bar(ax=axes[0], color=\"black\", alpha=0.7)\n# Âú®Á¨¨‰∏Ä‰∏™Â≠êÂõæ(axes[0])‰∏äÁªòÂà∂ÂûÇÁõ¥Êù°ÂΩ¢Âõæ„ÄÇ\n# color=\"black\": ËÆæÁΩÆÊù°ÂΩ¢È¢úËâ≤‰∏∫ÈªëËâ≤„ÄÇ\n# alpha=0.7: ËÆæÁΩÆÈÄèÊòéÂ∫¶‰∏∫0.7„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Êù°ÂΩ¢ÂõæÁª≠",
    "href": "qmd/pandas3ed9cn.html#Êù°ÂΩ¢ÂõæÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êù°ÂΩ¢ÂõæÔºàÁª≠Ôºâ",
    "text": "Êù°ÂΩ¢ÂõæÔºàÁª≠Ôºâ\n\ndata.plot.barh(ax=axes[1], color=\"black\", alpha=0.7)\n# Âú®Á¨¨‰∫å‰∏™Â≠êÂõæ(axes[1])‰∏äÁªòÂà∂Ê∞¥Âπ≥Êù°ÂΩ¢Âõæ„ÄÇ\n# color=\"black\": ËÆæÁΩÆÊù°ÂΩ¢È¢úËâ≤‰∏∫ÈªëËâ≤„ÄÇ\n# alpha=0.7: ËÆæÁΩÆÈÄèÊòéÂ∫¶‰∏∫0.7„ÄÇ\n\n&lt;Axes: &gt;"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê∞¥Âπ≥ÂíåÂûÇÁõ¥Êù°ÂΩ¢Âõæ",
    "href": "qmd/pandas3ed9cn.html#Ê∞¥Âπ≥ÂíåÂûÇÁõ¥Êù°ÂΩ¢Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê∞¥Âπ≥ÂíåÂûÇÁõ¥Êù°ÂΩ¢Âõæ",
    "text": "Ê∞¥Âπ≥ÂíåÂûÇÁõ¥Êù°ÂΩ¢Âõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-15. Ê∞¥Âπ≥ÂíåÂûÇÁõ¥Êù°ÂΩ¢Âõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#dataframe-Êù°ÂΩ¢Âõæ",
    "href": "qmd/pandas3ed9cn.html#dataframe-Êù°ÂΩ¢Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame Êù°ÂΩ¢Âõæ üìä",
    "text": "DataFrame Êù°ÂΩ¢Âõæ üìä\n\ndf = pd.DataFrame(np.random.uniform(size=(6, 4)),\n                  index=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"],\n                  columns=pd.Index([\"A\", \"B\", \"C\", \"D\"], name=\"Genus\"))\n# ÂàõÂª∫‰∏Ä‰∏™DataFrameÂØπË±°„ÄÇ\n# np.random.uniform(size=(6, 4)): ÁîüÊàê6x4ÁöÑÂùáÂåÄÂàÜÂ∏ÉÈöèÊú∫Êï∞„ÄÇ\n# index=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]: ËÆæÁΩÆË°åÁ¥¢Âºï„ÄÇ\n# columns=pd.Index([\"A\", \"B\", \"C\", \"D\"], name=\"Genus\"): ËÆæÁΩÆÂàóÁ¥¢ÂºïÔºåÂπ∂ÂëΩÂêç‰∏∫\"Genus\"„ÄÇ\n\ndf.plot.bar() # ÁªòÂà∂DataFrameÁöÑÊù°ÂΩ¢ÂõæÔºåÊØèË°åÁöÑÊï∞ÊçÆÂπ∂ÊéíÊòæÁ§∫"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#dataframe-Êù°ÂΩ¢Âõæ-1",
    "href": "qmd/pandas3ed9cn.html#dataframe-Êù°ÂΩ¢Âõæ-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame Êù°ÂΩ¢Âõæ",
    "text": "DataFrame Êù°ÂΩ¢Âõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-16. DataFrame Êù°ÂΩ¢Âõæ\n\n\n\n\n\n\nÂ∞ÜÊØèË°å‰∏≠ÁöÑÂÄºÂàÜÁªÑÂú®Êù°ÂΩ¢‰∏≠ÔºåÂπ∂ÊéíÊòæÁ§∫„ÄÇ\nDataFrame ÂàóÂêçÔºöÁî®‰ΩúÂõæ‰æãÊ†áÈ¢ò„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Â†ÜÂè†Êù°ÂΩ¢Âõæ",
    "href": "qmd/pandas3ed9cn.html#Â†ÜÂè†Êù°ÂΩ¢Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â†ÜÂè†Êù°ÂΩ¢Âõæ üìö",
    "text": "Â†ÜÂè†Êù°ÂΩ¢Âõæ üìö\n\nstacked=True: ÂàõÂª∫Â†ÜÂè†Êù°ÂΩ¢Âõæ„ÄÇ\nÊØèË°å‰∏≠ÁöÑÂÄºÂ†ÜÂè†Âú®‰∏ÄËµ∑„ÄÇ\n\n\ndf.plot.barh(stacked=True, alpha=0.5)\n# ÁªòÂà∂Ê∞¥Âπ≥Â†ÜÂè†Êù°ÂΩ¢Âõæ„ÄÇ\n# stacked=True: ËÆæÁΩÆ‰∏∫Â†ÜÂè†Êù°ÂΩ¢Âõæ„ÄÇ\n# alpha=0.5: ËÆæÁΩÆÈÄèÊòéÂ∫¶‰∏∫0.5„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#dataframe-Â†ÜÂè†Êù°ÂΩ¢Âõæ",
    "href": "qmd/pandas3ed9cn.html#dataframe-Â†ÜÂè†Êù°ÂΩ¢Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "DataFrame Â†ÜÂè†Êù°ÂΩ¢Âõæ",
    "text": "DataFrame Â†ÜÂè†Êù°ÂΩ¢Âõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-17. DataFrame Â†ÜÂè†Êù°ÂΩ¢Âõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Á§∫‰æãÈ§êÂéÖÂ∞èË¥πÊï∞ÊçÆ",
    "href": "qmd/pandas3ed9cn.html#Á§∫‰æãÈ§êÂéÖÂ∞èË¥πÊï∞ÊçÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Á§∫‰æãÔºöÈ§êÂéÖÂ∞èË¥πÊï∞ÊçÆ üçΩÔ∏è",
    "text": "Á§∫‰æãÔºöÈ§êÂéÖÂ∞èË¥πÊï∞ÊçÆ üçΩÔ∏è\n\nÂèØËßÜÂåñÂ∞èË¥πÊï∞ÊçÆÔºöÊØè‰∏™ËÅö‰ºöËßÑÊ®°„ÄÅÊØèÂ§©ÁöÑÊï∞ÊçÆÁÇπÁôæÂàÜÊØî„ÄÇ\nread_csv: Âä†ËΩΩÊï∞ÊçÆ„ÄÇ\ncrosstab: ÊåâÂ§©ÂíåËÅö‰ºöËßÑÊ®°ËøõË°å‰∫§ÂèâË°®ËÆ°ÁÆó„ÄÇ\n\n\ntips = pd.read_csv(\"examples/tips.csv\") # ‰ªéCSVÊñá‰ª∂ËØªÂèñÂ∞èË¥πÊï∞ÊçÆ\nparty_counts = pd.crosstab(tips[\"day\"], tips[\"size\"])\n# ‰ΩøÁî®crosstabËÆ°ÁÆóÊØèÂ§©(day)ÂíåËÅö‰ºöËßÑÊ®°(size)ÁöÑ‰∫§ÂèâË°®„ÄÇ\n# ‰∫§ÂèâË°®Áî®‰∫éÁªüËÆ°ÊØè‰∏™ÁªÑÂêàÁöÑÈ¢ëÊï∞„ÄÇ\n\nparty_counts = party_counts.reindex(index=[\"Thur\", \"Fri\", \"Sat\", \"Sun\"])\n# ÈáçÊñ∞Á¥¢ÂºïË°åÔºåÁ°Æ‰øùÈ°∫Â∫è‰∏∫\"Thur\", \"Fri\", \"Sat\", \"Sun\"„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#È§êÂéÖÂ∞èË¥πÊï∞ÊçÆÁª≠",
    "href": "qmd/pandas3ed9cn.html#È§êÂéÖÂ∞èË¥πÊï∞ÊçÆÁª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "È§êÂéÖÂ∞èË¥πÊï∞ÊçÆÔºàÁª≠Ôºâ",
    "text": "È§êÂéÖÂ∞èË¥πÊï∞ÊçÆÔºàÁª≠Ôºâ\n\nËÆ°ÁÆóÊï∞ÊçÆÊ°Ü‰∏≠‰∏§ÂàóÊï∞ÊçÆÁöÑÈ¢ëÊï∞„ÄÇ\n\n\n# Âà†Èô§1‰∫∫Âíå6‰∫∫ÁöÑËÅö‰ºö\nparty_counts = party_counts.loc[:, 2:5]\n# ÈÄöËøáÊ†áÁ≠æËøõË°åÈÄâÊã©ÔºåÊ≠§Â§ÑÈÄâÊã©ÂàóÊ†áÁ≠æ‰ªé2Âà∞5ÔºàÂåÖÊã¨ÔºâÁöÑÂàóÔºåÂç≥ËÅö‰ºöËßÑÊ®°‰∏∫2„ÄÅ3„ÄÅ4Âíå5ÁöÑÊï∞ÊçÆ„ÄÇ\n\n# ÂΩí‰∏ÄÂåñÔºå‰ΩøÊØèË°åÁöÑÂíå‰∏∫1\nparty_pcts = party_counts.div(party_counts.sum(axis=\"columns\"), axis=\"index\")\n# ËÆ°ÁÆóÊØè‰∏™ËÅö‰ºöËßÑÊ®°Âç†ÂΩìÂ§©ÊÄªËÅö‰ºöÊï∞ÁöÑÁôæÂàÜÊØî„ÄÇ\n# party_counts.sum(axis=\"columns\"): ËÆ°ÁÆóÊØèË°åÁöÑÊÄªÂíå„ÄÇ\n# .div(): ÊâßË°åÈô§Ê≥ïÔºåÂ∞ÜÊØèË°åÁöÑÊØè‰∏™ÂÖÉÁ¥†Èô§‰ª•ËØ•Ë°åÁöÑÊÄªÂíå„ÄÇ\n# axis=\"index\": ÊåáÂÆöÈô§Ê≥ïËøêÁÆóÊåâË°åËøõË°å„ÄÇ\n\nparty_pcts.plot.bar(stacked=True) # ÁªòÂà∂Â†ÜÂè†Êù°ÂΩ¢ÂõæÔºåÂ±ïÁ§∫ÊØè‰∏™ËÅö‰ºöËßÑÊ®°Âç†ÂΩìÂ§©ÊÄªËÅö‰ºöÊï∞ÁöÑÁôæÂàÜÊØî"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊØèÂ§©ÂêÑËÅö‰ºöËßÑÊ®°ÁöÑÂç†ÊØî",
    "href": "qmd/pandas3ed9cn.html#ÊØèÂ§©ÂêÑËÅö‰ºöËßÑÊ®°ÁöÑÂç†ÊØî",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊØèÂ§©ÂêÑËÅö‰ºöËßÑÊ®°ÁöÑÂç†ÊØî",
    "text": "ÊØèÂ§©ÂêÑËÅö‰ºöËßÑÊ®°ÁöÑÂç†ÊØî\n\n\n\n\n\n\n\n\n\nÂõæ 9-18. ÊØèÂ§©ÂêÑËÅö‰ºöËßÑÊ®°ÁöÑÂç†ÊØî"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#seaborn-Áî®‰∫éÊõ¥ÁÆÄÂçïÁöÑËÅöÂêàÂíåÊ±áÊÄª",
    "href": "qmd/pandas3ed9cn.html#seaborn-Áî®‰∫éÊõ¥ÁÆÄÂçïÁöÑËÅöÂêàÂíåÊ±áÊÄª",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "seaborn Áî®‰∫éÊõ¥ÁÆÄÂçïÁöÑËÅöÂêàÂíåÊ±áÊÄª üìä",
    "text": "seaborn Áî®‰∫éÊõ¥ÁÆÄÂçïÁöÑËÅöÂêàÂíåÊ±áÊÄª üìä\n\nseaborn ÁÆÄÂåñ‰∫Ü‰ΩøÁî®ËÅöÂêà/Ê±áÊÄªÊï∞ÊçÆÁöÑÁªòÂõæ„ÄÇ\nÁ§∫‰æãÔºöÊØèÂ§©ÁöÑÂ∞èË¥πÁôæÂàÜÊØî„ÄÇ\n\n\nimport seaborn as sns # ÂØºÂÖ•seabornÂ∫ì\n\ntips[\"tip_pct\"] = tips[\"tip\"] / (tips[\"total_bill\"] - tips[\"tip\"])\n# Ê∑ªÂä†‰∏ÄÂàó\"tip_pct\"ÔºåËÆ°ÁÆóÂ∞èË¥πÁôæÂàÜÊØî„ÄÇ\n\nsns.barplot(x=\"tip_pct\", y=\"day\", data=tips, orient=\"h\")\n# ‰ΩøÁî®seabornÁöÑbarplotÁªòÂà∂Êù°ÂΩ¢Âõæ„ÄÇ\n# x=\"tip_pct\": xËΩ¥‰ΩøÁî®\"tip_pct\"ÂàóÁöÑÊï∞ÊçÆ„ÄÇ\n# y=\"day\": yËΩ¥‰ΩøÁî®\"day\"ÂàóÁöÑÊï∞ÊçÆ„ÄÇ\n# data=tips: Êï∞ÊçÆÊù•Ê∫ê‰∏∫tips DataFrame„ÄÇ\n# orient=\"h\": Ê∞¥Âπ≥ÊòæÁ§∫Êù°ÂΩ¢Âõæ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊØèÂ§©ÁöÑÂ∞èË¥πÁôæÂàÜÊØîÂ∏¶ËØØÂ∑ÆÊù°",
    "href": "qmd/pandas3ed9cn.html#ÊØèÂ§©ÁöÑÂ∞èË¥πÁôæÂàÜÊØîÂ∏¶ËØØÂ∑ÆÊù°",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊØèÂ§©ÁöÑÂ∞èË¥πÁôæÂàÜÊØîÔºàÂ∏¶ËØØÂ∑ÆÊù°Ôºâ",
    "text": "ÊØèÂ§©ÁöÑÂ∞èË¥πÁôæÂàÜÊØîÔºàÂ∏¶ËØØÂ∑ÆÊù°Ôºâ\n\n\n\n\n\n\n\n\n\nÂõæ 9-19. ÊØèÂ§©ÁöÑÂ∞èË¥πÁôæÂàÜÊØîÔºàÂ∏¶ËØØÂ∑ÆÊù°Ôºâ\n\n\n\n\n\n\ndata: pandas DataFrame„ÄÇ\nÂÖ∂‰ªñÂèÇÊï∞ÔºöÂàóÂêç„ÄÇ\nÊù°ÂΩ¢Ôºötip_pct ÁöÑÂπ≥ÂùáÂÄº„ÄÇ\nÈªëÁ∫øÔºö95% ÁΩÆ‰ø°Âå∫Èó¥„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊåâÂÖ∂‰ªñÂàÜÁ±ªÂÄºÊãÜÂàÜ",
    "href": "qmd/pandas3ed9cn.html#ÊåâÂÖ∂‰ªñÂàÜÁ±ªÂÄºÊãÜÂàÜ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÂÖ∂‰ªñÂàÜÁ±ªÂÄºÊãÜÂàÜ üåà",
    "text": "ÊåâÂÖ∂‰ªñÂàÜÁ±ªÂÄºÊãÜÂàÜ üåà\n\nseaborn.barplot ‰∏≠ÁöÑ hue ÈÄâÈ°πÔºöÊåâÂè¶‰∏Ä‰∏™ÂàÜÁ±ªÂÄºÊãÜÂàÜ„ÄÇ\n\n\nsns.barplot(x=\"tip_pct\", y=\"day\", hue=\"time\", data=tips, orient=\"h\")\n# ‰ΩøÁî®seabornÁöÑbarplotÁªòÂà∂Êù°ÂΩ¢ÂõæÔºåÂπ∂Êåâ\"time\"ÂàóËøõË°åÂàÜÁªÑ„ÄÇ\n# hue=\"time\": Ê†πÊçÆ\"time\"ÂàóÁöÑÂÄºÂØπÊù°ÂΩ¢ÂõæËøõË°åÁùÄËâ≤Âå∫ÂàÜ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊØèÂ§©ÂíåÊØèÊó∂ÊÆµÁöÑÂ∞èË¥πÁôæÂàÜÊØî",
    "href": "qmd/pandas3ed9cn.html#ÊØèÂ§©ÂíåÊØèÊó∂ÊÆµÁöÑÂ∞èË¥πÁôæÂàÜÊØî",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊØèÂ§©ÂíåÊØèÊó∂ÊÆµÁöÑÂ∞èË¥πÁôæÂàÜÊØî",
    "text": "ÊØèÂ§©ÂíåÊØèÊó∂ÊÆµÁöÑÂ∞èË¥πÁôæÂàÜÊØî\n\n\n\n\n\n\n\n\n\nÂõæ 9-20. ÊØèÂ§©ÂíåÊØèÊó∂ÊÆµÁöÑÂ∞èË¥πÁôæÂàÜÊØî"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#seaborn-ÂõæË°®ÁæéÂ≠¶",
    "href": "qmd/pandas3ed9cn.html#seaborn-ÂõæË°®ÁæéÂ≠¶",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "seaborn ÂõæË°®ÁæéÂ≠¶ üé®",
    "text": "seaborn ÂõæË°®ÁæéÂ≠¶ üé®\n\nseaborn Ëá™Âä®Ë∞ÉÊï¥ÂõæË°®ÁæéÂ≠¶Ôºö\n\nË∞ÉËâ≤Êùø„ÄÇ\nÂõæË°®ËÉåÊôØ„ÄÇ\nÁΩëÊ†ºÁ∫øÈ¢úËâ≤„ÄÇ\n\nseaborn.set_styleÔºöÂú®ÂõæË°®Â§ñËßÇ‰πãÈó¥ÂàáÊç¢„ÄÇ\n\n\nsns.set_style(\"whitegrid\") # ËÆæÁΩÆÂõæË°®Ê†∑Âºè‰∏∫ÁôΩËâ≤ÁΩëÊ†ºËÉåÊôØ\n\n\nÂØπ‰∫éÁÅ∞Â∫¶ÔºåËÆæÁΩÆÁÅ∞Â∫¶Ë∞ÉËâ≤ÊùøÔºö\n\n\nsns.set_palette(\"Greys_r\") # ËÆæÁΩÆË∞ÉËâ≤Êùø‰∏∫ÁÅ∞Â∫¶"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Áõ¥ÊñπÂõæÂíåÂØÜÂ∫¶Âõæ",
    "href": "qmd/pandas3ed9cn.html#Áõ¥ÊñπÂõæÂíåÂØÜÂ∫¶Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Áõ¥ÊñπÂõæÂíåÂØÜÂ∫¶Âõæ üìä",
    "text": "Áõ¥ÊñπÂõæÂíåÂØÜÂ∫¶Âõæ üìä\n\nÁõ¥ÊñπÂõæÔºöÂÄºÈ¢ëÁéáÁöÑÁ¶ªÊï£ÂåñÊòæÁ§∫„ÄÇ\nÊï∞ÊçÆÁÇπË¢´ÂàÜÁÆ±ÔºåÂπ∂ÁªòÂà∂ÊØè‰∏™ÁÆ±‰∏≠ÁöÑËÆ°Êï∞„ÄÇ\nplot.histÔºöÂàõÂª∫Áõ¥ÊñπÂõæ„ÄÇ\n\n\ntips[\"tip_pct\"].plot.hist(bins=50)\n# ÁªòÂà∂\"tip_pct\"ÂàóÁöÑÁõ¥ÊñπÂõæ„ÄÇ\n# bins=50: Â∞ÜÊï∞ÊçÆÂàÜÊàê50‰∏™Êü±Â≠ê„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Â∞èË¥πÁôæÂàÜÊØîÁöÑÁõ¥ÊñπÂõæ",
    "href": "qmd/pandas3ed9cn.html#Â∞èË¥πÁôæÂàÜÊØîÁöÑÁõ¥ÊñπÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞èË¥πÁôæÂàÜÊØîÁöÑÁõ¥ÊñπÂõæ",
    "text": "Â∞èË¥πÁôæÂàÜÊØîÁöÑÁõ¥ÊñπÂõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-21. Â∞èË¥πÁôæÂàÜÊØîÁöÑÁõ¥ÊñπÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂØÜÂ∫¶Âõæ",
    "href": "qmd/pandas3ed9cn.html#ÂØÜÂ∫¶Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂØÜÂ∫¶Âõæ üìà",
    "text": "ÂØÜÂ∫¶Âõæ üìà\n\nÂØÜÂ∫¶ÂõæÔºöËøûÁª≠Ê¶ÇÁéáÂàÜÂ∏ÉÁöÑ‰º∞ËÆ°„ÄÇ\nËøë‰ºº‰∏∫Ê†∏Ôºà‰æãÂ¶ÇÔºåÊ≠£ÊÄÅÂàÜÂ∏ÉÔºâÁöÑÊ∑∑Âêà„ÄÇ\n‰πüÁß∞‰∏∫Ê†∏ÂØÜÂ∫¶‰º∞ËÆ° (KDE) Âõæ„ÄÇ\nplot.densityÔºöÂàõÂª∫ÂØÜÂ∫¶Âõæ„ÄÇ\n\n\ntips[\"tip_pct\"].plot.density() # ÁªòÂà∂\"tip_pct\"ÂàóÁöÑÂØÜÂ∫¶Âõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Â∞èË¥πÁôæÂàÜÊØîÁöÑÂØÜÂ∫¶Âõæ",
    "href": "qmd/pandas3ed9cn.html#Â∞èË¥πÁôæÂàÜÊØîÁöÑÂØÜÂ∫¶Âõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Â∞èË¥πÁôæÂàÜÊØîÁöÑÂØÜÂ∫¶Âõæ",
    "text": "Â∞èË¥πÁôæÂàÜÊØîÁöÑÂØÜÂ∫¶Âõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-22. Â∞èË¥πÁôæÂàÜÊØîÁöÑÂØÜÂ∫¶Âõæ\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nÂØÜÂ∫¶ÂõæÈúÄË¶Å SciPyÔºö conda install scipy"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#seaborn-ÁöÑ-histplot",
    "href": "qmd/pandas3ed9cn.html#seaborn-ÁöÑ-histplot",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "seaborn ÁöÑ histplot üìä",
    "text": "seaborn ÁöÑ histplot üìä\n\nseaborn ÁÆÄÂåñ‰∫ÜÁõ¥ÊñπÂõæÂíåÂØÜÂ∫¶Âõæ„ÄÇ\nhistplotÔºöÂêåÊó∂ÁªòÂà∂Áõ¥ÊñπÂõæÂíåËøûÁª≠ÂØÜÂ∫¶‰º∞ËÆ°„ÄÇ\nÁ§∫‰æãÔºöÂèåÂ≥∞ÂàÜÂ∏É„ÄÇ\n\n\ncomp1 = np.random.standard_normal(200) # ÁîüÊàê200‰∏™Ê†áÂáÜÊ≠£ÊÄÅÂàÜÂ∏ÉÁöÑÈöèÊú∫Êï∞\ncomp2 = 10 + 2 * np.random.standard_normal(200) # ÁîüÊàê200‰∏™ÂùáÂÄº‰∏∫10„ÄÅÊ†áÂáÜÂ∑Æ‰∏∫2ÁöÑÊ≠£ÊÄÅÂàÜÂ∏ÉÈöèÊú∫Êï∞\nvalues = pd.Series(np.concatenate([comp1, comp2])) # Â∞Ü‰∏§‰∏™Êï∞ÁªÑËøûÊé•Ëµ∑Êù•ÔºåÂπ∂ËΩ¨Êç¢‰∏∫SeriesÂØπË±°\nsns.histplot(values, bins=100, color=\"black\")\n# ‰ΩøÁî®seabornÁöÑhistplotÁªòÂà∂Áõ¥ÊñπÂõæÂíåÂØÜÂ∫¶‰º∞ËÆ°„ÄÇ\n# bins=100: Â∞ÜÊï∞ÊçÆÂàÜÊàê100‰∏™Êü±Â≠ê„ÄÇ\n# color=\"black\": ËÆæÁΩÆÈ¢úËâ≤‰∏∫ÈªëËâ≤„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Ê≠£ÊÄÅÊ∑∑ÂêàÁöÑÂΩí‰∏ÄÂåñÁõ¥ÊñπÂõæ",
    "href": "qmd/pandas3ed9cn.html#Ê≠£ÊÄÅÊ∑∑ÂêàÁöÑÂΩí‰∏ÄÂåñÁõ¥ÊñπÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Ê≠£ÊÄÅÊ∑∑ÂêàÁöÑÂΩí‰∏ÄÂåñÁõ¥ÊñπÂõæ",
    "text": "Ê≠£ÊÄÅÊ∑∑ÂêàÁöÑÂΩí‰∏ÄÂåñÁõ¥ÊñπÂõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-23. Ê≠£ÊÄÅÊ∑∑ÂêàÁöÑÂΩí‰∏ÄÂåñÁõ¥ÊñπÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Êï£ÁÇπÂõæÊàñÁÇπÂõæ",
    "href": "qmd/pandas3ed9cn.html#Êï£ÁÇπÂõæÊàñÁÇπÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êï£ÁÇπÂõæÊàñÁÇπÂõæ üîç",
    "text": "Êï£ÁÇπÂõæÊàñÁÇπÂõæ üîç\n\nÊ£ÄÊü•‰∏§‰∏™‰∏ÄÁª¥Êï∞ÊçÆÂ∫èÂàó‰πãÈó¥ÁöÑÂÖ≥Á≥ª„ÄÇ\nÁ§∫‰æãÔºöÂä†ËΩΩÂÆèËßÇÁªèÊµéÊï∞ÊçÆÔºåËÆ°ÁÆóÂØπÊï∞Â∑Æ„ÄÇ\n\n\nmacro = pd.read_csv(\"examples/macrodata.csv\") # ‰ªéCSVÊñá‰ª∂ËØªÂèñÂÆèËßÇÁªèÊµéÊï∞ÊçÆ\ndata = macro[[\"cpi\", \"m1\", \"tbilrate\", \"unemp\"]] # ÈÄâÊã©\"cpi\", \"m1\", \"tbilrate\", \"unemp\"ÂõõÂàóÊï∞ÊçÆ\ntrans_data = np.log(data).diff().dropna()\n# ËÆ°ÁÆóÊï∞ÊçÆÁöÑÂØπÊï∞Â∑Æ„ÄÇ\n# np.log(data): ÂØπÊï∞ÊçÆÂèñÂØπÊï∞„ÄÇ\n# .diff(): ËÆ°ÁÆóÂ∑ÆÂàÜ„ÄÇ\n# .dropna(): Âà†Èô§ÂåÖÂê´Áº∫Â§±ÂÄºÁöÑË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#seaborn-ÁöÑ-regplot",
    "href": "qmd/pandas3ed9cn.html#seaborn-ÁöÑ-regplot",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "seaborn ÁöÑ regplot üìà",
    "text": "seaborn ÁöÑ regplot üìà\n\nregplotÔºöÁªòÂà∂Êï£ÁÇπÂõæÂπ∂ÊãüÂêàÁ∫øÊÄßÂõûÂΩíÁ∫ø„ÄÇ\n\n\nax = sns.regplot(x=\"m1\", y=\"unemp\", data=trans_data)\n# ‰ΩøÁî®seabornÁöÑregplotÁªòÂà∂Êï£ÁÇπÂõæÔºåÂπ∂ÊãüÂêàÁ∫øÊÄßÂõûÂΩíÁ∫ø„ÄÇ\n# x=\"m1\": xËΩ¥‰ΩøÁî®\"m1\"ÂàóÁöÑÊï∞ÊçÆ„ÄÇ\n# y=\"unemp\": yËΩ¥‰ΩøÁî®\"unemp\"ÂàóÁöÑÊï∞ÊçÆ„ÄÇ\n# data=trans_data: Êï∞ÊçÆÊù•Ê∫ê‰∏∫trans_data„ÄÇ\n\nax.set_title(\"Changes in log(m1) versus log(unemp)\") # Ê∑ªÂä†ÂõæË°®Ê†áÈ¢ò\n\nText(0.5, 1.0, 'Changes in log(m1) versus log(unemp)')"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#seaborn-ÂõûÂΩíÊï£ÁÇπÂõæ",
    "href": "qmd/pandas3ed9cn.html#seaborn-ÂõûÂΩíÊï£ÁÇπÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "seaborn ÂõûÂΩí/Êï£ÁÇπÂõæ",
    "text": "seaborn ÂõûÂΩí/Êï£ÁÇπÂõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-24. seaborn ÂõûÂΩí/Êï£ÁÇπÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÈÖçÂØπÂõæÊàñÊï£ÁÇπÂõæÁü©Èòµ",
    "href": "qmd/pandas3ed9cn.html#ÈÖçÂØπÂõæÊàñÊï£ÁÇπÂõæÁü©Èòµ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÈÖçÂØπÂõæÊàñÊï£ÁÇπÂõæÁü©Èòµ üîç",
    "text": "ÈÖçÂØπÂõæÊàñÊï£ÁÇπÂõæÁü©Èòµ üîç\n\nÊé¢Á¥¢‰∏ÄÁªÑÂèòÈáè‰πãÈó¥ÁöÑÊï£ÁÇπÂõæ„ÄÇ\nseaborn.pairplotÔºöÂàõÂª∫ÈÖçÂØπÂõæ„ÄÇ\nÊîØÊåÅÂØπËßíÁ∫ø‰∏äÁöÑÁõ¥ÊñπÂõæ/ÂØÜÂ∫¶‰º∞ËÆ°„ÄÇ\n\n\nsns.pairplot(trans_data, diag_kind=\"kde\", plot_kws={\"alpha\": 0.2})\n# ‰ΩøÁî®seabornÁöÑpairplotÂàõÂª∫ÈÖçÂØπÂõæ„ÄÇ\n# diag_kind=\"kde\": ÂØπËßíÁ∫ø‰∏äÁöÑÂõæË°®Á±ªÂûã‰∏∫Ê†∏ÂØÜÂ∫¶‰º∞ËÆ°„ÄÇ\n# plot_kws={\"alpha\": 0.2}: ËÆæÁΩÆÊï£ÁÇπÂõæÁöÑÈÄèÊòéÂ∫¶‰∏∫0.2„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#statsmodels-ÂÆèËßÇÊï∞ÊçÆÁöÑÈÖçÂØπÂõæÁü©Èòµ",
    "href": "qmd/pandas3ed9cn.html#statsmodels-ÂÆèËßÇÊï∞ÊçÆÁöÑÈÖçÂØπÂõæÁü©Èòµ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Statsmodels ÂÆèËßÇÊï∞ÊçÆÁöÑÈÖçÂØπÂõæÁü©Èòµ",
    "text": "Statsmodels ÂÆèËßÇÊï∞ÊçÆÁöÑÈÖçÂØπÂõæÁü©Èòµ\n\n\n\n\n\n\n\n\n\nÂõæ 9-25. Statsmodels ÂÆèËßÇÊï∞ÊçÆÁöÑÈÖçÂØπÂõæÁü©Èòµ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#plot_kws-ÂèÇÊï∞",
    "href": "qmd/pandas3ed9cn.html#plot_kws-ÂèÇÊï∞",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "plot_kws ÂèÇÊï∞ ‚öôÔ∏è",
    "text": "plot_kws ÂèÇÊï∞ ‚öôÔ∏è\n\nÂ∞ÜÈÖçÁΩÆÈÄâÈ°π‰º†ÈÄíÁªôÂçïÁã¨ÁöÑÁªòÂõæË∞ÉÁî®„ÄÇ\nÊü•Áúã seaborn.pairplot ÊñáÊ°£Â≠óÁ¨¶‰∏≤‰∫ÜËß£ËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂàÜÈù¢ÁΩëÊ†ºÂíåÂàÜÁ±ªÊï∞ÊçÆ",
    "href": "qmd/pandas3ed9cn.html#ÂàÜÈù¢ÁΩëÊ†ºÂíåÂàÜÁ±ªÊï∞ÊçÆ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂàÜÈù¢ÁΩëÊ†ºÂíåÂàÜÁ±ªÊï∞ÊçÆ üìä",
    "text": "ÂàÜÈù¢ÁΩëÊ†ºÂíåÂàÜÁ±ªÊï∞ÊçÆ üìä\n\nÂèØËßÜÂåñÂÖ∑ÊúâËÆ∏Â§öÂàÜÁ±ªÂèòÈáèÁöÑÊï∞ÊçÆ„ÄÇ\nÂàÜÈù¢ÁΩëÊ†ºÔºö‰∫åÁª¥Â∏ÉÂ±ÄÔºåÊï∞ÊçÆÊ†πÊçÆÂèòÈáèÂÄºÂú®ÂõæË°®‰πãÈó¥ÊãÜÂàÜ„ÄÇ\nseaborn.catplotÔºöÁÆÄÂåñÂàÜÈù¢Âõæ„ÄÇ\n\n\nsns.catplot(x=\"day\", y=\"tip_pct\", hue=\"time\", col=\"smoker\",\n            kind=\"bar\", data=tips[tips.tip_pct &lt; 1])\n# ‰ΩøÁî®seabornÁöÑcatplotÂàõÂª∫ÂàÜÈù¢Êù°ÂΩ¢Âõæ„ÄÇ\n# x=\"day\": xËΩ¥‰ΩøÁî®\"day\"ÂàóÁöÑÊï∞ÊçÆ„ÄÇ\n# y=\"tip_pct\": yËΩ¥‰ΩøÁî®\"tip_pct\"ÂàóÁöÑÊï∞ÊçÆ„ÄÇ\n# hue=\"time\": Ê†πÊçÆ\"time\"ÂàóÁöÑÂÄºÂØπÊù°ÂΩ¢ÂõæËøõË°åÁùÄËâ≤Âå∫ÂàÜ„ÄÇ\n# col=\"smoker\": Ê†πÊçÆ\"smoker\"ÂàóÁöÑÂÄºÂ∞ÜÂõæË°®ÂàÜÊàê‰∏çÂêåÁöÑÂàó„ÄÇ\n# kind=\"bar\": ÂõæË°®Á±ªÂûã‰∏∫Êù°ÂΩ¢Âõæ„ÄÇ\n# data=tips[tips.tip_pct &lt; 1]: Êï∞ÊçÆÊù•Ê∫ê‰∏∫tips DataFrame‰∏≠\"tip_pct\"Â∞è‰∫é1ÁöÑË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊåâÂ§©Êó∂Èó¥Âê∏ÁÉüËÄÖÂàíÂàÜÁöÑÂ∞èË¥πÁôæÂàÜÊØî",
    "href": "qmd/pandas3ed9cn.html#ÊåâÂ§©Êó∂Èó¥Âê∏ÁÉüËÄÖÂàíÂàÜÁöÑÂ∞èË¥πÁôæÂàÜÊØî",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÂ§©/Êó∂Èó¥/Âê∏ÁÉüËÄÖÂàíÂàÜÁöÑÂ∞èË¥πÁôæÂàÜÊØî",
    "text": "ÊåâÂ§©/Êó∂Èó¥/Âê∏ÁÉüËÄÖÂàíÂàÜÁöÑÂ∞èË¥πÁôæÂàÜÊØî\n\n\n\n\n\n\n\n\n\nÂõæ 9-26. ÊåâÂ§©/Êó∂Èó¥/Âê∏ÁÉüËÄÖÂàíÂàÜÁöÑÂ∞èË¥πÁôæÂàÜÊØî"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Êâ©Â±ïÂàÜÈù¢ÁΩëÊ†º",
    "href": "qmd/pandas3ed9cn.html#Êâ©Â±ïÂàÜÈù¢ÁΩëÊ†º",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êâ©Â±ïÂàÜÈù¢ÁΩëÊ†º ‚ûï",
    "text": "Êâ©Â±ïÂàÜÈù¢ÁΩëÊ†º ‚ûï\n\nÊØè‰∏™Êó∂Èó¥ÂÄºÊ∑ªÂä†‰∏ÄË°åÔºö\n\n\nsns.catplot(x=\"day\", y=\"tip_pct\", row=\"time\",\n            col=\"smoker\", kind=\"bar\", data=tips[tips.tip_pct &lt; 1])\n# ‰ΩøÁî®seabornÁöÑcatplotÂàõÂª∫ÂàÜÈù¢Êù°ÂΩ¢Âõæ„ÄÇ\n# row=\"time\": Ê†πÊçÆ\"time\"ÂàóÁöÑÂÄºÂ∞ÜÂõæË°®ÂàÜÊàê‰∏çÂêåÁöÑË°å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊåâÊó∂Èó¥Âê∏ÁÉüËÄÖÊãÜÂàÜÁöÑÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØî",
    "href": "qmd/pandas3ed9cn.html#ÊåâÊó∂Èó¥Âê∏ÁÉüËÄÖÊãÜÂàÜÁöÑÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØî",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊåâÊó∂Èó¥/Âê∏ÁÉüËÄÖÊãÜÂàÜÁöÑÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØî",
    "text": "ÊåâÊó∂Èó¥/Âê∏ÁÉüËÄÖÊãÜÂàÜÁöÑÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØî\n\n\n\n\n\n\n\n\n\nÂõæ 9-27. ÊåâÊó∂Èó¥/Âê∏ÁÉüËÄÖÊãÜÂàÜÁöÑÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØî"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#catplot-ÁöÑÂÖ∂‰ªñÂõæË°®Á±ªÂûã",
    "href": "qmd/pandas3ed9cn.html#catplot-ÁöÑÂÖ∂‰ªñÂõæË°®Á±ªÂûã",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "catplot ÁöÑÂÖ∂‰ªñÂõæË°®Á±ªÂûã üìä",
    "text": "catplot ÁöÑÂÖ∂‰ªñÂõæË°®Á±ªÂûã üìä\n\ncatplot ÊîØÊåÅÂÖ∂‰ªñÂõæË°®Á±ªÂûãÔºà‰æãÂ¶ÇÔºåÁÆ±Á∫øÂõæÔºâ„ÄÇ\nÁÆ±Á∫øÂõæÊòæÁ§∫‰∏≠‰ΩçÊï∞„ÄÅÂõõÂàÜ‰ΩçÊï∞ÂíåÂºÇÂ∏∏ÂÄº„ÄÇ\n\n\nsns.catplot(x=\"tip_pct\", y=\"day\", kind=\"box\",\n            data=tips[tips.tip_pct &lt; 0.5])\n# ‰ΩøÁî®seabornÁöÑcatplotÂàõÂª∫ÁÆ±Á∫øÂõæ„ÄÇ\n# kind=\"box\": ÂõæË°®Á±ªÂûã‰∏∫ÁÆ±Á∫øÂõæ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØîÁöÑÁÆ±Á∫øÂõæ",
    "href": "qmd/pandas3ed9cn.html#ÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØîÁöÑÁÆ±Á∫øÂõæ",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØîÁöÑÁÆ±Á∫øÂõæ",
    "text": "ÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØîÁöÑÁÆ±Á∫øÂõæ\n\n\n\n\n\n\n\n\n\nÂõæ 9-28. ÊØèÂ§©Â∞èË¥πÁôæÂàÜÊØîÁöÑÁÆ±Á∫øÂõæ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#seaborn.facetgrid",
    "href": "qmd/pandas3ed9cn.html#seaborn.facetgrid",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "seaborn.FacetGrid üß©",
    "text": "seaborn.FacetGrid üß©\n\nÂàõÂª∫Ëá™ÂÆö‰πâÂàÜÈù¢ÁΩëÊ†ºÂõæ„ÄÇ\nÊúâÂÖ≥ËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑ÂèÇÈòÖ seaborn ÊñáÊ°£„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÂÖ∂‰ªñ-python-ÂèØËßÜÂåñÂ∑•ÂÖ∑",
    "href": "qmd/pandas3ed9cn.html#ÂÖ∂‰ªñ-python-ÂèØËßÜÂåñÂ∑•ÂÖ∑",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÂÖ∂‰ªñ Python ÂèØËßÜÂåñÂ∑•ÂÖ∑ üõ†Ô∏è",
    "text": "ÂÖ∂‰ªñ Python ÂèØËßÜÂåñÂ∑•ÂÖ∑ üõ†Ô∏è\n\nÂú® Python ‰∏≠ÂàõÂª∫ÂõæÂΩ¢ÁöÑËÆ∏Â§öÈÄâÈ°π„ÄÇ\n\n```markdown - ‰∏ìÊ≥®‰∫é Web ‰∫§‰∫íÂºèÂõæÂΩ¢ÔºöAltair„ÄÅBokeh„ÄÅPlotly„ÄÇ - ÂØπ‰∫éÈùôÊÄÅÂõæÂΩ¢Ôºö‰ΩøÁî® matplotlib ÂíåÂü∫‰∫éÂÆÉÊûÑÂª∫ÁöÑÂ∫ìÔºàpandas„ÄÅseabornÔºâ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#Êé®ËçêÈòÖËØª",
    "href": "qmd/pandas3ed9cn.html#Êé®ËçêÈòÖËØª",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "Êé®ËçêÈòÖËØª üìö",
    "text": "Êé®ËçêÈòÖËØª üìö\n\nFundamentals of Data Visualization by Claus O. Wilke.\n\nÂèØÂú®Á∫øÈòÖËØªÊàñË¥≠‰π∞Ôºöhttps://clauswilke.com/dataviz"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÁªìËÆ∫",
    "href": "qmd/pandas3ed9cn.html#ÁªìËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÁªìËÆ∫",
    "text": "ÁªìËÆ∫\n\nÊú¨Á´†‰ªãÁªç‰∫Ü‰ΩøÁî® pandas„ÄÅmatplotlib Âíå seaborn ËøõË°åÂü∫Êú¨Êï∞ÊçÆÂèØËßÜÂåñÁöÑÊñπÊ≥ï„ÄÇ\nÊúâÊïàÁöÑÊï∞ÊçÆÂèØËßÜÂåñÊòØ‰∏Ä‰∏™Ê¥ªË∑ÉÁöÑÁ†îÁ©∂È¢ÜÂüü„ÄÇ\nÊé¢Á¥¢Êõ¥Â§öËµÑÊ∫ê‰ª•‰∫ÜËß£Êõ¥Â§ö‰ø°ÊÅØ„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊÄªÁªì",
    "href": "qmd/pandas3ed9cn.html#ÊÄªÁªì",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄªÁªì",
    "text": "ÊÄªÁªì\n\nmatplotlib ÊòØ‰∏Ä‰∏™Âº∫Â§ßËÄåÁÅµÊ¥ªÁöÑÂ∫ìÔºåÁî®‰∫éÂú® Python ‰∏≠ÂàõÂª∫ÈùôÊÄÅÂõæË°®„ÄÇ\npandas Êèê‰æõ‰∫ÜÊñπ‰æøÁöÑÊñπÊ≥ïÊù•ÁªòÂà∂ Series Âíå DataFrame ÂØπË±°„ÄÇ\nseaborn ÁÆÄÂåñ‰∫ÜÂàõÂª∫ËÆ∏Â§öÂ∏∏ËßÅÁªüËÆ°ÂèØËßÜÂåñÁöÑËøáÁ®ãÔºåÂπ∂‰∏é pandas ËâØÂ•ΩÈõÜÊàê„ÄÇ\nÊúâÊïàÁöÑÊï∞ÊçÆÂèØËßÜÂåñÂØπ‰∫éÊï∞ÊçÆÂàÜÊûêÂíåÊ≤üÈÄöËá≥ÂÖ≥ÈáçË¶Å„ÄÇ"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "href": "qmd/pandas3ed9cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ ü§î\n\nÊÇ®Â¶Ç‰ΩïÂ∞ÜÊú¨Á´†Â≠¶Âà∞ÁöÑÂèØËßÜÂåñÊäÄÊúØÂ∫îÁî®Âà∞ÊÇ®Ëá™Â∑±ÁöÑÊï∞ÊçÆÂàÜÊûêÈ°πÁõÆ‰∏≠Ôºü\nÂØπ‰∫é‰∏çÂêåÁöÑÂèØËßÜÂåñ‰ªªÂä°Ôºå‰ΩøÁî® matplotlib„ÄÅpandas Âíå seaborn ÁöÑ‰ºòÁº∫ÁÇπÊòØ‰ªÄ‰πàÔºü\nÊÇ®Â¶Ç‰ΩïÈÄöËøáÂèØËßÜÂåñÊúâÊïàÂú∞‰º†ËææÊÇ®ÁöÑÂèëÁé∞Ôºü"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫Áª≠",
    "href": "qmd/pandas3ed9cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫Áª≠",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ÔºàÁª≠Ôºâü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ÔºàÁª≠Ôºâü§î\n\nÊÇ®ËøòÊé¢Á¥¢ËøáÂì™‰∫õÂÖ∂‰ªñ Python ÂèØËßÜÂåñÂ∑•ÂÖ∑ÔºåÂÆÉ‰ª¨‰∏é matplotlib„ÄÅpandas Âíå seaborn Áõ∏ÊØîÂ¶Ç‰ΩïÔºü\nÂàõÂª∫Ê∏ÖÊô∞„ÄÅ‰ø°ÊÅØ‰∏∞ÂØå‰∏îÂÖ∑ÊúâËßÜËßâÂê∏ÂºïÂäõÁöÑÂõæË°®ÊúâÂì™‰∫õÊúÄ‰Ω≥ÂÆûË∑µÔºü"
  },
  {
    "objectID": "qmd/pandas3ed9cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫Áª≠-1",
    "href": "qmd/pandas3ed9cn.html#ÊÄùËÄÉ‰∏éËÆ®ËÆ∫Áª≠-1",
    "title": "Python Êï∞ÊçÆÂàÜÊûê",
    "section": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ÔºàÁª≠Ôºâü§î",
    "text": "ÊÄùËÄÉ‰∏éËÆ®ËÆ∫ÔºàÁª≠Ôºâü§î\n\nÊÇ®ËÉΩÊÉ≥Âà∞Âú®Âì™‰∫õÊÉÖÂÜµ‰∏ãÔºåÁâπÂÆöÁ±ªÂûãÁöÑÂõæË°®Ôºà‰æãÂ¶ÇÔºåÁõ¥ÊñπÂõæ„ÄÅÊï£ÁÇπÂõæ„ÄÅÁÆ±Á∫øÂõæÔºâÊúÄÈÄÇÂêà‰º†ËææÊï∞ÊçÆ‰∏≠ÁöÑÁâπÂÆöËßÅËß£ÂêóÔºü\nÊÇ®Â¶Ç‰ΩïËá™ÂÆö‰πâ matplotlib ÂõæË°®‰ª•Â¢ûÂº∫ÂÖ∂Ê∏ÖÊô∞Â∫¶ÂíåËßÜËßâÊïàÊûúÔºà‰æãÂ¶ÇÔºåË∞ÉÊï¥È¢úËâ≤„ÄÅÊ†áÁ≠æ„ÄÅÂõæ‰æãÔºâÔºü"
  },
  {
    "objectID": "qmd/pandas3edA2.html",
    "href": "qmd/pandas3edA2.html",
    "title": "",
    "section": "",
    "text": "We‚Äôve previously covered the basics of the IPython shell and Jupyter notebooks.\nNow, we‚Äôll delve into IPython‚Äôs advanced functionalities, useful in both console and Jupyter environments.\nConsider IPython as your enhanced Python interpreter ‚Äì a powerful tool for interactive computing and data analysis.\nThis section serves as a supplementary resource, enhancing your learning like a power-up in a video game! üéÆ"
  },
  {
    "objectID": "qmd/pandas3edA2.html#introduction-beyond-the-basics",
    "href": "qmd/pandas3edA2.html#introduction-beyond-the-basics",
    "title": "",
    "section": "",
    "text": "We‚Äôve previously covered the basics of the IPython shell and Jupyter notebooks.\nNow, we‚Äôll delve into IPython‚Äôs advanced functionalities, useful in both console and Jupyter environments.\nConsider IPython as your enhanced Python interpreter ‚Äì a powerful tool for interactive computing and data analysis.\nThis section serves as a supplementary resource, enhancing your learning like a power-up in a video game! üéÆ"
  },
  {
    "objectID": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts",
    "href": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts",
    "title": "",
    "section": "Terminal Keyboard Shortcuts ‚å®Ô∏è",
    "text": "Terminal Keyboard Shortcuts ‚å®Ô∏è\n\nIPython offers many keyboard shortcuts for efficient navigation and command history.\nThese are similar to those found in Emacs or the Unix bash shell.\nMastering these shortcuts will significantly boost your productivity! ‚ö°"
  },
  {
    "objectID": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts-navigation",
    "href": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts-navigation",
    "title": "",
    "section": "Terminal Keyboard Shortcuts: Navigation",
    "text": "Terminal Keyboard Shortcuts: Navigation\n\nCtrl-A: Move cursor to the beginning of the line.\nCtrl-E: Move cursor to the end of the line.\nCtrl-F: Move cursor forward one character.\nCtrl-B: Move cursor backward one character."
  },
  {
    "objectID": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts-command-history",
    "href": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts-command-history",
    "title": "",
    "section": "Terminal Keyboard Shortcuts: Command History",
    "text": "Terminal Keyboard Shortcuts: Command History\n\nCtrl-P or Up Arrow: Search backward in command history (matching current text).\nCtrl-N or Down Arrow: Search forward in command history (matching current text).\nCtrl-R: Readline-style reverse history search (partial matching)."
  },
  {
    "objectID": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts-editing-and-control",
    "href": "qmd/pandas3edA2.html#terminal-keyboard-shortcuts-editing-and-control",
    "title": "",
    "section": "Terminal Keyboard Shortcuts: Editing and Control",
    "text": "Terminal Keyboard Shortcuts: Editing and Control\n\nCtrl-Shift-V: Paste text from the clipboard.\nCtrl-C: Interrupt currently executing code. üõë\nCtrl-K: Delete text from the cursor to the end of the line.\nCtrl-U: Discard all text on the current line.\nCtrl-L: Clear the screen. üí®"
  },
  {
    "objectID": "qmd/pandas3edA2.html#visualizing-shortcuts",
    "href": "qmd/pandas3edA2.html#visualizing-shortcuts",
    "title": "",
    "section": "Visualizing Shortcuts üñºÔ∏è",
    "text": "Visualizing Shortcuts üñºÔ∏è\n\nHere‚Äôs an illustration of some keyboard shortcuts in the IPython shell.\nC-b, C-f: Correspond to Ctrl-B and Ctrl-F for cursor movement.\nC-a, C-e: Correspond to Ctrl-A and Ctrl-E for moving to the start/end of a line.\nC-k: Corresponds to Ctrl-K for deleting text to the end of the line.\nC-u: Corresponds to Ctrl-U for deleting the entire line.\nOperations on a_variable show text manipulations.\nNote: Jupyter notebooks have their own set of shortcuts. Explore Jupyter‚Äôs integrated help!"
  },
  {
    "objectID": "qmd/pandas3edA2.html#magic-commands-ipythons-superpowers",
    "href": "qmd/pandas3edA2.html#magic-commands-ipythons-superpowers",
    "title": "",
    "section": "Magic Commands: IPython‚Äôs Superpowers üßô‚Äç‚ôÇÔ∏è",
    "text": "Magic Commands: IPython‚Äôs Superpowers üßô‚Äç‚ôÇÔ∏è\n\nMagic commands are special commands unique to IPython, not built-in Python functions.\nThey are prefixed with the percent symbol (%).\nThese commands streamline common tasks and allow you to control IPython‚Äôs behavior. Think of them as ‚Äúshortcuts‚Äù for IPython itself!"
  },
  {
    "objectID": "qmd/pandas3edA2.html#example-timeit---measuring-execution-time",
    "href": "qmd/pandas3edA2.html#example-timeit---measuring-execution-time",
    "title": "",
    "section": "Example: %timeit ‚è±Ô∏è - Measuring Execution Time",
    "text": "Example: %timeit ‚è±Ô∏è - Measuring Execution Time\n\n%timeit measures the execution time of a Python statement. This is very useful for performance analysis!\n\n\nimport numpy as np\na = np.random.standard_normal((100, 100))\n%timeit np.dot(a, a)\n\n47.8 Œºs ¬± 96.2 ns per loop (mean ¬± std. dev. of 7 runs, 10,000 loops each)\n\n\n\nThe output shows the average execution time and standard deviation over multiple runs.\nIn the result, such as 92.5 ¬µs ¬± 3.43 ¬µs per loop, ¬µs stands for microseconds."
  },
  {
    "objectID": "qmd/pandas3edA2.html#exploring-magic-commands---getting-help",
    "href": "qmd/pandas3edA2.html#exploring-magic-commands---getting-help",
    "title": "",
    "section": "Exploring Magic Commands ‚ùì - Getting Help",
    "text": "Exploring Magic Commands ‚ùì - Getting Help\n\nUse ? after a magic command to view its ‚Äúcommand-line‚Äù options (like a help manual).\n\n\n%debug?\n\n\nThis displays detailed usage of the %debug command, including debugger activation, breakpoints, and post-mortem usage."
  },
  {
    "objectID": "qmd/pandas3edA2.html#automagic-magic-without-the",
    "href": "qmd/pandas3edA2.html#automagic-magic-without-the",
    "title": "",
    "section": "automagic: Magic Without the % ‚ú®",
    "text": "automagic: Magic Without the % ‚ú®\n\nautomagic allows you to use magic commands without the % prefix, as long as no variable shares the same name.\nYou can toggle it on/off using %automagic.\n\n\n%automagic  # Turns automagic on or off\npwd         # Equivalent to %pwd (if automagic is on and 'pwd' isn't a variable)"
  },
  {
    "objectID": "qmd/pandas3edA2.html#assigning-magic-command-output",
    "href": "qmd/pandas3edA2.html#assigning-magic-command-output",
    "title": "",
    "section": "Assigning Magic Command Output",
    "text": "Assigning Magic Command Output\n\nSome magic commands behave like functions, allowing you to assign their output to variables.\n\n\ndirectory = %pwd  # Stores the current working directory in 'directory'\nprint(directory)"
  },
  {
    "objectID": "qmd/pandas3edA2.html#essential-magic-commands---quick-reference",
    "href": "qmd/pandas3edA2.html#essential-magic-commands---quick-reference",
    "title": "",
    "section": "Essential Magic Commands üìú - Quick Reference",
    "text": "Essential Magic Commands üìú - Quick Reference\n\n%quickref: Display the IPython Quick Reference Card."
  },
  {
    "objectID": "qmd/pandas3edA2.html#essential-magic-commands---documentation",
    "href": "qmd/pandas3edA2.html#essential-magic-commands---documentation",
    "title": "",
    "section": "Essential Magic Commands üìú - Documentation",
    "text": "Essential Magic Commands üìú - Documentation\n\n%magic: Display detailed documentation for all available magic commands."
  },
  {
    "objectID": "qmd/pandas3edA2.html#essential-magic-commands---debugging",
    "href": "qmd/pandas3edA2.html#essential-magic-commands---debugging",
    "title": "",
    "section": "Essential Magic Commands üìú - Debugging",
    "text": "Essential Magic Commands üìú - Debugging\n\n%debug: Enter the interactive debugger at the last exception traceback.\n%pdb: Automatically enter the debugger after any exception."
  },
  {
    "objectID": "qmd/pandas3edA2.html#essential-magic-commands---history",
    "href": "qmd/pandas3edA2.html#essential-magic-commands---history",
    "title": "",
    "section": "Essential Magic Commands üìú - History",
    "text": "Essential Magic Commands üìú - History\n\n%hist: Print command input history (with optional output)."
  },
  {
    "objectID": "qmd/pandas3edA2.html#essential-magic-commands---code-execution",
    "href": "qmd/pandas3edA2.html#essential-magic-commands---code-execution",
    "title": "",
    "section": "Essential Magic Commands üìú - Code Execution",
    "text": "Essential Magic Commands üìú - Code Execution\n\n%paste: Execute preformatted Python code from the clipboard.\n%cpaste: Open a special prompt for manually pasting code.\n%run script.py: Run a Python script inside IPython.\n%prun statement: Execute a statement with cProfile and report the profiler output.\n%time statement: Report the execution time of single statement."
  },
  {
    "objectID": "qmd/pandas3edA2.html#essential-magic-commands---timing-and-profiling",
    "href": "qmd/pandas3edA2.html#essential-magic-commands---timing-and-profiling",
    "title": "",
    "section": "Essential Magic Commands üìú - Timing and Profiling",
    "text": "Essential Magic Commands üìú - Timing and Profiling\n\n%timeit statement: Measures average execution time accurately.\n%prun statement: Execute a statement with cProfile and report profiler output."
  },
  {
    "objectID": "qmd/pandas3edA2.html#essential-magic-commands---namespace-management",
    "href": "qmd/pandas3edA2.html#essential-magic-commands---namespace-management",
    "title": "",
    "section": "Essential Magic Commands üìú - Namespace Management",
    "text": "Essential Magic Commands üìú - Namespace Management\n\n%reset: Delete all variables/names in the interactive namespace.\n%page OBJECT: Pretty-print an object and display it through a pager.\n%who, %who_ls, %whos: Display variables in the namespace, with varying levels of detail.\n%xdel variable: Delete a variable and attempt to clear any of it‚Äôs references.\nPress q to exit the %quickref or %magic pager."
  },
  {
    "objectID": "qmd/pandas3edA2.html#the-run-command---executing-scripts",
    "href": "qmd/pandas3edA2.html#the-run-command---executing-scripts",
    "title": "",
    "section": "The %run Command üèÉ - Executing Scripts",
    "text": "The %run Command üèÉ - Executing Scripts\n\nExecutes a Python script within your IPython session.\nThe script runs in an empty namespace (no prior imports or variables initially).\nVariables, functions, and imports from the script become accessible in your IPython shell after execution.\n\n\n# In a file named 'my_script.py':\ndef my_function(x):\n    return x * 2\n\nresult = my_function(5)\n\n# In IPython:\n%run my_script.py\nprint(result)  # Output: 10"
  },
  {
    "objectID": "qmd/pandas3edA2.html#run--i-accessing-existing-variables",
    "href": "qmd/pandas3edA2.html#run--i-accessing-existing-variables",
    "title": "",
    "section": "%run -i: Accessing Existing Variables",
    "text": "%run -i: Accessing Existing Variables\n\n%run -i allows the script to access variables already defined in your IPython session.\n\n\n# In IPython:\nmy_var = 10\n\n# In 'script_with_access.py':\nprint(my_var * 3)\n\n# Back in IPython:\n%run -i script_with_access.py  # Output: 30"
  },
  {
    "objectID": "qmd/pandas3edA2.html#load-importing-scripts-into-cells-jupyter",
    "href": "qmd/pandas3edA2.html#load-importing-scripts-into-cells-jupyter",
    "title": "",
    "section": "%load: Importing Scripts into Cells (Jupyter)",
    "text": "%load: Importing Scripts into Cells (Jupyter)\n\nIn Jupyter notebooks, %load imports a script directly into a code cell.\n\n\n# %load my_script.py  # This will be replaced by the script's content\n\n\nThen, the code cell‚Äôs content will be:\n\n\n\ndef my_function(x):\n    return x * 2\n\nresult = my_function(5)"
  },
  {
    "objectID": "qmd/pandas3edA2.html#interrupting-running-code",
    "href": "qmd/pandas3edA2.html#interrupting-running-code",
    "title": "",
    "section": "Interrupting Running Code ‚úã",
    "text": "Interrupting Running Code ‚úã\n\nPress Ctrl-C to interrupt running code (whether from %run or a long-running command).\nThis raises a KeyboardInterrupt, stopping most Python programs immediately.\nNote: With compiled extensions, Ctrl-C might not always work instantly.\nIf Ctrl-C doesn‚Äôt immediately stop execution (especially when compiled extensions are involved), you may need to use your operating system‚Äôs tools (e.g., Task Manager on Windows, kill on Linux) to forcibly terminate the process."
  },
  {
    "objectID": "qmd/pandas3edA2.html#executing-code-from-the-clipboard",
    "href": "qmd/pandas3edA2.html#executing-code-from-the-clipboard",
    "title": "",
    "section": "Executing Code from the Clipboard üìã",
    "text": "Executing Code from the Clipboard üìã\n\n%paste and %cpaste are useful for running code copied from elsewhere (less relevant in Jupyter, where direct pasting is supported).\n%paste executes the clipboard content as a single block.\n\n\n# Example code on clipboard:\nx = 5\nif x &gt; 2:\n    print(\"x is greater than 2\")\n\n# In IPython:\n%paste  # Executes the code immediately"
  },
  {
    "objectID": "qmd/pandas3edA2.html#executing-code-from-the-clipboard-cpaste",
    "href": "qmd/pandas3edA2.html#executing-code-from-the-clipboard-cpaste",
    "title": "",
    "section": "Executing Code from the Clipboard: %cpaste",
    "text": "Executing Code from the Clipboard: %cpaste\n\n%cpaste opens a special prompt that allows pasting multiple blocks of code and editing before execution.\nPress Ctrl-D in the prompt to execute.\nPress Ctrl-C to exit the prompt."
  },
  {
    "objectID": "qmd/pandas3edA2.html#command-history-your-ipython-memory",
    "href": "qmd/pandas3edA2.html#command-history-your-ipython-memory",
    "title": "",
    "section": "Command History: Your IPython Memory üß†",
    "text": "Command History: Your IPython Memory üß†\n\nIPython maintains a database of executed commands. This is valuable for:\n\nSearching and reusing past commands.\nPersisting history between sessions.\nLogging input/output to a file."
  },
  {
    "objectID": "qmd/pandas3edA2.html#searching-and-reusing-commands",
    "href": "qmd/pandas3edA2.html#searching-and-reusing-commands",
    "title": "",
    "section": "Searching and Reusing Commands üîé",
    "text": "Searching and Reusing Commands üîé\n\nUp Arrow (Ctrl-P): Search backward in history, matching typed text.\nDown Arrow (Ctrl-N): Search forward in history.\nCtrl-R: Reverse-i-search (like in bash). Type characters to find matching commands. Press Ctrl-R repeatedly to cycle through matches."
  },
  {
    "objectID": "qmd/pandas3edA2.html#input-and-output-variables",
    "href": "qmd/pandas3edA2.html#input-and-output-variables",
    "title": "",
    "section": "Input and Output Variables ‚Ü©Ô∏éÔ∏è",
    "text": "Input and Output Variables ‚Ü©Ô∏éÔ∏è\n\nIPython stores both input and output for easy access:\n\n_ (one underscore): Refers to the previous output.\n__ (two underscores): Refers to the second-to-last output.\n_iX: Represents the input of line X as a string (e.g., _i5 for input on line 5).\n_X: Represents the output of line X.\n\n\n\n2 + 2      # Output: 4\nresult = _  # result is now 4\nprint(_i1)  # Prints the string \"2 + 2\""
  },
  {
    "objectID": "qmd/pandas3edA2.html#working-with-history-hist",
    "href": "qmd/pandas3edA2.html#working-with-history-hist",
    "title": "",
    "section": "Working with History: %hist",
    "text": "Working with History: %hist\n\n%hist: Prints the input history, optionally with line numbers."
  },
  {
    "objectID": "qmd/pandas3edA2.html#working-with-history-reset",
    "href": "qmd/pandas3edA2.html#working-with-history-reset",
    "title": "",
    "section": "Working with History: %reset",
    "text": "Working with History: %reset\n\n%reset: Clears the interactive namespace and, optionally, input/output caches."
  },
  {
    "objectID": "qmd/pandas3edA2.html#working-with-history-xdel",
    "href": "qmd/pandas3edA2.html#working-with-history-xdel",
    "title": "",
    "section": "Working with History: %xdel",
    "text": "Working with History: %xdel\n\n%xdel variable: Removes a variable and attempts to clear IPython‚Äôs internal references to it. This is useful for memory management, especially with large datasets.\nIPython‚Äôs input/output history can keep large objects in memory even after you use del. Use %xdel and %reset carefully to mitigate memory issues."
  },
  {
    "objectID": "qmd/pandas3edA2.html#interacting-with-the-operating-system",
    "href": "qmd/pandas3edA2.html#interacting-with-the-operating-system",
    "title": "",
    "section": "Interacting with the Operating System üíª",
    "text": "Interacting with the Operating System üíª\n\nIPython enables interaction with your operating system directly from the shell.\nYou can run shell commands, change directories, and capture command output."
  },
  {
    "objectID": "qmd/pandas3edA2.html#shell-commands-with",
    "href": "qmd/pandas3edA2.html#shell-commands-with",
    "title": "",
    "section": "Shell Commands with ! üí•",
    "text": "Shell Commands with ! üí•\n\nPrefix a line with ! to execute it as a shell command.\n\n\n!ls  # Lists files in the current directory (Linux/macOS)\n!dir # Lists files (Windows)\n\n_quarto.yml     pandas3ed11cn.html   pandas3ed5cn.qmd\narray_archive.npz   pandas3ed11cn.qmd    pandas3ed6.html\ncsv_mindex.csv      pandas3ed11cn_files  pandas3ed6.qmd\ndatasets        pandas3ed12.html     pandas3ed6cn.html\nex1.csv         pandas3ed12.qmd  pandas3ed6cn.qmd\nex1.xlsx        pandas3ed12cn.html   pandas3ed7.html\nex2.csv         pandas3ed12cn.qmd    pandas3ed7.qmd\nex3.txt         pandas3ed13.html     pandas3ed7cn.html\nex4.csv         pandas3ed13.qmd  pandas3ed7cn.qmd\nex5.csv         pandas3ed13cn.html   pandas3ed8.qmd\nex6.csv         pandas3ed13cn.qmd    pandas3ed8cn.html\nex7.csv         pandas3ed1cn.html    pandas3ed8cn.qmd\nexample.json        pandas3ed1cn.qmd     pandas3ed9.html\nexamples        pandas3ed2.html  pandas3ed9.qmd\nfigpath.png     pandas3ed2.qmd   pandas3ed9cn.html\nfigpath.svg     pandas3ed2cn.html    pandas3ed9cn.qmd\nframe_pickle        pandas3ed2cn.qmd     pandas3ed9cn_files\nmy.css          pandas3ed3.qmd   pandas3edA1.html\nmymmap          pandas3ed3cn.html    pandas3edA1.qmd\nout.csv         pandas3ed3cn.qmd     pandas3edA1cn.html\npandas3ed1.html     pandas3ed4.html  pandas3edA1cn.qmd\npandas3ed1.qmd      pandas3ed4.qmd   pandas3edA2.qmd\npandas3ed10.html    pandas3ed4_files     pandas3edA2.quarto_ipynb\npandas3ed10.qmd     pandas3ed4cn.html    pandas3edA2cn.html\npandas3ed10cn.html  pandas3ed4cn.qmd     pandas3edA2cn.qmd\npandas3ed10cn.qmd   pandas3ed4cn_files   some_array.npy\npandas3ed11.html    pandas3ed5.html\npandas3ed11.qmd     pandas3ed5.qmd\n_quarto.yml     pandas3ed11cn.html   pandas3ed5cn.qmd\narray_archive.npz   pandas3ed11cn.qmd    pandas3ed6.html\ncsv_mindex.csv      pandas3ed11cn_files  pandas3ed6.qmd\ndatasets        pandas3ed12.html     pandas3ed6cn.html\nex1.csv         pandas3ed12.qmd  pandas3ed6cn.qmd\nex1.xlsx        pandas3ed12cn.html   pandas3ed7.html\nex2.csv         pandas3ed12cn.qmd    pandas3ed7.qmd\nex3.txt         pandas3ed13.html     pandas3ed7cn.html\nex4.csv         pandas3ed13.qmd  pandas3ed7cn.qmd\nex5.csv         pandas3ed13cn.html   pandas3ed8.qmd\nex6.csv         pandas3ed13cn.qmd    pandas3ed8cn.html\nex7.csv         pandas3ed1cn.html    pandas3ed8cn.qmd\nexample.json        pandas3ed1cn.qmd     pandas3ed9.html\nexamples        pandas3ed2.html  pandas3ed9.qmd\nfigpath.png     pandas3ed2.qmd   pandas3ed9cn.html\nfigpath.svg     pandas3ed2cn.html    pandas3ed9cn.qmd\nframe_pickle        pandas3ed2cn.qmd     pandas3ed9cn_files\nmy.css          pandas3ed3.qmd   pandas3edA1.html\nmymmap          pandas3ed3cn.html    pandas3edA1.qmd\nout.csv         pandas3ed3cn.qmd     pandas3edA1cn.html\npandas3ed1.html     pandas3ed4.html  pandas3edA1cn.qmd\npandas3ed1.qmd      pandas3ed4.qmd   pandas3edA2.qmd\npandas3ed10.html    pandas3ed4_files     pandas3edA2.quarto_ipynb\npandas3ed10.qmd     pandas3ed4cn.html    pandas3edA2cn.html\npandas3ed10cn.html  pandas3ed4cn.qmd     pandas3edA2cn.qmd\npandas3ed10cn.qmd   pandas3ed4cn_files   some_array.npy\npandas3ed11.html    pandas3ed5.html\npandas3ed11.qmd     pandas3ed5.qmd"
  },
  {
    "objectID": "qmd/pandas3edA2.html#capturing-shell-output",
    "href": "qmd/pandas3edA2.html#capturing-shell-output",
    "title": "",
    "section": "Capturing Shell Output",
    "text": "Capturing Shell Output\n\nAssign the output of a ! command to a Python variable.\n\n\nfile_list = !ls\nprint(file_list)  # Prints the list of files\n\n['_quarto.yml', 'array_archive.npz', 'csv_mindex.csv', 'datasets', 'ex1.csv', 'ex1.xlsx', 'ex2.csv', 'ex3.txt', 'ex4.csv', 'ex5.csv', 'ex6.csv', 'ex7.csv', 'example.json', 'examples', 'figpath.png', 'figpath.svg', 'frame_pickle', 'my.css', 'mymmap', 'out.csv', 'pandas3ed1.html', 'pandas3ed1.qmd', 'pandas3ed10.html', 'pandas3ed10.qmd', 'pandas3ed10cn.html', 'pandas3ed10cn.qmd', 'pandas3ed11.html', 'pandas3ed11.qmd', 'pandas3ed11cn.html', 'pandas3ed11cn.qmd', 'pandas3ed11cn_files', 'pandas3ed12.html', 'pandas3ed12.qmd', 'pandas3ed12cn.html', 'pandas3ed12cn.qmd', 'pandas3ed13.html', 'pandas3ed13.qmd', 'pandas3ed13cn.html', 'pandas3ed13cn.qmd', 'pandas3ed1cn.html', 'pandas3ed1cn.qmd', 'pandas3ed2.html', 'pandas3ed2.qmd', 'pandas3ed2cn.html', 'pandas3ed2cn.qmd', 'pandas3ed3.qmd', 'pandas3ed3cn.html', 'pandas3ed3cn.qmd', 'pandas3ed4.html', 'pandas3ed4.qmd', 'pandas3ed4_files', 'pandas3ed4cn.html', 'pandas3ed4cn.qmd', 'pandas3ed4cn_files', 'pandas3ed5.html', 'pandas3ed5.qmd', 'pandas3ed5cn.qmd', 'pandas3ed6.html', 'pandas3ed6.qmd', 'pandas3ed6cn.html', 'pandas3ed6cn.qmd', 'pandas3ed7.html', 'pandas3ed7.qmd', 'pandas3ed7cn.html', 'pandas3ed7cn.qmd', 'pandas3ed8.qmd', 'pandas3ed8cn.html', 'pandas3ed8cn.qmd', 'pandas3ed9.html', 'pandas3ed9.qmd', 'pandas3ed9cn.html', 'pandas3ed9cn.qmd', 'pandas3ed9cn_files', 'pandas3edA1.html', 'pandas3edA1.qmd', 'pandas3edA1cn.html', 'pandas3edA1cn.qmd', 'pandas3edA2.qmd', 'pandas3edA2.quarto_ipynb', 'pandas3edA2cn.html', 'pandas3edA2cn.qmd', 'some_array.npy']\n\n\n\nThe returned object is a custom list that contains various versions of the console output."
  },
  {
    "objectID": "qmd/pandas3edA2.html#python-variables-in-shell-commands",
    "href": "qmd/pandas3edA2.html#python-variables-in-shell-commands",
    "title": "",
    "section": "Python Variables in Shell Commands: $",
    "text": "Python Variables in Shell Commands: $\n\nUse $ to substitute the values of Python variables into shell commands.\n\n\nmy_directory = \"data_files\"\n!ls $my_directory  # Lists files in the 'data_files' directory"
  },
  {
    "objectID": "qmd/pandas3edA2.html#aliases-shortcuts-for-shell-commands",
    "href": "qmd/pandas3edA2.html#aliases-shortcuts-for-shell-commands",
    "title": "",
    "section": "Aliases: Shortcuts for Shell Commands",
    "text": "Aliases: Shortcuts for Shell Commands\n\n%alias: Create shortcuts (aliases) for frequently used shell commands.\n\n\n%alias ll ls -l  # Creates an alias 'll' for 'ls -l'\nll /usr/bin  # Now you can use 'll'\n\n\nNote: Aliases are not persistent between sessions unless explicitly configured."
  },
  {
    "objectID": "qmd/pandas3edA2.html#bookmarks-shortcuts-for-directories",
    "href": "qmd/pandas3edA2.html#bookmarks-shortcuts-for-directories",
    "title": "",
    "section": "Bookmarks: Shortcuts for Directories",
    "text": "Bookmarks: Shortcuts for Directories\n\n%bookmark: Create bookmarks for frequently accessed directories.\n\n\n%bookmark mydata /path/to/my/data\ncd mydata       # Jumps to the bookmarked directory\n%bookmark -l    # Lists all bookmarks\n\n\nBookmarks are persistent between sessions."
  },
  {
    "objectID": "qmd/pandas3edA2.html#directory-history",
    "href": "qmd/pandas3edA2.html#directory-history",
    "title": "",
    "section": "Directory History",
    "text": "Directory History\n\n%cd: Change the current working directory.\n%pwd: Return the current working directory.\n%pushd: Place the current directory on a stack and change to the target directory.\n%popd: Change to the directory popped off the top of the stack.\n%dirs: Return a list containing the current directory stack.\n%dhist: Print the history of visited directories."
  },
  {
    "objectID": "qmd/pandas3edA2.html#environment-variable",
    "href": "qmd/pandas3edA2.html#environment-variable",
    "title": "",
    "section": "Environment Variable",
    "text": "Environment Variable\n\n%env: Return the system environment variables as a dictionary.\n%matplotlib: Configure matplotlib integration options"
  },
  {
    "objectID": "qmd/pandas3edA2.html#software-development-tools",
    "href": "qmd/pandas3edA2.html#software-development-tools",
    "title": "",
    "section": "Software Development Tools üõ†Ô∏è",
    "text": "Software Development Tools üõ†Ô∏è\n\nIPython is valuable not only for interactive exploration but also for software development.\nKey tools include:\n\nInteractive Debugger: An enhanced version of pdb.\nCode Timing: %time and %timeit.\nProfiling: %prun and %lprun."
  },
  {
    "objectID": "qmd/pandas3edA2.html#interactive-debugger-debug",
    "href": "qmd/pandas3edA2.html#interactive-debugger-debug",
    "title": "",
    "section": "Interactive Debugger: %debug üêû",
    "text": "Interactive Debugger: %debug üêû\n\n%debug: Activates the debugger after an exception occurs (post-mortem debugging).\nIt places you within the stack frame where the error originated.\nEnhanced with features like tab completion, syntax highlighting, and traceback context.\n\n\n# Assuming some_script.py contains an error:\n%run some_script.py\n%debug  # Enters the debugger at the point of the error"
  },
  {
    "objectID": "qmd/pandas3edA2.html#debugger-commands---navigation",
    "href": "qmd/pandas3edA2.html#debugger-commands---navigation",
    "title": "",
    "section": "Debugger Commands üß≠ - Navigation",
    "text": "Debugger Commands üß≠ - Navigation\n\nInside the debugger:\n\nu (up): Move up the call stack.\nd (down): Move down the call stack.\ns (step): Step into a function call.\nn (next): Execute the current line and move to the next line (at the same level)."
  },
  {
    "objectID": "qmd/pandas3edA2.html#debugger-commands---control-flow",
    "href": "qmd/pandas3edA2.html#debugger-commands---control-flow",
    "title": "",
    "section": "Debugger Commands üß≠ - Control Flow",
    "text": "Debugger Commands üß≠ - Control Flow\n\nc (continue): Continue execution until the next breakpoint or the end of the program.\nq (quit): Exit the debugger."
  },
  {
    "objectID": "qmd/pandas3edA2.html#debugger-commands---inspection",
    "href": "qmd/pandas3edA2.html#debugger-commands---inspection",
    "title": "",
    "section": "Debugger Commands üß≠ - Inspection",
    "text": "Debugger Commands üß≠ - Inspection\n\np variable: Print the value of variable.\n!variable: Examine variable content, useful when the variable has same name with the debugger commands."
  },
  {
    "objectID": "qmd/pandas3edA2.html#pdb-automatic-debugging",
    "href": "qmd/pandas3edA2.html#pdb-automatic-debugging",
    "title": "",
    "section": "%pdb: Automatic Debugging",
    "text": "%pdb: Automatic Debugging\n\n%pdb: Automatically enters the debugger upon any exception. This is extremely useful for debugging!\n\n\n%pdb on  # Enables automatic debugging\n# Now, any error will automatically launch the debugger\n%pdb off # Disables automatic debugging"
  },
  {
    "objectID": "qmd/pandas3edA2.html#using-the-debugger-for-development",
    "href": "qmd/pandas3edA2.html#using-the-debugger-for-development",
    "title": "",
    "section": "Using the Debugger for Development",
    "text": "Using the Debugger for Development\n\n%run -d script.py: Starts the debugger before running the script. Type s to step into the script.\n%run -d -b line_number script.py: Sets a breakpoint at the specified line_number.\nset_trace(): A ‚Äúpoor man‚Äôs breakpoint‚Äù function; insert it into your code to create temporary breakpoints.\ndebug(function, *args, **kwargs): Easily step into a specific function call."
  },
  {
    "objectID": "qmd/pandas3edA2.html#set_trace-and-debug-functions",
    "href": "qmd/pandas3edA2.html#set_trace-and-debug-functions",
    "title": "",
    "section": "set_trace() and debug() functions",
    "text": "set_trace() and debug() functions\n\nfrom IPython.core.debugger import Pdb\nimport sys # Add import sys\n\ndef set_trace():\n    Pdb().set_trace(sys._getframe().f_back)\n\ndef debug(f, *args, **kwargs):\n    pdb = Pdb()\n    return pdb.runcall(f, *args, **kwargs)\n\n\nset_trace() is called within code to set a breakpoint.\ndebug(f, *args, **kwargs) allows stepping into function f by passing f along with its arguments."
  },
  {
    "objectID": "qmd/pandas3edA2.html#code-timing-time-and-timeit-review",
    "href": "qmd/pandas3edA2.html#code-timing-time-and-timeit-review",
    "title": "",
    "section": "Code Timing: %time and %timeit (Review)",
    "text": "Code Timing: %time and %timeit (Review)\n\n%time: Measures the execution time of a statement once.\n%timeit: Measures execution time multiple times to provide a more accurate average. It‚Äôs ideal for very short operations.\n\n\nmy_list = list(range(100000))\n%time for _ in range(100):  sum(my_list)\n%timeit sum(my_list)\n\nCPU times: user 75.1 ms, sys: 990 Œºs, total: 76 ms\nWall time: 75.8 ms\n752 Œºs ¬± 357 ns per loop (mean ¬± std. dev. of 7 runs, 1,000 loops each)"
  },
  {
    "objectID": "qmd/pandas3edA2.html#basic-profiling-prun-and-run--p",
    "href": "qmd/pandas3edA2.html#basic-profiling-prun-and-run--p",
    "title": "",
    "section": "Basic Profiling: %prun and %run -p üïµÔ∏è‚Äç‚ôÄÔ∏è",
    "text": "Basic Profiling: %prun and %run -p üïµÔ∏è‚Äç‚ôÄÔ∏è\n\nProfiling reveals where your code spends its time.\n%prun statement: Profiles a single Python statement.\n%run -p script.py: Profiles an entire script.\nThese commands utilize cProfile internally.\nThe output includes these key metrics:\n\nncalls: Number of calls.\ntottime: Total time spent in function (excluding sub-function calls).\npercall: Time per call (tottime / ncalls).\ncumtime: Cumulative time in function and its sub-functions.\npercall: Cumulative time per call (cumtime / ncalls).\nfilename:lineno(function): Function location.\n\n\n\n#Example\ndef slow_function():\n    result = []\n    for i in range(1000):\n        result.append(i * 2)\n    return result\n\n%prun slow_function()"
  },
  {
    "objectID": "qmd/pandas3edA2.html#line-profiling-lprun",
    "href": "qmd/pandas3edA2.html#line-profiling-lprun",
    "title": "",
    "section": "Line Profiling: %lprun üìè",
    "text": "Line Profiling: %lprun üìè\n\n%lprun: Provides line-by-line profiling of specific functions, offering more detail than %prun.\nRequires the line_profiler IPython extension.\n\nEnable: Add c.InteractiveShellApp.extensions = ['line_profiler'] to ipython_config.py or use %load_ext line_profiler.\n\nSyntax: %lprun -f function1 -f function2 statement_to_profile\nThe output includes:\n\nLine #: Line number.\nHits: Number of times the line was executed.\nTime: Total time spent on the line (in timer units).\nPer Hit: Time per execution of the line.\n% Time: Percentage of total time spent on the line.\nLine Contents: The source code of the line.\n\n\n\n# Assuming line_profiler is enabled and prof_mod.py exists:\nfrom prof_mod import add_and_sum, call_function #example file, you need create it.\n%lprun -f add_and_sum call_function()"
  },
  {
    "objectID": "qmd/pandas3edA2.html#tips-for-productive-code-development---reloading",
    "href": "qmd/pandas3edA2.html#tips-for-productive-code-development---reloading",
    "title": "",
    "section": "Tips for Productive Code Development üìù - Reloading",
    "text": "Tips for Productive Code Development üìù - Reloading\n\nReloading Module Dependencies:\n\nProblem: Changes to imported modules are not automatically reflected.\nSolutions:\n\nimportlib.reload(module): Reloads a single module.\ndreload(module) (IPython-specific): Deep (recursive) reload of a module and its dependencies ‚Äì a more robust solution."
  },
  {
    "objectID": "qmd/pandas3edA2.html#tips-for-productive-code-development---code-design",
    "href": "qmd/pandas3edA2.html#tips-for-productive-code-development---code-design",
    "title": "",
    "section": "Tips for Productive Code Development üìù - Code Design",
    "text": "Tips for Productive Code Development üìù - Code Design\n\nKeep relevant objects and data alive: Avoid putting all your code within a main() function. Keep important variables at the top level for easy inspection within IPython.\nFlat is better than nested: Minimize deeply nested code structures. This simplifies debugging and testing.\nOvercome a fear of longer files: Within reason, longer, well-organized modules are often preferable to many small, interconnected ones (reducing reloading overhead).\nMaintain high internal cohesion: Group related code together logically within modules."
  },
  {
    "objectID": "qmd/pandas3edA2.html#ipython-profiles-and-configuration",
    "href": "qmd/pandas3edA2.html#ipython-profiles-and-configuration",
    "title": "",
    "section": "IPython Profiles and Configuration ‚öôÔ∏è",
    "text": "IPython Profiles and Configuration ‚öôÔ∏è\n\nCustomize IPython‚Äôs appearance and behavior using configuration files (ipython_config.py).\nThese files are typically located in your IPython directory (usually ~/.ipython/profile_default/).\nYou can create multiple profiles for different projects or settings.\nCreate a new profile: ipython profile create my_profile\nLaunch IPython with a specific profile: ipython --profile=my_profile\nNote: Jupyter has its own separate configuration system."
  },
  {
    "objectID": "qmd/pandas3edA2.html#conclusion",
    "href": "qmd/pandas3edA2.html#conclusion",
    "title": "",
    "section": "Conclusion üìñ",
    "text": "Conclusion üìñ\n\nIPython and Jupyter are potent tools for both interactive exploration and software development.\nMastering their features ‚Äì shortcuts, magic commands, the debugger, profiler, and configuration options ‚Äì will significantly improve your productivity.\nExperiment to discover a workflow that best suits your individual style!"
  },
  {
    "objectID": "qmd/pandas3edA2.html#summary",
    "href": "qmd/pandas3edA2.html#summary",
    "title": "",
    "section": "Summary",
    "text": "Summary\n\nWe‚Äôve explored advanced IPython features, extending beyond basic shell interaction.\nWe covered keyboard shortcuts, magic commands, and interacting with the operating system.\nWe examined tools for debugging, code timing, and profiling.\nWe discussed tips for writing code that‚Äôs optimized for interactive development in IPython.\nWe introduced IPython profile."
  },
  {
    "objectID": "qmd/pandas3edA2.html#thoughts-and-discussion",
    "href": "qmd/pandas3edA2.html#thoughts-and-discussion",
    "title": "",
    "section": "Thoughts and Discussion ü§î",
    "text": "Thoughts and Discussion ü§î\n\nWhich IPython features do you anticipate being most useful in your work?\nHow might you integrate these tools into your data analysis and coding routines?\nConsider creating a custom IPython profile to streamline your frequently performed tasks.\nWhat are the advantages and disadvantages of using IPython compared to a traditional Python IDE?\nHow do the principles of ‚Äúflat is better than nested‚Äù and ‚Äúovercome a fear of longer files‚Äù apply to your own coding style?\nHow can you use the debugger and profiler to improve the correctness and efficiency of your code?\nHow does %run differ from simply executing a Python script from the command line?"
  },
  {
    "objectID": "qmd/pandas3ed3.html",
    "href": "qmd/pandas3ed3.html",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This chapter delves into the fundamental building blocks of Python that are essential for data analysis. We‚Äôll explore Python‚Äôs built-in data structures, how to create reusable functions, and how to interact with files.\n\n\n\n\n\n\nNote\n\n\n\nWhile libraries like pandas and NumPy offer advanced functionalities for larger datasets, they are designed to work in conjunction with Python‚Äôs core data manipulation tools. Mastering these basics is crucial! üõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed3.html#chapter-3-built-in-data-structures-functions-and-files",
    "href": "qmd/pandas3ed3.html#chapter-3-built-in-data-structures-functions-and-files",
    "title": "Python for Data Analysis",
    "section": "",
    "text": "This chapter delves into the fundamental building blocks of Python that are essential for data analysis. We‚Äôll explore Python‚Äôs built-in data structures, how to create reusable functions, and how to interact with files.\n\n\n\n\n\n\nNote\n\n\n\nWhile libraries like pandas and NumPy offer advanced functionalities for larger datasets, they are designed to work in conjunction with Python‚Äôs core data manipulation tools. Mastering these basics is crucial! üõ†Ô∏è"
  },
  {
    "objectID": "qmd/pandas3ed3.html#data-structures-and-sequences",
    "href": "qmd/pandas3ed3.html#data-structures-and-sequences",
    "title": "Python for Data Analysis",
    "section": "Data Structures and Sequences",
    "text": "Data Structures and Sequences\nPython offers several versatile data structures. We‚Äôll start with:\n\nTuples\nLists\nDictionaries\n\nUnderstanding these is a key step towards Python proficiency. üêç"
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-definition",
    "href": "qmd/pandas3ed3.html#tuple-definition",
    "title": "Python for Data Analysis",
    "section": "Tuple: Definition",
    "text": "Tuple: Definition\nA tuple is a fixed-length, immutable sequence of Python objects. Once created, you cannot change its elements or size.\n\n\n\n\n\n\nImmutability\n\n\n\nImmutability means the contents can‚Äôt be changed after creation. This ensures data integrity. Think of it as a sealed container üì¶ ‚Äì you see what‚Äôs inside, but you can‚Äôt swap things."
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-creation",
    "href": "qmd/pandas3ed3.html#tuple-creation",
    "title": "Python for Data Analysis",
    "section": "Tuple: Creation",
    "text": "Tuple: Creation\nCreate tuples with comma-separated values, often in parentheses:\n\ntup = (4, 5, 6)\nprint(tup)\n\n(4, 5, 6)\n\n\nParentheses are often optional:\n\ntup = 4, 5, 6\nprint(tup)\n\n(4, 5, 6)"
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-conversion-and-accessing",
    "href": "qmd/pandas3ed3.html#tuple-conversion-and-accessing",
    "title": "Python for Data Analysis",
    "section": "Tuple: Conversion and Accessing",
    "text": "Tuple: Conversion and Accessing\nConvert sequences/iterators to tuples with tuple():\n\nmy_list = [4, 0, 2]\nmy_tuple = tuple(my_list)\nprint(my_tuple)\n\nstring_tuple = tuple('string')\nprint(string_tuple)\n\n(4, 0, 2)\n('s', 't', 'r', 'i', 'n', 'g')\n\n\nAccess elements with [] (zero-based indexing):\n\nprint(string_tuple[0])  # First element\n\ns"
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-nested-tuples",
    "href": "qmd/pandas3ed3.html#tuple-nested-tuples",
    "title": "Python for Data Analysis",
    "section": "Tuple: Nested Tuples",
    "text": "Tuple: Nested Tuples\nTuples can contain other tuples:\n\nnested_tup = (4, 5, 6), (7, 8)\nprint(nested_tup)\nprint(nested_tup[0])      # First tuple\nprint(nested_tup[1][0])   # First element of the second tuple\n\n((4, 5, 6), (7, 8))\n(4, 5, 6)\n7"
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-immutability-detailed-example",
    "href": "qmd/pandas3ed3.html#tuple-immutability-detailed-example",
    "title": "Python for Data Analysis",
    "section": "Tuple: Immutability (Detailed Example)",
    "text": "Tuple: Immutability (Detailed Example)\nWhile objects within a tuple might be mutable, the tuple itself is immutable:\n\ntup = tuple(['foo', [1, 2], True])\n# tup[2] = False  # TypeError!\n\n# BUT, modify mutable elements *in place*:\ntup[1].append(3)\nprint(tup)  # Output: ('foo', [1, 2, 3], True)\n\n('foo', [1, 2, 3], True)\n\n\n\n\n\n\n\n\nCaution\n\n\n\nYou can‚Äôt assign new objects to tuple slots, but you can modify the contents of mutable objects within the tuple."
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-concatenation-and-multiplication",
    "href": "qmd/pandas3ed3.html#tuple-concatenation-and-multiplication",
    "title": "Python for Data Analysis",
    "section": "Tuple: Concatenation and Multiplication",
    "text": "Tuple: Concatenation and Multiplication\nConcatenate with +:\n\ntuple1 = (4, None, 'foo')\ntuple2 = (6, 0)\ntuple3 = ('bar',)  # Comma for single-element tuple\ncombined_tuple = tuple1 + tuple2 + tuple3\nprint(combined_tuple)\n\n(4, None, 'foo', 6, 0, 'bar')\n\n\nMultiply to repeat:\n\nrepeated_tuple = ('foo', 'bar') * 4\nprint(repeated_tuple)\n\n('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar')\n\n\n\n\n\n\n\n\nNote\n\n\n\nOnly references to objects are copied, not the objects themselves."
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-unpacking",
    "href": "qmd/pandas3ed3.html#tuple-unpacking",
    "title": "Python for Data Analysis",
    "section": "Tuple: Unpacking",
    "text": "Tuple: Unpacking\nUnpack tuples into variables:\n\ntup = (4, 5, 6)\na, b, c = tup\nprint(b)\n\n5\n\n\nNested tuples too:\n\ntup = 4, 5, (6, 7)\na, b, (c, d) = tup\nprint(d)\n\n7"
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-swapping-variables",
    "href": "qmd/pandas3ed3.html#tuple-swapping-variables",
    "title": "Python for Data Analysis",
    "section": "Tuple: Swapping Variables",
    "text": "Tuple: Swapping Variables\nElegant variable swapping:\n\na, b = 1, 2\nprint(f\"a: {a}, b: {b}\")\nb, a = a, b  # Swap!\nprint(f\"a: {a}, b: {b}\")\n\na: 1, b: 2\na: 2, b: 1"
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-rest-and-_",
    "href": "qmd/pandas3ed3.html#tuple-rest-and-_",
    "title": "Python for Data Analysis",
    "section": "Tuple: *rest (and _)",
    "text": "Tuple: *rest (and _)\n*rest captures remaining elements:\n\nvalues = 1, 2, 3, 4, 5\na, b, *rest = values\nprint(a)\nprint(b)\nprint(rest)\n\n1\n2\n[3, 4, 5]\n\n\n_ for unwanted variables:\n\na, b, *_ = values  # Ignore the rest"
  },
  {
    "objectID": "qmd/pandas3ed3.html#tuple-methods-count",
    "href": "qmd/pandas3ed3.html#tuple-methods-count",
    "title": "Python for Data Analysis",
    "section": "Tuple: Methods (count)",
    "text": "Tuple: Methods (count)\nTuples have few methods due to immutability. count() is useful:\n\na = (1, 2, 2, 2, 3, 4, 2)\ncount_of_2 = a.count(2)\nprint(count_of_2)  # Output: 4\n\n4\n\n\ncount method returns the number of occurrences of a specified value."
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-definition-and-mutability",
    "href": "qmd/pandas3ed3.html#list-definition-and-mutability",
    "title": "Python for Data Analysis",
    "section": "List: Definition and Mutability",
    "text": "List: Definition and Mutability\nLists are variable-length and mutable. You can change their contents and size after creation.\n\n\n\n\n\n\nMutability\n\n\n\nMutability means you can change elements, add new ones, or remove existing ones after creation. Lists are very flexible! ü§∏‚Äç‚ôÄÔ∏è"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-creation",
    "href": "qmd/pandas3ed3.html#list-creation",
    "title": "Python for Data Analysis",
    "section": "List: Creation",
    "text": "List: Creation\nCreate lists with [] or list():\n\na_list = [2, 3, 7, None]\ntup = ('foo', 'bar', 'baz')\nb_list = list(tup)  # Tuple to list\nprint(b_list)\n\n['foo', 'bar', 'baz']\n\n\nModify elements:\n\nb_list[1] = 'peekaboo'\nprint(b_list)\n\n['foo', 'peekaboo', 'baz']"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-materializing-iterators",
    "href": "qmd/pandas3ed3.html#list-materializing-iterators",
    "title": "Python for Data Analysis",
    "section": "List: Materializing Iterators",
    "text": "List: Materializing Iterators\nlist() materializes iterators/generators:\n\ngen = range(10)\nprint(gen)  # range object (iterator)\nmy_list = list(gen)  # To list\nprint(my_list)\n\nrange(0, 10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-adding-elements",
    "href": "qmd/pandas3ed3.html#list-adding-elements",
    "title": "Python for Data Analysis",
    "section": "List: Adding Elements",
    "text": "List: Adding Elements\n\nappend(): Adds to the end.\n\n\nb_list.append('dwarf')\nprint(b_list)\n\n['foo', 'peekaboo', 'baz', 'dwarf']\n\n\n\ninsert(): Inserts at a specific position.\n\n\nb_list.insert(1, 'red') # Insert 'red' at index 1\nprint(b_list)\n\n['foo', 'red', 'peekaboo', 'baz', 'dwarf']\n\n\n\n\n\n\n\n\nCaution\n\n\n\ninsert is more expensive than append (it shifts elements)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-removing-elements-pop-and-remove",
    "href": "qmd/pandas3ed3.html#list-removing-elements-pop-and-remove",
    "title": "Python for Data Analysis",
    "section": "List: Removing Elements (pop and remove)",
    "text": "List: Removing Elements (pop and remove)\n\npop(): Removes and returns at an index.\n\n\nremoved_element = b_list.pop(2)\nprint(removed_element)\nprint(b_list)\n\npeekaboo\n['foo', 'red', 'baz', 'dwarf']\n\n\n\nremove(): Removes the first occurrence of a value.\n\n\nb_list.append('foo')\nb_list.remove('foo')  # Removes the *first* 'foo'\nprint(b_list)\n\n['red', 'baz', 'dwarf', 'foo']"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-checking-for-membership-in-and-not-in",
    "href": "qmd/pandas3ed3.html#list-checking-for-membership-in-and-not-in",
    "title": "Python for Data Analysis",
    "section": "List: Checking for Membership (in and not in)",
    "text": "List: Checking for Membership (in and not in)\n\nprint('dwarf' in b_list)\nprint('dwarf' not in b_list)\n\nTrue\nFalse\n\n\n\n\n\n\n\n\nNote\n\n\n\nin / not in is slow for lists (linear scan). Dictionaries and sets are much faster (hash tables, constant time)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-concatenation-and-combining",
    "href": "qmd/pandas3ed3.html#list-concatenation-and-combining",
    "title": "Python for Data Analysis",
    "section": "List: Concatenation and Combining",
    "text": "List: Concatenation and Combining\nConcatenate with +:\n\nlist1 = [4, None, 'foo']\nlist2 = [7, 8, (2, 3)]\ncombined_list = list1 + list2\nprint(combined_list)\n\n[4, None, 'foo', 7, 8, (2, 3)]\n\n\nextend() appends multiple elements:\n\nx = [4, None, 'foo']\nx.extend([7, 8, (2, 3)])\nprint(x)\n\n[4, None, 'foo', 7, 8, (2, 3)]\n\n\n\n\n\n\n\n\nTip\n\n\n\nextend() is generally faster than + (no new list created)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-sorting-sort-and-sorted",
    "href": "qmd/pandas3ed3.html#list-sorting-sort-and-sorted",
    "title": "Python for Data Analysis",
    "section": "List: Sorting (sort and sorted)",
    "text": "List: Sorting (sort and sorted)\n\nsort(): Sorts in place.\n\n\na = [7, 2, 5, 1, 3]\na.sort()\nprint(a)\n\n[1, 2, 3, 5, 7]\n\n\n\nkey argument: provide customized sorting method.\n\n\nb = ['saw', 'small', 'He', 'foxes', 'six']\nb.sort(key=len)  # Sort by length\nprint(b)\n\n['He', 'saw', 'six', 'small', 'foxes']"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-slicing",
    "href": "qmd/pandas3ed3.html#list-slicing",
    "title": "Python for Data Analysis",
    "section": "List: Slicing",
    "text": "List: Slicing\nSelect sections with start:stop:\n\nseq = [7, 2, 3, 7, 5, 6, 0, 1]\nsub_list = seq[1:5]  # Index 1 (inclusive) to 5 (exclusive)\nprint(sub_list)\n\nseq[3:5] = [6,3] # replace elements using slicing\nprint(seq)\n\n[2, 3, 7, 5]\n[7, 2, 3, 6, 3, 6, 0, 1]"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-slicing-omitting-startstop-and-negative-indices",
    "href": "qmd/pandas3ed3.html#list-slicing-omitting-startstop-and-negative-indices",
    "title": "Python for Data Analysis",
    "section": "List: Slicing (Omitting Start/Stop and Negative Indices)",
    "text": "List: Slicing (Omitting Start/Stop and Negative Indices)\n\nOmit start: Defaults to the beginning.\nOmit stop: Defaults to the end.\nNegative indices: Count from the end.\n\n\nprint(seq[:5])  # First 5\nprint(seq[3:])  # From index 3\nprint(seq[-4:]) # Last 4\nprint(seq[-6:-2]) # 6th to 2nd last\n\n[7, 2, 3, 6, 3]\n[6, 3, 6, 0, 1]\n[3, 6, 0, 1]\n[3, 6, 3, 6]"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-slicing-step",
    "href": "qmd/pandas3ed3.html#list-slicing-step",
    "title": "Python for Data Analysis",
    "section": "List: Slicing (Step)",
    "text": "List: Slicing (Step)\nUse a step to select every nth element:\n\nprint(seq[::2])   # Every other\nprint(seq[::-1])  # Reverse!\n\n[7, 3, 3, 0]\n[1, 0, 6, 3, 6, 3, 2, 7]"
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-slicing-illustration",
    "href": "qmd/pandas3ed3.html#list-slicing-illustration",
    "title": "Python for Data Analysis",
    "section": "List slicing illustration",
    "text": "List slicing illustration\n\n\n\n\n0\n1\n2\n3\n4\n5\n\n\n\n\nH\nE\nL\nL\nO\n!\n\n\n0\n1\n2\n3\n4\n5\n\n\n-6\n-5\n-4\n-3\n-2\n-1\n\n\n\n\n\nstring = \"HELLO!\"\nprint(string[2:4]) # slicing with positive indices\nprint(string[-5:-2]) # slicing with negative indices\n\nLL\nELL\n\n\nThis figure illustrates slicing on the string ‚ÄúHELLO!‚Äù. Indices are shown at the ‚Äúbin edges‚Äù to help show where the slice selections start and stop using positive or negative indices."
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-dict-definition",
    "href": "qmd/pandas3ed3.html#dictionary-dict-definition",
    "title": "Python for Data Analysis",
    "section": "Dictionary (dict): Definition",
    "text": "Dictionary (dict): Definition\nDictionaries (or dict) are crucial. They store key-value pairs (like hash maps).\n\n\n\n\n\n\nKey-Value Pairs\n\n\n\nEach key is associated with a value. Keys are unique and immutable (strings, numbers, tuples). Values can be anything."
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-creation",
    "href": "qmd/pandas3ed3.html#dictionary-creation",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Creation",
    "text": "Dictionary: Creation\nUse {} and ::\n\nempty_dict = {}\nd1 = {'a': 'some value', 'b': [1, 2, 3, 4]}\nprint(d1)\n\n{'a': 'some value', 'b': [1, 2, 3, 4]}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-accessing-inserting-setting",
    "href": "qmd/pandas3ed3.html#dictionary-accessing-inserting-setting",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Accessing, Inserting, Setting",
    "text": "Dictionary: Accessing, Inserting, Setting\n\nd1[7] = 'an integer'  # Add\nprint(d1)\nprint(d1['b'])       # Access\n\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\n[1, 2, 3, 4]"
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-checking-for-keys-in",
    "href": "qmd/pandas3ed3.html#dictionary-checking-for-keys-in",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Checking for Keys (in)",
    "text": "Dictionary: Checking for Keys (in)\n\nprint('b' in d1)  # Checks keys\n\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-deleting-del-and-pop",
    "href": "qmd/pandas3ed3.html#dictionary-deleting-del-and-pop",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Deleting (del and pop)",
    "text": "Dictionary: Deleting (del and pop)\n\ndel:\n\n\nd1[5] = 'some value'\nd1['dummy'] = 'another value'\nprint(d1)\ndel d1[5]\nprint(d1)\n\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 5: 'some value', 'dummy': 'another value'}\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 'dummy': 'another value'}\n\n\n\npop(): Removes and returns.\n\n\nret = d1.pop('dummy')\nprint(ret)\nprint(d1)\n\nanother value\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-keys-values-and-items-methods",
    "href": "qmd/pandas3ed3.html#dictionary-keys-values-and-items-methods",
    "title": "Python for Data Analysis",
    "section": "Dictionary: keys(), values() and items() Methods",
    "text": "Dictionary: keys(), values() and items() Methods\n\nkeys(): Iterator of keys.\nvalues(): Iterator of values.\nitems(): Iterator of key-value pairs.\n\n\nprint(list(d1.keys()))\nprint(list(d1.values()))\nprint(list(d1.items()))\n\n['a', 'b', 7]\n['some value', [1, 2, 3, 4], 'an integer']\n[('a', 'some value'), ('b', [1, 2, 3, 4]), (7, 'an integer')]\n\n\n\n\n\n\n\n\nNote\n\n\n\nKey order depends on insertion. keys and values return iterators in the same order."
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-merging-with-update",
    "href": "qmd/pandas3ed3.html#dictionary-merging-with-update",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Merging with update()",
    "text": "Dictionary: Merging with update()\nupdate() merges dictionaries:\n\nd1.update({'b': 'foo', 'c': 12})  # Updates 'b', adds 'c'\nprint(d1)\n\n{'a': 'some value', 'b': 'foo', 7: 'an integer', 'c': 12}\n\n\n\n\n\n\n\n\nCaution\n\n\n\nupdate() is in place. Existing keys have their values discarded."
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-creating-from-sequences",
    "href": "qmd/pandas3ed3.html#dictionary-creating-from-sequences",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Creating from Sequences",
    "text": "Dictionary: Creating from Sequences\n\nkey_list = ['a', 'b', 'c']\nvalue_list = [1, 2, 3]\nmapping = {}\nfor key, value in zip(key_list, value_list):\n    mapping[key] = value\nprint(mapping)\n\n# Concise: dict() and zip()\nmapping = dict(zip(range(5), reversed(range(5))))\nprint(mapping)\n\n{'a': 1, 'b': 2, 'c': 3}\n{0: 4, 1: 3, 2: 2, 3: 1, 4: 0}\n\n\nzip function can pair up elements of multiple sequences. dict accepts a list of 2-tuples."
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-default-values-get-and-setdefault",
    "href": "qmd/pandas3ed3.html#dictionary-default-values-get-and-setdefault",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Default Values (get and setdefault)",
    "text": "Dictionary: Default Values (get and setdefault)\n\n# Verbose:\nif 'some_key' in some_dict:\n    value = some_dict['some_key']\nelse:\n    value = default_value\n\n# Concise: get()\nvalue = some_dict.get('some_key', default_value)\n\nget returns None if the key is not present (or a specified default value), pop will raise an exception.\n\nwords = ['apple', 'bat', 'bar', 'atom', 'book']\nby_letter = {}\nfor word in words:\n    letter = word[0]\n    by_letter.setdefault(letter, []).append(word) # Use setdefault.\nprint(by_letter)\n\n{'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}\n\n\nsetdefault(key, default): If key exists, return value. If not, insert key with default and return default."
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-defaultdict",
    "href": "qmd/pandas3ed3.html#dictionary-defaultdict",
    "title": "Python for Data Analysis",
    "section": "Dictionary: defaultdict",
    "text": "Dictionary: defaultdict\ncollections.defaultdict simplifies initialization:\n\nfrom collections import defaultdict\n\nby_letter = defaultdict(list)\nfor word in words:\n    by_letter[word[0]].append(word)\nprint(by_letter)\n\ndefaultdict(&lt;class 'list'&gt;, {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']})"
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-valid-key-types-hashability",
    "href": "qmd/pandas3ed3.html#dictionary-valid-key-types-hashability",
    "title": "Python for Data Analysis",
    "section": "Dictionary: Valid Key Types (Hashability)",
    "text": "Dictionary: Valid Key Types (Hashability)\n\nKeys must be immutable.\nCheck with hash():\n\n\nprint(hash('string'))\nprint(hash((1, 2, (2, 3))))\n# print(hash((1, 2, [2, 3])))  # TypeError: unhashable type: 'list'\n\n# List as key? Convert to tuple:\nd = {}\nd[tuple([1, 2, 3])] = 5\nprint(d)\n\n-4902848582242973083\n-9209053662355515447\n{(1, 2, 3): 5}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-definition-and-uniqueness",
    "href": "qmd/pandas3ed3.html#set-definition-and-uniqueness",
    "title": "Python for Data Analysis",
    "section": "Set: Definition and Uniqueness",
    "text": "Set: Definition and Uniqueness\nA set is an unordered collection of unique elements (like a dict with only keys)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-creation",
    "href": "qmd/pandas3ed3.html#set-creation",
    "title": "Python for Data Analysis",
    "section": "Set: Creation",
    "text": "Set: Creation\n\nset1 = {2, 2, 2, 1, 3, 3}  # {}\nprint(set1)  # {1, 2, 3}\nset2 = set([2, 2, 2, 1, 3, 3])  # set()\nprint(set2)\n\n{1, 2, 3}\n{1, 2, 3}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-operations-union-intersection-etc.",
    "href": "qmd/pandas3ed3.html#set-operations-union-intersection-etc.",
    "title": "Python for Data Analysis",
    "section": "Set: Operations (Union, Intersection, etc.)",
    "text": "Set: Operations (Union, Intersection, etc.)\n\na = {1, 2, 3, 4, 5}\nb = {3, 4, 5, 6, 7, 8}\n\n# Union (| or union())\nprint(a.union(b))\nprint(a | b)\n\n# Intersection (& or intersection())\nprint(a.intersection(b))\nprint(a & b)\n\n# Difference (- or difference())\nprint(a.difference(b))\nprint(a - b)\n\n{1, 2, 3, 4, 5, 6, 7, 8}\n{1, 2, 3, 4, 5, 6, 7, 8}\n{3, 4, 5}\n{3, 4, 5}\n{1, 2}\n{1, 2}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-operations",
    "href": "qmd/pandas3ed3.html#set-operations",
    "title": "Python for Data Analysis",
    "section": "Set operations",
    "text": "Set operations\n\n\n\n\n\n\n\n\nFunction\nAlternative Syntax\nDescription\n\n\n\n\na.add(x)\nN/A\nAdd element x to set a\n\n\na.clear()\nN/A\nReset set a to an empty state, discarding all of its elements\n\n\na.remove(x)\nN/A\nRemove element x from set a\n\n\na.pop()\nN/A\nRemove an arbitrary element from set a, raising KeyError if the set is empty\n\n\na.union(b)\na \\| b\nAll of the unique elements in a and b\n\n\na.update(b)\na \\|= b\nSet the contents of a to be the union of the elements in a and b\n\n\na.intersection(b)\na & b\nAll of the elements in both a and b\n\n\na.intersection_update(b)\na &= b\nSet the contents of a to be the intersection of the elements in a and b\n\n\na.difference(b)\na - b\nThe elements in a that are not in b\n\n\na.difference_update(b)\na -= b\nSet a to the elements in a that are not in b\n\n\na.symmetric_difference(b)\na ^ b\nAll of the elements in either a or b but not both\n\n\na.symmetric_difference_update(b)\na ^= b\nSet a to contain the elements in either a or b but not both\n\n\na.issubset(b)\n&lt;=\nTrue if the elements of a are all contained in b\n\n\na.issuperset(b)\n&gt;=\nTrue if the elements of b are all contained in a\n\n\na.isdisjoint(b)\nN/A\nTrue if a and b have no elements in common"
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-in-place-operations",
    "href": "qmd/pandas3ed3.html#set-in-place-operations",
    "title": "Python for Data Analysis",
    "section": "Set: In-Place Operations",
    "text": "Set: In-Place Operations\nIn-place versions exist (e.g., a |= b):\n\nc = a.copy()\nc |= b  # In-place union\nprint(c)\n\nd = a.copy()\nd &= b # In-place intersection\nprint(d)\n\n{1, 2, 3, 4, 5, 6, 7, 8}\n{3, 4, 5}\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn-place operations are more efficient for large sets."
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-element-hashability",
    "href": "qmd/pandas3ed3.html#set-element-hashability",
    "title": "Python for Data Analysis",
    "section": "Set: Element Hashability",
    "text": "Set: Element Hashability\nLike dict keys, set elements must be immutable and hashable.\n\nmy_data = [1, 2, 3, 4]\n# my_set = {my_data}  # TypeError\nmy_set = {tuple(my_data)}  # Convert to tuple\nprint(my_set)\n\n{(1, 2, 3, 4)}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-subset-and-superset",
    "href": "qmd/pandas3ed3.html#set-subset-and-superset",
    "title": "Python for Data Analysis",
    "section": "Set: Subset and Superset",
    "text": "Set: Subset and Superset\n\na_set = {1, 2, 3, 4, 5}\nprint({1, 2, 3}.issubset(a_set))\nprint(a_set.issuperset({1, 2, 3}))\n\nTrue\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-equality",
    "href": "qmd/pandas3ed3.html#set-equality",
    "title": "Python for Data Analysis",
    "section": "Set: Equality",
    "text": "Set: Equality\nSets are equal if contents are equal:\n\nprint({1, 2, 3} == {3, 2, 1})\n\nTrue"
  },
  {
    "objectID": "qmd/pandas3ed3.html#built-in-sequence-functions-enumerate",
    "href": "qmd/pandas3ed3.html#built-in-sequence-functions-enumerate",
    "title": "Python for Data Analysis",
    "section": "Built-In Sequence Functions: enumerate",
    "text": "Built-In Sequence Functions: enumerate\nenumerate tracks the index during iteration:\n\ncollection = ['foo', 'bar', 'baz']\n\n# Instead of:\ni = 0\nfor value in collection:\n    print(f\"Index: {i}, Value: {value}\")\n    i += 1\n\n# Use enumerate:\nfor i, value in enumerate(collection):\n    print(f\"Index: {i}, Value: {value}\")\n\nIndex: 0, Value: foo\nIndex: 1, Value: bar\nIndex: 2, Value: baz\nIndex: 0, Value: foo\nIndex: 1, Value: bar\nIndex: 2, Value: baz\n\n\nenumerate returns (index, value) tuples."
  },
  {
    "objectID": "qmd/pandas3ed3.html#built-in-sequence-functions-sorted",
    "href": "qmd/pandas3ed3.html#built-in-sequence-functions-sorted",
    "title": "Python for Data Analysis",
    "section": "Built-In Sequence Functions: sorted",
    "text": "Built-In Sequence Functions: sorted\nsorted returns a new sorted list:\n\nprint(sorted([7, 1, 2, 6, 0, 3, 2]))\nprint(sorted('horse race'))\n\n[0, 1, 2, 2, 3, 6, 7]\n[' ', 'a', 'c', 'e', 'e', 'h', 'o', 'r', 'r', 's']\n\n\n\n\n\n\n\n\nNote\n\n\n\nsorted() returns a new list. list.sort() sorts in place."
  },
  {
    "objectID": "qmd/pandas3ed3.html#built-in-sequence-functions-zip",
    "href": "qmd/pandas3ed3.html#built-in-sequence-functions-zip",
    "title": "Python for Data Analysis",
    "section": "Built-In Sequence Functions: zip",
    "text": "Built-In Sequence Functions: zip\nzip ‚Äúpairs up‚Äù elements:\n\nseq1 = ['foo', 'bar', 'baz']\nseq2 = ['one', 'two', 'three']\nzipped = zip(seq1, seq2)\nprint(list(zipped))\n\n[('foo', 'one'), ('bar', 'two'), ('baz', 'three')]\n\n\nzip takes any number of sequences. Output length is determined by the shortest sequence:\n\nseq3 = [False, True]\nprint(list(zip(seq1, seq2, seq3)))\n\n[('foo', 'one', False), ('bar', 'two', True)]"
  },
  {
    "objectID": "qmd/pandas3ed3.html#built-in-sequence-functions-zip-with-enumerate",
    "href": "qmd/pandas3ed3.html#built-in-sequence-functions-zip-with-enumerate",
    "title": "Python for Data Analysis",
    "section": "Built-In Sequence Functions: zip (with enumerate)",
    "text": "Built-In Sequence Functions: zip (with enumerate)\nIterate over multiple sequences with enumerate:\n\nfor i, (a, b) in enumerate(zip(seq1, seq2)):\n    print(f'{i}: {a}, {b}')\n\n0: foo, one\n1: bar, two\n2: baz, three"
  },
  {
    "objectID": "qmd/pandas3ed3.html#built-in-sequence-functions-reversed",
    "href": "qmd/pandas3ed3.html#built-in-sequence-functions-reversed",
    "title": "Python for Data Analysis",
    "section": "Built-In Sequence Functions: reversed",
    "text": "Built-In Sequence Functions: reversed\nreversed iterates in reverse order:\n\nprint(list(reversed(range(10))))  # reversed() is a generator\n\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\n\n\n\n\n\n\nNote\n\n\n\nreversed is a generator (doesn‚Äôt create the reversed sequence until materialized)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-set-and-dictionary-comprehensions",
    "href": "qmd/pandas3ed3.html#list-set-and-dictionary-comprehensions",
    "title": "Python for Data Analysis",
    "section": "List, Set, and Dictionary Comprehensions",
    "text": "List, Set, and Dictionary Comprehensions\nComprehensions create new collections concisely."
  },
  {
    "objectID": "qmd/pandas3ed3.html#list-comprehension-basic-form",
    "href": "qmd/pandas3ed3.html#list-comprehension-basic-form",
    "title": "Python for Data Analysis",
    "section": "List Comprehension: Basic Form",
    "text": "List Comprehension: Basic Form\n\n# General form: [expr for val in collection if condition]\n\n# Equivalent for loop:\nresult = []\nfor val in collection:\n    if condition:\n        result.append(expr)\n\nExample:\n\nstrings = ['a', 'as', 'bat', 'car', 'dove', 'python']\nupper_case_long_strings = [x.upper() for x in strings if len(x) &gt; 2]\nprint(upper_case_long_strings)\n\n['BAT', 'CAR', 'DOVE', 'PYTHON']"
  },
  {
    "objectID": "qmd/pandas3ed3.html#set-comprehension",
    "href": "qmd/pandas3ed3.html#set-comprehension",
    "title": "Python for Data Analysis",
    "section": "Set Comprehension",
    "text": "Set Comprehension\n\n# {expr for val in collection if condition}\nstrings = ['a', 'as', 'bat', 'car', 'dove', 'python']\nunique_lengths = {len(x) for x in strings}\nprint(unique_lengths)\n\n# using map function\nprint(set(map(len, strings)))\n\n{1, 2, 3, 4, 6}\n{1, 2, 3, 4, 6}\n\n\nSimilar to list comprehensions, but with {} (creates a set)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#dictionary-comprehension",
    "href": "qmd/pandas3ed3.html#dictionary-comprehension",
    "title": "Python for Data Analysis",
    "section": "Dictionary Comprehension",
    "text": "Dictionary Comprehension\n\n# {key_expr: value_expr for val in collection if condition}\n\nstrings = ['a', 'as', 'bat', 'car', 'dove', 'python']\nloc_mapping = {val: index for index, val in enumerate(strings)}\nprint(loc_mapping)\n\n{'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#nested-list-comprehensions",
    "href": "qmd/pandas3ed3.html#nested-list-comprehensions",
    "title": "Python for Data Analysis",
    "section": "Nested List Comprehensions",
    "text": "Nested List Comprehensions\n\nall_data = [['John', 'Emily', 'Michael', 'Mary', 'Steven'],\n            ['Maria', 'Juan', 'Javier', 'Natalia', 'Pilar']]\n\nnames_of_interest = [name for names in all_data for name in names\n                     if name.count('a') &gt;= 2]\nprint(names_of_interest)\n\n\nsome_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nflattened = [x for tup in some_tuples for x in tup]\nprint(flattened)\n\n# List comprehension inside a list comprehension.\nflattened = [[x for x in tup] for tup in some_tuples]\nprint(flattened)\n\n['Maria', 'Natalia']\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\n\n\n\n\n\nNote\n\n\n\nfor order is the same as in nested for loops."
  },
  {
    "objectID": "qmd/pandas3ed3.html#functions",
    "href": "qmd/pandas3ed3.html#functions",
    "title": "Python for Data Analysis",
    "section": "3.2 Functions",
    "text": "3.2 Functions\nFunctions organize and reuse code."
  },
  {
    "objectID": "qmd/pandas3ed3.html#function-declaration-def",
    "href": "qmd/pandas3ed3.html#function-declaration-def",
    "title": "Python for Data Analysis",
    "section": "Function Declaration (def)",
    "text": "Function Declaration (def)\n\ndef my_function(x, y):\n    \"\"\"Docstring: Explains the function.\"\"\"\n    return x + y\n\nresult = my_function(1, 2)\nprint(result)\nprint(my_function.__doc__) # access docstring\n\n3\nDocstring: Explains the function.\n\n\n\nreturn sends a value back.\nImplicit None return if no return statement."
  },
  {
    "objectID": "qmd/pandas3ed3.html#function-arguments-positional-and-keyword",
    "href": "qmd/pandas3ed3.html#function-arguments-positional-and-keyword",
    "title": "Python for Data Analysis",
    "section": "Function Arguments (Positional and Keyword)",
    "text": "Function Arguments (Positional and Keyword)\n\ndef my_function2(x, y, z=1.5):  # z: keyword, default value\n    if z &gt; 1:\n        return z * (x + y)\n    else:\n        return z / (x + y)\n\nprint(my_function2(5, 6, z=0.7))  # Keyword\nprint(my_function2(3.14, 7, 3.5)) # Positional\nprint(my_function2(10, 20))       # Default\n\n0.06363636363636363\n35.49\n45.0\n\n\n\nPositional: Correct order.\nKeyword: Any order, often with defaults.\nKeyword arguments follow positional."
  },
  {
    "objectID": "qmd/pandas3ed3.html#namespaces-scope-and-local-functions",
    "href": "qmd/pandas3ed3.html#namespaces-scope-and-local-functions",
    "title": "Python for Data Analysis",
    "section": "Namespaces, Scope, and Local Functions",
    "text": "Namespaces, Scope, and Local Functions\n\nVariables within a function are in the local namespace (default).\nLocal namespace: Created on call, destroyed on finish.\n\n\ndef func():\n    a = []  # 'a' is local\n    for i in range(5):\n        a.append(i)\n\nfunc()\n# print(a)  # NameError: 'a' is not defined\n\n\nAccess enclosing scopes, but use global or nonlocal to modify.\n\n\na = []  # Global\n\ndef func2():\n    for i in range(5):\n        a.append(i)  # Modifies global 'a'\n\nfunc2()\nprint(a)\n\nb = None\ndef bind_b_variable():\n    global b  # Declare 'b' as global\n    b = []\nbind_b_variable()\nprint(b)\n\n[0, 1, 2, 3, 4]\n[]\n\n\n\n\n\n\n\n\nCaution\n\n\n\nMinimize global. Better design reduces reliance on global state."
  },
  {
    "objectID": "qmd/pandas3ed3.html#returning-multiple-values",
    "href": "qmd/pandas3ed3.html#returning-multiple-values",
    "title": "Python for Data Analysis",
    "section": "Returning Multiple Values",
    "text": "Returning Multiple Values\n\ndef f():\n    a = 5\n    b = 6\n    c = 7\n    return a, b, c  # Returns a tuple\n\nx, y, z = f()\nprint(x, y, z)\n\n# Or a dictionary\ndef f2():\n  a = 5\n  b = 6\n  c = 7\n  return {'a' : a, 'b' : b, 'c' : c}\n\nresult = f2()\nprint(result)\n\n5 6 7\n{'a': 5, 'b': 6, 'c': 7}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#functions-are-objects",
    "href": "qmd/pandas3ed3.html#functions-are-objects",
    "title": "Python for Data Analysis",
    "section": "Functions Are Objects",
    "text": "Functions Are Objects\nFunctions are first-class:\n\nPass as arguments.\nAssign to variables.\nReturn from other functions.\n\n\nimport re\n\nstates = ['   Alabama ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda',\n          'south   carolina##', 'West virginia?']\n\ndef clean_strings(strings):\n    result = []\n    for value in strings:\n        value = value.strip()\n        value = re.sub('[!#?]', '', value)\n        value = value.title()\n        result.append(value)\n    return result\n\nprint(clean_strings(states))\n\n# Alternative: list of functions\ndef remove_punctuation(value):\n    return re.sub('[!#?]', '', value)\n\nclean_ops = [str.strip, remove_punctuation, str.title]\n\ndef clean_strings_functional(strings, ops):\n    result = []\n    for value in strings:\n        for function in ops:\n            value = function(value)\n        result.append(value)\n    return result\n\nprint(clean_strings_functional(states, clean_ops))\n\n# Using functions with map:\nfor x in map(remove_punctuation, states):\n  print(x)\n\n['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'South   Carolina', 'West Virginia']\n['Alabama', 'Georgia', 'Georgia', 'Georgia', 'Florida', 'South   Carolina', 'West Virginia']\n   Alabama \nGeorgia\nGeorgia\ngeorgia\nFlOrIda\nsouth   carolina\nWest virginia\n\n\nThis is flexible and reusable."
  },
  {
    "objectID": "qmd/pandas3ed3.html#anonymous-lambda-functions",
    "href": "qmd/pandas3ed3.html#anonymous-lambda-functions",
    "title": "Python for Data Analysis",
    "section": "Anonymous (Lambda) Functions",
    "text": "Anonymous (Lambda) Functions\nSmall, anonymous functions with lambda:\n\n# Equivalent to:\n# def short_function(x):\n#     return x * 2\n\nequiv_anon = lambda x: x * 2\nprint(equiv_anon(4))\n\n8\n\n\nUseful for passing short functions:\n\ndef apply_to_list(some_list, f):\n    return [f(x) for x in some_list]\n\nints = [4, 0, 1, 5, 6]\nresult = apply_to_list(ints, lambda x: x * 2)\nprint(result)\n\nstrings = ['foo', 'card', 'bar', 'aaaa', 'abab']\nstrings.sort(key=lambda x: len(set(x))) # Sort by distinct letters\nprint(strings)\n\n[8, 0, 2, 10, 12]\n['aaaa', 'foo', 'abab', 'bar', 'card']"
  },
  {
    "objectID": "qmd/pandas3ed3.html#generators",
    "href": "qmd/pandas3ed3.html#generators",
    "title": "Python for Data Analysis",
    "section": "Generators",
    "text": "Generators\nGenerators produce values on demand (memory-efficient).\n\ndef squares(n=10):\n    print('Generating squares from 1 to %d' % n ** 2)\n    for i in range(1, n + 1):\n        yield i ** 2  # 'yield', not 'return'\n\ngen = squares()\nprint(gen) # generator object\nfor x in gen:  # Request values\n    print(x, end=' ')\n\n&lt;generator object squares at 0x7f7e083c0d60&gt;\nGenerating squares from 1 to 100\n1 4 9 16 25 36 49 64 81 100 \n\n\n\nyield instead of return.\nDon‚Äôt execute immediately."
  },
  {
    "objectID": "qmd/pandas3ed3.html#generator-expressions",
    "href": "qmd/pandas3ed3.html#generator-expressions",
    "title": "Python for Data Analysis",
    "section": "Generator Expressions",
    "text": "Generator Expressions\nConcise generators (like comprehensions):\n\n# List comprehension: [x ** 2 for x in range(100)]\ngen = (x ** 2 for x in range(100)) # Parentheses\nprint(gen) # generator object\nprint(sum(gen))\n\n# As function arguments:\nprint(sum(x ** 2 for x in range(100)))\nprint(dict((i, i **2) for i in range(5)))\n\n&lt;generator object &lt;genexpr&gt; at 0x7f7e36983e00&gt;\n328350\n328350\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}"
  },
  {
    "objectID": "qmd/pandas3ed3.html#itertools-module",
    "href": "qmd/pandas3ed3.html#itertools-module",
    "title": "Python for Data Analysis",
    "section": "itertools Module",
    "text": "itertools Module\nitertools provides useful generators:\n\nimport itertools\n\ndef first_letter(x):\n    return x[0]\n\nnames = ['Alan', 'Adam', 'Wes', 'Will', 'Albert', 'Steven']\n\nfor letter, names_iter in itertools.groupby(names, first_letter):\n    print(letter, list(names_iter))\n\nA ['Alan', 'Adam']\nW ['Wes', 'Will']\nA ['Albert']\nS ['Steven']\n\n\nitertools.groupby groups consecutive elements."
  },
  {
    "objectID": "qmd/pandas3ed3.html#useful-itertools-functions",
    "href": "qmd/pandas3ed3.html#useful-itertools-functions",
    "title": "Python for Data Analysis",
    "section": "Useful itertools Functions",
    "text": "Useful itertools Functions\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nchain(*iterables)\nChains iterators.\n\n\ncombinations(iterable, k)\nk-tuples, ignoring order, no replacement.\n\n\npermutations(iterable, k)\nk-tuples, respecting order.\n\n\ngroupby(iterable[, keyfunc])\n(key, sub-iterator) for each unique key.\n\n\nproduct(*iterables, repeat=1)\nCartesian product (like nested for loops).\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nCheck the itertools documentation! It‚Äôs a treasure trove! üíé"
  },
  {
    "objectID": "qmd/pandas3ed3.html#errors-and-exception-handling",
    "href": "qmd/pandas3ed3.html#errors-and-exception-handling",
    "title": "Python for Data Analysis",
    "section": "Errors and Exception Handling",
    "text": "Errors and Exception Handling\nHandling errors is crucial for robust code."
  },
  {
    "objectID": "qmd/pandas3ed3.html#try-except-blocks",
    "href": "qmd/pandas3ed3.html#try-except-blocks",
    "title": "Python for Data Analysis",
    "section": "try-except Blocks",
    "text": "try-except Blocks\n\ndef attempt_float(x):\n    try:\n        return float(x)\n    except:  # Catches *any* exception\n        return x\n\nprint(attempt_float('1.2345'))\nprint(attempt_float('something'))\n\n1.2345\nsomething\n\n\n\ntry: Code that might raise an exception.\nexcept: Executed if an exception occurs."
  },
  {
    "objectID": "qmd/pandas3ed3.html#catching-specific-exceptions",
    "href": "qmd/pandas3ed3.html#catching-specific-exceptions",
    "title": "Python for Data Analysis",
    "section": "Catching Specific Exceptions",
    "text": "Catching Specific Exceptions\n\ndef attempt_float2(x):\n    try:\n        return float(x)\n    except ValueError:  # Only ValueError\n        return x\n\n# print(attempt_float2((1, 2)))  # TypeError uncaught\n\nSpecify the exception type (preferred)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#catching-multiple-exception-types",
    "href": "qmd/pandas3ed3.html#catching-multiple-exception-types",
    "title": "Python for Data Analysis",
    "section": "Catching Multiple Exception Types",
    "text": "Catching Multiple Exception Types\n\ndef attempt_float3(x):\n    try:\n        return float(x)\n    except (TypeError, ValueError):  # Multiple types\n        return x\n\nUse a tuple for multiple types."
  },
  {
    "objectID": "qmd/pandas3ed3.html#finally-and-else",
    "href": "qmd/pandas3ed3.html#finally-and-else",
    "title": "Python for Data Analysis",
    "section": "finally and else",
    "text": "finally and else\n\nfinally: Always executes (cleanup).\nelse: Executes if try completes without exception.\n\n\nf = open(\"tempfile.txt\", mode = \"w\") # create a temp file\ntry:\n    # write_to_file(f)\n    f.write(\"example text\")\nfinally:\n    f.close()  # Always close\n    import os\n    os.remove(\"tempfile.txt\")\n\n\nf = open(\"tempfile.txt\", mode = \"w\") # create a temp file\ntry:\n    #write_to_file(f)\n    f.write(\"example text\")\nexcept:\n    print('Failed')\nelse:\n    print('Succeeded')\nfinally:\n    f.close()\n    import os\n    os.remove(\"tempfile.txt\")\n\nSucceeded"
  },
  {
    "objectID": "qmd/pandas3ed3.html#exceptions-in-ipython",
    "href": "qmd/pandas3ed3.html#exceptions-in-ipython",
    "title": "Python for Data Analysis",
    "section": "Exceptions in IPython",
    "text": "Exceptions in IPython\nIPython provides helpful tracebacks. Control detail with %xmode (Plain, Context, Verbose)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#files-and-the-operating-system",
    "href": "qmd/pandas3ed3.html#files-and-the-operating-system",
    "title": "Python for Data Analysis",
    "section": "3.3 Files and the Operating System",
    "text": "3.3 Files and the Operating System"
  },
  {
    "objectID": "qmd/pandas3ed3.html#opening-files-open",
    "href": "qmd/pandas3ed3.html#opening-files-open",
    "title": "Python for Data Analysis",
    "section": "Opening Files (open)",
    "text": "Opening Files (open)\n\npath = 'examples/segismundo.txt'\n\n# default encoding varies from platform to platform, better to specify explicitly.\nf = open(path, encoding='utf-8')  # Read mode ('r' default)\nfor line in f:\n    print(line.rstrip()) # remove trailing whitespaces\n\nf.close()\n\nSue√±a el rico en su riqueza,\nque m√°s cuidados le ofrece;\n\nsue√±a el pobre que padece\nsu miseria y su pobreza;\n\nsue√±a el que a medrar empieza,\nsue√±a el que afana y pretende,\nsue√±a el que agravia y ofende,\n\ny en el mundo, en conclusi√≥n,\ntodos sue√±an lo que son,\naunque ninguno lo entiende.\n\n\n\n\nopen(path, mode='r', encoding=None)\n\npath: File path.\nmode: ‚Äòr‚Äô (read), ‚Äòw‚Äô (write), ‚Äòa‚Äô (append), ‚Äòx‚Äô (create), ‚Äòrb‚Äô, ‚Äòwb‚Äô, etc.\nencoding: File encoding (e.g., ‚Äòutf-8‚Äô).\n\nClose files: f.close()."
  },
  {
    "objectID": "qmd/pandas3ed3.html#reading-from-files",
    "href": "qmd/pandas3ed3.html#reading-from-files",
    "title": "Python for Data Analysis",
    "section": "Reading from Files",
    "text": "Reading from Files\n\n# reading all the lines\nf = open(path, encoding=\"utf-8\")\nlines = [x.rstrip() for x in f]  # Read, remove whitespace\nprint(lines)\nf.close()\n\n['Sue√±a el rico en su riqueza,', 'que m√°s cuidados le ofrece;', '', 'sue√±a el pobre que padece', 'su miseria y su pobreza;', '', 'sue√±a el que a medrar empieza,', 'sue√±a el que afana y pretende,', 'sue√±a el que agravia y ofende,', '', 'y en el mundo, en conclusi√≥n,', 'todos sue√±an lo que son,', 'aunque ninguno lo entiende.', '']"
  },
  {
    "objectID": "qmd/pandas3ed3.html#using-with-for-automatic-file-closing",
    "href": "qmd/pandas3ed3.html#using-with-for-automatic-file-closing",
    "title": "Python for Data Analysis",
    "section": "Using with for Automatic File Closing",
    "text": "Using with for Automatic File Closing\nwith automatically closes files:\n\nwith open(path, encoding=\"utf-8\") as f:\n    lines = [x.rstrip() for x in f]\nprint(lines)\n# 'f' is closed here\n\n['Sue√±a el rico en su riqueza,', 'que m√°s cuidados le ofrece;', '', 'sue√±a el pobre que padece', 'su miseria y su pobreza;', '', 'sue√±a el que a medrar empieza,', 'sue√±a el que afana y pretende,', 'sue√±a el que agravia y ofende,', '', 'y en el mundo, en conclusi√≥n,', 'todos sue√±an lo que son,', 'aunque ninguno lo entiende.', '']\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse with! It ensures cleanup, even with errors."
  },
  {
    "objectID": "qmd/pandas3ed3.html#file-modes",
    "href": "qmd/pandas3ed3.html#file-modes",
    "title": "Python for Data Analysis",
    "section": "File Modes",
    "text": "File Modes\n\n\n\n\n\n\n\nMode\nDescription\n\n\n\n\nr\nRead-only\n\n\nw\nWrite-only; creates new (erases existing)\n\n\nx\nWrite-only; creates new\n\n\na\nAppend to existing (creates if needed)\n\n\nr+\nRead and write\n\n\nb\nBinary mode (add to mode: ‚Äòrb‚Äô, ‚Äòwb‚Äô)\n\n\nt\nText mode (decodes bytes); default"
  },
  {
    "objectID": "qmd/pandas3ed3.html#read-seek-and-tell",
    "href": "qmd/pandas3ed3.html#read-seek-and-tell",
    "title": "Python for Data Analysis",
    "section": "read, seek, and tell",
    "text": "read, seek, and tell\n\nf1 = open(path, encoding = \"utf-8\")\nprint(f1.read(10))  # 10 *characters*\n\nf2 = open(path, mode='rb')  # Binary\nprint(f2.read(10))  # 10 *bytes*\n\nprint(f1.tell())  # Position (characters)\nprint(f2.tell())  # Position (bytes)\n\nimport sys\nprint(sys.getdefaultencoding())\n\nf1.seek(3)  # 3rd byte/character\nprint(f1.read(1))\n\nf1.close()\nf2.close()\n\nSue√±a el r\nb'Sue\\xc3\\xb1a el '\n11\n10\nutf-8\n√±\n\n\n\nread(n): Reads n characters/bytes.\ntell(): Current position.\nseek(position): Moves pointer.\nCaution with seek and UTF-8 (multibyte characters)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#writing-to-files",
    "href": "qmd/pandas3ed3.html#writing-to-files",
    "title": "Python for Data Analysis",
    "section": "Writing to Files",
    "text": "Writing to Files\n\nwith open('tmp.txt', 'w', encoding = \"utf-8\") as handle:\n    handle.writelines(x for x in open(path, encoding = \"utf-8\") if len(x) &gt; 1)\n\nwith open('tmp.txt', encoding = \"utf-8\") as f:\n    lines = f.readlines()\nprint(lines)\n\nimport os\nos.remove(\"tmp.txt\")\n\n['Sue√±a el rico en su riqueza,\\n', 'que m√°s cuidados le ofrece;\\n', 'sue√±a el pobre que padece\\n', 'su miseria y su pobreza;\\n', 'sue√±a el que a medrar empieza,\\n', 'sue√±a el que afana y pretende,\\n', 'sue√±a el que agravia y ofende,\\n', 'y en el mundo, en conclusi√≥n,\\n', 'todos sue√±an lo que son,\\n', 'aunque ninguno lo entiende.\\n']\n\n\n\nwrite(string): Writes string.\nwritelines(list_of_strings): Writes list."
  },
  {
    "objectID": "qmd/pandas3ed3.html#important-file-methodsattributes",
    "href": "qmd/pandas3ed3.html#important-file-methodsattributes",
    "title": "Python for Data Analysis",
    "section": "Important File Methods/Attributes",
    "text": "Important File Methods/Attributes\n\n\n\n\n\n\n\nMethod/Attribute\nDescription\n\n\n\n\nread([size])\nReturns data (bytes/string).\n\n\nreadable()\nTrue if readable.\n\n\nreadlines([size])\nList of lines.\n\n\nwrite(string)\nWrites string.\n\n\nwritable()\nTrue if writable.\n\n\nwritelines(strings)\nWrites sequence of strings.\n\n\nclose()\nCloses the file.\n\n\nflush()\nFlushes buffer to disk.\n\n\nseek(pos)\nMoves to position.\n\n\nseekable()\nTrue if seekable.\n\n\ntell()\nCurrent position.\n\n\nclosed\nTrue if closed.\n\n\nencoding\nEncoding (e.g., UTF-8)."
  },
  {
    "objectID": "qmd/pandas3ed3.html#bytes-and-unicode-with-files",
    "href": "qmd/pandas3ed3.html#bytes-and-unicode-with-files",
    "title": "Python for Data Analysis",
    "section": "Bytes and Unicode with Files",
    "text": "Bytes and Unicode with Files\n\nDefault: text mode (strings/Unicode).\nmode='rb'/'wb': binary mode (bytes).\n\n\nwith open(path, encoding = \"utf-8\") as f:\n    chars = f.read(10)\nprint(len(chars))\n\nwith open(path, 'rb') as f:\n    data = f.read(10)\nprint(data)\n\nprint(data.decode('utf-8'))  # Bytes to string\n\n# print(data[:4].decode('utf-8')) # UnicodeDecodeError (incomplete)\n\n10\nb'Sue\\xc3\\xb1a el '\nSue√±a el \n\n\n\nUTF-8: Variable-length encoding. read(n) characters ‚â† read(n) bytes.\nBinary: read returns exact bytes.\nDecode complete characters.\n\n\nsink_path = 'sink.txt'\nwith open(path, encoding = \"utf-8\") as source:\n    with open(sink_path, 'x', encoding='iso-8859-1') as sink:\n        sink.write(source.read())\n\nwith open(sink_path, encoding='iso-8859-1') as f:\n    print(f.read(10))\n\nimport os\nos.remove(sink_path)\n\n# Caution:\nf = open(path, encoding = \"utf-8\")\nprint(f.read(5))\nf.seek(4)\n# print(f.read(1)) # UnicodeDecodeError\nf.close()\n\nSue√±a el r\nSue√±a\n\n\n\n\n\n\n\n\nCaution\n\n\n\nBe very careful with seek in non-binary modes."
  },
  {
    "objectID": "qmd/pandas3ed3.html#summary",
    "href": "qmd/pandas3ed3.html#summary",
    "title": "Python for Data Analysis",
    "section": "Summary",
    "text": "Summary\nThis chapter covered:\n\nData Structures: Tuples, Lists, Dictionaries, Sets.\nBuilt-in Functions: enumerate, sorted, zip, reversed.\nComprehensions: Concise collection creation.\nFunctions: Defining, arguments, namespaces, returns, lambdas.\nGenerators: Memory-efficient iteration.\nitertools: Useful iterator tools.\nError Handling: try, except, finally, else.\nFile Handling: Opening, reading, writing, modes, encodings.\n\nThese are foundational for data analysis in Python! üß±"
  },
  {
    "objectID": "qmd/pandas3ed3.html#thoughts-and-discussion",
    "href": "qmd/pandas3ed3.html#thoughts-and-discussion",
    "title": "Python for Data Analysis",
    "section": "Thoughts and Discussion ü§î",
    "text": "Thoughts and Discussion ü§î\n\nLarge CSV File: You have a CSV larger than RAM. How would you use generators and file handling to process it efficiently?\nLists vs.¬†Tuples: Trade-offs? When to choose? Examples?\nList Comprehension vs.¬†Generator Expression: Differences? When to prefer a generator expression?\nException Handling: Why is it important? Example in a data analysis context?\nwith Statement: Advantages for file handling?\nText vs.¬†Binary Mode: Differences? Importance of encoding?\nDict vs Set: How to decide to use dict or set?"
  }
]